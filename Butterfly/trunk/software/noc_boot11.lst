Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 1
noc_boot11.a

                                        ; ============================================================================
                                        ;        __
                                        ;   \\__/ o\    (C) 2017  Robert Finch, Waterloo
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                    
                                        ;                                      
                                        ; This boot rom for the special node $111. This node is responsible for
                                        ; bringing the system up, and controls the text display and leds.
                                        ; ============================================================================
                                        ;
     27 = 03                            nDCB	equ		3
     28 = 0D                            CR	= 13
     29 = 0A                            LF	= 10
     30 = 08                            CTRLH	equ		8
                                        
     32 = 01                            MT_RST		equ		1
     33 = 02                            MT_RST_ACK	equ		2
     34 = 03                            MT_STOP		equ		3
     35 = 04                            MT_KEYSTROKE			equ	4
     36 = 05                            MT_SET_IOFOCUS			equ	5
     37 = 06                            MT_BUTTON_STATUS		equ	6
     38 = 07                            MT_REQ_INP_FOCUS		equ	7
     39 = 08                            MT_GRNT_INP_FOCUS		equ 8
     40 = 09                            MT_PING					equ	9
     41 = 0A                            MT_START_BASIC_LOAD		equ	10
     42 = 0B                            MT_LOAD_BASIC_CHAR		equ	11
     43 = 0C                            MT_RUN_BASIC_PROG		equ	12
     44 = 0D                            MT_BASIC_EXIT			equ	13
     45 = 0F                            MT_REQ_OUT_FOCUS		equ	15
     46 = 10                            MT_GRNT_OUT_FOCUS		equ	16
     47 = 11                            MT_OUT_CHAR				equ	17
     48 = 12                            MT_PING_ACK				equ	18
     49 = 13                            MT_ETH_PACKET			equ	19
     50 = 14                            MT_GET_DATETIME			equ	20
     51 = 15                            MT_SET_DATETIME			equ	21
     52 = 16                            MT_DATETIME_ACK			equ	22
     53 = 17                            MT_LOAD_CODE			equ	23
     54 = 18                            MT_LOAD_DATA			equ	24
     55 = 19                            MT_EXEC_CODE			equ	25
     56 = 1A                            MT_EXIT					equ	26
     57 = 1B                            MT_RDRAM				equ	27
     58 = 1C                            MT_WRRAM				equ	28
     59 = 1D                            MT_SETPIXEL				equ	29
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 2
noc_boot11.a
     60 = 1E                            MT_GETPIXEL				equ	30
     61 = 1F                            MT_SETADDR				equ	31
     62 = 20                            MT_DATA					equ	32
     63 = 21                            MT_NEXT_IOFOCUS			equ	33
     64 = 22                            MT_GET_ROUTE			equ	34
     65 = 23                            MT_GET_ROUTE_ACK		equ	35
     66 = 24                            MT_ENUM_DEVICES			equ	36
     67 = 25                            MT_ENUM_DEVICES1		equ	37
     68 = 26                            MT_ENUM_DEVICES2		equ	38
                                        
                                        ; Device command opcodes
                                        ;
     72 = 40                            DVC_Nop				EQU		64
     73 = 41                            DVC_Setup			EQU		65
     74 = 42                            DVC_Initialize		EQU		66
     75 = 43                            DVC_Status			EQU		67
     76 = 44                            DVC_MediaCheck		EQU		68
     77 = 45                            DVC_BuildBPB		EQU		69
     78 = 46                            DVC_Open			EQU		70
     79 = 47                            DVC_Close			EQU		71
     80 = 48                            DVC_GetChar			EQU		72
     81 = 49                            DVC_PeekChar		EQU		73
     82 = 4A                            DVC_GetCharDirect	EQU		74
     83 = 4B                            DVC_PeekCharDirect	EQU		75
     84 = 4C                            DVC_InputStatus		EQU		76
     85 = 4D                            DVC_PutChar			EQU		77
     86 = 4E                            DVC_SetPosition		EQU		78
     87 = 4F                            DVC_ReadBlock		EQU		79
     88 = 50                            DVC_WriteBlock		EQU		80
     89 = 51                            DVC_VerifyBlock		EQU		81
     90 = 52                            DVC_OutputStatus	EQU		82
     91 = 53                            DVC_FlushInput		EQU		83
     92 = 54                            DVC_FlushOutput		EQU		84
     93 = 55                            DVC_IRQ				EQU		85
     94 = 56                            DVC_IsRemoveable	EQU		86
     95 = 57                            DVC_IOCTRL_READ		EQU		87
     96 = 58                            DVC_IOCTRL_WRITE	EQU		88
     97 = 59                            DVC_OutputUntilBusy	EQU		89
                                        ; message types	90 to 95 reserved
                                        
                                        
                                        ; Device Control Block
                                        ;
    103 = 00                            DCB_Name			EQU		0		; string: first byte is length, 11 chars max
    104 = 0C                            DCB_Type			EQU		0x0C
    105 = 0E                            DCB_nBPB			EQU		0x0E
    106 = 10                            DCB_LastErc			EQU		0x10		; last error code
    107 = 14                            DCB_StartBlock		EQU		0x14		; starting block number (partitioned devices)
    108 = 18                            DCB_nBlocks			EQU		0x18		; number of blocks on device
    109 = 1C                            DCB_pCmdProc		EQU		0x1C		; pointer to command processor routine
    110 = 20                            DCB_ReentCount		EQU		0x20		; re-entrancy count (1 to 255)
    111 = 21                            DCB_fSingleUser		EQU		0x21
    112 = 22                            DCB_hJob			EQU		0x22		; handle to associated job
    113 = 24                            DCB_Mbx				EQU		0x24
    114 = 26                            DCB_pSema			EQU		0x26		; pointer to device semaphore
    115 = 28                            DCB_Resv1			EQU		0x28		; reserved
    116 = 30                            DCB_Size			EQU		0x30
                                        
    118 = 1F                            MAX_DEV_OP			EQU		31
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 3
noc_boot11.a
                                        
                                        		bss
                                        		org		0x0040
    124 00000040                        txBuf	fill.b	16,0
    125 00000050                        rxBuf	fill.b	16,0
    126 00000060                        kbdbuf	fill.w	16,0
    127 000000A0                        kbdhead	db	0
    128 000000A1                        kbdtail	db	0
    129 000000A2                        kbdcnt	db	0
    130 000000A3                        pingcnt		dw	0
    131 000000A7                        FocusHead	db	0
    132 000000A8                        FocusTbl	fill.b	64,0
                                        		align	2
    134 000000E8                        NodeDCB		fill.b	DCB_Size,0
    135 00000118                        TextDCB		fill.b	DCB_Size,0
    136 00000148                        LedsDCB		fill.b	DCB_Size,0
    137 00000178                        DevList		fill.b	16*88,0
    138 000006F8                        DevListNdx	dw	0
                                        
                                        		align	2
    141 000006FC                        HTFocus		dw		0
    142 00000700                        packetPtr	dw		0
    143 00000704                        pingndx		db		0
                                        
    144 = 2000                          TXTSCR		equ	$2000
    145 = 000000000000B100                              TXTCTRL		equ	$B100
    146 = 000000000000B200                              LEDS		equ	$B200
    147 = 000000000000B000                              ROUTER		equ	$B000
    148 = 10                            RTR_RXSTAT	equ	$10
    149 = 11                            RTR_RXCTL	equ	$11
    150 = 12                            RTR_TXSTAT	equ	$12
                                        
    152 = 0E                            MSG_DST		equ	14
    153 = 0C                            MSG_SRC		equ	12
    154 = 09                            MSG_TTL		equ	9
    155 = 08                            MSG_TYPE	equ	8
                                        
    157 = 00                            ROUTER_TRB	equ	0
                                        
                                        		.code
                                        		cpu		Butterfly16
                                        		.org	$C000
                                        ; ============================================================================
                                        ;        __
                                        ;   \\__/ o\    (C) 2017  Robert Finch, Waterloo
                                        ;    \  __ /    All rights reserved.
                                        ;     \/_//     robfinch<remove>@finitron.ca
                                        ;       ||
                                        ;  
                                        ;
                                        ; This source file is free software: you can redistribute it and/or modify 
                                        ; it under the terms of the GNU Lesser General Public License as published 
                                        ; by the Free Software Foundation, either version 3 of the License, or     
                                        ; (at your option) any later version.                                      
                                        ;                                                                          
                                        ; This source file is distributed in the hope that it will be useful,      
                                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of           
                                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
                                        ; GNU General Public License for more details.                             
                                        ;                                                                          
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 4
noc_boot11.a
                                        ; You should have received a copy of the GNU General Public License        
                                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
                                        ;                                    
                                        ;                                      
                                        ; Networking software components
                                        ; ============================================================================
                                        ;
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Zero out the transmit buffer.
                                        ; Used before building transmit buffer.
                                        ; Automatically inserts a time-to-live of 63, and the source id.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
    202 0000C000                        zeroTxBuf:
    203 0000C000 FE 6E                   		add		sp,sp,#-2
    204 0000C002 E0 D2                   		sw		r2,[sp]
    205 0000C004 00 40 0F 12             		lw		r2,#15
    206 0000C008                        zeroTxBuf1:
    207 0000C008 04 40 20 C0             		sb		r0,txBuf[r2]
    208 0000C00C FF 62                   		sub		r2,r2,#1
    209 0000C00E FC BB                   		bpl		zeroTxBuf1
    210 0000C010 03 40 0F 12             		lw		r2,#63
    211 0000C014 04 40 09 C2             		sb		r2,txBuf+MSG_TTL
    212 0000C018 E4 32                   		tsr		r2,ID
    213 0000C01A 04 40 0C D2             		sw		r2,txBuf+MSG_SRC	; X+Y
    214 0000C01E E0 F2                   		lw		r2,[sp]
    215 0000C020 02 6E                   		add		sp,sp,#2
    216 0000C022 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Set the destination address field in the transmit buffer based on the
                                        ; source address in the receive buffer.
                                        ;----------------------------------------------------------------------------
                                        
    223 0000C024                        SetDestFromRx:
    224 0000C024 05 40 0C F1             		lw		r1,rxBuf+MSG_SRC
    225 0000C028 04 40 0E D1             		sw		r1,txBuf+MSG_DST
    226 0000C02C F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Transmit on the network.
                                        ; Blocks until the transmit buffer is open.
                                        ;
                                        ; Prerequisites:
                                        ;	The transmit buffer txBuf must have already been loaded.
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 5
noc_boot11.a
                                        
    242 0000C02E FA 6E                  Xmit:	
    243 0000C030 E0 D1                   		sw		r1,[sp]
    244 0000C032 E2 D2                   		sw		r2,2[sp]
    245 0000C034 E4 D3                   		sw		r3,4[sp]
                                        		; wait for transmit buffer to empty
                                        		; If transmit buffer empty signal times out, transmit anyway
                                        		; @100Mb/s 128 bits should transmit in only about 128 clock cycles.
    249 0000C036 00 13                   		lw		r3,#0
    250 0000C038                        Xmit2:
    251 0000C038 01 63                   		add		r3,r3,#1
    252 0000C03A FC 4F 3E 10             		cmp		r3,#50
    253 0000C03E 20 00                   		nop
    254 0000C040 06 A7                   		bgtu	Xmit1
    255 0000C042 01 4B 02 E1             		lb		r1,ROUTER+RTR_TXSTAT
    256 0000C046 20 00                   		nop
    257 0000C048 F7 B9                   		bne		Xmit2
    258 0000C04A 00 40 0F 12             		lw		r2,#15
    259 0000C04E                        Xmit1:
    260 0000C04E 04 40 20 E1             		lb		r1,txBuf[r2]
    261 0000C052 00 4B 20 C1             		sb		r1,ROUTER[r2]
    262 0000C056 FF 62                   		add		r2,r2,#-1
    263 0000C058 20 00                   		nop
    264 0000C05A F9 BB                   		bpl		Xmit1
                                        		; trigger a transmit, writing any value will set the transmitter busy bit
    266 0000C05C 01 4B 02 C0             		sb		r0,ROUTER+RTR_TXSTAT
    267 0000C060 E0 F1                   		lw		r1,[sp]
    268 0000C062 E2 F2                   		lw		r2,2[sp]
    269 0000C064 E4 F3                   		lw		r3,4[sp]
    270 0000C066 06 6E                   		add		sp,sp,#6
    271 0000C068 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Receive from network.
                                        ; Receive status must have already indicated a message present.
                                        ; Copies recieve buffer from router to rxBuf.
                                        ; The router fifo is configured with first word fall-through. This means
                                        ; the data word appears on the fifo output before the fifo is popped.
                                        ; A fifo pop signal has to be sent after reading the data.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
    289 0000C06A                        Recv:
    290 0000C06A FC 6E                   		add		sp,sp,#-4
    291 0000C06C E0 D1                   		sw		r1,[sp]
    292 0000C06E E2 D2                   		sw		r2,2[sp]
                                        		; Pop the rx fifo.
                                        		; This bit $40 should automatically clear so we don't need to
                                        		; set it back to zero.
    296 0000C070 01 4B 01 E1             		lb		r1,ROUTER+RTR_RXCTL
    297 0000C074 04 40 60 31             		or		r1,#$40
    298 0000C078 01 4B 01 C1             		sb		r1,ROUTER+RTR_RXCTL
    299 0000C07C 0B 40 5F 31             		and		r1,#$BF
    300 0000C080 01 4B 01 C1             		sb		r1,ROUTER+RTR_RXCTL
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 6
noc_boot11.a
    301 0000C084 00 40 0F 12             		lw		r2,#15
    302 0000C088                        Recv1:
    303 0000C088 00 4B 20 E1             		lb		r1,ROUTER[r2]			; copy message to local buffer
    304 0000C08C 05 40 20 C1             		sb		r1,rxBuf[r2]
    305 0000C090 FF 62                   		add		r2,r2,#-1
    306 0000C092 FA BB                   		bpl		Recv1
    307 0000C094 E0 F1                   		lw		r1,[sp]
    308 0000C096 E2 F2                   		lw		r2,2[sp]
    309 0000C098 04 6E                   		add		sp,sp,#4
    310 0000C09A F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Handler for the ping function. A pink acknowledge message is sent back
                                        ; to the sender.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
    324 0000C09C                        PingHandler:
    325 0000C09C FC 6E                   		add		sp,sp,#-4
    326 0000C09E E0 DF                   		sw		lr,[sp]
    327 0000C0A0 E2 D1                   		sw		r1,2[sp]
    328 0000C0A2 AE BF                   		call	zeroTxBuf
    329 0000C0A4 BF BF                   		call	SetDestFromRx
    330 0000C0A6 01 40 02 11             		lw		r1,#MT_PING_ACK
    331 0000C0AA 04 40 08 C1             		sb		r1,txBuf+MSG_TYPE
    332 0000C0AE BF BF                   		call	Xmit
    333 0000C0B0 E0 FF                   		lw		lr,[sp]
    334 0000C0B2 E2 F1                   		lw		r1,2[sp]
    335 0000C0B4 04 6E                   		add		sp,sp,#4
    336 0000C0B6 F0 80                   		ret
                                        ;----------------------------------------------------------------------------
                                        ; Dispatch routine for received messages.
                                        ; A reset message is processed here, not counting on the DCB to be setup
                                        ; correctly. Otherwise all other messages are passed to the command processor
                                        ; for the intended device.
                                        ;----------------------------------------------------------------------------
                                        
    344 0000C0B8                        RecvDispatch:
    345 0000C0B8 F8 6E                   		add		sp,sp,#-8
    346 0000C0BA E0 DF                   		sw		lr,[sp]
    347 0000C0BC E2 D1                   		sw		r1,2[sp]
    348 0000C0BE E4 D2                   		sw		r2,4[sp]
    349 0000C0C0 E6 D3                   		sw		r3,6[sp]
    350 0000C0C2 E4 31                   		tsr		r1,ID
    351 0000C0C4 EE 4F 1F 10             		cmp		r1,#$111
    352 0000C0C8 10 A8                   		beq		RecvDispatch2
    353 0000C0CA 05 40 08 E1             		lb		r1,rxBuf+MSG_TYPE
    354 0000C0CE 1F 10                   		cmp		r1,#MT_RST			; reset message ?
    355 0000C0D0 0C A9                   		bne		RecvDispatch2
    356 0000C0D2 BB 40 02 AF             		call	ResetNode
                                        		; Send back a reset ACK message to indicate node is good to go.
    358 0000C0D6 94 BF                   		call	zeroTxBuf
    359 0000C0D8 11 40 01 11             		lw		r1,#$111
    360 0000C0DC 04 40 0E D1             		sw		r1,txBuf+MSG_DST
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 7
noc_boot11.a
    361 0000C0E0 02 11                   		lw		r1,#MT_RST_ACK
    362 0000C0E2 04 40 08 C1             		sb		r1,txBuf+MSG_TYPE
    363 0000C0E6 A3 BF                   		call	Xmit
    364 0000C0E8 1D AE                   		br		RecvDispatchXit
    365 0000C0EA                        RecvDispatch2:
    366 0000C0EA 05 40 0E F1             		lw		r1,rxBuf+MSG_DST
    367 0000C0EE FF 40 5F 31             		and		r1,#$FFF
    368 0000C0F2 E4 32                   		tsr		r2,ID
    369 0000C0F4 1D 22                   		cmp		r2,r1
    370 0000C0F6 16 A9                   		bne		RecvDispatchXit
    371 0000C0F8 05 40 0E F2             		lw		r2,rxBuf+MSG_DST
    372 0000C0FC 91 32                   		rol		r2,#1		; Get the 'D' nybble into r2
    373 0000C0FE 91 32                   		rol		r2,#1
    374 0000C100 91 32                   		rol		r2,#1
    375 0000C102 91 32                   		rol		r2,#1
    376 0000C104 00 40 5F 32             		and		r2,#$0F		; max 15 devices
    377 0000C108 81 32                   		shl		r2,#1		; multiply by 48 (size of DCB)
    378 0000C10A 81 32                   		shl		r2,#1
    379 0000C10C 81 32                   		shl		r2,#1
    380 0000C10E 81 32                   		shl		r2,#1
    381 0000C110 20 13                   		mov		r3,r2
    382 0000C112 81 32                   		shl		r2,#1
    383 0000C114 30 22                   		add		r2,r3
    384 0000C116 0E 40 28 12             		add		r2,r2,#NodeDCB
    385 0000C11A 01 40 2C F2             		lw		r2,DCB_pCmdProc[r2]
    386 0000C11E 05 40 08 E1             		lb		r1,rxBuf+MSG_TYPE
    387 0000C122 20 8F                   		call	[r2]
    388 0000C124                        RecvDispatchXit:
    389 0000C124 E0 FF                   		lw		lr,[sp]
    390 0000C126 E2 F1                   		lw		r1,2[sp]
    391 0000C128 E4 F2                   		lw		r2,4[sp]
    392 0000C12A E6 F3                   		lw		r3,6[sp]
    393 0000C12C 08 6E                   		add		sp,sp,#8
    394 0000C12E F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Message command processor for node.
                                        ;
                                        ; Executes different message handlers based on the message type.
                                        ;----------------------------------------------------------------------------
                                        
    402 0000C130                        StdMsgHandlers:
    403 0000C130 F8 6E                   		add		sp,sp,#-8
    404 0000C132 E0 DF                   		sw		lr,[sp]
    405 0000C134 E4 D2                   		sw		r2,4[sp]
    406 0000C136 E6 D3                   		sw		r3,6[sp]
                                        
    408 0000C138 05 40 08 E1             		lb		r1,rxBuf+MSG_TYPE
                                        
                                        		; Process PING request
    411 0000C13C FF 4F 17 10             		cmp		r1,#MT_PING
    412 0000C140 03 A9                   		bne		StdMsgHandlers1
    413 0000C142 AC BF                   		call	PingHandler
    414 0000C144 01 11                   		lw		r1,#1
    415 0000C146 68 AE                   		br		StdMsgHandlersXit
                                        
    417 0000C148                        StdMsgHandlers1:
    418 0000C148 FF 4F 16 10             		cmp		r1,#MT_START_BASIC_LOAD	; start BASIC load
    419 0000C14C 07 A9                   		bne		StdMsgHandlers2
    420 0000C14E 05 40 0C F1             		lw		r1,rxBuf+MSG_SRC
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 8
noc_boot11.a
    421 0000C152 FF BF                   		call	INITTBW
    422 0000C154 2C 4C 0C F8             		lw		r8,TXTBGN			; r8 = text begin
    423 0000C158 01 11                   		lw		r1,#1
    424 0000C15A 5E AE                   		br		StdMsgHandlersXit
                                        
    426 0000C15C                        StdMsgHandlers2:
    427 0000C15C FF 4F 15 10             		cmp		r1,#MT_LOAD_BASIC_CHAR	; load BASIC program char
    428 0000C160 0E A9                   		bne		StdMsgHandlers4
    429 0000C162 05 40 00 F1             		lw		r1,rxBuf
    430 0000C166 80 D1                   		sw		r1,[r8]
    431 0000C168 05 40 02 F1             		lw		r1,rxBuf+2
    432 0000C16C 82 D1                   		sw		r1,2[r8]
    433 0000C16E 05 40 04 F1             		lw		r1,rxBuf+4
    434 0000C172 84 D1                   		sw		r1,4[r8]
    435 0000C174 06 68                   		add		r8,r8,#6
    436 0000C176 74 40 04 D8             		sw		r8,TXTUNF
    437 0000C17A 01 11                   		lw		r1,#1
    438 0000C17C 4D AE                   		br		StdMsgHandlersXit
                                        
                                        		; Run a BASIC program by stuffing a 'RUN' command into the BASIC
                                        		; buffer.
    442 0000C17E                        StdMsgHandlers4:
    443 0000C17E FF 4F 14 10             		cmp		r1,#MT_RUN_BASIC_PROG
    444 0000C182 17 A9                   		bne		StdMsgHandlers5
    445 0000C184 05 40 02 11             		lw		r1,#'R'
    446 0000C188 78 40 02 C1             		sb		r1,BUFFER
    447 0000C18C 05 40 05 11             		lw		r1,#'U'
    448 0000C190 78 40 03 C1             		sb		r1,BUFFER+1
    449 0000C194 04 40 0E 11             		lw		r1,#'N'
    450 0000C198 78 40 04 C1             		sb		r1,BUFFER+2
    451 0000C19C 00 40 0D 11             		lw		r1,#13
    452 0000C1A0 78 40 05 C1             		sb		r1,BUFFER+3
    453 0000C1A4 78 40 06 C0             		sb		r0,BUFFER+4
    454 0000C1A8 78 40 06 18             		lw		r8,#BUFFER+4
    455 0000C1AC D2 AF                   		call	ST3
    456 0000C1AE 01 11                   		lw		r1,#1
    457 0000C1B0 33 AE                   		br		StdMsgHandlersXit
                                        
                                        		; Load program code
    460 0000C1B2                        StdMsgHandlers5:
    461 0000C1B2 FE 4F 19 10             		cmp		r1,#MT_LOAD_CODE
    462 0000C1B6 07 A9                   		bne		StdMsgHandlers6
    463 0000C1B8 05 40 02 F1             		lw		r1,rxBuf+2
    464 0000C1BC 05 40 04 F2             		lw		r2,rxBuf+4
    465 0000C1C0 20 D1                   		sw		r1,[r2]
    466 0000C1C2 01 11                   		lw		r1,#1
    467 0000C1C4 29 AE                   		br		StdMsgHandlersXit
                                        
                                        		; Load program data
    470 0000C1C6                        StdMsgHandlers6:
    471 0000C1C6 FE 4F 18 10             		cmp		r1,#MT_LOAD_DATA
    472 0000C1CA 07 A9                   		bne		StdMsgHandlers7
    473 0000C1CC 05 40 02 F1             		lw		r1,rxBuf+2
    474 0000C1D0 05 40 04 F2             		lw		r2,rxBuf+4
    475 0000C1D4 20 D1                   		sw		r1,[r2]
    476 0000C1D6 01 11                   		lw		r1,#1
    477 0000C1D8 1F AE                   		br		StdMsgHandlersXit
                                        		; Load program code
                                        
                                        		; Execute program
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 9
noc_boot11.a
    481 0000C1DA                        StdMsgHandlers7:
    482 0000C1DA FE 4F 17 10             		cmp		r1,#MT_EXEC_CODE
    483 0000C1DE 15 A9                   		bne		StdMsgHandlers8
    484 0000C1E0 05 40 0C F1             		lw		r1,rxBuf+MSG_SRC
    485 0000C1E4 FE 6E                   		add		sp,sp,#-2
    486 0000C1E6 E0 D1                   		sw		r1,[sp]
    487 0000C1E8 05 40 04 F2             		lw		r2,rxBuf+4
    488 0000C1EC 20 8F                   		call	[r2]
    489 0000C1EE E0 F2                   		lw		r2,[sp]
    490 0000C1F0 02 6E                   		add		sp,sp,#2
    491 0000C1F2 06 BF                   		call	zeroTxBuf
    492 0000C1F4 04 40 02 D1             		sw		r1,txBuf+2
    493 0000C1F8 04 40 0E D2             		sw		r2,txBuf+MSG_DST
    494 0000C1FC 01 40 0A 11             		lw		r1,#MT_EXIT
    495 0000C200 04 40 08 C1             		sb		r1,txBuf+MSG_TYPE
    496 0000C204 14 BF                   		call	Xmit
    497 0000C206 01 11                   		lw		r1,#1
    498 0000C208 07 AE                   		br		StdMsgHandlersXit
                                        
                                        		; Enumerate the devices in the node. Provide a list back
                                        		; to node $111.
    502 0000C20A                        StdMsgHandlers8:
    503 0000C20A FD 4F 1C 10             		cmp		r1,#MT_ENUM_DEVICES
    504 0000C20E 03 A9                   		bne		StdMsgHandlers12
    505 0000C210 09 AF                   		call	EnumDevices
    506 0000C212 01 11                   		lw		r1,#1
    507 0000C214 01 AE                   		br		StdMsgHandlersXit
                                        
    509 0000C216                        StdMsgHandlers12:
    510 0000C216 00 11                   		lw		r1,#0
    511 0000C218                        StdMsgHandlersXit:
    512 0000C218 E0 FF                   		lw		lr,[sp]
    513 0000C21A E4 F2                   		lw		r2,4[sp]
    514 0000C21C E6 F3                   		lw		r3,6[sp]
    515 0000C21E 08 6E                   		add		sp,sp,#8
    516 0000C220 16 21                   		or		r1,r1
    517 0000C222 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Standard message handler for enunmerating devices.
                                        ;
                                        ; Enumerate the devices present in the node.
                                        ;----------------------------------------------------------------------------
                                        
    525 0000C224                        EnumDevices:
    526 0000C224 F6 6E                   		add		sp,sp,#-10
    527 0000C226 E0 DF                   		sw		lr,[sp]
    528 0000C228 E2 D1                   		sw		r1,2[sp]
    529 0000C22A E4 D2                   		sw		r2,4[sp]
    530 0000C22C E6 D3                   		sw		r3,6[sp]
    531 0000C22E E8 D4                   		sw		r4,8[sp]
    532 0000C230 00 13                   		lw		r3,#0
    533 0000C232 00 12                   		lw		r2,#0
    534 0000C234                        EnumDevices1:
    535 0000C234 EE 4F 04 AF             		call	zeroTxBuf
    536 0000C238 EF 4F 04 AF             		call	SetDestFromRx
    537 0000C23C 30 14                   		mov		r4,r3
    538 0000C23E C1 34                   		ror		r4,#1			; put count in r4 bits 12 to 15
    539 0000C240 C1 34                   		ror		r4,#1
    540 0000C242 C1 34                   		ror		r4,#1
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 10
noc_boot11.a
    541 0000C244 C1 34                   		ror		r4,#1
    542 0000C246 E4 31                   		tsr		r1,ID
    543 0000C248 46 21                   		or		r1,r4
    544 0000C24A 04 40 00 D1             		sw		r1,txBuf
    545 0000C24E 0E 40 28 F1             		lw		r1,NodeDCB[r2]
    546 0000C252 04 40 02 D1             		sw		r1,txBuf+2
    547 0000C256 0E 40 2A F1             		lw		r1,NodeDCB+2[r2]
    548 0000C25A 04 40 04 D1             		sw		r1,txBuf+4
    549 0000C25E 0E 40 2C F1             		lw		r1,NodeDCB+4[r2]
    550 0000C262 04 40 06 D1             		sw		r1,txBuf+6
    551 0000C266 02 40 05 11             		lw		r1,#MT_ENUM_DEVICES1
    552 0000C26A EE 4F 00 AF             		call	Xmit
    553 0000C26E EC 4F 07 AF             		call	zeroTxBuf
    554 0000C272 ED 4F 07 AF             		call	SetDestFromRx
    555 0000C276 0E 40 2E F1             		lw		r1,NodeDCB+6[r2]
    556 0000C27A 04 40 00 D1             		sw		r1,txBuf
    557 0000C27E 0F 40 20 F1             		lw		r1,NodeDCB+8[r2]
    558 0000C282 04 40 02 D1             		sw		r1,txBuf+2
    559 0000C286 0F 40 22 F1             		lw		r1,NodeDCB+10[r2]
    560 0000C28A 04 40 04 D1             		sw		r1,txBuf+4
    561 0000C28E 0F 40 24 F1             		lw		r1,NodeDCB+12[r2]
    562 0000C292 04 40 06 D1             		sw		r1,txBuf+6
    563 0000C296 02 40 06 11             		lw		r1,#MT_ENUM_DEVICES2
    564 0000C29A EC 4F 08 AF             		call	Xmit
    565 0000C29E 30 62                   		add		r2,r2,#DCB_Size
    566 0000C2A0 01 63                   		add		r3,r3,#1
    567 0000C2A2 3D 10                   		cmp		r3,#nDCB
    568 0000C2A4 C7 B4                   		bltu	EnumDevices1
    569 0000C2A6 E0 FF                   		lw		lr,[sp]
    570 0000C2A8 E2 F1                   		lw		r1,2[sp]
    571 0000C2AA E4 F2                   		lw		r2,4[sp]
    572 0000C2AC E6 F3                   		lw		r3,6[sp]
    573 0000C2AE E8 F4                   		lw		r4,8[sp]
    574 0000C2B0 0A 6E                   		add		sp,sp,#10
    575 0000C2B2 F0 80                   		ret
                                        
                                        ;****************************************************************;
                                        ;                                                                ;
                                        ;		Tiny BASIC for the Finitron Butterfly                    ;
                                        ;                                                                ;
                                        ; Derived from a 68000 derivative of Palo Alto Tiny BASIC as     ;
                                        ; published in the May 1976 issue of Dr. Dobb's Journal.         ;
                                        ; Adapted to the 68000 by:                                       ;
                                        ;	Gordon brndly						                         ;
                                        ;	12147 - 51 Street					                         ;
                                        ;	Edmonton AB  T5W 3G8					                     ;
                                        ;	Canada							                             ;
                                        ;	(updated mailing address for 1996)			                 ;
                                        ;                                                                ;
                                        ; Adapted to the Butterfly by:                                    ;
                                        ;    Robert Finch                                                ;
                                        ;    Ontario, Canada                                             ;
                                        ;	 rob<remove>@finitron.ca                                     ;  
                                        ;****************************************************************;
                                        ;    Copyright (C) 2005 by Robert Finch. This program may be	 ;
                                        ;    freely distributed for personal use only. All commercial	 ;
                                        ;		       rights are reserved.			                     ;
                                        ;****************************************************************;
                                        ;
                                        ; Register Usage
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 11
noc_boot11.a
                                        ; r8 = text pointer (global usage)
                                        ; r3,r4 = inputs parameters to subroutines
                                        ; r2 = return value
                                        ;
                                        ;* Vers. 1.0  1984/7/17	- Original version by Gordon brndly
                                        ;*	1.1  1984/12/9	- Addition of '0x' print term by Marvin Lipford
                                        ;*	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                                        
                                        ;	OPT	FRS,BRS 	forward ref.'s & brnches default to short
                                        
                                        ;XMIT_FULL		equ	0x40		; the transmit buffer is full
                                        ;DATA_PRESENT	equ	0x08		; there is data preset at the serial port bc_uart3
    612 = 01                            DATA_PRESENT	equ	0x01		; there is data preset at the serial port bc_uart3
    613 = 20                            XMIT_NOT_FULL	equ	0x20
                                        
    615 = 00000000FFFFDC40                              TS_TIMER	equ		0xFFFFDC40		; system time slice timer
    616 = 00000000FFFFDC50                              KBD			equ		0xFFFFDC50
                                        
    618 = 00000000FFFFDCA0                              RAND		equ		0xFFFFDCA0
    619 = 00000000FFFFD800                              VIC			equ		0xFFFFD800
                                        
    621 = 2000                          VIDEORAM	equ		0x00002000
                                        
                                        ; BOOT ROM routines
                                        
    625 = 0000000FFFFFF804                              getSerial	equ		0xFFFFFF804	; get a serial port character
    626 = 0000000FFFFFF808                              peekSerial	equ		0xFFFFFF808	; get a serial port character
    627 = 0000000FFFFFF80C                              putSerial	equ		0xFFFFFF80C	; put a character to serial port
    628 = 0000000FFFFFF840                              getKbdCharWait	equ	0xFFFFFF840
    629 = 0000000FFFFFF844                              getKbdChar		equ	0xFFFFFF844
                                        
    631 = 20                            warmStart   equ     0x20
    632 = 24                            usrJmp      equ     0x24
                                        
    634 = 0D                            CR		equ	0x0D		; ASCII equates
    635 = 0A                            LF		equ	0x0A
    636 = 09                            TAB		equ	0x09
    637 = 03                            CTRLC	equ	0x03
    638 = 08                            CTRLH	equ	0x08
    639 = 13                            CTRLS	equ	0x13
    640 = 18                            CTRLX	equ	0x18
                                        
    642 = 50                            BUFLEN	equ	80	;	length of keyboard input buffer
                                        
                                        	code
                                        ;	org	0xC000	;
                                        ;
                                        ; Standard jump table. You can change these addresses if you are
                                        ; customizing this interpreter for a different environment.
                                        ;
    651 0000C2B4 0D AE                  START	jmp	CSTART	;	Cold Start entry point
    652 0000C2B6 41 AE                  GOWARM	jmp	WSTART	;	Warm Start entry point
    653 0000C2B8 8B 40 0E AE            GOOUT	jmp	OUTC	;	Jump to character-out routine
    654 0000C2BC 8C 40 0E AE            GOIN	jmp	INC		;Jump to character-in routine
    655 0000C2C0 8F 40 08 AE            GOAUXO	jmp	AUXOUT	;	Jump to auxiliary-out routine
    656 0000C2C4 8F 40 0D AE            GOAUXI	jmp	AUXIN	;	Jump to auxiliary-in routine
    657 0000C2C8 91 40 03 AE            GOBYE	jmp	BYEBYE	;	Jump to monitor, DOS, etc.
                                        ;
                                        ; Modifiable system constants:
                                        ;
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 12
noc_boot11.a
    661 0000C2CC 00 06                  TXTBGN	dw	0x0600		;beginning of program memory
    662 0000C2CE 00 1E                  ENDMEM	dw	0x1E00	;	end of available memory
                                        ;
                                        ; The main interpreter starts here:
                                        ;
                                        ; Usage
                                        ; r1 = temp
                                        ; r8 = text buffer pointer
                                        ; r12 = end of text in text buffer
                                        ;
    671 0000C2D0                        CSTART
    672 0000C2D0 06 11                   	lw		r1,#6
    673 0000C2D2 20 4B 00 C1             	sb		r1,LEDS
                                        	; First save off the link register and OS sp value
    675 0000C2D6 FC 6E                   	sub		sp,sp,#4
    676 0000C2D8 E0 DF                   	sw		lr,[sp]
    677 0000C2DA 73 40 02 DE             	sw		sp,OSSP
    678 0000C2DE 2C 4C 0E FE             	lw		sp,ENDMEM	; initialize stack pointer
    679 0000C2E2 E0 DF                   	sw      lr,[sp]    ; save off return address
                                        ;	lw		r1,#TXT_WIDTH
                                        ;	sb		r1,txtWidth
                                        ;	lw		r1,#TXT_HEIGHT
                                        ;	sb		r1,txtHeight
    684 0000C2E4 70 40 07 C0             	sb		r0,cursx	; set screen output
    685 0000C2E8 70 40 08 C0             	sb		r0,cursy
    686 0000C2EC 71 40 01 C0             	sb		r0,cursFlash
    687 0000C2F0 70 40 08 D0             	sw		r0,pos
                                        ;	lw		r2,#0xBF20	; black chars, yellow background
                                        ;	sw		r2,charToPrint
                                        ;	call	ClearScreen
                                        ;	lea		r1,msgInit	;	tell who we are
                                        ;	call	PRMESGAUX
    693 0000C2F4 4F 4D 0C 11             	lea		r1,msgInit	;	tell who we are
    694 0000C2F8 88 40 00 AF             	call	PRMESG
    695 0000C2FC 2C 4C 0C F1             	lw		r1,TXTBGN	;	init. end-of-program pointer
    696 0000C300 74 40 04 D1             	sw		r1,TXTUNF
    697 0000C304 2C 4C 0E F1             	lw		r1,ENDMEM	;	get address of end of memory
    698 0000C308 E0 4F 10 11             	sub		r1,r1,#512	; 	reserve 512 bytes for the stack
    699 0000C30C 74 40 0E D1             	sw		r1,STKBOT
    700 0000C310 E0 4F 10 11             	sub     r1,r1,#512 ;   128 vars
    701 0000C314 74 40 06 D1             	sw      r1,VARBGN
    702 0000C318 16 40 02 AF             	call    clearVars   ; clear the variable area
    703 0000C31C 74 40 06 F1             	lw      r1,VARBGN   ; calculate number of bytes free
    704 0000C320 74 40 04 F3             	lw		r3,TXTUNF
    705 0000C324 32 21                   	sub     r1,r3
    706 0000C326 00 12                   	lw		r2,#0
    707 0000C328 70 40 0B AF             	call	PRTNUM
    708 0000C32C 07 11                   	lw		r1,#7
    709 0000C32E 20 4B 00 C1             	sb		r1,LEDS
    710 0000C332 5A 4D 0A 11             	lea		r1,msgBytesFree
    711 0000C336 86 40 01 AF             	call	PRMESG
    712 0000C33A                        WSTART
    713 0000C33A 73 40 0A D0             	sw		r0,LOPVAR   ; initialize internal variables
    714 0000C33E 73 40 06 D0             	sw		r0,STKGOS
    715 0000C342 73 40 04 D0             	sw		r0,CURRNT	;	current line number pointer = 0
    716 0000C346 2C 4C 0E FE             	lw		sp,ENDMEM	;	init S.P. again, just in case
    717 0000C34A 5B 4D 08 11             	lea		r1,msgReady	;	display "Ready"
    718 0000C34E 85 40 05 AF             	call	PRMESG
    719 0000C352                        ST3
    720 0000C352 03 40 0E 11             	lw		r1,#'>'		; Prompt with a '>' and
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 13
noc_boot11.a
    721 0000C356 60 40 09 AF             	call	GETLN		; read a line.
    722 0000C35A 81 40 05 AF             	call	TOUPBUF 	; convert to upper case
    723 0000C35E 80 1C                   	lw		r12,r8		; save pointer to end of line
    724 0000C360 78 40 02 18             	lea		r8,BUFFER	; point to the beginning of line
    725 0000C364 79 40 00 AF             	call	TSTNUM		; is there a number there?
    726 0000C368 80 40 00 AF             	call	IGNBLK		; skip trailing blanks
    727 0000C36C 16 21                   	or      r1,r1       ; does line no. exist? (or nonzero?)
    728 0000C36E BC A8                   	beq		DIRECT		; if not, it's a direct statement
    729 0000C370 00 40 11 10             	cmp		r1,#0xFFFF	; see if line no. is <= 16 bits
    730 0000C374 04 A6                   	bleu	ST2
    731 0000C376 5D 4D 06 11             	lea		r1,msgLineRange	; if not, we've overflowed
    732 0000C37A 5D 40 0D AE             	br		ERROR
    733 0000C37E                        ST2
                                            ; ugliness - store a character at potentially an
                                            ; odd address (unaligned).
    736 0000C37E 10 12                   	lw		r2,r1       ; r2 = line number
    737 0000C380 8E C2                   	sb		r2,-2[r8]
    738 0000C382 A1 32                   	shr		r2,#1
    739 0000C384 A1 32                   	shr		r2,#1
    740 0000C386 A1 32                   	shr		r2,#1
    741 0000C388 A1 32                   	shr		r2,#1
    742 0000C38A A1 32                   	shr		r2,#1
    743 0000C38C A1 32                   	shr		r2,#1
    744 0000C38E A1 32                   	shr		r2,#1
    745 0000C390 A1 32                   	shr		r2,#1
    746 0000C392 8F C2                   	sb		r2,-1[r8]	; store the binary line no.
    747 0000C394 FE 68                   	sub		r8,r8,#2
    748 0000C396 62 40 0C AF             	call	FNDLN		; find this line in save area
    749 0000C39A E0 31                   	tsr		r1,sr
    750 0000C39C 90 1D                   	lw		r13,r9		; save possible line pointer
    751 0000C39E F0 31                   	trs		r1,sr
    752 0000C3A0 11 A9                   	bne		ST4			; if not found, insert
                                        	; here we found the line, so we're replacing the line
                                        	; in the text area
                                        	; first step - delete the line
    756 0000C3A2 00 11                   	lw		r1,#0
    757 0000C3A4 64 40 02 AF             	call	FNDNXT		; find the next line (into r9)
    758 0000C3A8 0A A7                   	bgtu	ST6			; no more lines
    759 0000C3AA 90 11                   	lw		r1,r9		; r1 = pointer to next line
    760 0000C3AC D0 12                   	lw		r2,r13		; pointer to line to be deleted
    761 0000C3AE 74 40 04 F3             	lw		r3,TXTUNF	; points to top of save area
    762 0000C3B2 64 40 06 AF             	call	MVUP		; move up to delete
    763 0000C3B6 74 40 04 D2             	sw		r2,TXTUNF	; update the end pointer
                                        	; we moved the lines of text after the line being
                                        	; deleted down, so the pointer to the next line
                                        	; needs to be reset
    767 0000C3BA D0 19                   	lw		r9,r13
    768 0000C3BC 03 AE                   	br		ST4
                                        	; here there were no more lines, so just move the
                                        	; end of text pointer down
    771 0000C3BE                        ST6
    772 0000C3BE 74 40 04 DD             	sw		r13,TXTUNF
    773 0000C3C2 D0 19                   	lw		r9,r13
    774 0000C3C4                        ST4
                                        	; here we're inserting because the line wasn't found
                                        	; or it was deleted	from the text area
    777 0000C3C4 C0 11                   	lw		r1,r12		; calculate the length of new line
    778 0000C3C6 82 21                   	sub		r1,r8
    779 0000C3C8 1D 10                   	cmp		r1,#3		; is it just a line no. & CR?
    780 0000C3CA C3 B2                   	ble		ST3			; if so, it was just a delete
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 14
noc_boot11.a
                                        
    782 0000C3CC 74 40 04 FB             	lw		r11,TXTUNF	; compute new end of text
    783 0000C3D0 B0 1A                   	lw		r10,r11		; r10 = old TXTUNF
    784 0000C3D2 10 2B                   	add		r11,r1		; r11 = new top of TXTUNF (r1=line length)
                                        
    786 0000C3D4 74 40 06 F1             	lw		r1,VARBGN	; see if there's enough room
    787 0000C3D8 1D 2B                   	cmp		r11,r1
    788 0000C3DA 04 A4                   	bltu	ST5
    789 0000C3DC 6B 4D 01 11             	lea		r1,msgTooBig	; if not, say so
    790 0000C3E0 5A 40 0A AE             	jmp		ERROR
                                        
                                        	; open a space in the text area
    793 0000C3E4                        ST5
    794 0000C3E4 74 40 04 DB             	sw		r11,TXTUNF	; if so, store new end position
    795 0000C3E8 A0 11                   	lw		r1,r10		; points to old end of text
    796 0000C3EA B0 12                   	lw		r2,r11		; points to new end of text
    797 0000C3EC 90 13                   	lw		r3,r9       ; points to start of line after insert line
    798 0000C3EE 62 40 0F AF             	call	MVDOWN		; move things out of the way
                                        
                                        	; copy line into text space
    801 0000C3F2 80 11                   	lw		r1,r8		; set up to do the insertion; move from buffer
    802 0000C3F4 D0 12                   	lw		r2,r13		; to vacated space
    803 0000C3F6 C0 13                   	lw		r3,r12		; until end of buffer
    804 0000C3F8 62 40 03 AF             	call	MVUP		; do it
    805 0000C3FC AA BE                   	br		ST3			; go back and get another line
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** Tables *** DIRECT *** EXEC ***
                                        ;
                                        ; This section of the code tests a string against a table. When
                                        ; a match is found, control is transferred to the section of
                                        ; code according to the table.
                                        ;
                                        ; At 'EXEC', r8 should point to the string, r9 should point to
                                        ; the character table, and r10 should point to the execution
                                        ; table. At 'DIRECT', r8 should point to the string, r9 and
                                        ; r10 will be set up to point to TAB1 and TAB1_1, which are
                                        ; the tables of all direct and statement commands.
                                        ;
                                        ; A '.' in the string will terminate the test and the partial
                                        ; match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                                        ; 'PRIN.', or 'PRINT' will all match 'PRINT'.
                                        ;
                                        ; There are two tables: the character table and the execution
                                        ; table. The character table consists of any number of text items.
                                        ; Each item is a string of characters with the last character's
                                        ; high bit set to one. The execution table holds a 32-bit
                                        ; execution addresses that correspond to each entry in the
                                        ; character table.
                                        ;
                                        ; The end of the character table is a 0 byte which corresponds
                                        ; to the default routine in the execution table, which is
                                        ; executed if none of the other table items are matched.
                                        ;
                                        ; Character-matching tables:
    838 0000C3FE                        TAB1
    839 0000C3FE 4C 49 53 D4             	db	"LIS",('T'+0x80)        ; Direct commands
    840 0000C402 4C 4F 41 C4             	db	"LOA",('D'+0x80)
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 15
noc_boot11.a
    841 0000C406 4E 45 D7                	db	"NE",('W'+0x80)
    842 0000C409 52 55 CE                	db	"RU",('N'+0x80)
    843 0000C40C 53 41 56 C5             	db	"SAV",('E'+0x80)
    844 0000C410                        TAB2
    845 0000C410 4E 45 58 D4             	db	"NEX",('T'+0x80)         ; Direct / statement
    846 0000C414 4C 45 D4                	db	"LE",('T'+0x80)
    847 0000C417 49 C6                   	db	"I",('F'+0x80)
    848 0000C419 47 4F 54 CF             	db	"GOT",('O'+0x80)
    849 0000C41D 47 4F 53 55 C2          	db	"GOSU",('B'+0x80)
    850 0000C422 52 45 54 55 52 CE       	db	"RETUR",('N'+0x80)
    851 0000C428 52 45 CD                	db	"RE",('M'+0x80)
    852 0000C42B 46 4F D2                	db	"FO",('R'+0x80)
    853 0000C42E 49 4E 50 55 D4          	db	"INPU",('T'+0x80)
    854 0000C433 50 52 49 4E D4          	db	"PRIN",('T'+0x80)
    855 0000C438 50 4F 4B 45 D7          	db	"POKE",('W'+0x80)
    856 0000C43D 50 4F 4B C5             	db	"POK",('E'+0x80)
    857 0000C441 53 54 4F D0             	db	"STO",('P'+0x80)
    858 0000C445 42 59 C5                	db	"BY",('E'+0x80)
    859 0000C448 53 59 D3                	db	"SY",('S'+0x80)
    860 0000C44B 43 4C D3                	db	"CL",('S'+0x80)
    861 0000C44E 43 4C D2                    db  "CL",('R'+0x80)
    862 0000C451 00                      	db	0
    863 0000C452                        TAB4
    864 0000C452 4E 4F 44 45 4E 55 CD    	db	"NODENU",('M'+0x80)
                                      
    865 0000C459 50 45 45 4B D7          	db	"PEEK",('W'+0x80)        ;Functions
    866 0000C45E 50 45 45 CB             	db	"PEE",('K'+0x80)         ;Functions
    867 0000C462 52 4E C4                	db	"RN",('D'+0x80)
    868 0000C465 41 42 D3                	db	"AB",('S'+0x80)
    869 0000C468 53 49 5A C5             	db	"SIZ",('E'+0x80)
    870 0000C46C 55 53 D2                	db  "US",('R'+0x80)
    871 0000C46F 00                      	db	0
    872 0000C470                        TAB5
    873 0000C470 54 CF                   	db	"T",('O'+0x80)           ;"TO" in "FOR"
    874 0000C472 00                      	db	0
    875 0000C473                        TAB6
    876 0000C473 53 54 45 D0             	db	"STE",('P'+0x80)         ;"STEP" in "FOR"
    877 0000C477 00                      	db	0
    878 0000C478                        TAB8
    879 0000C478 3E BD                   	db	'>',('='+0x80)           ;Relational operators
    880 0000C47A 3C BE                   	db	'<',('>'+0x80)
    881 0000C47C BE                      	db	('>'+0x80)
    882 0000C47D BD                      	db	('='+0x80)
    883 0000C47E 3C BD                   	db	'<',('='+0x80)
    884 0000C480 BC                      	db	('<'+0x80)
    885 0000C481 00                      	db	0
    886 0000C482                        TAB9
    887 0000C482 41 4E C4                    db  "AN",('D'+0x80)
    888 0000C485 00                          db  0
    889 0000C486                        TAB10
    890 0000C486 4F D2                       db  "O",('R'+0x80)
    891 0000C488 00                          db  0
                                        
    893 0000C489 FF FF FF                	.align	4
                                        
                                        ;* Execution address tables:
    896 0000C48C                        TAB1_1
    897 0000C48C FE C5                   	dw	LISTX			;Direct commands
    898 0000C48E 64 C8                   	dw	LOAD
    899 0000C490 3E C5                   	dw	NEW
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 16
noc_boot11.a
    900 0000C492 54 C5                   	dw	RUN
    901 0000C494 F8 C8                   	dw	SAVE
    902 0000C496                        TAB2_1
    903 0000C496 56 C7                   	dw	NEXT		;	Direct / statement
    904 0000C498 56 C8                   	dw	LET
    905 0000C49A B0 C7                   	dw	IF
    906 0000C49C C2 C5                   	dw	GOTO
    907 0000C49E 98 C6                   	dw	GOSUB
    908 0000C4A0 C8 C6                   	dw	RETURN
    909 0000C4A2 BA C7                   	dw	IF2			; REM
    910 0000C4A4 F2 C6                   	dw	FOR
    911 0000C4A6 D8 C7                   	dw	INPUT
    912 0000C4A8 34 C6                   	dw	PRINT
    913 0000C4AA 30 CA                   	dw	POKEW
    914 0000C4AC 10 CA                   	dw	POKE
    915 0000C4AE 4C C5                   	dw	STOP
    916 0000C4B0 C8 C2                   	dw	GOBYE
    917 0000C4B2 48 CA                   	dw	SYSX
    918 0000C4B4 EA D4                   	dw	_cls
    919 0000C4B6 DC C5                   	dw  _clr
    920 0000C4B8 4E C8                   	dw	DEFLT
    921 0000C4BA                        TAB4_1
    922 0000C4BA B4 CE                   	dw	NODENUM
    923 0000C4BC 02 CE                   	dw  PEEKW
    924 0000C4BE F6 CD                   	dw	PEEK			;Functions
    925 0000C4C0 22 CE                   	dw	RND
    926 0000C4C2 7E CE                   	dw	ABS
    927 0000C4C4 A4 CE                   	dw	SIZEX
    928 0000C4C6 0E CE                   	dw  USRX
    929 0000C4C8 EE CB                   	dw	XP40
    930 0000C4CA                        TAB5_1
    931 0000C4CA 0A C7                   	dw	FR1			;"TO" in "FOR"
    932 0000C4CC 34 CF                   	dw	QWHAT
    933 0000C4CE                        TAB6_1
    934 0000C4CE 1E C7                   	dw	FR2			;"STEP" in "FOR"
    935 0000C4D0 24 C7                   	dw	FR3
    936 0000C4D2                        TAB8_1
    937 0000C4D2 10 CB                   	dw	XP11	;>=		Relational operators
    938 0000C4D4 1A CB                   	dw	XP12	;<>
    939 0000C4D6 24 CB                   	dw	XP13	;>
    940 0000C4D8 38 CB                   	dw	XP15	;=
    941 0000C4DA 2E CB                   	dw	XP14	;<=
    942 0000C4DC 42 CB                   	dw	XP16	;<
    943 0000C4DE 5C CB                   	dw	XP17
    944 0000C4E0                        TAB9_1
    945 0000C4E0 9C CA                       dw  XP_AND
    946 0000C4E2 A4 CA                       dw  XP_ANDX
    947 0000C4E4                        TAB10_1
    948 0000C4E4 78 CA                       dw  XP_OR
    949 0000C4E6 80 CA                       dw  XP_ORX
                                        
                                        ;*
                                        ; r3 = match flag (trashed)
                                        ; r9 = text table
                                        ; r10 = exec table
                                        ; r11 = trashed
    956 0000C4E8                        DIRECT
    957 0000C4E8 3F 4C 0E 19             	lea		r9,TAB1
    958 0000C4EC 48 4C 0C 1A             	lea		r10,TAB1_1
    959 0000C4F0                        EXEC
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 17
noc_boot11.a
    960 0000C4F0 F0 1B                   	lw		r11,lr		; save link reg
    961 0000C4F2 73 40 0B AF             	call	IGNBLK		; ignore leading blanks
    962 0000C4F6 B0 1F                   	lw		lr,r11		; restore link reg
    963 0000C4F8 80 1B                   	lw		r11,r8		; save the pointer
    964 0000C4FA 00 13                   	lw		r3,#0		; clear match flag
    965 0000C4FC                        EXLP
    966 0000C4FC 80 E1                   	lb		r1,[r8]		; get the program character
    967 0000C4FE 01 68                   	add		r8,r8,#1
    968 0000C500 90 E2                   	lb		r2,[r9]		; get the table character
    969 0000C502 02 A9                   	bne		EXNGO		; If end of table,
    970 0000C504 B0 18                   	lw		r8,r11		;	restore the text pointer and...
    971 0000C506 12 AE                   	br		EXGO		;   execute the default.
    972 0000C508                        EXNGO
    973 0000C508 3D 21                   	cmp		r1,r3		; Else check for period...
    974 0000C50A 10 A8                   	beq		EXGO		; if so, execute
    975 0000C50C 07 40 5F 32             	and		r2,#0x7f	; ignore the table's high bit
    976 0000C510 1D 22                   	cmp		r2,r1		;		is there a match?
    977 0000C512 07 A8                   	beq		EXMAT
    978 0000C514 04 6A                   	add		r10,r10,#4	;if not, try the next entry
    979 0000C516 B0 18                   	lw		r8,r11		; reset the program pointer
    980 0000C518 00 13                   	lw		r3,#0		; sorry, no match
    981 0000C51A                        EX1
    982 0000C51A 01 69                   	add		r9,r9,#1
    983 0000C51C 9F E1                   	lb		r1,-1[r9]	; get to the end of the entry
    984 0000C51E FD BB                   	bpl		EX1
    985 0000C520 ED BE                   	br		EXLP		; back for more matching
    986 0000C522                        EXMAT
    987 0000C522 02 40 0E 13             	lw		r3,#'.'		; we've got a match so far
    988 0000C526 01 69                   	add		r9,r9,#1
    989 0000C528 9F E1                   	lb		r1,-1[r9]	; end of table entry?
    990 0000C52A E8 BB                   	bpl		EXLP		; if not, go back for more
    991 0000C52C                        EXGO
    992 0000C52C 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
    993 0000C530 04 A8                   	beq		EXGO1
    994 0000C532 D9 4F 0A AF             	call	Recv
    995 0000C536 DB 4F 0F AF             	call	RecvDispatch
    996 0000C53A                        EXGO1
    997 0000C53A A0 FB                   	lw		r11,[r10]	; execute the appropriate routine
    998 0000C53C B0 80                   	jmp		[r11]
                                        
                                        
                                        ;    lb      r1,[r8]     ; get token from text space
                                        ;    bpl
                                        ;    and     r1,#0x7f
                                        ;    shl     r1,#2       ; * 4 - word offset
                                        ;    add     r1,r1,#TAB1_1
                                        ;    lw      r1,[r1]
                                        ;    jmp     [r1]
                                        
                                            
                                        ;
                                        ; What follows is the code to execute direct and statement
                                        ; commands. Control is transferred to these points via the command
                                        ; table lookup code of 'DIRECT' and 'EXEC' in the last section.
                                        ; After the command is executed, control is transferred to other
                                        ; sections as follows:
                                        ;
                                        ; For 'LISTX', 'NEW', and 'STOP': go back to the warm start point.
                                        ; For 'RUN': go execute the first stored line if any; else go
                                        ; back to the warm start point.
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 18
noc_boot11.a
                                        ; For 'GOTO' and 'GOSUB': go execute the target line.
                                        ; For 'RETURN' and 'NEXT'; go back to saved return line.
                                        ; For all others: if 'CURRNT' is 0, go to warm start; else go
                                        ; execute next command. (This is done in 'FINISH'.)
                                        ;
                                        ;******************************************************************
                                        ;
                                        ; *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                                        ;
                                        ; 'NEW<CR>' sets TXTUNF to point to TXTBGN
                                        ;
                                        ; 'STOP<CR>' goes back to WSTART
                                        ;
                                        ; 'RUN<CR>' finds the first stored line, stores its address
                                        ; in CURRNT, and starts executing it. Note that only those
                                        ; commands in TAB2 are legal for a stored program.
                                        ;
                                        ; RUN ON <node number> sends a run command to the specified node
                                        ;
                                        ; There are 3 more entries in 'RUN':
                                        ; 'RUNNXL' finds next line, stores it's address and executes it.
                                        ; 'RUNTSL' stores the address of this line and executes it.
                                        ; 'RUNSML' continues the execution on same line.
                                        ;
                                        ; 'GOTO expr<CR>' evaluates the expression, finds the target
                                        ; line, and jumps to 'RUNTSL' to do it.
                                        ;
   1047 0000C53E                        NEW
   1048 0000C53E 4E 40 05 AF             	call	ENDCHK
   1049 0000C542 2C 4C 0C F1             	lw		r1,TXTBGN
   1050 0000C546 74 40 04 D1             	sw		r1,TXTUNF	;	set the end pointer
   1051 0000C54A 4A AF                   	call    clearVars
                                        
   1053 0000C54C                        STOP
   1054 0000C54C 4D 40 0E AF             	call	ENDCHK
   1055 0000C550 EF 4F 03 AE             	br		WSTART		; WSTART will reset the stack
                                        
   1057 0000C554                        RUN
   1058 0000C554 70 40 0A AF             	call	IGNBLK
   1059 0000C558 80 E1                   	lb		r1,[r8]
   1060 0000C55A FB 4F 11 10             	cmp		r1,#'O'
   1061 0000C55E 16 A9                   	bne		RUN1
   1062 0000C560 81 E1                   	lb		r1,1[r8]
   1063 0000C562 FB 4F 12 10             	cmp		r1,#'N'
   1064 0000C566 12 A9                   	bne		RUN1
   1065 0000C568 02 68                   	add		r8,r8,#2
   1066 0000C56A 27 40 0B AF             	call	OREXPR
   1067 0000C56E D4 4F 07 AF             	call	zeroTxBuf
   1068 0000C572 04 40 0E C1             	sb		r1,txBuf+MSG_DST
   1069 0000C576 E4 31                   	tsr		r1,ID
   1070 0000C578 04 40 0C C1             	sb		r1,txBuf+MSG_SRC
   1071 0000C57C 00 40 0C 11             	lw		r1,#MT_RUN_BASIC_PROG
   1072 0000C580 04 40 08 C1             	sb		r1,txBuf+MSG_TYPE
   1073 0000C584 D5 4F 03 AF             	call	Xmit
   1074 0000C588 ED 4F 07 AE             	br		WSTART
   1075 0000C58C                        RUN1
   1076 0000C58C 4B 40 0E AF             	call	ENDCHK
   1077 0000C590 2C 4C 0C F8             	lw		r8,TXTBGN	;	set pointer to beginning
   1078 0000C594 73 40 04 D8             	sw		r8,CURRNT
   1079 0000C598 23 AF                   	call    clearVars
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 19
noc_boot11.a
                                        
   1081 0000C59A                        RUNNXL					; RUN <next line>
   1082 0000C59A 73 40 04 F1             	lw		r1,CURRNT	; executing a program?
   1083 0000C59E EC 4F 0C A8             	beq		WSTART		; if not, we've finished a direct stat.
   1084 0000C5A2 00 11                   	lw		r1,#0	    ; else find the next line number
   1085 0000C5A4 80 19                   	lw		r9,r8
   1086 0000C5A6 52 40 0C AF             	call	FNDLNP		; search for the next line
   1087 0000C5AA EC 4F 06 A7             	bgtu	WSTART		; if we've fallen off the end, stop
                                        
   1089 0000C5AE                        RUNTSL					; RUN <this line>
   1090 0000C5AE 73 40 04 D9             	sw		r9,CURRNT	; set CURRNT to point to the line no.
   1091 0000C5B2 92 18                   	lea		r8,2[r9]	; set the text pointer to
                                        
   1093 0000C5B4                        RUNSML                  ; RUN <same line>
   1094 0000C5B4 71 40 00 AF             	call	CHKIO		; see if a control-C was pressed
   1095 0000C5B8 41 4C 00 19             	lea		r9,TAB2		; find command in TAB2
   1096 0000C5BC 49 4C 06 1A             	lea		r10,TAB2_1
   1097 0000C5C0 97 BE                   	br		EXEC		; and execute it
                                        
   1099 0000C5C2                        GOTO
   1100 0000C5C2 24 40 0F AF             	call	OREXPR		;evaluate the following expression
   1101 0000C5C6 10 15                   	lw      r5,r1
   1102 0000C5C8 4A 40 00 AF             	call	ENDCHK		;must find end of line
   1103 0000C5CC 50 11                   	lw      r1,r5
   1104 0000C5CE 51 40 00 AF             	call	FNDLN		; find the target line
   1105 0000C5D2 ED B8                   	beq		RUNTSL		; go do it
   1106 0000C5D4 67 4D 0D 11             	lea		r1,msgBadGotoGosub
   1107 0000C5D8 4A 40 0E AE             	br		ERROR		; no such line no.
                                        
                                        
   1110 0000C5DC                        _clr
   1111 0000C5DC 01 AF                       call    clearVars
   1112 0000C5DE 58 AE                       br      FINISH
                                        
                                        ; Clear the variable area of memory
   1115 0000C5E0                        clearVars
   1116 0000C5E0 FC 6E                       sub     sp,sp,#4
   1117 0000C5E2 E0 DF                       sw      lr,[sp]
   1118 0000C5E4 E2 D6                       sw      r6,2[sp]
   1119 0000C5E6 10 40 00 16                 lw      r6,#256		; number of words to clear
   1120 0000C5EA 74 40 06 F1                 lw      r1,VARBGN
   1121 0000C5EE                        cv1
   1122 0000C5EE 10 D0                       sw      r0,[r1]
   1123 0000C5F0 02 61                       add     r1,r1,#2
   1124 0000C5F2 FF 66                       sub		r6,r6,#1
   1125 0000C5F4 FC B9                       bne     cv1
   1126 0000C5F6 E0 FF                       lw      lr,[sp]
   1127 0000C5F8 E2 F6                       lw      r6,2[sp]
   1128 0000C5FA 04 6E                       add     sp,sp,#4
   1129 0000C5FC F0 80                       ret    
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; LIST
                                        ;
                                        ; LISTX has two forms:
                                        ; 'LIST<CR>' lists all saved lines
                                        ; 'LIST #<CR>' starts listing at the line #
                                        ; Control-S pauses the listing, control-C stops it.
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 20
noc_boot11.a
                                        ;
                                        
   1142 0000C5FE                        LISTX
   1143 0000C5FE 64 40 03 AF             	call	TSTNUM		; see if there's a line no.
   1144 0000C602 10 15                   	lw      r5,r1
   1145 0000C604 48 40 02 AF             	call	ENDCHK		; if not, we get a zero
   1146 0000C608 50 11                   	lw      r1,r5
   1147 0000C60A 4F 40 02 AF             	call	FNDLN		; find this or next line
   1148 0000C60E                        LS1
   1149 0000C60E E9 4F 04 A7             	bgtu	WSTART		; warm start if we passed the end
                                        
   1151 0000C612 90 11                   	lw		r1,r9
   1152 0000C614 60 40 05 AF             	call	PRTLN		; print the line
   1153 0000C618 10 19                   	lw		r9,r1		; set pointer for next
   1154 0000C61A 6D 40 0D AF             	call	CHKIO		; check for listing halt request
   1155 0000C61E 06 A8                   	beq		LS3
   1156 0000C620 FE 4F 1D 10             	cmp		r1,#CTRLS	; pause the listing?
   1157 0000C624 03 A9                   	bne		LS3
   1158 0000C626                        LS2
   1159 0000C626 6D 40 07 AF             	call	CHKIO		; if so, wait for another keypress
   1160 0000C62A FD B8                   	beq		LS2
   1161 0000C62C                        LS3
   1162 0000C62C 00 11                   	lw		r1,#0
   1163 0000C62E 4E 40 08 AF             	call	FNDLNP		; find the next line
   1164 0000C632 ED BE                   	br		LS1
                                        
                                        
                                        ;******************************************************************
                                        ; PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                                        ; where '....' is a list of expressions, formats, back-arrows,
                                        ; and strings.	These items a separated by commas.
                                        ;
                                        ; A format is a pound sign followed by a number.  It controls
                                        ; the number of spaces the value of an expression is going to
                                        ; be printed in.  It stays effective for the rest of the print
                                        ; command unless changed by another format.  If no format is
                                        ; specified, 11 positions will be used.
                                        ;
                                        ; A string is quoted in a pair of single- or double-quotes.
                                        ;
                                        ; An underline (back-arrow) means generate a <CR> without a <LF>
                                        ;
                                        ; A <CR LF> is generated after the entire list has been printed
                                        ; or if the list is empty.  If the list ends with a semicolon,
                                        ; however, no <CR LF> is generated.
                                        ;
                                        
   1187 0000C634                        PRINT
   1188 0000C634 0B 15                   	lw		r5,#11		; D4 = number of print spaces
   1189 0000C636 61 40 02 AF             	call	TSTC		; if null list and ":"
   1190 0000C63A 3A 08                   	db	':',PR2-*+1
   1191 0000C63C 6D 40 0C AF             	call	CRLF		; give CR-LF and continue
   1192 0000C640 B9 BE                   	br		RUNSML		;		execution on the same line
   1193 0000C642                        PR2
   1194 0000C642 60 40 0C AF             	call	TSTC		;if null list and <CR>
   1195 0000C646 0D 08                   	db	CR,PR0-*+1
   1196 0000C648 6D 40 06 AF             	call	CRLF		;also give CR-LF and
   1197 0000C64C A6 BE                   	br		RUNNXL		;execute the next line
   1198 0000C64E                        PR0
   1199 0000C64E 60 40 06 AF             	call	TSTC		;else is it a format?
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 21
noc_boot11.a
   1200 0000C652 23 0A                   	db	'#',PR1-*+1
   1201 0000C654 20 40 06 AF             	call	OREXPR		; yes, evaluate expression
   1202 0000C658 10 15                   	lw		r5,r1		; and save it as print width
   1203 0000C65A 0B AE                   	br		PR3		; look for more to print
   1204 0000C65C                        PR1
   1205 0000C65C 5F 40 0F AF             	call	TSTC	;	is character expression? (MRL)
   1206 0000C660 24 0C                   	db	'$',PR4-*+1
   1207 0000C662 1F 40 0F AF             	call	OREXPR	;	yep. Evaluate expression (MRL)
   1208 0000C666 E2 4F 07 AF             	call	GOOUT	;	print low byte (MRL)
   1209 0000C66A 03 AE                   	br		PR3		;look for more. (MRL)
   1210 0000C66C                        PR4
   1211 0000C66C 53 40 0D AF             	call	QTSTG	;	is it a string?
                                        	; the following branch must occupy only two bytes!
   1213 0000C670 09 AE                   	br		PR8		;	if not, must be an expression
   1214 0000C672                        PR3
   1215 0000C672 5F 40 04 AF             	call	TSTC	;	if ",", go find next
   1216 0000C676 2C 08                   	db	',',PR6-*+1
   1217 0000C678 43 40 06 AF             	call	FIN		;in the list.
   1218 0000C67C E8 BE                   	br		PR0
   1219 0000C67E                        PR6
   1220 0000C67E 6B 40 0B AF             	call	CRLF		;list ends here
   1221 0000C682 06 AE                   	br		FINISH
   1222 0000C684                        PR8
   1223 0000C684 1E 40 0E AF             	call	OREXPR		; evaluate the expression
   1224 0000C688 50 12                   	lw		r2,r5		; set the width
   1225 0000C68A 55 40 0A AF             	call	PRTNUM		; print its value
   1226 0000C68E F1 BE                   	br		PR3			; more to print?
                                        
   1228 0000C690                        FINISH
   1229 0000C690 42 40 0A AF             	call	FIN		; Check end of command
   1230 0000C694 44 40 0E AE             	jmp		QWHAT	; print "What?" if wrong
                                        
                                        
                                        ;*******************************************************************
                                        ;
                                        ; *** GOSUB *** & RETURN ***
                                        ;
                                        ; 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                                        ; except that the current text pointer, stack pointer, etc. are
                                        ; saved so that execution can be continued after the subroutine
                                        ; 'RETURN's.  In order that 'GOSUB' can be nested (and even
                                        ; recursive), the save area must be stacked.  The stack pointer
                                        ; is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                                        ; If we are in the main routine, 'STKGOS' is zero (this was done
                                        ; in the initialization section of the interpreter), but we still
                                        ; save it as a flag for no further 'RETURN's.
                                        ;
   1247 0000C698                        GOSUB
   1248 0000C698 4F 40 01 AF             	call	PUSHA		; save the current 'FOR' parameters
   1249 0000C69C 1E 40 02 AF             	call	OREXPR		; get line number
   1250 0000C6A0 4A 40 07 AF             	call	FNDLN		; find the target line
   1251 0000C6A4 04 A8                   	beq		gosub1
   1252 0000C6A6 67 4D 0D 11             	lea		r1,msgBadGotoGosub
   1253 0000C6AA 44 40 05 AE             	br		ERROR		; if not there, say "How?"
   1254 0000C6AE                        gosub1
   1255 0000C6AE FA 6E                   	sub		sp,sp,#6
   1256 0000C6B0 E0 D8                   	sw		r8,[sp]		; save text pointer
   1257 0000C6B2 73 40 04 F1             	lw		r1,CURRNT
   1258 0000C6B6 E2 D1                   	sw		r1,2[sp]	; found it, save old 'CURRNT'...
   1259 0000C6B8 73 40 06 F1             	lw		r1,STKGOS
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 22
noc_boot11.a
   1260 0000C6BC E4 D1                   	sw		r1,4[sp]	; and 'STKGOS'
   1261 0000C6BE 73 40 0A D0             	sw		r0,LOPVAR	; load new values
   1262 0000C6C2 73 40 06 DE             	sw		sp,STKGOS
   1263 0000C6C6 73 BE                   	br		RUNTSL
                                        
                                        
                                        ; 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                                        ; returns the execution to the command after the most recent
                                        ; 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                                        ; a 'GOSUB' and is thus an error.
                                        ;
   1271 0000C6C8                        RETURN
   1272 0000C6C8 42 40 00 AF             	call	ENDCHK		; there should be just a <CR>
   1273 0000C6CC 73 40 06 F1             	lw		r1,STKGOS	; get old stack pointer
   1274 0000C6D0 04 A9                   	bne		return1
   1275 0000C6D2 69 4D 0A 11             	lea		r1,msgRetWoGosub
   1276 0000C6D6 42 40 0F AE             	br		ERROR		; if zero, it doesn't exist
   1277 0000C6DA                        return1
   1278 0000C6DA 10 1E                   	lw		sp,r1		; else restore it
   1279 0000C6DC E4 F1                   	lw		r1,4[sp]
   1280 0000C6DE 73 40 06 D1             	sw		r1,STKGOS	; and the old 'STKGOS'
   1281 0000C6E2 E2 F1                   	lw		r1,2[sp]
   1282 0000C6E4 73 40 04 D1             	sw		r1,CURRNT	; and the old 'CURRNT'
   1283 0000C6E8 E0 F8                   	lw		r8,[sp]		; and the old text pointer
   1284 0000C6EA 06 6E                   	add		sp,sp,#6
   1285 0000C6EC 4B 40 03 AF             	call	POPA		;and the old 'FOR' parameters
   1286 0000C6F0 CF BE                   	br		FINISH		;and we are back home
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** FOR *** & NEXT ***
                                        ;
                                        ; 'FOR' has two forms:
                                        ; 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                                        ; The second form means the same thing as the first form with a
                                        ; STEP of positive 1.  The interpreter will find the variable 'var'
                                        ; and set its value to the current value of 'exp1'.  It also
                                        ; evaluates 'exp2' and 'exp1' and saves all these together with
                                        ; the text pointer, etc. in the 'FOR' save area, which consisits of
                                        ; 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                                        ; already something in the save area (indicated by a non-zero
                                        ; 'LOPVAR'), then the old save area is saved on the stack before
                                        ; the new values are stored.  The interpreter will then dig in the
                                        ; stack and find out if this same variable was used in another
                                        ; currently active 'FOR' loop.  If that is the case, then the old
                                        ; 'FOR' loop is deactivated. (i.e. purged from the stack)
                                        ;
   1308 0000C6F2                        FOR
   1309 0000C6F2 4C 40 04 AF             	call	PUSHA		; save the old 'FOR' save area
   1310 0000C6F6 3E 40 01 AF             	call	SETVAL		; set the control variable
   1311 0000C6FA 73 40 0A D1             	sw		r1,LOPVAR	; save its address
   1312 0000C6FE 47 4C 00 19             	lea		r9,TAB5		; use 'EXEC' to test for 'TO'
   1313 0000C702 4C 4C 0A 1A             	lea		r10,TAB5_1
   1314 0000C706 EF 4F 03 AE             	jmp		EXEC
   1315 0000C70A                        FR1
   1316 0000C70A 1A 40 0B AF             	call	OREXPR		; evaluate the limit
   1317 0000C70E 73 40 0E D1             	sw		r1,LOPLMT	; save that
   1318 0000C712 47 4C 03 19             	lea		r9,TAB6		; use 'EXEC' to look for the
   1319 0000C716 4C 4C 0E 1A             	lea		r10,TAB6_1	; word 'STEP'
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 23
noc_boot11.a
   1320 0000C71A EE 4F 09 AE             	jmp		EXEC
   1321 0000C71E                        FR2
   1322 0000C71E 1A 40 01 AF             	call	OREXPR		; found it, get the step value
   1323 0000C722 01 AE                   	br		FR4
   1324 0000C724                        FR3
   1325 0000C724 01 11                   	lw		r1,#1		; not found, step defaults to 1
   1326 0000C726                        FR4
   1327 0000C726 73 40 0C D1             	sw		r1,LOPINC	; save that too
                                        
   1329 0000C72A                        FR5
   1330 0000C72A 73 40 04 F2             	lw		r2,CURRNT
   1331 0000C72E 74 40 00 D2             	sw		r2,LOPLN	; save address of current line number
   1332 0000C732 74 40 02 D8             	sw		r8,LOPPT	; and text pointer
                                        
                                        
   1335 0000C736 E0 13                   	lw		r3,sp		; dig into the stack to find 'LOPVAR'
   1336 0000C738 73 40 0A F6             	lw		r6,LOPVAR
   1337 0000C73C 01 AE                   	br		FR7
   1338 0000C73E                        FR6
   1339 0000C73E 3A 13                   	lea		r3,10[r3]	; look at next stack frame
   1340 0000C740                        FR7
   1341 0000C740 30 F2                   	lw		r2,[r3]		; is it zero?
   1342 0000C742 08 A8                   	beq		FR8			; if so, we're done
   1343 0000C744 6D 22                   	cmp		r2,r6		; same as current LOPVAR?
   1344 0000C746 FB B9                   	bne		FR6			; nope, look some more
                                        
   1346 0000C748 30 11                       lw      r1,r3       ; Else remove 5 words from...
   1347 0000C74A 3A 12                   	lea		r2,10[r3]   ; inside the stack.
   1348 0000C74C E0 13                   	lw		r3,sp		
   1349 0000C74E 47 40 0F AF             	call	MVDOWN
   1350 0000C752 0A 6E                   	add		sp,sp,#10	; set the SP 5 words up
   1351 0000C754                        FR8
   1352 0000C754 9D BE                       br	    FINISH		; and continue execution
                                        
                                        
                                        ; 'NEXT var' serves as the logical (not necessarily physical) end
                                        ; of the 'FOR' loop.  The control variable 'var' is checked with
                                        ; the 'LOPVAR'.  If they are not the same, the interpreter digs in
                                        ; the stack to find the right one and purges all those that didn't
                                        ; match.  Either way, it then adds the 'STEP' to that variable and
                                        ; checks the result with against the limit value.  If it is within
                                        ; the limit, control loops back to the command following the
                                        ; 'FOR'.  If it's outside the limit, the save area is purged and
                                        ; execution continues.
                                        ;
   1365 0000C756                        NEXT
   1366 0000C756 00 11                   	lw		r1,#0		; don't allocate it
   1367 0000C758 26 40 08 AF             	call	TSTV		; get address of variable
   1368 0000C75C 04 A9                   	bne		NX4
   1369 0000C75E 65 4D 09 11             	lea		r1,msgNextVar
   1370 0000C762 3E 40 09 AE             	br		ERROR		; if no variable, say "What?"
   1371 0000C766                        NX4
   1372 0000C766 10 19                   	lw		r9,r1		; save variable's address
   1373 0000C768                        NX0
   1374 0000C768 73 40 0A F1             	lw		r1,LOPVAR	; If 'LOPVAR' is zero, we never...
   1375 0000C76C 04 A9                   	bne		NX5         ; had a FOR loop
   1376 0000C76E 64 4D 06 11             	lea		r1,msgNextFor
   1377 0000C772 3E 40 01 AE             	br		ERROR		
   1378 0000C776                        NX5
   1379 0000C776 9D 21                   	cmp		r1,r9		; else we check them
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 24
noc_boot11.a
   1380 0000C778 03 A8                   	beq		NX2			; OK, they agree
   1381 0000C77A 46 40 0C AF             	call	POPA		; nope, let's see the next frame
   1382 0000C77E F4 BE                   	br		NX0
   1383 0000C780                        NX2
   1384 0000C780 90 F1                   	lw		r1,[r9]		; get control variable's value
   1385 0000C782 73 40 0C F2             	lw		r2,LOPINC
   1386 0000C786 20 21                   	add		r1,r2		; add in loop increment
                                        ;	BVS.L	QHOW		say "How?" for 32-bit overflow
   1388 0000C788 90 D1                   	sw		r1,[r9]		; save control variable's new value
   1389 0000C78A 73 40 0E F3             	lw		r3,LOPLMT	; get loop's limit value
   1390 0000C78E 26 22                   	or		r2,r2       ; check loop increment
   1391 0000C790 03 AB                   	bpl		NX1			; branch if loop increment is positive
   1392 0000C792 3D 21                   	cmp		r1,r3		; test against limit
   1393 0000C794 0A A0                   	blt		NXPurge
   1394 0000C796 02 AE                   	br      NX3
   1395 0000C798                        NX1
   1396 0000C798 3D 21                   	cmp		r1,r3
   1397 0000C79A 07 A3                   	bgt		NXPurge
   1398 0000C79C                        NX3	
   1399 0000C79C 74 40 00 F8             	lw		r8,LOPLN	; Within limit, go back to the...
   1400 0000C7A0 73 40 04 D8             	sw		r8,CURRNT
   1401 0000C7A4 74 40 02 F8             	lw		r8,LOPPT	; saved 'CURRNT' and text pointer.
   1402 0000C7A8 73 BE                   	br		FINISH
                                        
   1404 0000C7AA                        NXPurge
   1405 0000C7AA 45 40 04 AF                 call    POPA        ; purge this loop
   1406 0000C7AE 70 BE                       br      FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                                        ;
                                        ; 'REM' can be followed by anything and is ignored by the
                                        ; interpreter.
                                        ;
                                        ;REM
                                        ;    br	    IF2		    ; skip the rest of the line
                                        
                                        ; 'IF' is followed by an expression, as a condition and one or
                                        ; more commands (including other 'IF's) separated by colons.
                                        ; Note that the word 'THEN' is not used.  The interpreter evaluates
                                        ; the expression.  If it is non-zero, execution continues.  If it
                                        ; is zero, the commands that follow are ignored and execution
                                        ; continues on the next line.
                                        ;
   1426 0000C7B0                        IF
   1427 0000C7B0 15 40 08 AF                 call	OREXPR		; evaluate the expression
   1428 0000C7B4                        IF1
   1429 0000C7B4 16 21                       or      r1,r1       ; is it zero?
   1430 0000C7B6 EF 4F 0D A9                 bne	    RUNSML		; if not, continue
   1431 0000C7BA                        IF2
   1432 0000C7BA 80 19                       lw		r9,r8		; set lookup pointer
   1433 0000C7BC 00 11                   	lw		r1,#0		; find line #0 (impossible)
   1434 0000C7BE 43 40 06 AF             	call	FNDSKP		; if so, skip the rest of the line
   1435 0000C7C2 DB 4F 0A A7             	bgtu	WSTART		; if no next line, do a warm start
   1436 0000C7C6                        IF3
   1437 0000C7C6 EF 4F 02 AE             	br		RUNTSL		; run the next line
                                        
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 25
noc_boot11.a
                                        ; INPUT is called first and establishes a stack frame
   1441 0000C7CA                        INPERR
   1442 0000C7CA 73 40 08 FE             	lw		sp,STKINP	; restore the old stack pointer
   1443 0000C7CE E4 F8                   	lw		r8,4[sp]
   1444 0000C7D0 73 40 04 D8             	sw		r8,CURRNT	; and old 'CURRNT'
   1445 0000C7D4 E2 F8                   	lw		r8,2[sp]	; and old text pointer
   1446 0000C7D6 0A 6E                   	add		sp,sp,#10	; fall through will subtract 10
                                        
                                        ; 'INPUT' is like the 'PRINT' command, and is followed by a list
                                        ; of items.  If the item is a string in single or double quotes,
                                        ; or is an underline (back arrow), it has the same effect as in
                                        ; 'PRINT'.  If an item is a variable, this variable name is
                                        ; printed out followed by a colon, then the interpreter waits for
                                        ; an expression to be typed in.  The variable is then set to the
                                        ; value of this expression.  If the variable is preceeded by a
                                        ; string (again in single or double quotes), the string will be
                                        ; displayed followed by a colon.  The interpreter the waits for an
                                        ; expression to be entered and sets the variable equal to the
                                        ; expression's value.  If the input expression is invalid, the
                                        ; interpreter will print "What?", "How?", or "Sorry" and reprint
                                        ; the prompt and redo the input.  The execution will not terminate
                                        ; unless you press control-C.  This is handled in 'INPERR'.
                                        ;
   1463 0000C7D8                        INPUT
   1464 0000C7D8 F6 6E                   	sub		sp,sp,#10	; allocate stack frame
   1465 0000C7DA E8 D5                   	sw      r5,8[sp]
   1466 0000C7DC                        IP6
   1467 0000C7DC E0 D8                   	sw		r8,[sp]		; save in case of error
   1468 0000C7DE 48 40 04 AF             	call	QTSTG		; is next item a string?
   1469 0000C7E2 06 AE                   	br		IP2			; nope - this branch must take only two bytes
   1470 0000C7E4 01 11                   	lw		r1,#1		; allocate var
   1471 0000C7E6 22 40 01 AF             	call	TSTV		; yes, but is it followed by a variable?
   1472 0000C7EA 2A A8                   	beq     IP4		    ; if not, brnch
   1473 0000C7EC 10 1A                   	lw		r10,r1		; put away the variable's address
   1474 0000C7EE 10 AE                   	br		IP3			; if so, input to variable
   1475 0000C7F0                        IP2
   1476 0000C7F0 E2 D8                   	sw		r8,2[sp]	; save for 'PRTSTG'
   1477 0000C7F2 01 11                   	lw		r1,#1
   1478 0000C7F4 21 40 0A AF             	call	TSTV		; must be a variable now
   1479 0000C7F8 04 A9                   	bne		IP7
   1480 0000C7FA 62 4D 09 11             	lea		r1,msgInputVar
   1481 0000C7FE 39 40 0B AE             	br		ERROR		; "What?" it isn't?
   1482 0000C802                        IP7
   1483 0000C802 10 1A                   	lw		r10,r1		; put away the variable's address
   1484 0000C804 80 E5                   	lb		r5,[r8]		; get ready for 'PRTSTG' by null terminating
   1485 0000C806 80 C0                   	sb		r0,[r8]
   1486 0000C808 E2 F1                   	lw		r1,2[sp]	; get back text pointer
   1487 0000C80A 45 40 02 AF             	call	PRTSTG		; print string as prompt
   1488 0000C80E 80 C5                   	sb		r5,[r8]		; un-null terminate
   1489 0000C810                        IP3
   1490 0000C810 E2 D8                   	sw		r8,2[sp]	; save in case of error
   1491 0000C812 73 40 04 F1             	lw		r1,CURRNT
   1492 0000C816 E4 D1                   	sw		r1,4[sp]	; also save 'CURRNT'
   1493 0000C818 0F 11                   	lw		r1,#-1
   1494 0000C81A 73 40 04 D1             	sw		r1,CURRNT	; flag that we are in INPUT
   1495 0000C81E 73 40 08 DE             	sw		sp,STKINP	; save the stack pointer too
   1496 0000C822 E6 DA                   	sw		r10,6[sp]	; save the variable address
   1497 0000C824 03 40 0A 11             	lw		r1,#':'		; print a colon first
   1498 0000C828 3A 40 00 AF             	call	GETLN		; then get an input line
   1499 0000C82C 78 40 02 18             	lea		r8,BUFFER	; point to the buffer
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 26
noc_boot11.a
   1500 0000C830 11 40 08 AF             	call	OREXPR		; evaluate the input
   1501 0000C834 E6 FA                   	lw		r10,6[sp]	; restore the variable address
   1502 0000C836 A0 D1                   	sw		r1,[r10]	; save value in variable
   1503 0000C838 E4 F1                   	lw		r1,4[sp]	; restore old 'CURRNT'
   1504 0000C83A 73 40 04 D1             	sw		r1,CURRNT
   1505 0000C83E E2 F8                   	lw		r8,2[sp]	; and the old text pointer
   1506 0000C840                        IP4
   1507 0000C840 50 40 0D AF             	call	TSTC		; is the next thing a comma?
   1508 0000C844 2C 04                   	db	',',IP5-*+1
   1509 0000C846 CA BE                   	br		IP6			; yes, more items
   1510 0000C848                        IP5
   1511 0000C848 E8 F5                       lw      r5,8[sp]
   1512 0000C84A 0A 6E                   	add		sp,sp,#10	; clean up the stack
   1513 0000C84C 21 BE                   	jmp		FINISH
                                        
                                        
   1516 0000C84E                        DEFLT
   1517 0000C84E 80 E1                       lb      r1,[r8]
   1518 0000C850 FF 4F 13 10                 cmp     r1,#CR      ; empty line is OK
   1519 0000C854 1D B8                   	beq	    FINISH	    ; else it is 'LET'
                                        
                                        
                                        ; 'LET' is followed by a list of items separated by commas.
                                        ; Each item consists of a variable, an equals sign, and an
                                        ; expression.  The interpreter evaluates the expression and sets
                                        ; the variable to that value.  The interpreter will also handle
                                        ; 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                                        ;
   1528 0000C856                        LET
   1529 0000C856 33 40 01 AF                 call	SETVAL		; do the assignment
   1530 0000C85A 50 40 00 AF             	call	TSTC		; check for more 'LET' items
   1531 0000C85E 2C 04                   	db	',',LT1-*+1
   1532 0000C860 FA BE                   	br	    LET
   1533 0000C862                        LT1
   1534 0000C862 16 BE                       br	    FINISH		; until we are finished.
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** LOAD *** & SAVE ***
                                        ;
                                        ; These two commands transfer a program to/from an auxiliary
                                        ; device such as a cassette, another computer, etc.  The program
                                        ; is converted to an easily-stored format: each line starts with
                                        ; a colon, the line no. as 4 hex digits, and the rest of the line.
                                        ; At the end, a line starting with an '@' sign is sent.  This
                                        ; format can be read back with a minimum of processing time by
                                        ; the Butterfly.
                                        ;
   1549 0000C864                        LOAD
   1550 0000C864 2C 4C 0C F8             	lw		r8,TXTBGN	; set pointer to start of prog. area
   1551 0000C868 00 40 0D 11             	lw		r1,#CR		; For a CP/M host, tell it we're ready...
   1552 0000C86C D2 4F 08 AF             	call	GOAUXO		; by sending a CR to finish PIP command.
   1553 0000C870                        LOD1
   1554 0000C870 D2 4F 08 AF             	call	GOAUXI		; look for start of line
   1555 0000C874 FD BA                   	bmi		LOD1
   1556 0000C876 FC 4F 10 10             	cmp		r1,#'@'		; end of program?
   1557 0000C87A 1B A8                   	beq		LODEND
   1558 0000C87C FE 4F 16 10             	cmp     r1,#0x1A    ; or EOF marker
   1559 0000C880 18 A8                   	beq     LODEND
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 27
noc_boot11.a
   1560 0000C882 FC 4F 16 10             	cmp		r1,#':'		; if not, is it start of line?
   1561 0000C886 F4 B9                   	bne		LOD1		; if not, wait for it
   1562 0000C888 18 AF                   	call	GCHAR		; get line number
   1563 0000C88A 80 C1                   	sb		r1,[r8]		; store it
   1564 0000C88C A1 31                   	shr		r1,#1
   1565 0000C88E A1 31                   	shr		r1,#1
   1566 0000C890 A1 31                   	shr		r1,#1
   1567 0000C892 A1 31                   	shr		r1,#1
   1568 0000C894 A1 31                   	shr		r1,#1
   1569 0000C896 A1 31                   	shr		r1,#1
   1570 0000C898 A1 31                   	shr		r1,#1
   1571 0000C89A A1 31                   	shr		r1,#1
   1572 0000C89C 81 C1                   	sb		r1,1[r8]
   1573 0000C89E 02 68                   	add		r8,r8,#2
   1574 0000C8A0                        LOD2
   1575 0000C8A0 D1 4F 00 AF             	call	GOAUXI		; get another text char.
   1576 0000C8A4 FD BA                   	bmi		LOD2
   1577 0000C8A6 80 C1                   	sb		r1,[r8]
   1578 0000C8A8 01 68                   	add		r8,r8,#1	; store it
   1579 0000C8AA FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1580 0000C8AE F8 B9                   	bne		LOD2		; if not, go back for more
   1581 0000C8B0 DF BE                   	br		LOD1		; if so, start a new line
   1582 0000C8B2                        LODEND
   1583 0000C8B2 74 40 04 D8             	sw		r8,TXTUNF	; set end-of program pointer
   1584 0000C8B6 D4 4F 00 AE             	br		WSTART		; back to direct mode
                                        
                                        ; get character from input (16 bit value)
   1587 0000C8BA                        GCHAR
   1588 0000C8BA FA 6E                   	sub		sp,sp,#6
   1589 0000C8BC E0 DF                   	sw		lr,[sp]
   1590 0000C8BE E2 D5                   	sw		r5,2[sp]
   1591 0000C8C0 E4 D6                   	sw		r6,4[sp]
   1592 0000C8C2 04 16                   	lw      r6,#4       ; repeat four times
   1593 0000C8C4 00 15                   	lw		r5,#0
   1594 0000C8C6                        GCHAR1
   1595 0000C8C6 CF 4F 0D AF             	call	GOAUXI		; get a char
   1596 0000C8CA FD BA                   	bmi		GCHAR1
   1597 0000C8CC 0D AF                   	call	asciiToHex
   1598 0000C8CE 81 35                   	shl		r5,#1
   1599 0000C8D0 81 35                   	shl		r5,#1
   1600 0000C8D2 81 35                   	shl		r5,#1
   1601 0000C8D4 81 35                   	shl		r5,#1
   1602 0000C8D6 16 25                   	or		r5,r1
   1603 0000C8D8 FF 66                   	sub		r6,r6,#1
   1604 0000C8DA F5 B9                   	bne     GCHAR1
   1605 0000C8DC 50 11                   	lw		r1,r5
   1606 0000C8DE E0 FF                   	lw		lr,[sp]
   1607 0000C8E0 E2 F5                   	lw		r5,2[sp]
   1608 0000C8E2 E4 F6                   	lw		r6,4[sp]
   1609 0000C8E4 06 6E                   	add     sp,sp,#6
   1610 0000C8E6 F0 80                   	ret
                                        
                                        ; convert an ascii char to hex code
                                        ; input
                                        ;	r2 = char to convert
                                        
   1616 0000C8E8                        asciiToHex
   1617 0000C8E8 FC 4F 17 10             	cmp		r1,#'9'
   1618 0000C8EC 01 A2                   	ble		a2h1		; less than '9'
   1619 0000C8EE F9 61                   	sub		r1,r1,#7	; shift 'A' to '9'+1
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 28
noc_boot11.a
   1620 0000C8F0                        a2h1
   1621 0000C8F0 D0 61                   	sub		r1,r1,#'0'	;
   1622 0000C8F2 00 40 5F 31             	and		r1,#15		; make sure a nybble
   1623 0000C8F6 F0 80                   	ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; SAVE
                                        ; SAVE ON <node number> - copies the code to the specified node
                                        ;----------------------------------------------------------------------------
                                        
   1630 0000C8F8                        SAVE
   1631 0000C8F8 53 40 08 AF             	call	IGNBLK		; ignore blanks
   1632 0000C8FC 80 E1                   	lb		r1,[r8]
   1633 0000C8FE FB 4F 11 10             	cmp		r1,#'O'
   1634 0000C902 04 A9                   	bne		SAVE3
   1635 0000C904 81 E1                   	lb		r1,1[r8]
   1636 0000C906 FB 4F 12 10             	cmp		r1,#'N'
   1637 0000C90A 2D A8                   	beq		SAVEON1
   1638 0000C90C                        SAVE3:
   1639 0000C90C 2C 4C 0C F8             	lw		r8,TXTBGN	;set pointer to start of prog. area
   1640 0000C910 74 40 04 F9             	lw		r9,TXTUNF	;set pointer to end of prog. area
   1641 0000C914                        SAVE1
   1642 0000C914 4D AF                   	call    AUXOCRLF    ; send out a CR & LF (CP/M likes this)
   1643 0000C916 9D 28                   	cmp		r8,r9		; are we finished?
   1644 0000C918 1B A5                   	bgeu	SAVEND
   1645 0000C91A                        SAVE4:
   1646 0000C91A 03 40 0A 11             	lw		r1,#':'		; if not, start a line
   1647 0000C91E CC 4F 0F AF             	call	GOAUXO
   1648 0000C922 80 E1                   	lb		r1,[r8]		; get line number
   1649 0000C924 0E 21                   	zxb		r1
   1650 0000C926 81 E2                   	lb		r2,1[r8]
   1651 0000C928 0E 22                   	zxb		r2
   1652 0000C92A 81 32                   	shl		r2,#1
   1653 0000C92C 81 32                   	shl		r2,#1
   1654 0000C92E 81 32                   	shl		r2,#1
   1655 0000C930 81 32                   	shl		r2,#1
   1656 0000C932 81 32                   	shl		r2,#1
   1657 0000C934 81 32                   	shl		r2,#1
   1658 0000C936 81 32                   	shl		r2,#1
   1659 0000C938 81 32                   	shl		r2,#1
   1660 0000C93A 26 21                   	or		r1,r2
   1661 0000C93C 02 68                   	add		r8,r8,#2
   1662 0000C93E 44 AF                   	call	PWORD       ; output line number as 4-digit hex
   1663 0000C940                        SAVE2
   1664 0000C940 80 E1                   	lb		r1,[r8]		; get a text char.
   1665 0000C942 01 68                   	add		r8,r8,#1
   1666 0000C944 FF 4F 13 10             	cmp		r1,#CR		; is it the end of the line?
   1667 0000C948 E5 B8                   	beq		SAVE1		; if so, send CR & LF and start new line
   1668 0000C94A CB 4F 09 AF             	call	GOAUXO		; send it out
   1669 0000C94E F8 BE                   	br		SAVE2		; go back for more text
   1670 0000C950                        SAVEND
   1671 0000C950 04 40 00 11             	lw		r1,#'@'		; send end-of-program indicator
   1672 0000C954 CB 4F 04 AF             	call	GOAUXO
   1673 0000C958 2B AF                   	call    AUXOCRLF    ; followed by a CR & LF
   1674 0000C95A 01 40 0A 11             	lw		r1,#0x1A	; and a control-Z to end the CP/M file
   1675 0000C95E CA 4F 0F AF             	call	GOAUXO
   1676 0000C962 CE 4F 0A AE             	br		WSTART		; then go do a warm start
                                        
                                        ; Copy program to specified node. Transfers six bytes at a time per
                                        ; network message.
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 29
noc_boot11.a
                                        
   1681 0000C966                        SAVEON1
   1682 0000C966 02 68                   	add		r8,r8,#2
   1683 0000C968 7D AF                   	call	OREXPR		; get core #
   1684 0000C96A 70 40 0B C1             	sb		r1,tgtNode
   1685 0000C96E 58 40 0F AF             	call	TriggerTgtLoad
   1686 0000C972 2C 4C 0C F8             	lw		r8,TXTBGN	;set pointer to start of prog. area
   1687 0000C976 74 40 04 F9             	lw		r9,TXTUNF	;set pointer to end of prog. area
   1688 0000C97A                        SAVEON3:
   1689 0000C97A 9D 28                   	cmp		r8,r9
   1690 0000C97C 17 A5                   	bgeu	SAVEON2
   1691 0000C97E 80 F1                   	lw		r1,[r8]
   1692 0000C980 04 40 00 D1             	sw		r1,txBuf
   1693 0000C984 82 F1                   	lw		r1,2[r8]
   1694 0000C986 04 40 02 D1             	sw		r1,txBuf+2
   1695 0000C98A 84 F1                   	lw		r1,4[r8]
   1696 0000C98C 04 40 04 D1             	sw		r1,txBuf+4
   1697 0000C990 E4 31                   	tsr		r1,ID
   1698 0000C992 04 40 0C C1             	sb		r1,txBuf+MSG_SRC
   1699 0000C996 70 40 0B E1             	lb		r1,tgtNode
   1700 0000C99A 04 40 0E C1             	sb		r1,txBuf+MSG_DST
   1701 0000C99E 0B 11                   	lw		r1,#MT_LOAD_BASIC_CHAR
   1702 0000C9A0 04 40 08 C1             	sb		r1,txBuf+MSG_TYPE
   1703 0000C9A4 B4 4F 03 AF             	call	Xmit
   1704 0000C9A8 06 68                   	add		r8,r8,#6
   1705 0000C9AA E7 BE                   	br		SAVEON3
   1706 0000C9AC                        SAVEON2:
   1707 0000C9AC CC 4F 05 AE             	br		WSTART
                                        
                                        ; output a CR LF sequence to auxillary output
                                        ; Registers Affected
                                        ;   r3 = LF
   1712 0000C9B0                        AUXOCRLF
   1713 0000C9B0 FE 6E                       sub     sp,sp,#2
   1714 0000C9B2 E0 DF                       sw      lr,[sp]
   1715 0000C9B4 00 40 0D 11                 lw      r1,#CR
   1716 0000C9B8 C8 4F 02 AF                 call    GOAUXO
   1717 0000C9BC 0A 11                       lw      r1,#LF
   1718 0000C9BE C7 4F 0F AF                 call    GOAUXO
   1719 0000C9C2 E0 FF                       lw      lr,[sp]
   1720 0000C9C4 02 6E                   	add		sp,sp,#2
   1721 0000C9C6 F0 80                       ret
                                        
                                        
                                        ; output a word in hex format
                                        ; tricky because of the need to reverse the order of the chars
   1726 0000C9C8                        PWORD
   1727 0000C9C8 FC 6E                   	sub		sp,sp,#4
   1728 0000C9CA E0 DF                   	sw		lr,[sp]
   1729 0000C9CC E2 D5                   	sw		r5,2[sp]
   1730 0000C9CE 75 40 03 15             	lea     r5,NUMWKA+3
   1731 0000C9D2 10 14                   	lw		r4,r1		; r4 = value
   1732 0000C9D4                        pword1
   1733 0000C9D4 40 11                       lw      r1,r4       ; r1 = value
   1734 0000C9D6 A1 34                       shr     r4,#1       ; shift over to next nybble
   1735 0000C9D8 A1 34                       shr     r4,#1
   1736 0000C9DA A1 34                       shr     r4,#1
   1737 0000C9DC A1 34                       shr     r4,#1
   1738 0000C9DE 10 AF                       call    toAsciiHex  ; convert LS nybble to ascii hex
   1739 0000C9E0 50 C1                       sb      r1,[r5]     ; save in work area
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 30
noc_boot11.a
   1740 0000C9E2 FF 65                       sub     r5,r5,#1
   1741 0000C9E4 8B 4F 50 10                 cmp     r5,#NUMWKA
   1742 0000C9E8 F5 B5                       bgeu    pword1
   1743 0000C9EA                        pword2
   1744 0000C9EA 01 65                       add     r5,r5,#1
   1745 0000C9EC 50 E1                       lb      r1,[r5]     ; get char to output
   1746 0000C9EE C6 4F 07 AF             	call	GOAUXO		; send it
   1747 0000C9F2 8A 4F 5D 10             	cmp     r5,#NUMWKA+3
   1748 0000C9F6 F9 B4                   	bltu    pword2
                                        
   1750 0000C9F8 E2 F5                   	lw		r5,2[sp]
   1751 0000C9FA E0 FF                   	lw		lr,[sp]
   1752 0000C9FC 04 6E                   	add		sp,sp,#4
   1753 0000C9FE F0 80                   	ret
                                        
                                        
                                        ; convert nybble in r2 to ascii hex char2
                                        ; r2 = character to convert
                                        
   1759 0000CA00                        toAsciiHex
   1760 0000CA00 00 40 5F 31             	and		r1,#15		; make sure it's a nybble
   1761 0000CA04 FF 4F 16 10             	cmp		r1,#10		; > 10 ?
   1762 0000CA08 01 A0                   	blt		tah1
   1763 0000CA0A 07 61                   	add		r1,r1,#7	; bump it up to the letter 'A'
   1764 0000CA0C                        tah1
   1765 0000CA0C 30 61                   	add		r1,r1,#'0'	; bump up to ascii '0'
   1766 0000CA0E F0 80                   	ret
                                        
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** POKE *** & SYSX ***
                                        ;
                                        ; 'POKE expr1,expr2' stores the byte from 'expr2' into the memory
                                        ; address specified by 'expr1'.
                                        ;
                                        ; 'SYSX expr' jumps to the machine language subroutine whose
                                        ; starting address is specified by 'expr'.  The subroutine can use
                                        ; all registers but must leave the stack the way it found it.
                                        ; The subroutine returns to the interpreter by executing an RET.
                                        ;
   1782 0000CA10                        POKE
   1783 0000CA10 FE 6E                   	sub		sp,sp,#2
   1784 0000CA12 28 AF                   	call	OREXPR		; get the memory address
   1785 0000CA14 42 40 03 AF             	call	TSTC		; it must be followed by a comma
   1786 0000CA18 2C 10                   	db	',',PKER-*+1
   1787 0000CA1A E0 D1                   	sw		r1,[sp]	    ; save the address
   1788 0000CA1C 23 AF                   	call	OREXPR		; get the byte to be POKE'd
   1789 0000CA1E E0 F2                   	lw		r2,[sp]	    ; get the address back
   1790 0000CA20 20 C1                   	sb		r1,[r2]		; store the byte in memory
   1791 0000CA22 02 6E                   	add		sp,sp,#2
   1792 0000CA24 E3 4F 04 AE             	br		FINISH
   1793 0000CA28                        PKER
   1794 0000CA28 5C 4D 02 11             	lea		r1,msgComma
   1795 0000CA2C 28 40 04 AE             	br		ERROR		; if no comma, say "What?"
                                        
                                        
   1798 0000CA30                        POKEW
   1799 0000CA30 FE 6E                   	sub		sp,sp,#2
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 31
noc_boot11.a
   1800 0000CA32 18 AF                   	call	OREXPR		; get the memory address
   1801 0000CA34 41 40 03 AF             	call	TSTC		; it must be followed by a comma
   1802 0000CA38 2C F0                   	db	',',PKER-*+1
   1803 0000CA3A E0 D1                   	sw		r1,[sp]	    ; save the address
   1804 0000CA3C 13 AF                   	call	OREXPR		; get the byte to be POKE'd
   1805 0000CA3E E0 F2                   	lw		r2,[sp]	    ; get the address back
   1806 0000CA40 20 D1                   	sw		r1,[r2]		; store the word in memory
   1807 0000CA42 02 6E                   	add		sp,sp,#2
   1808 0000CA44 E2 4F 04 AE             	jmp		FINISH
                                        
                                        
   1811 0000CA48                        SYSX
   1812 0000CA48 FE 6E                   	sub		sp,sp,#2
   1813 0000CA4A 0C AF                   	call	OREXPR		; get the subroutine's address
   1814 0000CA4C 16 20                   	or		r0,r1		; make sure we got a valid address
   1815 0000CA4E 04 A9                   	bne		sysx1
   1816 0000CA50 61 4D 07 11             	lea		r1,msgSYSBad
   1817 0000CA54 27 40 00 AE             	br		ERROR
   1818 0000CA58                        sysx1
   1819 0000CA58 E0 D8                   	sw		r8,[sp]	    ; save the text pointer
   1820 0000CA5A 10 8F                   	call	[r1]		; jump to the subroutine
   1821 0000CA5C E0 F8                   	lw		r8,[sp]	    ; restore the text pointer
   1822 0000CA5E 02 6E                   	add		sp,sp,#2
   1823 0000CA60 E1 4F 06 AE             	br		FINISH
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** EXPR ***
                                        ;
                                        ; 'EXPR' evaluates arithmetical or logical expressions.
                                        ; <OREXPR>::= <ANDEXPR> OR <ANDEXPR> ...
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ; <EXPR>::=<EXPR2>
                                        ;	   <EXPR2><rel.op.><EXPR2>
                                        ; where <rel.op.> is one of the operators in TAB8 and the result
                                        ; of these operations is 1 if true and 0 if false.
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        ; where () are optional and (... are optional repeats.
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
                                        ;	    (<EXPR>)
                                        ; <EXPR> is recursive so that the variable '@' can have an <EXPR>
                                        ; as an index, functions can have an <EXPR> as arguments, and
                                        ; <EXPR4> can be an <EXPR> in parenthesis.
                                        ;
                                        
                                        
                                        ; <OREXPR>::=<ANDEXPR> OR <ANDEXPR> ...
                                        ;
   1851 0000CA64                        OREXPR
   1852 0000CA64 FC 6E                   	sub		sp,sp,#4
   1853 0000CA66 E0 DF                   	sw		lr,[sp]
   1854 0000CA68 0F AF                   	call	ANDEXPR		; get first <ANDEXPR>
   1855 0000CA6A                        XP_OR1
   1856 0000CA6A E2 D1                   	sw		r1,2[sp]	; save <ANDEXPR> value
   1857 0000CA6C 48 4C 06 19             	lea		r9,TAB10		; look up a logical operator
   1858 0000CA70 4E 4C 04 1A             	lea		r10,TAB10_1
   1859 0000CA74 D3 4F 0C AE             	jmp		EXEC		; go do it
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 32
noc_boot11.a
                                        
   1861 0000CA78                        XP_OR
   1862 0000CA78 07 AF                       call    ANDEXPR
   1863 0000CA7A E2 F2                       lw      r2,2[sp]
   1864 0000CA7C 26 21                       or      r1,r2
   1865 0000CA7E F5 BE                       br      XP_OR1
                                        
   1867 0000CA80                        XP_ORX
   1868 0000CA80 E2 F1                   	lw		r1,2[sp]
   1869 0000CA82 E0 FF                       lw      lr,[sp]
   1870 0000CA84 04 6E                       add     sp,sp,#4
   1871 0000CA86 F0 80                       ret
                                        
                                        
                                        ; <ANDEXPR>::=<EXPR> AND <EXPR> ...
                                        ;
   1876 0000CA88                        ANDEXPR
   1877 0000CA88 FC 6E                   	sub		sp,sp,#4
   1878 0000CA8A E0 DF                   	sw		lr,[sp]
   1879 0000CA8C 37 AF                   	call	EXPR		; get first <EXPR>
   1880 0000CA8E                        XP_AND1
   1881 0000CA8E E2 D1                   	sw		r1,2[sp]	; save <EXPR> value
   1882 0000CA90 48 4C 02 19             	lea		r9,TAB9		; look up a logical operator
   1883 0000CA94 4E 4C 00 1A             	lea		r10,TAB9_1
   1884 0000CA98 D2 4F 0A AE             	jmp		EXEC		; go do it
                                        
   1886 0000CA9C                        XP_AND
   1887 0000CA9C 2F AF                       call    EXPR
   1888 0000CA9E E2 F2                       lw      r2,2[sp]
   1889 0000CAA0 25 21                       and     r1,r2
   1890 0000CAA2 F5 BE                       br      XP_AND1
                                        
   1892 0000CAA4                        XP_ANDX
   1893 0000CAA4 E2 F1                   	lw		r1,2[sp]
   1894 0000CAA6 E0 FF                       lw      lr,[sp]
   1895 0000CAA8 04 6E                       add     sp,sp,#4
   1896 0000CAAA F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a digit
                                        ;   Parameters
                                        ;       r2 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if digit, otherwise 0
                                        ;
   1905 0000CAAC                        isDigit
   1906 0000CAAC FD 4F 10 10                 cmp     r1,#'0'
   1907 0000CAB0 05 A0                       blt     isDigitFalse
   1908 0000CAB2 FC 4F 17 10                 cmp     r1,#'9'
   1909 0000CAB6 02 A3                       bgt     isDigitFalse
   1910 0000CAB8 01 11                       lw      r1,#1
   1911 0000CABA F0 80                       ret
   1912 0000CABC                        isDigitFalse
   1913 0000CABC 00 11                       lw      r1,#0
   1914 0000CABE F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphabetic
                                        ;   Parameters
                                        ;       r2 = char to test
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 33
noc_boot11.a
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1923 0000CAC0                        isAlpha
   1924 0000CAC0 FB 4F 1F 10                 cmp     r1,#'A'
   1925 0000CAC4 0B A0                       blt     isAlphaFalse
   1926 0000CAC6 FA 4F 16 10                 cmp     r1,#'Z'
   1927 0000CACA 06 A2                       ble     isAlphaTrue
   1928 0000CACC F9 4F 1F 10                 cmp     r1,#'a'
   1929 0000CAD0 05 A0                       blt     isAlphaFalse
   1930 0000CAD2 F8 4F 16 10                 cmp     r1,#'z'
   1931 0000CAD6 02 A3                       bgt     isAlphaFalse
   1932 0000CAD8                        isAlphaTrue
   1933 0000CAD8 01 11                       lw      r1,#1
   1934 0000CADA F0 80                       ret
   1935 0000CADC                        isAlphaFalse
   1936 0000CADC 00 11                       lw      r1,#0
   1937 0000CADE F0 80                       ret
                                        
                                        
                                        ; Determine if the character is a alphanumeric
                                        ;   Parameters
                                        ;       r1 = char to test
                                        ;   Returns
                                        ;       r1 = 1 if alpha, otherwise 0
                                        ;
   1946 0000CAE0                        isAlnum
   1947 0000CAE0 FE 6E                       sub     sp,sp,#2
   1948 0000CAE2 E0 DF                       sw      lr,[sp]
   1949 0000CAE4 10 12                       lw      r2,r1		; save test char
   1950 0000CAE6 E2 BF                       call    isDigit
   1951 0000CAE8 06 A9                       bne		isDigitx	; if it is a digit
   1952 0000CAEA 20 11                       lw      r1,r2		; get back test char
   1953 0000CAEC E9 BF                       call    isAlpha
   1954 0000CAEE E0 FF                       lw      lr,[sp]
   1955 0000CAF0 02 6E                       add		sp,sp,#2
   1956 0000CAF2 16 21                       or      r1,r1
   1957 0000CAF4 F0 80                       ret
   1958 0000CAF6                        isDigitx
   1959 0000CAF6 E0 FF                       lw      lr,[sp]
   1960 0000CAF8 02 6E                       add     sp,sp,#2	; return Z=0
   1961 0000CAFA F0 80                       ret
                                        
                                        
   1964 0000CAFC                        EXPR
   1965 0000CAFC FC 6E                   	sub		sp,sp,#4
   1966 0000CAFE E0 DF                   	sw		lr,[sp]
   1967 0000CB00 39 AF                   	call	EXPR2
   1968 0000CB02 E2 D1                   	sw		r1,2[sp]	; save <EXPR2> value
   1969 0000CB04 47 4C 08 19             	lea		r9,TAB8		; look up a relational operator
   1970 0000CB08 4D 4C 02 1A             	lea		r10,TAB8_1
   1971 0000CB0C CF 4F 00 AE             	jmp		EXEC		; go do it
                                        
   1973 0000CB10                        XP11
   1974 0000CB10 E2 F1                   	lw		r1,2[sp]
   1975 0000CB12 28 AF                   	call	XP18	; is it ">="?
   1976 0000CB14 1D 22                   	cmp		r2,r1
   1977 0000CB16 1E A1                   	bge		XPRT1	; no, return r2=1
   1978 0000CB18 19 AE                   	br		XPRT0	; else return r2=0
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 34
noc_boot11.a
   1980 0000CB1A                        XP12
   1981 0000CB1A E2 F1                   	lw		r1,2[sp]
   1982 0000CB1C 23 AF                   	call	XP18	; is it "<>"?
   1983 0000CB1E 1D 22                   	cmp		r2,r1
   1984 0000CB20 19 A9                   	bne		XPRT1	; no, return r2=1
   1985 0000CB22 14 AE                   	br		XPRT0	; else return r2=0
                                        
   1987 0000CB24                        XP13
   1988 0000CB24 E2 F1                   	lw		r1,2[sp]
   1989 0000CB26 1E AF                   	call	XP18	; is it ">"?
   1990 0000CB28 1D 22                   	cmp		r2,r1
   1991 0000CB2A 14 A3                   	bgt		XPRT1	; no, return r2=1
   1992 0000CB2C 0F AE                   	br		XPRT0	; else return r2=0
                                        
   1994 0000CB2E                        XP14
   1995 0000CB2E E2 F1                   	lw		r1,2[sp]
   1996 0000CB30 19 AF                   	call	XP18	; is it "<="?
   1997 0000CB32 1D 22                   	cmp		r2,r1
   1998 0000CB34 0F A2                   	ble		XPRT1	; no, return r2=1
   1999 0000CB36 0A AE                   	br		XPRT0	; else return r2=0
                                        
   2001 0000CB38                        XP15
   2002 0000CB38 E2 F1                   	lw		r1,2[sp]
   2003 0000CB3A 14 AF                   	call	XP18	; is it "="?
   2004 0000CB3C 1D 22                   	cmp		r2,r1
   2005 0000CB3E 0A A8                   	beq		XPRT1	; if not, return r2=1
   2006 0000CB40 05 AE                   	br		XPRT0	; else return r2=0
                                        
                                        
   2009 0000CB42                        XP16
   2010 0000CB42 E2 F1                   	lw		r1,2[sp]
   2011 0000CB44 0F AF                   	call	XP18	; is it "<"?
   2012 0000CB46 1D 22                   	cmp		r2,r1
   2013 0000CB48 05 A0                   	blt		XPRT1	; if not, return r2=1
   2014 0000CB4A 00 AE                   	br		XPRT0	; else return r2=0
                                        
   2016 0000CB4C                        XPRT0
   2017 0000CB4C E0 FF                   	lw		lr,[sp]
   2018 0000CB4E 04 6E                   	add		sp,sp,#4
   2019 0000CB50 00 11                   	lw		r1,#0   ; return r1=0 (false)
   2020 0000CB52 F0 80                   	ret
                                        
   2022 0000CB54                        XPRT1
   2023 0000CB54 E0 FF                   	lw		lr,[sp]
   2024 0000CB56 04 6E                   	add		sp,sp,#4
   2025 0000CB58 01 11                   	lw		r1,#1	; return r1=1 (true)
   2026 0000CB5A F0 80                   	ret
                                        
   2028 0000CB5C                        XP17				; it's not a rel. operator
   2029 0000CB5C E2 F1                   	lw		r1,2[sp]	; return r2=<EXPR2>
   2030 0000CB5E E0 FF                   	lw		lr,[sp]
   2031 0000CB60 04 6E                   	add		sp,sp,#4
   2032 0000CB62 F0 80                   	ret
                                        
   2034 0000CB64                        XP18
   2035 0000CB64 FC 6E                   	sub		sp,sp,#4
   2036 0000CB66 E0 DF                   	sw		lr,[sp]
   2037 0000CB68 E2 D1                   	sw		r1,2[sp]
   2038 0000CB6A 04 AF                   	call	EXPR2		; do a second <EXPR2>
   2039 0000CB6C E2 F2                   	lw		r2,2[sp]
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 35
noc_boot11.a
   2040 0000CB6E E0 FF                   	lw		lr,[sp]
   2041 0000CB70 04 6E                   	add		sp,sp,#4
   2042 0000CB72 F0 80                   	ret
                                        
                                        ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                        
   2046 0000CB74                        EXPR2
   2047 0000CB74 FC 6E                   	sub		sp,sp,#4
   2048 0000CB76 E0 DF                   	sw		lr,[sp]
   2049 0000CB78 37 40 01 AF             	call	TSTC		; negative sign?
   2050 0000CB7C 2D 08                   	db	'-',XP21-*+1
   2051 0000CB7E 00 11                   	lw		r1,#0		; yes, fake '0-'
   2052 0000CB80 E2 D1                   	sw		r1,2[sp]
   2053 0000CB82 0F AE                   	br		XP26
   2054 0000CB84                        XP21
   2055 0000CB84 36 40 0B AF             	call	TSTC		; positive sign? ignore it
   2056 0000CB88 2B 02                   	db	'+',XP22-*+1
   2057 0000CB8A                        XP22
   2058 0000CB8A 12 AF                   	call	EXPR3		; first <EXPR3>
   2059 0000CB8C                        XP23
   2060 0000CB8C E2 D1                   	sw		r1,2[sp]	; yes, save the value
   2061 0000CB8E 36 40 06 AF             	call	TSTC		; add?
   2062 0000CB92 2B 0A                   	db	'+',XP25-*+1
   2063 0000CB94 0D AF                   	call	EXPR3		; get the second <EXPR3>
   2064 0000CB96                        XP24
   2065 0000CB96 E2 F2                   	lw		r2,2[sp]
   2066 0000CB98 20 21                   	add		r1,r2		; add it to the first <EXPR3>
                                        ;	BVS.L	QHOW		brnch if there's an overflow
   2068 0000CB9A F8 BE                   	br		XP23		; else go back for more operations
   2069 0000CB9C                        XP25
   2070 0000CB9C 35 40 0F AF             	call	TSTC		; subtract?
   2071 0000CBA0 2D 08                   	db	'-',XP45-*+1
   2072 0000CBA2                        XP26
   2073 0000CBA2 06 AF                   	call	EXPR3		; get second <EXPR3>
   2074 0000CBA4 20 31                   	neg		r1			; change its sign
   2075 0000CBA6 F7 BE                   	br		XP24		; and do an addition
                                        
   2077 0000CBA8                        XP45
   2078 0000CBA8 E2 F1                   	lw		r1,2[sp]
   2079 0000CBAA E0 FF                   	lw		lr,[sp]
   2080 0000CBAC 04 6E                   	add		sp,sp,#4
   2081 0000CBAE F0 80                   	ret
                                        
                                        
                                        ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                        
   2086 0000CBB0                        EXPR3
   2087 0000CBB0 FC 6E                   	sub		sp,sp,#4
   2088 0000CBB2 E0 DF                   	sw		lr,[sp]
   2089 0000CBB4 14 AF                   	call	EXPR4		; get first <EXPR4>
   2090 0000CBB6                        XP31
   2091 0000CBB6 E2 D1                   	sw		r1,2[sp]	; yes, save that first result
   2092 0000CBB8 35 40 01 AF             	call	TSTC		; multiply?
   2093 0000CBBC 2A 0A                   	db	'*',XP34-*+1
   2094 0000CBBE 0F AF                   	call	EXPR4		; get second <EXPR4>
   2095 0000CBC0 E2 F2                   	lw		r2,2[sp]
   2096 0000CBC2 D2 AF                   	call	MULT32		; multiply the two
   2097 0000CBC4 F8 BE                   	br		XP31		 ; then look for more terms
   2098 0000CBC6                        XP34
   2099 0000CBC6 34 40 0A AF             	call	TSTC		; divide?
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 36
noc_boot11.a
   2100 0000CBCA 2F 0C                   	db	'/',XP47-*+1
   2101 0000CBCC 08 AF                   	call	EXPR4		; get second <EXPR4>
   2102 0000CBCE 10 12                   	lw      r2,r1
   2103 0000CBD0 E2 F1                   	lw		r1,2[sp]
   2104 0000CBD2 E7 AF                   	call	DIV32		; do the division
   2105 0000CBD4 F0 BE                   	br		XP31		; go back for any more terms
                                        
   2107 0000CBD6                        XP47
   2108 0000CBD6 E2 F1                   	lw		r1,2[sp]
   2109 0000CBD8 E0 FF                   	lw		lr,[sp]
   2110 0000CBDA 04 6E                   	add		sp,sp,#4
   2111 0000CBDC F0 80                   	ret
                                        
                                        
                                        ; Functions are called through EXPR4
                                        ; <EXPR4>::=<variable>
                                        ;	    <function>
                                        ;	    (<EXPR>)
                                        
   2119 0000CBDE                        EXPR4
   2120 0000CBDE FA 6E                       sub     sp,sp,#6
   2121 0000CBE0 E0 DF                       sw      lr,[sp]
   2122 0000CBE2 45 4C 02 19             	lea		r9,TAB4		; find possible function
   2123 0000CBE6 4B 4C 0A 1A             	lea		r10,TAB4_1
   2124 0000CBEA C8 4F 01 AE             	jmp		EXEC        ; branch to function which does subsequent
                                        	                    ; ret for EXPR4
                                        
   2127 0000CBEE                        XP40                    ; we get here if it wasn't a function
   2128 0000CBEE 00 11                   	lw		r1,#0
   2129 0000CBF0 1D AF                   	call	TSTV		
   2130 0000CBF2 04 A8                   	beq     XP41        ; nor a variable
   2131 0000CBF4 10 F1                   	lw		r1,[r1]		; if a variable, return its value in r1
   2132 0000CBF6 E0 FF                   	lw      lr,[sp]
   2133 0000CBF8 06 6E                   	add     sp,sp,#6
   2134 0000CBFA F0 80                   	ret
   2135 0000CBFC                        XP41
   2136 0000CBFC 34 40 04 AF             	call	TSTNUM		; or is it a number?
   2137 0000CC00 36 23                   	or		r3,r3		; (if not, # of digits will be zero)
   2138 0000CC02 01 A9                   	bne		XP46		; if so, return it in r1
   2139 0000CC04 03 AF                   	call    PARN        ; check for (EXPR)
   2140 0000CC06                        XP46
   2141 0000CC06 E0 FF                   	lw      lr,[sp]
   2142 0000CC08 06 6E                   	add     sp,sp,#6
   2143 0000CC0A F0 80                   	ret
                                        
                                        
                                        ; Check for a parenthesized expression
   2147 0000CC0C                        PARN
   2148 0000CC0C FE 6E                   	sub		sp,sp,#2
   2149 0000CC0E E0 DF                   	sw		lr,[sp]
   2150 0000CC10 32 40 05 AF             	call	TSTC		; else look for ( OREXPR )
   2151 0000CC14 28 10                   	db	'(',XP43-*+1
   2152 0000CC16 26 BF                   	call	OREXPR
   2153 0000CC18 32 40 01 AF             	call	TSTC
   2154 0000CC1C 29 08                   	db	')',XP43-*+1
   2155 0000CC1E                        XP42
   2156 0000CC1E E0 FF                   	lw		lr,[sp]
   2157 0000CC20 02 6E                   	add		sp,sp,#2
   2158 0000CC22 F0 80                   	ret
   2159 0000CC24                        XP43
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 37
noc_boot11.a
   2160 0000CC24 53 4D 0F 11             	lea		r1,msgWhat
   2161 0000CC28 18 40 06 AE             	br		ERROR
                                        
                                        
                                        ; ===== Test for a valid variable name.  Returns Z=1 if not
                                        ;	found, else returns Z=0 and the address of the
                                        ;	variable in r1.
                                        ; Parameters
                                        ;	r1 = 1 = allocate if not found
                                        ; Returns
                                        ;	r1 = address of variable, zero if not found
                                        
   2172 0000CC2C                        TSTV
   2173 0000CC2C FA 6E                   	sub		sp,sp,#6
   2174 0000CC2E E0 DF                   	sw		lr,[sp]
   2175 0000CC30 E2 D5                   	sw		r5,2[sp]
   2176 0000CC32 10 15                   	lw		r5,r1		; allocate flag
   2177 0000CC34 39 40 0A AF             	call	IGNBLK
   2178 0000CC38 80 E1                   	lb		r1,[r8]		; look at the program text
   2179 0000CC3A FC 4F 10 10             	cmp     r1,#'@'
   2180 0000CC3E 1C A0                   	blt     tstv_notfound   ; C=1: not a variable
   2181 0000CC40 12 A9                   	bne		TV1			; brnch if not "@" array
   2182 0000CC42 01 68                   	add		r8,r8,#1	; If it is, it should be
   2183 0000CC44 E3 BF                   	call	PARN		; followed by (EXPR) as its index.
   2184 0000CC46 81 31                   	shl     r1,#1
   2185 0000CC48 81 31                   	shl     r1,#1
                                        ;	BCS.L	QHOW		say "How?" if index is too big
   2187 0000CC4A E4 D1                       sw      r1,4[sp]    ; save the index
   2188 0000CC4C F4 6E                       sub		sp,sp,#12
   2189 0000CC4E E0 DF                       sw		lr,[sp]
   2190 0000CC50 12 40 08 AF             	call	SIZEX		; get amount of free memory
   2191 0000CC54 E4 F2                   	lw      r2,4[sp]    ; get back the index
   2192 0000CC56 1D 22                   	cmp     r2,r1       ; see if there's enough memory
   2193 0000CC58 02 A4                   	bltu	TV2
   2194 0000CC5A 16 40 08 AE             	jmp    	QSORRY		; if not, say "Sorry"
   2195 0000CC5E                        TV2
   2196 0000CC5E 74 40 06 F1             	lw      r1,VARBGN   ; put address of array element...
   2197 0000CC62 22 21                   	sub     r1,r2       ; into r1 (neg. offset is used)
   2198 0000CC64 05 AE                   	br      TSTVRT
   2199 0000CC66                        TV1	
   2200 0000CC66 0D AF                       call    getVarName      ; get variable name
   2201 0000CC68 07 A8                       beq     tstv_notfound   ; if not, set Z=1 and return
   2202 0000CC6A 50 12                       lw		r2,r5
   2203 0000CC6C 58 AF                       call    findVar     ; find or allocate
   2204 0000CC6E 04 A8                       beq		tstv_notfound
   2205 0000CC70                        TSTVRT
   2206 0000CC70 E2 F5                   	lw		r5,2[sp]
   2207 0000CC72 E0 FF                   	lw		lr,[sp]
   2208 0000CC74 06 6E                   	add		sp,sp,#6    ; Z=0 (found)
   2209 0000CC76 F0 80                   	ret
   2210 0000CC78                        tstv_notfound
   2211 0000CC78 E2 F5                   	lw		r5,2[sp]
   2212 0000CC7A E0 FF                       lw      lr,[sp]
   2213 0000CC7C 06 6E                       add     sp,sp,#6
   2214 0000CC7E 00 11                       lw      r1,#0       ; Z=1 if not found
   2215 0000CC80 F0 80                       ret
                                        
                                        
                                        ; Returns
                                        ;   r3,r1 = 3 character variable name + type
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 38
noc_boot11.a
                                        ;
   2221 0000CC82                        getVarName
   2222 0000CC82 F8 6E                       sub     sp,sp,#8
   2223 0000CC84 E0 DF                       sw      lr,[sp]
   2224 0000CC86 E6 D5                       sw		r5,6[sp]
                                        
   2226 0000CC88 80 E1                       lb      r1,[r8]     ; get first character
   2227 0000CC8A E2 D1                       sw		r1,2[sp]	; save off current name
   2228 0000CC8C E4 D3                   	sw		r3,4[sp]
   2229 0000CC8E 18 BF                       call    isAlpha
   2230 0000CC90 41 A8                       beq     gvn1
   2231 0000CC92 02 15                       lw      r5,#2       ; loop twice more
                                        
                                        	; check for second/third character
   2234 0000CC94                        gvn4
   2235 0000CC94 01 68                   	add     r8,r8,#1
   2236 0000CC96 80 E1                   	lb      r1,[r8]     ; do we have another char ?
   2237 0000CC98 23 BF                   	call    isAlnum
   2238 0000CC9A 1B A8                   	beq     gvn2        ; nope
   2239 0000CC9C E2 F1                   	lw      r1,2[sp]    ; get varname
   2240 0000CC9E 81 31                   	shl     r1,#1       ; shift left by eight
   2241 0000CCA0 91 33                   	rol		r3,#1
   2242 0000CCA2 81 31                   	shl     r1,#1       ; shift left by eight
   2243 0000CCA4 91 33                   	rol		r3,#1
   2244 0000CCA6 81 31                   	shl     r1,#1       ; shift left by eight
   2245 0000CCA8 91 33                   	rol		r3,#1
   2246 0000CCAA 81 31                   	shl     r1,#1       ; shift left by eight
   2247 0000CCAC 91 33                   	rol		r3,#1
   2248 0000CCAE 81 31                   	shl     r1,#1       ; shift left by eight
   2249 0000CCB0 91 33                   	rol		r3,#1
   2250 0000CCB2 81 31                   	shl     r1,#1       ; shift left by eight
   2251 0000CCB4 91 33                   	rol		r3,#1
   2252 0000CCB6 81 31                   	shl     r1,#1       ; shift left by eight
   2253 0000CCB8 91 33                   	rol		r3,#1
   2254 0000CCBA 81 31                   	shl     r1,#1       ; shift left by eight
   2255 0000CCBC 91 33                   	rol		r3,#1
   2256 0000CCBE 80 E2                   	lb      r2,[r8]
   2257 0000CCC0 26 21                   	or      r1,r2       ; add in new char
   2258 0000CCC2 E2 D1                       sw      r1,2[sp]   ; save off name again
   2259 0000CCC4 E4 D3                   	sw		r3,4[sp]
   2260 0000CCC6 FF 65                       sub		r5,r5,#1
   2261 0000CCC8 E5 B9                       bne     gvn4
                                        
                                            ; now ignore extra variable name characters
   2264 0000CCCA                        gvn6
   2265 0000CCCA 01 68                       add     r8,r8,#1
   2266 0000CCCC 80 E1                       lb      r1,[r8]
   2267 0000CCCE 08 BF                       call    isAlnum
   2268 0000CCD0 FC B9                       bne     gvn6        ; keep looping as long as we have identifier chars
                                            
   2270 0000CCD2                        gvn2
   2271 0000CCD2 80 E1                   	lb		r1,[r8]
   2272 0000CCD4 FD 4F 1B 10                 cmp     r1,#'%'
   2273 0000CCD8 05 A8                       beq     gvn3
   2274 0000CCDA FD 4F 1C 10                 cmp     r1,#'$'
   2275 0000CCDE 02 A8                       beq     gvn3
   2276 0000CCE0 00 11                       lw      r1,#0
   2277 0000CCE2 FF 68                       sub     r8,r8,#1
                                        
                                            ; insert variable type indicator and return
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 39
noc_boot11.a
   2280 0000CCE4                        gvn3
   2281 0000CCE4 01 68                       add     r8,r8,#1
   2282 0000CCE6 E2 F2                       lw      r2,2[sp]
   2283 0000CCE8 E4 F3                   	lw		r3,4[sp]
   2284 0000CCEA 81 32                       shl     r2,#1
   2285 0000CCEC 91 33                   	rol		r3,#1
   2286 0000CCEE 81 32                       shl     r2,#1
   2287 0000CCF0 91 33                   	rol		r3,#1
   2288 0000CCF2 81 32                       shl     r2,#1
   2289 0000CCF4 91 33                   	rol		r3,#1
   2290 0000CCF6 81 32                       shl     r2,#1
   2291 0000CCF8 91 33                   	rol		r3,#1
   2292 0000CCFA 81 32                       shl     r2,#1
   2293 0000CCFC 91 33                   	rol		r3,#1
   2294 0000CCFE 81 32                       shl     r2,#1
   2295 0000CD00 91 33                   	rol		r3,#1
   2296 0000CD02 81 32                       shl     r2,#1
   2297 0000CD04 91 33                   	rol		r3,#1
   2298 0000CD06 81 32                       shl     r2,#1
   2299 0000CD08 91 33                   	rol		r3,#1
   2300 0000CD0A 26 21                       or      r1,r2       ; add in variable type
   2301 0000CD0C E0 FF                       lw      lr,[sp]
   2302 0000CD0E E4 F5                       lw		r5,4[sp]
   2303 0000CD10 06 6E                       add     sp,sp,#6   ; return Z = 0, r3,r1 = varname
   2304 0000CD12 F0 80                       ret
                                        
                                            ; not a variable name
   2307 0000CD14                        gvn1
   2308 0000CD14 E0 FF                       lw      lr,[sp]
   2309 0000CD16 E6 F5                       lw		r5,6[sp]
   2310 0000CD18 08 6E                       add     sp,sp,#8
   2311 0000CD1A 00 11                       lw      r1,#0       ; return Z = 1 if not a varname
   2312 0000CD1C F0 80                       ret
                                        
                                        
                                        ; Find variable
                                        ;   r3,r1 = varname
                                        ;	r2 = allocate flag
                                        ; Returns
                                        ;   r1 = variable address, Z =0 if found / allocated, Z=1 if not found
                                        
   2321 0000CD1E                        findVar
   2322 0000CD1E FA 6E                       sub     sp,sp,#6
   2323 0000CD20 E0 DF                       sw      lr,[sp]
   2324 0000CD22 E2 D7                       sw      r7,2[sp]
   2325 0000CD24 E4 DC                   	sw		r12,4[sp]
   2326 0000CD26 74 40 06 FC                 lw      r12,VARBGN
   2327 0000CD2A                        fv4
   2328 0000CD2A C0 F7                       lw      r7,[r12]     ; get varname / type
   2329 0000CD2C 0D A8                       beq     fv3         ; no more vars ?
   2330 0000CD2E 7D 23                       cmp     r3,r7       ; match ?
   2331 0000CD30 03 A9                   	bne		fv5
   2332 0000CD32 C2 F7                   	lw		r7,2[r12]
   2333 0000CD34 7D 21                   	cmp		r1,r7
   2334 0000CD36 0C A8                       beq     fv1
   2335 0000CD38                        fv5
   2336 0000CD38 08 6C                       add     r12,r12,#8    ; move to next var
   2337 0000CD3A 74 40 0E F7                 lw      r7,STKBOT
   2338 0000CD3E 7D 2C                       cmp     r12,r7
   2339 0000CD40 F4 B0                       blt     fv4         ; loop back to look at next var
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 40
noc_boot11.a
                                        
                                            ; variable not found
                                            ; no more memory
   2343 0000CD42 59 4D 02 11                 lea     r1,msgVarSpace
   2344 0000CD46 F8 AE                       br      ERROR
                                        ;    lw      lr,[sp]
                                        ;    lw      r7,2[sp]
                                        ;    add     sp,sp,#4
                                        ;    lw      r1,#0
                                        ;    ret
                                        
                                            ; variable not found
                                            ; allocate new ?
   2353 0000CD48                        fv3
   2354 0000CD48 26 22                   	or		r2,r2
   2355 0000CD4A 08 A8                   	beq		fv2
   2356 0000CD4C C0 D3                       sw      r3,[r12]     ; save varname / type
   2357 0000CD4E C2 D1                   	sw		r1,2[r12]
                                            ; found variable
                                            ; return address
   2360 0000CD50                        fv1
   2361 0000CD50 C4 11                       add     r1,r12,#4
   2362 0000CD52 E0 FF                       lw      lr,[sp]
   2363 0000CD54 E2 F7                       lw      r7,2[sp]
   2364 0000CD56 E4 FC                   	lw		r12,4[sp]
   2365 0000CD58 06 6E                       add     sp,sp,#6    ; Z = 0, r1 = address
   2366 0000CD5A F0 80                       ret
                                        
                                            ; didn't find var and not allocating
   2369 0000CD5C                        fv2
   2370 0000CD5C E0 FF                       lw      lr,[sp]
   2371 0000CD5E E2 F7                       lw      r7,2[sp]
   2372 0000CD60 E4 FC                   	lw		r12,4[sp]
   2373 0000CD62 06 6E                       add     sp,sp,#6    ; Z = 0, r1 = address
   2374 0000CD64 00 11                   	lw		r1,#0		; Z = 1, r1 = 0
   2375 0000CD66 F0 80                       ret
                                        
                                        
                                        ; ===== Multiplies the 32 bit values in r1 and r2, returning
                                        ;	the 32 bit result in r1.
                                        ;
                                        
   2382 0000CD68                        MULT32
   2383 0000CD68 FA 6E                   	sub		sp,sp,#6
   2384 0000CD6A E0 D5                   	sw		r5,[sp]		; w
   2385 0000CD6C E2 D6                   	sw		r6,2[sp]	; s
   2386 0000CD6E E4 D7                   	sw		r7,4[sp]
                                        
   2388 0000CD70 00 15                   	lw		r5,#0		; w = 0;
   2389 0000CD72 10 16                   	lw		r6,r1
   2390 0000CD74 24 26                   	xor		r6,r2		; s = a ^ b
   2391 0000CD76 16 21                   	or		r1,r1
   2392 0000CD78 01 AB                   	bpl		mult1
   2393 0000CD7A 20 31                   	neg		r1
   2394 0000CD7C                        mult1
   2395 0000CD7C 26 22                   	or		r2,r2
   2396 0000CD7E 01 AB                   	bpl		mult2
   2397 0000CD80 20 32                   	neg		r2
   2398 0000CD82                        mult2
   2399 0000CD82 10 17                   	lw		r7,r1
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 41
noc_boot11.a
   2400 0000CD84 51 37                   	and		r7,#1
   2401 0000CD86 01 A8                   	beq		mult3
   2402 0000CD88 20 25                   	add		r5,r2		; w += b
   2403 0000CD8A                        mult3
   2404 0000CD8A 81 32                   	shl		r2,#1		; b <<= 1
   2405 0000CD8C A1 31                   	shr		r1,#1		; a >>= 1
   2406 0000CD8E F9 B9                   	bne		mult2       ; a = 0 ?
   2407 0000CD90                        mult4
   2408 0000CD90 66 26                       or      r6,r6
   2409 0000CD92 01 AB                   	bpl		mult5
   2410 0000CD94 20 35                   	neg		r5
   2411 0000CD96                        mult5
   2412 0000CD96 50 11                   	lw		r1,r5
   2413 0000CD98 E4 F7                   	lw		r7,4[sp]
   2414 0000CD9A E2 F6                   	lw		r6,2[sp]
   2415 0000CD9C E0 F5                   	lw		r5,[sp]
   2416 0000CD9E 06 6E                   	add		sp,sp,#6
   2417 0000CDA0 F0 80                   	ret
                                        
                                        
                                        ; ===== Divide the 32 bit value in r2 by the 32 bit value in r3.
                                        ;	Returns the 32 bit quotient in r1, remainder in r2
                                        ;
                                        ; r2 = a
                                        ; r3 = b
                                        ; r6 = remainder
                                        ; r7 = iteration count
                                        ; r8 = sign
                                        ;
                                        
                                        ; q = a / b
                                        ; a = r1
                                        ; b = r2
                                        ; q = r2
                                        
   2435 0000CDA2                        DIV32
   2436 0000CDA2 26 22                       or      r2,r2       ; check for divide-by-zero
   2437 0000CDA4 03 A9                       bne		div6
   2438 0000CDA6 57 4D 0F 11                 lea		r1,msgDivZero
   2439 0000CDAA C6 AE                       br		ERROR		; divide by zero error
   2440 0000CDAC                        div6
   2441 0000CDAC F8 6E                   	sub		sp,sp,#8
   2442 0000CDAE E0 D6                   	sw		r6,[sp]
   2443 0000CDB0 E2 D7                   	sw		r7,2[sp]
   2444 0000CDB2 E4 D8                   	sw		r8,4[sp]
   2445 0000CDB4 E6 D9                   	sw		r9,6[sp]
                                        
   2447 0000CDB6 01 40 00 18                 lw      r8,#16      ; iteration count for 16 bits
   2448 0000CDBA 00 19                   	lw		r9,#0		; q = 0
   2449 0000CDBC 00 16                   	lw		r6,#0		; r = 0
   2450 0000CDBE 20 17                       lw      r7,r2       ; r7 = sign of result
   2451 0000CDC0 14 27                       xor     r7,r1
   2452 0000CDC2 16 21                   	or	    r1,r1	    ; take absolute value of r1 (a)
   2453 0000CDC4 01 AB                   	bpl     div1
   2454 0000CDC6 20 31                   	neg     r1
   2455 0000CDC8                        div1
   2456 0000CDC8 26 22                       or      r2,r2	    ; take absolute value of r2 (b)
   2457 0000CDCA 01 AB                   	bpl	    div2
   2458 0000CDCC 20 32                   	neg     r2
   2459 0000CDCE                        div2
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 42
noc_boot11.a
   2460 0000CDCE 81 39                   	shl		r9,#1		; q <<= 1
   2461 0000CDD0 81 31                   	shl		r1,#1		; a <<= 1
   2462 0000CDD2 61 26                   	adc		r6,r6		; r <<= 1
   2463 0000CDD4 6D 22                   	cmp		r2,r6		; b < r ?
   2464 0000CDD6 02 A7                   	bgtu	div4
   2465 0000CDD8 22 26                   	sub		r6,r2		; r -= b
   2466 0000CDDA 61 39                   	or      r9,#1       ; q |= 1
   2467 0000CDDC                        div4
   2468 0000CDDC FF 68                   	sub		r8,r8,#1
   2469 0000CDDE F7 B9                       bne     div2        ; n--
   2470 0000CDE0 76 27                   	or      r7,r7
   2471 0000CDE2 01 AB                   	bpl     div5
   2472 0000CDE4 20 31                   	neg     r1
   2473 0000CDE6                        div5
   2474 0000CDE6 60 12                   	mov		r2,r6		; r2 = r
   2475 0000CDE8 90 11                   	mov		r1,r9
   2476 0000CDEA E0 F6                   	lw		r6,[sp]
   2477 0000CDEC E2 F7                   	lw		r7,2[sp]
   2478 0000CDEE E4 F8                   	lw		r8,4[sp]
   2479 0000CDF0 E6 F9                   	lw		r9,6[sp]
   2480 0000CDF2 08 6E                   	add		sp,sp,#8
   2481 0000CDF4 F0 80                   	ret
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   2486 0000CDF6                        PEEK
   2487 0000CDF6 0A BF                   	call	PARN		; get the memory address
   2488 0000CDF8 10 E1                   	lb		r1,[r1]		; get the addressed byte
   2489 0000CDFA 0E 21                   	zxb		r1			; upper 3 bytes will be zero
   2490 0000CDFC E0 FF                   	lw		lr,[sp]	; and return it
   2491 0000CDFE 06 6E                   	add		sp,sp,#6
   2492 0000CE00 F0 80                   	ret
                                        
                                        
                                        ; ===== The PEEK function returns the byte stored at the address
                                        ;	contained in the following expression.
                                        ;
   2498 0000CE02                        PEEKW
   2499 0000CE02 04 BF                   	call	PARN		; get the memory address
   2500 0000CE04 5C 31                   	and		r1,#-4		; align to word address
   2501 0000CE06 10 F1                   	lw		r1,[r1]		; get the addressed word
   2502 0000CE08 E0 FF                   	lw		lr,[sp]	; and return it
   2503 0000CE0A 06 6E                   	add		sp,sp,#6
   2504 0000CE0C F0 80                   	ret
                                        
                                        
                                        ; user function call
                                        ; call the user function with argument in r1
   2509 0000CE0E                        USRX
   2510 0000CE0E EF 4F 0D AF             	call	PARN		; get expression value
   2511 0000CE12 E2 D8                   	sw		r8,2[sp]	; save the text pointer
   2512 0000CE14 02 40 04 F2             	lw      r2,usrJmp   ; get usr vector
   2513 0000CE18 20 8F                   	call	[r2]		; jump to the subroutine
   2514 0000CE1A E2 F8                   	lw		r8,2[sp]	; restore the text pointer
   2515 0000CE1C E0 FF                   	lw		lr,[sp]
   2516 0000CE1E 06 6E                   	add		sp,sp,#6
   2517 0000CE20 F0 80                   	ret
                                        
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 43
noc_boot11.a
                                        ; ===== The RND function returns a random number from 1 to
                                        ;	the value of the following expression in D0.
                                        ;
   2523 0000CE22                        RND
   2524 0000CE22 EF 4F 03 AF             	call	PARN		; get the upper limit
   2525 0000CE26 16 21                   	or		r1,r1		; it must be positive and non-zero
   2526 0000CE28 0E A8                   	beq		rnd2
   2527 0000CE2A 0A AA                   	bmi		rnd1
   2528 0000CE2C 10 12                   	lw		r2,r1
   2529 0000CE2E CA 4D 04 D0             	sw		r0,RAND+4	; read command
   2530 0000CE32 CA 4D 00 F1             	lw		r1,RAND		; get a number
   2531 0000CE36 0E AF                   	call	modu4		; RND(n)=MOD(number,n)+1
   2532 0000CE38 01 61                   	add		r1,r1,#1
   2533 0000CE3A E0 FF                   	lw		lr,[sp]
   2534 0000CE3C 06 6E                   	add		sp,sp,#6
   2535 0000CE3E F0 80                   	ret
   2536 0000CE40                        rnd1
   2537 0000CE40 60 4D 03 11             	lea		r1,msgRNDBad
   2538 0000CE44 79 AE                   	br		ERROR
   2539 0000CE46                        rnd2
   2540 0000CE46 CA 4D 04 D0             	sw		r0,RAND+4
   2541 0000CE4A CA 4D 00 F1             	lw		r1,RAND
   2542 0000CE4E E0 FF                   	lw		lr,[sp]
   2543 0000CE50 06 6E                   	add		sp,sp,#6
   2544 0000CE52 F0 80                   	ret
                                        
                                        
                                        ; r = a mod b
                                        ; a = r2
                                        ; b = r3
                                        ; r = r1
   2551 0000CE54                        modu4
   2552 0000CE54 FA 6E                   	sub		sp,sp,#6
   2553 0000CE56 E0 D5                   	sw		r5,[sp]
   2554 0000CE58 E2 D6                   	sw		r6,2[sp]
   2555 0000CE5A E4 D7                   	sw		r7,4[sp]
   2556 0000CE5C 01 40 00 17             	lw      r7,#16		; n = 32
   2557 0000CE60 00 15                   	lw		r5,#0		; w = 0
   2558 0000CE62 00 16                   	lw		r6,#0		; r = 0
   2559 0000CE64                        mod2
   2560 0000CE64 81 31                   	shl		r1,#1		; a <<= 1
   2561 0000CE66 61 26                   	adc		r6,r6		; r <<= 1
   2562 0000CE68 6D 22                   	cmp		r2,r6		; b < r ?
   2563 0000CE6A 01 A7                   	bgtu	mod1
   2564 0000CE6C 22 26                   	sub		r6,r2		; r -= b
   2565 0000CE6E                        mod1
   2566 0000CE6E FF 67                   	sub		r7,r7,#1
   2567 0000CE70 F9 B9                       bne     mod2        ; n--
   2568 0000CE72 60 11                   	lw		r1,r6
   2569 0000CE74 E0 F5                   	lw		r5,[sp]
   2570 0000CE76 E2 F6                   	lw		r6,2[sp]
   2571 0000CE78 E4 F7                   	lw		r7,4[sp]
   2572 0000CE7A 06 6E                   	add		sp,sp,#6
   2573 0000CE7C F0 80                   	ret
                                        
                                        
                                        
                                        ; ===== The ABS function returns an absolute value in r2.
                                        ;
   2579 0000CE7E                        ABS
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 44
noc_boot11.a
   2580 0000CE7E EC 4F 05 AF             	call	PARN		; get the following expr.'s value
   2581 0000CE82 16 21                   	or		r1,r1
   2582 0000CE84 01 AB                   	bpl		abs1
   2583 0000CE86 20 31                   	neg		r1			; if negative, complement it
                                        ;	bmi		QHOW		; if still negative, it was too big
   2585 0000CE88                        abs1
   2586 0000CE88 E0 FF                   	lw		lr,[sp]
   2587 0000CE8A 06 6E                   	add		sp,sp,#6
   2588 0000CE8C F0 80                   	ret
                                        
                                        
                                        ; ===== The SGN function returns the sign in r1. +1,0, or -1
                                        ;
   2593 0000CE8E                        SGN
   2594 0000CE8E EB 4F 0D AF             	call	PARN		; get the following expr.'s value
   2595 0000CE92 16 21                   	or		r1,r1
   2596 0000CE94 04 A8                   	beq		sgn1
   2597 0000CE96 02 AB                   	bpl		sgn2
   2598 0000CE98 0F 11                   	lw		r1,#-1
   2599 0000CE9A 01 AE                   	br		sgn1
   2600 0000CE9C                        sgn2
   2601 0000CE9C 01 11                   	lw		r1,#1
   2602 0000CE9E                        sgn1
   2603 0000CE9E E0 FF                   	lw		lr,[sp]
   2604 0000CEA0 06 6E                   	add		sp,sp,#6
   2605 0000CEA2 F0 80                   	ret
                                        
                                        
                                        ; ===== The SIZE function returns the size of free memory in r1.
                                        ;
   2610 0000CEA4                        SIZEX
   2611 0000CEA4 74 40 06 F1             	lw		r1,VARBGN	; get the number of free bytes...
   2612 0000CEA8 74 40 04 F2             	lw		r2,TXTUNF	; between 'TXTUNF' and 'VARBGN'
   2613 0000CEAC 22 21                   	sub		r1,r2
   2614 0000CEAE E0 FF                   	lw		lr,[sp]
   2615 0000CEB0 06 6E                   	add		sp,sp,#6
   2616 0000CEB2 F0 80                   	ret					; return the number in r2
                                        
                                        ; ==== Return the node number that the code is running on
                                        ;
   2620 0000CEB4                        NODENUM
   2621 0000CEB4 E4 31                   	tsr		r1,ID
   2622 0000CEB6 E0 FF                   	lw		lr,[sp]
   2623 0000CEB8 06 6E                   	add		sp,sp,#6
   2624 0000CEBA F0 80                   	ret
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                                        ;
                                        ; 'SETVAL' expects a variable, followed by an equal sign and then
                                        ; an expression.  It evaluates the expression and sets the variable
                                        ; to that value.
                                        ;
                                        ; 'FIN' checks the end of a command.  If it ended with ":",
                                        ; execution continues.	If it ended with a CR, it finds the
                                        ; the next line and continues from there.
                                        ;
                                        ; 'ENDCHK' checks if a command is ended with a CR. This is
                                        ; required in certain commands, such as GOTO, RETURN, STOP, etc.
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 45
noc_boot11.a
                                        ;
                                        ; 'ERROR' prints the string pointed to by A0. It then prints the
                                        ; line pointed to by CURRNT with a "?" inserted at where the
                                        ; old text pointer (should be on top of the stack) points to.
                                        ; Execution of Tiny BASIC is stopped and a warm start is done.
                                        ; If CURRNT is zero (indicating a direct command), the direct
                                        ; command is not printed. If CURRNT is -1 (indicating
                                        ; 'INPUT' command in progress), the input line is not printed
                                        ; and execution is not terminated but continues at 'INPERR'.
                                        ;
                                        ; Related to 'ERROR' are the following:
                                        ; 'QWHAT' saves text pointer on stack and gets "What?" message.
                                        ; 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                                        ; 'QSORRY' and 'ASORRY' do the same kind of thing.
                                        ; 'QHOW' and 'AHOW' also do this for "How?".
                                        ;
                                        
                                        ; returns
                                        ; r2 = variable's address
                                        ;
   2660 0000CEBC                        SETVAL
   2661 0000CEBC FC 6E                       sub     sp,sp,#4
   2662 0000CEBE E0 DF                       sw      lr,[sp]
   2663 0000CEC0 01 11                       lw		r1,#1		; allocate var
   2664 0000CEC2 EB 4F 03 AF                 call	TSTV		; variable name?
   2665 0000CEC6 03 A9                       bne		sv2
   2666 0000CEC8 5E 4D 0C 11                	lea		r1,msgVar
   2667 0000CECC 35 AE                      	br		ERROR 
   2668 0000CECE                        sv2
   2669 0000CECE E2 D1                   	sw      r1,2[sp]    ; save the variable's address
   2670 0000CED0 1C 40 05 AF             	call	TSTC		; get past the "=" sign
   2671 0000CED4 3D 12                   	db	'=',SV1-*+1
   2672 0000CED6 DC 4F 05 AF             	call	OREXPR		; evaluate the expression
   2673 0000CEDA E2 F2                   	lw      r2,2[sp]    ; get back the variable's address
   2674 0000CEDC 20 D1                   	sw      r1,[r2]     ; and save value in the variable
   2675 0000CEDE 20 11                   	lw		r1,r2		; return r1 = variable address
   2676 0000CEE0 E0 FF                   	lw      lr,[sp]
   2677 0000CEE2 04 6E                   	add     sp,sp,#4
   2678 0000CEE4 F0 80                   	ret
   2679 0000CEE6                        SV1
   2680 0000CEE6 26 AE                       br	    QWHAT		; if no "=" sign
                                        
                                        
   2683 0000CEE8                        FIN
   2684 0000CEE8 FE 6E                   	sub		sp,sp,#2
   2685 0000CEEA E0 DF                   	sw		lr,[sp]
   2686 0000CEEC 1B 40 07 AF             	call	TSTC		; *** FIN ***
   2687 0000CEF0 3A 08                   	db	':',FI1-*+1
   2688 0000CEF2 02 6E                   	add		sp,sp,#2	; if ":", discard return address
   2689 0000CEF4 B5 4F 0E AE             	br		RUNSML		; continue on the same line
   2690 0000CEF8                        FI1
   2691 0000CEF8 1B 40 01 AF             	call	TSTC		; not ":", is it a CR?
   2692 0000CEFC 0D 0A                   	db	CR,FI2-*+1
   2693 0000CEFE E0 FF                   	lw		lr,[sp]	; else return to the caller
   2694 0000CF00 02 6E                   	add		sp,sp,#2	; yes, purge return address
   2695 0000CF02 B4 4F 0A AE             	br		RUNNXL		; execute the next line
   2696 0000CF06                        FI2
   2697 0000CF06 E0 FF                   	lw		lr,[sp]	; else return to the caller
   2698 0000CF08 02 6E                   	add		sp,sp,#2
   2699 0000CF0A F0 80                   	ret
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 46
noc_boot11.a
                                        
                                        
                                        ; Check that there is nothing else on the line
                                        ; Registers Affected
                                        ;   r1
                                        ;
   2706 0000CF0C                        ENDCHK
   2707 0000CF0C FE 6E                   	sub		sp,sp,#2
   2708 0000CF0E E0 DF                   	sw		lr,[sp]
   2709 0000CF10 22 40 0C AF             	call	IGNBLK
   2710 0000CF14 80 E1                   	lb		r1,[r8]
   2711 0000CF16 FF 4F 13 10             	cmp		r1,#CR		; does it end with a CR?
   2712 0000CF1A 03 A8                   	beq		ec1
   2713 0000CF1C 6C 4D 06 11             	lea		r1,msgExtraChars
   2714 0000CF20 0B AE                   	jmp		ERROR
   2715 0000CF22                        ec1
   2716 0000CF22 E0 FF                   	lw		lr,[sp]
   2717 0000CF24 02 6E                   	add		sp,sp,#2
   2718 0000CF26 F0 80                   	ret
                                        
                                        
   2721 0000CF28                        TOOBIG
   2722 0000CF28 6B 4D 01 11             	lea		r1,msgTooBig
   2723 0000CF2C 05 AE                   	br		ERROR
   2724 0000CF2E                        QSORRY
   2725 0000CF2E 54 4D 07 11                 lea     r1,SRYMSG
   2726 0000CF32 02 AE                   	br	    ERROR
   2727 0000CF34                        QWHAT
   2728 0000CF34 53 4D 0F 11             	lea		r1,msgWhat
   2729 0000CF38                        ERROR
   2730 0000CF38 26 40 00 AF             	call	PRMESG		; display the error message
   2731 0000CF3C 73 40 04 F1             	lw		r1,CURRNT	; get the current line number
   2732 0000CF40 9F 4F 0B A8             	beq		WSTART		; if zero, do a warm start
   2733 0000CF44 11 10                   	cmp		r1,#-1		; is the line no. pointer = -1?
   2734 0000CF46 C4 4F 00 A8             	beq		INPERR		; if so, redo input
   2735 0000CF4A 80 E5                   	lb		r5,[r8]		; save the char. pointed to
   2736 0000CF4C 80 C0                   	sb		r0,[r8]		; put a zero where the error is
   2737 0000CF4E 73 40 04 F1             	lw		r1,CURRNT	; point to start of current line
   2738 0000CF52 16 40 06 AF             	call	PRTLN		; display the line in error up to the 0
   2739 0000CF56 10 16                   	lw      r6,r1       ; save off end pointer
   2740 0000CF58 80 C5                   	sb		r5,[r8]		; restore the character
   2741 0000CF5A 03 40 0F 11             	lw		r1,#'?'		; display a "?"
   2742 0000CF5E 9A 4F 0B AF             	call	GOOUT
   2743 0000CF62 00 12                   	lw      r2,#0       ; stop char = 0
   2744 0000CF64 6F 11                   	sub		r1,r6,#1	; point back to the error char.
   2745 0000CF66 A5 AF                   	call	PRTSTG		; display the rest of the line
   2746 0000CF68 9E 4F 07 AE             	jmp	    WSTART		; and do a warm start
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** GETLN *** FNDLN (& friends) ***
                                        ;
                                        ; 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                                        ; the character in r3 (given by the caller), then it fills the
                                        ; buffer and echos. It ignores LF's but still echos
                                        ; them back. Control-H is used to delete the last character
                                        ; entered (if there is one), and control-X is used to delete the
                                        ; whole line and start over again. CR signals the end of a line,
                                        ; and causes 'GETLN' to return.
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 47
noc_boot11.a
                                        ;
                                        ;
   2762 0000CF6C                        GETLN
   2763 0000CF6C FC 6E                   	sub		sp,sp,#4
   2764 0000CF6E E0 DF                   	sw		lr,[sp]
   2765 0000CF70 E2 D5                   	sw		r5,2[sp]
   2766 0000CF72 9A 4F 01 AF             	call	GOOUT		; display the prompt
   2767 0000CF76 01 11                   	lw		r1,#1		; turn on cursor flash
   2768 0000CF78 71 40 01 C1             	sb		r1,cursFlash
   2769 0000CF7C 02 40 00 11             	lw		r1,#' '		; and a space
   2770 0000CF80 99 4F 0A AF             	call	GOOUT
   2771 0000CF84 78 40 02 18             	lea		r8,BUFFER	; r8 is the buffer pointer
   2772 0000CF88                        GL1
   2773 0000CF88 22 40 06 AF             	call	CHKIO		; check keyboard
   2774 0000CF8C FD B8                   	beq		GL1			; wait for a char. to come in
   2775 0000CF8E FC 4F 1C 10             	cmp		r1,#'4'
   2776 0000CF92 FA B8                   	beq		GL1
   2777 0000CF94 FC 4F 1F 10             	cmp		r1,#'1'
   2778 0000CF98 F7 B8                   	beq		GL1
   2779 0000CF9A FF 4F 13 10             	cmp		r1,#CR		; accept a CR
   2780 0000CF9E 03 A8                   	beq		GL2
   2781 0000CFA0 98 4F 0A AF             	call	GOOUT
   2782 0000CFA4 F1 BE                   	br		GL1
   2783 0000CFA6                        GL2:
   2784 0000CFA6 98 4F 07 AF             	call	GOOUT		; spit out CR
   2785 0000CFAA 00 11                   	lw		r1,#0		; turn off cursor flash
   2786 0000CFAC 71 40 01 C1             	sb		r1,cursFlash
   2787 0000CFB0 70 40 08 E3             	lb		r3,cursy
   2788 0000CFB4 70 40 07 E5             	lb		r5,cursx
   2789 0000CFB8 0A 11                   	lw		r1,#LF		; echo a LF for the CR
   2790 0000CFBA 97 4F 0D AF             	call	GOOUT
   2791 0000CFBE 81 33                   	shl		r3,#1
   2792 0000CFC0 FA 4D 34 F3             	lw		r3,lineTbl[r3]
   2793 0000CFC4 00 12                   	lw		r2,#0
   2794 0000CFC6 00 14                   	lw		r4,#0
   2795 0000CFC8                        GL3:
   2796 0000CFC8 00 42 30 E1             	lb		r1,TXTSCR[r3]
   2797 0000CFCC 69 40 01 AF             	call	ScreenToAscii
   2798 0000CFD0 78 40 42 C1             	sb		r1,BUFFER[r4]
   2799 0000CFD4 02 63                   	add		r3,r3,#2
   2800 0000CFD6 01 64                   	add		r4,r4,#1
   2801 0000CFD8 FC 4F 4C 10             	cmp		r4,#52
   2802 0000CFDC F5 B0                   	blt		GL3
   2803 0000CFDE 00 40 0D 11             	lw		r1,#CR
   2804 0000CFE2 78 40 52 C1             	sb		r1,BUFFER[r5]
   2805 0000CFE6 78 40 53 C0             	sb		r0,BUFFER+1[r5]
   2806 0000CFEA E0 FF                   	lw		lr,[sp]
   2807 0000CFEC E2 F5                   	lw		r5,2[sp]
   2808 0000CFEE 04 6E                   	add		sp,sp,#4
   2809 0000CFF0 F0 80                   	ret
                                        
                                        
                                        ; 'FNDLN' finds a line with a given line no. (in r1) in the
                                        ; text save area.  r9 is used as the text pointer. If the line
                                        ; is found, r9 will point to the beginning of that line
                                        ; (i.e. the high byte of the line no.), and flags are Z.
                                        ; If that line is not there and a line with a higher line no.
                                        ; is found, r9 points there and flags are NC & NZ. If we reached
                                        ; the end of the text save area and cannot find the line, flags
                                        ; are C & NZ.
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 48
noc_boot11.a
                                        ; Z=1 if line found
                                        ; N=1 if end of text save area
                                        ; Z=0 & N=0 if higher line found
                                        ;
                                        ; 'FNDLN' will initialize r9 to the beginning of the text save
                                        ; area to start the search. Some other entries of this routine
                                        ; will not initialize r9 and do the search.
                                        ; 'FNDLNP' will start with r9 and search for the line no.
                                        ; 'FNDNXT' will bump r9 by 2, find a CR and then start search.
                                        ; 'FNDSKP' uses r9 to find a CR, and then starts the search.
                                        ; return Z=1 if line is found, r9 = pointer to line
                                        ;
                                        ; Parameters
                                        ;	r1 = line number to find
                                        ;
   2835 0000CFF2                        FNDLN
   2836 0000CFF2 00 40 11 10             	cmp		r1,#0xFFFF	; line no. must be < 65535
   2837 0000CFF6 03 A6                   	bleu	fl1
   2838 0000CFF8 5D 4D 06 11             	lea		r1,msgLineRange
   2839 0000CFFC 9D BE                   	br		ERROR
   2840 0000CFFE                        fl1
   2841 0000CFFE 2C 4C 0C F9             	lw		r9,TXTBGN	; init. the text save pointer
                                        
   2843 0000D002                        FNDLNP
   2844 0000D002 74 40 04 FA             	lw		r10,TXTUNF	; check if we passed the end
   2845 0000D006 FF 6A                   	sub		r10,r10,#1
   2846 0000D008 AD 29                   	cmp		r9,r10
   2847 0000D00A 0F A7                   	bgtu	FNDRET		; if so, return with Z=0 & C=1
   2848 0000D00C 90 E3                   	lb		r3,[r9]		; get low order byte of line number
   2849 0000D00E 0E 23                   	zxb		r3
   2850 0000D010 91 E2                   	lb		r2,1[r9]	; get high order byte
   2851 0000D012 0E 22                   	zxb		r2
   2852 0000D014 81 32                   	shl		r2,#1
   2853 0000D016 81 32                   	shl		r2,#1
   2854 0000D018 81 32                   	shl		r2,#1
   2855 0000D01A 81 32                   	shl		r2,#1
   2856 0000D01C 81 32                   	shl		r2,#1
   2857 0000D01E 81 32                   	shl		r2,#1
   2858 0000D020 81 32                   	shl		r2,#1
   2859 0000D022 81 32                   	shl		r2,#1
   2860 0000D024 36 22                   	or		r2,r3		; build whole line number
   2861 0000D026 2D 21                   	cmp		r1,r2		; is this the line we want?
   2862 0000D028 01 A7                   	bgtu	FNDNXT		; no, not there yet
   2863 0000D02A                        FNDRET
   2864 0000D02A F0 80                   	ret			; return the cond. codes
                                        
   2866 0000D02C                        FNDNXT
   2867 0000D02C 02 69                   	add		r9,r9,#2	; find the next line
                                        
   2869 0000D02E                        FNDSKP
   2870 0000D02E 90 E2                   	lb		r2,[r9]
   2871 0000D030 01 69                   	add		r9,r9,#1
   2872 0000D032 FF 4F 23 10             	cmp		r2,#CR		; try to find a CR
   2873 0000D036 FB B9                   	bne		FNDSKP		; keep looking
   2874 0000D038 E4 BE                   	br		FNDLNP		; check if end of text
                                        
                                        
                                        ;******************************************************************
                                        ; 'MVUP' moves a block up from where r1 points to where r2 points
                                        ; until r1=r3
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 49
noc_boot11.a
                                        ;
   2881 0000D03A                        MVUP1
   2882 0000D03A 10 E4                   	lb		r4,[r1]
   2883 0000D03C 20 C4                   	sb		r4,[r2]
   2884 0000D03E 01 61                   	add		r1,r1,#1
   2885 0000D040 01 62                   	add		r2,r2,#1
   2886 0000D042                        MVUP
   2887 0000D042 3D 21                   	cmp		r1,r3
   2888 0000D044 FA B9                   	bne		MVUP1
   2889 0000D046                        MVRET
   2890 0000D046 F0 80                   	ret
                                        
                                        
                                        ; 'MVDOWN' moves a block down from where r1 points to where r2
                                        ; points until r1=r3
                                        ;
   2896 0000D048                        MVDOWN1
   2897 0000D048 FF 61                   	sub		r1,r1,#1
   2898 0000D04A FF 62                   	sub		r2,r2,#1
   2899 0000D04C 10 E4                   	lb		r4,[r1]
   2900 0000D04E 20 C4                   	sb		r4,[r2]
   2901 0000D050                        MVDOWN
   2902 0000D050 3D 21                   	cmp		r1,r3
   2903 0000D052 FA B9                   	bne		MVDOWN1
   2904 0000D054 F0 80                   	ret
                                        
                                        
                                        ; 'POPA' restores the 'FOR' loop variable save area from the stack
                                        ;
                                        ; 'PUSHA' stacks for 'FOR' loop variable save area onto the stack
                                        ;
                                        ; Note: a single zero word is stored on the stack in the
                                        ; case that no FOR loops need to be saved. This needs to be
                                        ; done because PUSHA / POPA is called all the time.
                                        
   2915 0000D056                        POPA
   2916 0000D056 E0 F1                   	lw		r1,[sp]		; restore LOPVAR, but zero means no more
   2917 0000D058 73 40 0A D1             	sw		r1,LOPVAR
   2918 0000D05C 0E A8                   	beq		PP1
   2919 0000D05E E8 F1                   	lw		r1,8[sp]	; if not zero, restore the rest
   2920 0000D060 74 40 02 D1             	sw		r1,LOPPT
   2921 0000D064 E6 F1                   	lw		r1,6[sp]
   2922 0000D066 74 40 00 D1             	sw		r1,LOPLN
   2923 0000D06A E4 F1                   	lw		r1,4[sp]
   2924 0000D06C 73 40 0E D1             	sw		r1,LOPLMT
   2925 0000D070 E2 F1                   	lw		r1,2[sp]
   2926 0000D072 73 40 0C D1             	sw		r1,LOPINC
   2927 0000D076 0A 6E                   	add		sp,sp,#10
   2928 0000D078 F0 80                   	ret
   2929 0000D07A                        PP1
   2930 0000D07A 02 6E                   	add		sp,sp,#2
   2931 0000D07C F0 80                   	ret
                                        
                                        
   2934 0000D07E                        PUSHA
   2935 0000D07E 74 40 0E F1             	lw		r1,STKBOT	; Are we running out of stack room?
   2936 0000D082 0A 61                   	add		r1,r1,#10	; we might need this many bytes
   2937 0000D084 1D 2E                   	cmp		sp,r1
   2938 0000D086 53 B4                   	bltu	QSORRY		; out of stack space
   2939 0000D088 73 40 0A F1             	lw		r1,LOPVAR	; save loop variables
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 50
noc_boot11.a
   2940 0000D08C 0F A8                   	beq		PU1			; if LOPVAR is zero, that's all
   2941 0000D08E F6 6E                   	sub		sp,sp,#10
   2942 0000D090 E0 D1                   	sw		r1,[sp]
   2943 0000D092 74 40 02 F1             	lw		r1,LOPPT
   2944 0000D096 E8 D1                   	sw		r1,8[sp]	; else save all the others
   2945 0000D098 74 40 00 F1             	lw		r1,LOPLN
   2946 0000D09C E6 D1                   	sw		r1,6[sp]
   2947 0000D09E 73 40 0E F1             	lw		r1,LOPLMT
   2948 0000D0A2 E4 D1                   	sw		r1,4[sp]
   2949 0000D0A4 73 40 0C F1             	lw		r1,LOPINC
   2950 0000D0A8 E2 D1                   	sw		r1,2[sp]
   2951 0000D0AA F0 80                   	ret
   2952 0000D0AC                        PU1
   2953 0000D0AC FE 6E                   	sub		sp,sp,#2
   2954 0000D0AE E0 D1                   	sw		r1,[sp]
   2955 0000D0B0 F0 80                   	ret
                                        
                                        
                                        ;******************************************************************
                                        ;
                                        ; *** PRTSTG *** QTSTG *** PRTNUM *** PRTLN ***
                                        ;
                                        ; 'PRTSTG' prints a string pointed to by r3. It stops printing
                                        ; and returns to the caller when either a CR is printed or when
                                        ; the next byte is the same as what was passed in r4 by the
                                        ; caller.
                                        ;
                                        ; 'QTSTG' looks for an underline (back-arrow on some systems),
                                        ; single-quote, or double-quote.  If none of these are found, returns
                                        ; to the caller.  If underline, outputs a CR without a LF.  If single
                                        ; or double quote, prints the quoted string and demands a matching
                                        ; end quote.  After the printing, the next 2 bytes of the caller are
                                        ; skipped over (usually a short brnch instruction).
                                        ;
                                        ; 'PRTNUM' prints the 32 bit number in r3, leading blanks are added if
                                        ; needed to pad the number of spaces to the number in r4.
                                        ; However, if the number of digits is larger than the no. in
                                        ; r4, all digits are printed anyway. Negative sign is also
                                        ; printed and counted in, positive sign is not.
                                        ;
                                        ; 'PRTLN' prints the saved text line pointed to by r3
                                        ; with line no. and all.
                                        ;
                                        
                                        ; r1 = pointer to string
                                        ; r2 = stop character
                                        ; return r1 = pointer to end of line + 1
                                        
   2988 0000D0B2                        PRTSTG
   2989 0000D0B2 F8 6E                       sub     sp,sp,#8
   2990 0000D0B4 E0 DF                       sw      lr,[sp]
   2991 0000D0B6 E2 D5                       sw      r5,2[sp]
   2992 0000D0B8 E4 D6                       sw      r6,4[sp]
   2993 0000D0BA E6 D7                       sw      r7,6[sp]
   2994 0000D0BC 10 15                       lw      r5,r1       ; r5 = pointer
   2995 0000D0BE 20 16                       lw      r6,r2       ; r6 = stop char
   2996 0000D0C0                        PS1
   2997 0000D0C0 50 E7                       lb      r7,[r5]     ; get a text character
   2998 0000D0C2 01 65                       add     r5,r5,#1
   2999 0000D0C4 6D 27                   	cmp     r7,r6		; same as stop character?
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 51
noc_boot11.a
   3000 0000D0C6 09 A8                   	beq	    PRTRET		; if so, return
   3001 0000D0C8 70 11                   	lw      r1,r7
   3002 0000D0CA 8F 4F 05 AF             	call	GOOUT		; display the char.
   3003 0000D0CE FF 4F 73 10             	cmp     r7,#CR      ; is it a C.R.?
   3004 0000D0D2 F6 B9                   	bne	    PS1		    ; no, go back for more
   3005 0000D0D4 0A 11                   	lw      r1,#LF      ; yes, add a L.F.
   3006 0000D0D6 8E 4F 0F AF             	call	GOOUT
   3007 0000D0DA                        PRTRET
   3008 0000D0DA 70 12                       lw      r2,r7       ; return r2 = stop char
   3009 0000D0DC 50 11                   	lw		r1,r5		; return r1 = line pointer
   3010 0000D0DE E2 F5                       lw      r5,2[sp]
   3011 0000D0E0 E4 F6                       lw      r6,4[sp]
   3012 0000D0E2 E6 F7                       lw      r7,6[sp]
   3013 0000D0E4 E0 FF                       lw      lr,[sp]
   3014 0000D0E6 08 6E                       add     sp,sp,#8
   3015 0000D0E8 F0 80                       ret			        ; then return
                                        
                                        
   3018 0000D0EA                        QTSTG
   3019 0000D0EA FE 6E                   	sub		sp,sp,#2
   3020 0000D0EC E0 DF                   	sw		lr,[sp]
   3021 0000D0EE B7 AF                   	call	TSTC		; *** QTSTG ***
   3022 0000D0F0 22 18                   	db	'"',QT3-*+1
   3023 0000D0F2 02 40 02 12             	lw		r2,#'"'		; it is a "
   3024 0000D0F6                        QT1
   3025 0000D0F6 80 11                   	lw		r1,r8
   3026 0000D0F8 DC BF                   	call	PRTSTG		; print until another
   3027 0000D0FA 10 18                   	lw		r8,r1
   3028 0000D0FC FF 4F 26 10             	cmp		r2,#LF		; was last one a CR?
   3029 0000D100 0E A9                   	bne		QT2
   3030 0000D102 02 6E                   	add		sp,sp,#2
   3031 0000D104 A4 4F 09 AE             	br		RUNNXL		; if so, run next line
   3032 0000D108                        QT3
   3033 0000D108 AA AF                   	call	TSTC		; is it a single quote?
   3034 0000D10A 27 08                   	db	"'",QT4-*+1
   3035 0000D10C 02 40 07 12             	lw		r2,#''''	; if so, do same as above
   3036 0000D110 F2 BE                   	br		QT1
   3037 0000D112                        QT4
   3038 0000D112 A5 AF                   	call	TSTC		; is it an underline?
   3039 0000D114 5F 10                   	db	'_',QT5-*+1
   3040 0000D116 00 40 0D 11             	lw		r1,#CR		; if so, output a CR without LF
   3041 0000D11A 8C 4F 0D AF             	call	GOOUT
   3042 0000D11E                        QT2
   3043 0000D11E E0 FF                   	lw		lr,[sp]
   3044 0000D120 02 6E                   	add		sp,sp,#2
   3045 0000D122 F2 80                   	jmp		2[lr]		; skip over 2 bytes when returning
   3046 0000D124                        QT5						; not " ' or _
   3047 0000D124 E0 FF                   	lw		lr,[sp]
   3048 0000D126 02 6E                   	add		sp,sp,#2
   3049 0000D128 F0 80                   	ret
                                        
                                        
                                        ; Output a CR LF sequence
                                        ;
   3054 0000D12A                        prCRLF
   3055 0000D12A FE 6E                   	sub		sp,sp,#2
   3056 0000D12C E0 DF                   	sw		lr,[sp]
   3057 0000D12E 00 40 0D 11             	lw		r1,#CR
   3058 0000D132 8C 4F 01 AF             	call	GOOUT
   3059 0000D136 0A 11                   	lw		r1,#LF
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 52
noc_boot11.a
   3060 0000D138 8B 4F 0E AF             	call	GOOUT
   3061 0000D13C E0 FF                   	lw		lr,[sp]
   3062 0000D13E 02 6E                   	add		sp,sp,#2
   3063 0000D140 F0 80                   	ret
                                        
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
                                        ; Register Usage
                                        ;	r5 = number of padding spaces
   3070 0000D142                        PRTNUM
   3071 0000D142 F8 6E                   	sub		sp,sp,#8
   3072 0000D144 E0 DF                   	sw		lr,[sp]
   3073 0000D146 E2 D5                   	sw		r5,2[sp]
   3074 0000D148 E4 D6                   	sw		r6,4[sp]
   3075 0000D14A E6 D7                   	sw		r7,6[sp]
                                        
   3077 0000D14C 75 40 00 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   3078 0000D150 10 16                   	lw		r6,r1		; save number for later
   3079 0000D152 20 15                   	lw		r5,r2		; r5 = min number of chars
   3080 0000D154 16 21                   	
   3081 0000D156 02 AB                   	bpl		PN1			; if not
   3082 0000D158 20 31                   	neg		r1			; else make it positive
   3083 0000D15A FF 65                   	sub		r5,r5,#1	; one less for width count
   3084 0000D15C                        PN1
   3085 0000D15C 0A 12                   	lw		r2,#10		; divide by 10
   3086 0000D15E E2 4F 00 AF             	call	DIV32
   3087 0000D162 30 62                   	add		r2,r2,#'0'	; convert remainder to ascii
   3088 0000D164 70 C2                   	sb		r2,[r7]		; and store in buffer
   3089 0000D166 01 67                   	add		r7,r7,#1
   3090 0000D168 FF 65                   	sub		r5,r5,#1	; decrement width
   3091 0000D16A 10 10                   	cmp		r1,#0
   3092 0000D16C F7 B9                   	bne		PN1
   3093 0000D16E                        PN6
   3094 0000D16E 56 25                   	or		r5,r5		; test pad count
   3095 0000D170 06 A2                   	ble		PN4			; skip padding if not needed
   3096 0000D172                        PN3
   3097 0000D172 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   3098 0000D176 89 4F 0F AF             	call	GOOUT
   3099 0000D17A FF 65                   	sub		r5,r5,#1
   3100 0000D17C FA B9                   	bne		PN3
   3101 0000D17E                        PN4
   3102 0000D17E 66 26                   	or		r6,r6		; is number negative?
   3103 0000D180 04 AB                   	bpl		PN5
   3104 0000D182 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   3105 0000D186 89 4F 07 AF             	call	GOOUT
   3106 0000D18A                        PN5
   3107 0000D18A FF 67                   	sub		r7,r7,#1
   3108 0000D18C 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   3109 0000D18E 89 4F 03 AF             	call	GOOUT
   3110 0000D192 8B 4F 70 10             	cmp		r7,#NUMWKA
   3111 0000D196 F9 B7                   	bgtu	PN5
   3112 0000D198                        PNRET
   3113 0000D198 E0 FF                   	lw		lr,[sp]
   3114 0000D19A E2 F5                   	lw		r5,2[sp]
   3115 0000D19C E4 F6                   	lw		r6,4[sp]
   3116 0000D19E E6 F7                   	lw		r7,6[sp]
   3117 0000D1A0 08 6E                   	add		sp,sp,#8
   3118 0000D1A2 F0 80                   	ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 53
noc_boot11.a
                                        
                                        ; r1 = number to print
                                        ; r2 = number of digits
   3123 0000D1A4                        PRTHEXNUM
   3124 0000D1A4 F6 6E                   	sub		sp,sp,#10
   3125 0000D1A6 E0 DF                   	sw		lr,[sp]
   3126 0000D1A8 E2 D5                   	sw		r5,2[sp]
   3127 0000D1AA E4 D6                   	sw		r6,4[sp]
   3128 0000D1AC E6 D7                   	sw		r7,6[sp]
   3129 0000D1AE E8 D8                   	sw		r8,8[sp]
                                        
   3131 0000D1B0 75 40 00 17             	lea		r7,NUMWKA	; r7 = pointer to numeric work area
   3132 0000D1B4 10 16                   	lw		r6,r1		; save number for later
   3133 0000D1B6 0A 15                   	lw		r5,#10		; r5 = min number of chars
   3134 0000D1B8 10 14                   	lw		r4,r1
   3135 0000D1BA 46 24                   	
   3136 0000D1BC 03 AB                   	bpl		PHN1		; if not
   3137 0000D1BE 20 34                   	neg		r4			; else make it positive
   3138 0000D1C0 FF 65                   	sub		r5,r5,#1	; one less for width count
   3139 0000D1C2 0A 18                   	lw		r8,#10		; maximum of 10 digits
   3140 0000D1C4                        PHN1
   3141 0000D1C4 40 11                   	lw		r1,r4
   3142 0000D1C6 00 40 5F 31             	and		r1,#15
   3143 0000D1CA FF 4F 16 10             	cmp		r1,#10
   3144 0000D1CE 02 A0                   	blt		PHN7
   3145 0000D1D0 37 61                   	add		r1,r1,#'A'-10
   3146 0000D1D2 01 AE                   	br		PHN8
   3147 0000D1D4                        PHN7
   3148 0000D1D4 30 61                   	add		r1,r1,#'0'		; convert remainder to ascii
   3149 0000D1D6                        PHN8
   3150 0000D1D6 70 C1                   	sb		r1,[r7]		; and store in buffer
   3151 0000D1D8 01 67                   	add		r7,r7,#1
   3152 0000D1DA FF 65                   	sub		r5,r5,#1	; decrement width
   3153 0000D1DC A1 34                   	shr		r4,#1
   3154 0000D1DE A1 34                   	shr		r4,#1
   3155 0000D1E0 A1 34                   	shr		r4,#1
   3156 0000D1E2 A1 34                   	shr		r4,#1
   3157 0000D1E4 02 A8                   	beq		PHN6			; is it zero yet ?
   3158 0000D1E6 FF 68                   	sub		r8,r8,#1	; safety
   3159 0000D1E8 ED B9                   	bne		PHN1
   3160 0000D1EA                        PHN6
   3161 0000D1EA 56 25                   	or		r5,r5		; test pad count
   3162 0000D1EC 06 A2                   	ble		PHN4			; skip padding if not needed
   3163 0000D1EE                        PHN3
   3164 0000D1EE 02 40 00 11             	lw		r1,#' '		; display the required leading spaces
   3165 0000D1F2 86 4F 01 AF             	call	GOOUT
   3166 0000D1F6 FF 65                   	sub		r5,r5,#1
   3167 0000D1F8 FA B9                   	bne		PHN3
   3168 0000D1FA                        PHN4
   3169 0000D1FA 66 26                   	or		r6,r6		; is number negative?
   3170 0000D1FC 04 AB                   	bpl		PHN5
   3171 0000D1FE 02 40 0D 11             	lw		r1,#'-'		; if so, display the sign
   3172 0000D202 85 4F 09 AF             	call	GOOUT
   3173 0000D206                        PHN5
   3174 0000D206 FF 67                   	sub		r7,r7,#1
   3175 0000D208 70 E1                   	lb		r1,[r7]		; now unstack the digits and display
   3176 0000D20A 85 4F 05 AF             	call	GOOUT
   3177 0000D20E 8B 4F 70 10             	cmp		r7,#NUMWKA
   3178 0000D212 F9 B7                   	bgtu	PHN5
   3179 0000D214                        PHNRET
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 54
noc_boot11.a
   3180 0000D214 E0 FF                   	lw		lr,[sp]
   3181 0000D216 E2 F5                   	lw		r5,2[sp]
   3182 0000D218 E4 F6                   	lw		r6,4[sp]
   3183 0000D21A E6 F7                   	lw		r7,6[sp]
   3184 0000D21C E8 F8                   	lw		r8,8[sp]
   3185 0000D21E 0A 6E                   	add		sp,sp,#10
   3186 0000D220 F0 80                   	ret
                                        
                                        
                                        ; r1 = pointer to line
                                        ; returns r1 = pointer to end of line + 1
   3191 0000D222                        PRTLN
   3192 0000D222 FC 6E                       sub     sp,sp,#4
   3193 0000D224 E0 DF                       sw      lr,[sp]
   3194 0000D226 E2 D5                       sw      r5,2[sp]
   3195 0000D228 12 15                       add     r5,r1,#2
   3196 0000D22A 5E E1                       lb		r1,-2[r5]	; get the binary line number
   3197 0000D22C 0E 21                       zxb		r1
   3198 0000D22E 5F E2                       lb		r2,-1[r5]
   3199 0000D230 0E 22                       zxb		r2
   3200 0000D232 81 32                       shl		r2,#1
   3201 0000D234 81 32                       shl		r2,#1
   3202 0000D236 81 32                       shl		r2,#1
   3203 0000D238 81 32                       shl		r2,#1
   3204 0000D23A 81 32                       shl		r2,#1
   3205 0000D23C 81 32                       shl		r2,#1
   3206 0000D23E 81 32                       shl		r2,#1
   3207 0000D240 81 32                       shl		r2,#1
   3208 0000D242 26 21                       or		r1,r2
   3209 0000D244 00 12                       lw      r2,#0       ; display a 0 or more digit line no.
   3210 0000D246 7D BF                   	call	PRTNUM
   3211 0000D248 02 40 00 11             	lw      r1,#' '     ; followed by a blank
   3212 0000D24C 83 4F 04 AF             	call	GOOUT
   3213 0000D250 00 12                   	lw      r2,#0       ; stop char. is a zero
   3214 0000D252 50 11                   	lw      r1,r5
   3215 0000D254 2E BF                   	call    PRTSTG		; display the rest of the line
   3216 0000D256 E2 F5                   	lw      r5,2[sp]
   3217 0000D258 E0 FF                   	lw      lr,[sp]
   3218 0000D25A 04 6E                   	add     sp,sp,#4
   3219 0000D25C F0 80                   	ret
                                        
                                        
                                        ; ===== Test text byte following the call to this subroutine. If it
                                        ;	equals the byte pointed to by r8, return to the code following
                                        ;	the call. If they are not equal, brnch to the point
                                        ;	indicated by the offset byte following the text byte.
                                        ;
                                        ; Registers Affected
                                        ;   r8
                                        ; Returns
                                        ;	r8 = updated text pointer
                                        ;
   3232 0000D25E                        TSTC
   3233 0000D25E FA 6E                   	sub		sp,sp,#6
   3234 0000D260 E0 DF                   	sw		lr,[sp]
   3235 0000D262 E2 D1                   	sw		r1,2[sp]
   3236 0000D264 E4 D3                   	sw		r3,4[sp]
   3237 0000D266 82 AF                   	call	IGNBLK		; ignore leading blanks
   3238 0000D268 E0 FF                   	lw		lr,[sp]	; get the return address
   3239 0000D26A F0 E3                   	lb		r3,[lr]	; get the byte to compare
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 55
noc_boot11.a
   3240 0000D26C 80 E1                   	lb		r1,[r8]
   3241 0000D26E 1D 23                   	cmp		r3,r1		; is it = to what r8 points to?
   3242 0000D270 06 A8                   	beq		TSTC1			; if so
                                        						; If not, add the second
   3244 0000D272 F1 E3                   	lb		r3,1[lr]	; byte following the call to
   3245 0000D274 30 2F                   	add		lr,r3		; the return address.
   3246 0000D276 E2 F1                   	lw		r1,2[sp]
   3247 0000D278 E4 F3                   	lw		r3,4[sp]
   3248 0000D27A 06 6E                   	add		sp,sp,#6
   3249 0000D27C F0 80                   	ret					; jump to the routine
   3250 0000D27E                        TSTC1
   3251 0000D27E 01 68                   	add		r8,r8,#1	; if equal, bump text pointer
   3252 0000D280 E2 F1                   	lw		r1,2[sp]
   3253 0000D282 E4 F3                   	lw		r3,4[sp]
   3254 0000D284 06 6E                   	add     sp,sp,#6
   3255 0000D286 F2 80                   	jmp		2[lr]		; Skip the 2 bytes following
                                        						; the call and continue.
                                        
                                        
                                        ; ===== See if the text pointed to by r8 is a number. If so,
                                        ;	return the number in r2 and the number of digits in r3,
                                        ;	else return zero in r2 and r3.
                                        ; Registers Affected
                                        ;   r1,r2,r3,r4
                                        ; Returns
                                        ; 	r1 = number
                                        ;	r2 = number high order
                                        ;	r3 = number of digits in number
                                        ;	r8 = updated text pointer
                                        ;
   3270 0000D288                        TSTNUM
   3271 0000D288 FA 6E                   	sub		sp,sp,#6
   3272 0000D28A E0 DF                   	sw		lr,[sp]
   3273 0000D28C E2 D5                   	sw		r5,2[sp]
   3274 0000D28E E4 D6                   	sw		r6,4[sp]
                                        	;call	GetHexNumber
                                        	;cmp		r3,#0
                                        	;bgtu	TSNMRET
   3278 0000D290 6D AF                   	call	IGNBLK		; skip over blanks
   3279 0000D292 00 11                   	lw		r1,#0		; initialize return parameters
   3280 0000D294 00 12                   	lw		r2,#0
   3281 0000D296 00 13                   	lw		r3,#0
   3282 0000D298                        TN1
   3283 0000D298 80 E5                   	lb		r5,[r8]
   3284 0000D29A FD 4F 50 10             	cmp		r5,#'0'		; is it less than zero?
   3285 0000D29E 1A A4                   	bltu	TSNMRET 	; if so, that's all
   3286 0000D2A0 FC 4F 57 10             	cmp		r5,#'9'		; is it greater than nine?
   3287 0000D2A4 17 A7                   	bgtu	TSNMRET 	; if so, return
   3288 0000D2A6 33 4F 24 10             	cmp		r2,#$CCC
   3289 0000D2AA 04 A6                   	bleu	TN2
                                        ;	cmp		r1,#214748364	; see if there's room for new digit
   3291 0000D2AC 56 4D 0B 11             	lea		r1,msgNumTooBig
   3292 0000D2B0 E4 4F 02 AE             	br		ERROR		; if not, we've overflowd
   3293 0000D2B4                        TN2
   3294 0000D2B4 10 14                   	lw		r4,r1		; quickly multiply result by 10
   3295 0000D2B6 20 16                   	lw		r6,r2
   3296 0000D2B8 81 31                   	shl		r1,#1		; * 2
   3297 0000D2BA 21 22                   	adc		r2,r2
   3298 0000D2BC 81 31                   	shl		r1,#1		; * 4
   3299 0000D2BE 21 22                   	adc		r2,r2
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 56
noc_boot11.a
   3300 0000D2C0 40 21                   	add		r1,r4		; * 5
   3301 0000D2C2 61 22                   	adc		r2,r6
   3302 0000D2C4 81 31                   	shl		r1,#1		; * 10
   3303 0000D2C6 21 22                   	adc		r2,r2
   3304 0000D2C8 01 68                   	add		r8,r8,#1	; adjust text pointer
   3305 0000D2CA 00 40 5F 35             	and		r5,#0xF		; add in the new digit
   3306 0000D2CE 50 21                   	add		r1,r5
   3307 0000D2D0 01 63                   	add		r3,r3,#1	; increment the no. of digits
   3308 0000D2D2 E2 BE                   	br		TN1
   3309 0000D2D4                        TSNMRET
   3310 0000D2D4 E0 FF                   	lw		lr,[sp]
   3311 0000D2D6 E2 F5                   	lw		r5,2[sp]
   3312 0000D2D8 E4 F6                   	lw		r6,4[sp]
   3313 0000D2DA 06 6E                   	add		sp,sp,#6
   3314 0000D2DC F0 80                   	ret
                                        
   3316 0000D2DE                        ConvHexDigit:
   3317 0000D2DE FD 4F 10 10             	cmp		r1,#'0'
   3318 0000D2E2 17 A0                   	blt		ConvHexDigit1
   3319 0000D2E4 FC 4F 17 10             	cmp		r1,#'9'
   3320 0000D2E8 02 A3                   	bgt		ConvHexDigit3
   3321 0000D2EA D0 61                   	sub		r1,r1,#'0'
   3322 0000D2EC F0 80                   	ret
   3323 0000D2EE                        ConvHexDigit3:
   3324 0000D2EE F9 4F 1F 10             	cmp		r1,#'a'
   3325 0000D2F2 0F A0                   	blt		ConvHexDigit1
   3326 0000D2F4 F9 4F 1A 10             	cmp		r1,#'f'
   3327 0000D2F8 03 A3                   	bgt		ConvHexDigit2
   3328 0000D2FA 9F 61                   	sub		r1,r1,#'a'
   3329 0000D2FC 0A 61                   	add		r1,r1,#10
   3330 0000D2FE F0 80                   	ret
   3331 0000D300                        ConvHexDigit2:
   3332 0000D300 FB 4F 1F 10             	cmp		r1,#'A'
   3333 0000D304 06 A0                   	blt		ConvHexDigit1
   3334 0000D306 FB 4F 1A 10             	cmp		r1,#'F'
   3335 0000D30A 03 A3                   	bgt		ConvHexDigit1
   3336 0000D30C BF 61                   	sub		r1,r1,#'A'
   3337 0000D30E 0A 61                   	add		r1,r1,#10
   3338 0000D310 F0 80                   	ret
   3339 0000D312                        ConvHexDigit1:
   3340 0000D312 0F 11                   	lw		r1,#-1
   3341 0000D314 F0 80                   	ret
                                        
   3343 0000D316                        GetHexNumber:
   3344 0000D316 FC 6E                   	sub		sp,sp,#4
   3345 0000D318 E0 DF                   	sw		lr,[sp]
   3346 0000D31A 28 AF                   	call	IGNBLK		; skip over blanks
   3347 0000D31C 00 11                   	lw		r1,#0		; initialize return parameters
   3348 0000D31E 00 12                   	lw		r2,#0
   3349 0000D320 00 13                   	lw		r3,#0
   3350 0000D322 80 19                   	mov		r9,r8
   3351 0000D324 80 E4                   	lb		r4,[r8]
   3352 0000D326 FD 4F 4C 10             	cmp		r4,#'$'
   3353 0000D32A 18 A9                   	bne		GetHexNumberRet
   3354 0000D32C 01 68                   	add		r8,r8,#1
   3355 0000D32E                        GetHexNumber1
   3356 0000D32E E2 D1                   	sw		r1,2[sp]
   3357 0000D330 80 E1                   	lb		r1,[r8]
   3358 0000D332 D5 BF                   	call	ConvHexDigit
   3359 0000D334 12 AA                   	bmi		GetHexNumber4
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 57
noc_boot11.a
   3360 0000D336 10 14                   	mov		r4,r1
   3361 0000D338 E2 F1                   	lw		r1,2[sp]
   3362 0000D33A 00 4F 21 10             	cmp		r2,#$FFF
   3363 0000D33E 12 A7                   	bgtu	GetHexNumberErr
   3364 0000D340                        GetHexNumber2
   3365 0000D340 81 31                   	shl		r1,#1
   3366 0000D342 21 22                   	adc		r2,r2
   3367 0000D344 81 31                   	shl		r1,#1
   3368 0000D346 21 22                   	adc		r2,r2
   3369 0000D348 81 31                   	shl		r1,#1
   3370 0000D34A 21 22                   	adc		r2,r2
   3371 0000D34C 81 31                   	shl		r1,#1
   3372 0000D34E 21 22                   	adc		r2,r2
   3373 0000D350 46 21                   	or		r1,r4
   3374 0000D352 80 19                   	mov		r9,r8
   3375 0000D354 01 68                   	add		r8,r8,#1	; adjust text pointer
   3376 0000D356 01 63                   	add		r3,r3,#1	; increment the no. of digits
   3377 0000D358 EA BE                   	br		GetHexNumber1
   3378 0000D35A                        GetHexNumber4:
   3379 0000D35A E2 F1                   	lw		r1,2[sp]
   3380 0000D35C                        GetHexNumberRet:
   3381 0000D35C 90 18                   	mov		r8,r9
   3382 0000D35E E0 FF                   	lw		lr,[sp]
   3383 0000D360 04 6E                   	add		sp,sp,#4
   3384 0000D362 F0 80                   	ret
   3385 0000D364                        GetHexNumberErr:
   3386 0000D364 56 4D 0B 11             	lea		r1,msgNumTooBig
   3387 0000D368 DE 4F 06 AE             	br		ERROR		; if not, we've overflowd
                                        
                                        ;===== Skip over blanks in the text pointed to by r8.
                                        ;
                                        ; Registers Affected:
                                        ;	r8
                                        ; Returns
                                        ;	r8 = pointer updateded past any spaces or tabs
                                        ;
   3396 0000D36C                        IGNBLK
   3397 0000D36C FE 6E                   	sub		sp,sp,#2
   3398 0000D36E E0 D1                   	sw		r1,[sp]
   3399 0000D370                        IGB2
   3400 0000D370 80 E1                   	lb		r1,[r8]			; get char
   3401 0000D372 FE 4F 10 10             	cmp		r1,#' '			; see if it's a space
   3402 0000D376 03 A8                   	beq		IGB1			; if so, swallow it
   3403 0000D378 FF 4F 17 10             	cmp		r1,#'\t'		; or a tab
   3404 0000D37C 02 A9                   	bne		IGBRET
   3405 0000D37E                        IGB1
   3406 0000D37E 01 68                   	add		r8,r8,#1		; increment the text pointer
   3407 0000D380 F7 BE                   	br		IGB2
   3408 0000D382                        IGBRET
   3409 0000D382 E0 F1                   	lw		r1,[sp]
   3410 0000D384 02 6E                   	add		sp,sp,#2
   3411 0000D386 F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the line of text in the input buffer to upper
                                        ;	case (except for stuff between quotes).
                                        ;
                                        ; Registers Affected
                                        ;   r1,r3
                                        ; Returns
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 58
noc_boot11.a
                                        ;	r8 = pointing to end of text in buffer
                                        ;
   3422 0000D388                        TOUPBUF
   3423 0000D388 FE 6E                   	sub		sp,sp,#2
   3424 0000D38A E0 DF                   	sw		lr,[sp]
   3425 0000D38C 78 40 02 18             	lea		r8,BUFFER	; set up text pointer
   3426 0000D390 00 13                   	lw		r3,#0		; clear quote flag
   3427 0000D392                        TOUPB1
   3428 0000D392 80 E1                   	lb		r1,[r8]		; get the next text char.
   3429 0000D394 01 68                   	add		r8,r8,#1
   3430 0000D396 FF 4F 13 10             	cmp		r1,#CR		; is it end of line?
   3431 0000D39A 13 A8                   	beq		TOUPBRT 	; if so, return
   3432 0000D39C FD 4F 1E 10             	cmp		r1,#'"'		; a double quote?
   3433 0000D3A0 08 A8                   	beq		DOQUO
   3434 0000D3A2 FD 4F 19 10             	cmp		r1,#''''	; or a single quote?
   3435 0000D3A6 05 A8                   	beq		DOQUO
   3436 0000D3A8 30 10                   	cmp		r3,#0		; inside quotes?
   3437 0000D3AA F3 B9                   	bne		TOUPB1		; if so, do the next one
   3438 0000D3AC 0D AF                   	call	toUpper 	; convert to upper case
   3439 0000D3AE 8F C1                   	sb		r1,-1[r8]	; store it
   3440 0000D3B0 F0 BE                   	br		TOUPB1		; and go back for more
   3441 0000D3B2                        DOQUO
   3442 0000D3B2 30 10                   	cmp		r3,#0		; are we inside quotes?
   3443 0000D3B4 02 A9                   	bne		DOQUO1
   3444 0000D3B6 10 13                   	lw		r3,r1		; if not, toggle inside-quotes flag
   3445 0000D3B8 EC BE                   	br		TOUPB1
   3446 0000D3BA                        DOQUO1
   3447 0000D3BA 1D 23                   	cmp		r3,r1		; make sure we're ending proper quote
   3448 0000D3BC EA B9                   	bne		TOUPB1		; if not, ignore it
   3449 0000D3BE 00 13                   	lw		r3,#0		; else clear quote flag
   3450 0000D3C0 E8 BE                   	br		TOUPB1
   3451 0000D3C2                        TOUPBRT
   3452 0000D3C2 E0 FF                   	lw		lr,[sp]
   3453 0000D3C4 02 6E                   	add		sp,sp,#2
   3454 0000D3C6 F0 80                   	ret
                                        
                                        
                                        ; ===== Convert the character in r1 to upper case
                                        ;
   3459 0000D3C8                        toUpper
   3460 0000D3C8 F9 4F 1F 10             	cmp		r1,#'a'		; is it < 'a'?
   3461 0000D3CC 04 A0                   	blt	    TOUPRET
   3462 0000D3CE F8 4F 16 10             	cmp		r1,#'z'		; or > 'z'?
   3463 0000D3D2 01 A3                   	bgt	    TOUPRET
   3464 0000D3D4 E0 61                   	sub		r1,r1,#32	; if not, make it upper case
   3465 0000D3D6                        TOUPRET
   3466 0000D3D6 F0 80                   	ret
                                        
                                        
                                        ; 'CHKIO' checks the input. If there's no input, it will return
                                        ; to the caller with the Z flag set. If there is input, the Z
                                        ; flag is cleared and the input byte is in r2. However, if a
                                        ; control-C is read, 'CHKIO' will warm-start BASIC and will not
                                        ; return to the caller.
                                        ;
   3475 0000D3D8                        CHKIO
   3476 0000D3D8 FE 6E                   	sub		sp,sp,#2	; save link reg
   3477 0000D3DA E0 DF                   	sw		lr,[sp]
   3478 0000D3DC 76 4F 0E AF             	call	GOIN		; get input if possible
   3479 0000D3E0 07 A8                   	beq		CHKRET2		; if Zero, no input
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 59
noc_boot11.a
   3480 0000D3E2 1D 10                   	cmp		r1,#CTRLC	; is it control-C?
   3481 0000D3E4 02 A9                   	bne		CHKRET		; if not
   3482 0000D3E6 7A 4F 08 AE             	jmp		WSTART		; if so, do a warm start
   3483 0000D3EA                        CHKRET
   3484 0000D3EA E0 FF                   	lw		lr,[sp]
   3485 0000D3EC 02 6E                   	add		sp,sp,#2	; Z=0
   3486 0000D3EE F0 80                   	ret
   3487 0000D3F0                        CHKRET2
   3488 0000D3F0 E0 FF                   	lw		lr,[sp]
   3489 0000D3F2 02 6E                   	add		sp,sp,#2
   3490 0000D3F4 00 11                   	lw		r1,#0		; Z=1
   3491 0000D3F6 F0 80                   	ret
                                        
                                        
                                        ; ===== Display a CR-LF sequence
                                        ;
   3496 0000D3F8                        CRLF
   3497 0000D3F8 54 4D 0D 11             	lea		r1,CLMSG
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r4
                                        ;
   3504 0000D3FC                        PRMESG
   3505 0000D3FC FC 6E                   	sub		sp,sp,#4
   3506 0000D3FE E0 DF                   	sw		lr,[sp]
   3507 0000D400 E2 D5                   	sw		r5,2[sp]
   3508 0000D402 10 15                   	lw      r5,r1       ; r5 = pointer to message
   3509 0000D404                        PRMESG1
   3510 0000D404 01 65                   	add		r5,r5,#1
   3511 0000D406 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   3512 0000D408 03 A8                   	beq		PRMRET
   3513 0000D40A 75 4F 05 AF             	call	GOOUT		;else display it trashes r4
   3514 0000D40E FA BE                   	br		PRMESG1
   3515 0000D410                        PRMRET
   3516 0000D410 50 11                   	lw		r1,r5
   3517 0000D412 E2 F5                   	lw		r5,2[sp]
   3518 0000D414 E0 FF                   	lw		lr,[sp]
   3519 0000D416 04 6E                   	add		sp,sp,#4
   3520 0000D418 F0 80                   	ret
                                        
                                        
                                        ; ===== Display a zero-ended string pointed to by register r1
                                        ; Registers Affected
                                        ;   r1,r2,r3
                                        ;
   3527 0000D41A                        PRMESGAUX
   3528 0000D41A FC 6E                   	sub		sp,sp,#4
   3529 0000D41C E0 DF                   	sw		lr,[sp]
   3530 0000D41E E2 D5                   	sw		r5,2[sp]
   3531 0000D420 10 15                   	lw      r5,r1       ; r3 = pointer
   3532 0000D422                        PRMESGA1
   3533 0000D422 01 65                   	add		r5,r5,#1
   3534 0000D424 5F E1                   	lb		r1,-1[r5]	; 	get the char.
   3535 0000D426 03 A8                   	beq		PRMRETA
   3536 0000D428 74 4F 0A AF             	call	GOAUXO		;else display it
   3537 0000D42C FA BE                   	br		PRMESGA1
   3538 0000D42E                        PRMRETA
   3539 0000D42E 50 11                   	lw		r1,r5
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 60
noc_boot11.a
   3540 0000D430 E2 F5                   	lw		r5,2[sp]
   3541 0000D432 E0 FF                   	lw		lr,[sp]
   3542 0000D434 04 6E                   	add		sp,sp,#4
   3543 0000D436 F0 80                   	ret
                                        
                                        ;*****************************************************
                                        ; The following routines are the only ones that need *
                                        ; to be changed for a different I/O environment.     *
                                        ;*****************************************************
                                        
                                        
                                        ; ===== Output character to the console (Port 1) from register D0
                                        ;	(Preserves all registers.)
                                        ;
   3554 0000D438                        OUTC
   3555 0000D438 FC 6E                   	add		sp,sp,#-4
   3556 0000D43A E0 DF                   	sw		lr,[sp]
   3557 0000D43C E2 D1                   	sw		r1,2[sp]
   3558 0000D43E 2C 40 04 AF             	call	DoPing
   3559 0000D442 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
   3560 0000D446 04 A8                   	beq		OUTC1
   3561 0000D448 60 4F 0F AF             	call	Recv
   3562 0000D44C 63 4F 04 AF             	call	RecvDispatch
   3563 0000D450                        OUTC1
   3564 0000D450 E2 F1                   	lw		r1,2[sp]
   3565 0000D452 47 40 0D AF             	call	putcharScr
   3566 0000D456 E0 FF                   	lw		lr,[sp]
   3567 0000D458 04 6E                   	add		sp,sp,#4
   3568 0000D45A F0 80                   	ret
                                        
                                        
                                        ; ===== Input a character from the console into register D0 (or
                                        ;	return Zero status if there's no character available).
                                        ;
                                        ; A bit of cooperative multi-tasking here. A check for network
                                        ; messages is made.
                                        ;
   3577 0000D45C                        INC
   3578 0000D45C FE 6E                   	add		sp,sp,#-2
   3579 0000D45E E0 DF                   	sw		lr,[sp]
   3580 0000D460 05 42 06 F1             	lw		r1,TXTSCR+86
   3581 0000D464 01 61                   	add		r1,r1,#1
   3582 0000D466 05 42 06 D1             	sw		r1,TXTSCR+86
   3583 0000D46A 2A 40 0E AF             	call	DoPing
   3584 0000D46E 01 4B 00 E1             	lb		r1,ROUTER+RTR_RXSTAT
   3585 0000D472 04 A8                   	beq		INC1
   3586 0000D474 5F 4F 09 AF             	call	Recv
   3587 0000D478 61 4F 0E AF             	call	RecvDispatch
   3588 0000D47C                        INC1
   3589 0000D47C 51 40 0D AF             	call	kbdGetChar
   3590 0000D480 03 A8                   	beq		INC2
   3591 0000D482 E0 FF                   	lw		lr,[sp]
   3592 0000D484 02 6E                   	add		sp,sp,#2
   3593 0000D486 F0 80                   	ret
   3594 0000D488                        INC2:
   3595 0000D488 E0 FF                   	lw		lr,[sp]
   3596 0000D48A 02 6E                   	add		sp,sp,#2
   3597 0000D48C 00 11                   	lw		r1,#0
   3598 0000D48E F0 80                   	ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 61
noc_boot11.a
                                        
                                        ; Trigger a load operation on the target node.
                                        
   3603 0000D490                        TriggerTgtLoad:
   3604 0000D490 FC 6E                   	add		sp,sp,#-4
   3605 0000D492 E0 DF                   	sw		lr,[sp]
   3606 0000D494 E2 D2                   	sw		r2,2[sp]
   3607 0000D496 5B 4F 03 AF             	call	zeroTxBuf
   3608 0000D49A 70 40 0B E2             	lb		r2,tgtNode
   3609 0000D49E 04 40 0E C2             	sb		r2,txBuf+MSG_DST
   3610 0000D4A2 0A 12                   	lw		r2,#MT_START_BASIC_LOAD	; trigger load on target node
   3611 0000D4A4 04 40 08 C2             	sb		r2,txBuf+MSG_TYPE
   3612 0000D4A8 5C 4F 01 AF             	call	Xmit
   3613 0000D4AC E2 F2                   	lw		r2,2[sp]
   3614 0000D4AE E0 FF                   	lw		lr,[sp]
   3615 0000D4B0 04 6E                   	add		sp,sp,#4
   3616 0000D4B2 F0 80                   	ret
                                        
                                        ; ===== Output character to the host (Port 2) from register r1
                                        ;	(Preserves all registers.)
                                        ;
   3621 0000D4B4                        AUXOUT
   3622 0000D4B4 FE 6E                   	add		sp,sp,#-2
   3623 0000D4B6 E0 DF                   	sw		lr,[sp]
   3624 0000D4B8 1A 49 07 AF             	call	putSerial	; call boot rom routine
   3625 0000D4BC E0 FF                   	lw		lr,[sp]
   3626 0000D4BE 02 6E                   	add		sp,sp,#2
   3627 0000D4C0 F0 80                   	ret
                                        
                                        ;
                                        ; ===== Input a character from the host into register D0 (or
                                        ;	return negative status if there's no character available).
                                        ;
   3633 0000D4C2                        AUXIN
                                        ; get character from serial port
                                        ; return  N=1 if no character available
   3636 0000D4C2 1A 49 00 AE             	jmp		peekSerial
                                        
                                        
                                        ; flash the character at the screen position
                                        ;   r1: 1 = flash, 0 = no flash
   3641 0000D4C6                        _flashCursor
   3642 0000D4C6 00 42 00 12             	lw		r2,#VIDEORAM
   3643 0000D4CA 70 40 08 F3             	lh		r3,pos
   3644 0000D4CE 81 33                   	shl		r3,#1
   3645 0000D4D0 81 33                   	shl		r3,#1
   3646 0000D4D2 20 23                   	add		r3,r2		; r3 = scr[pos]
                                        
   3648 0000D4D4 16 21                   	or		r1,r1
   3649 0000D4D6 04 A8                   	beq		fc1
   3650 0000D4D8 33 E2                   	lb		r2,3[r3]	; get background color
   3651 0000D4DA 08 40 60 32             	or		r2,#0x80	; set flash indicator
   3652 0000D4DE 03 AE                   	br		fcx
   3653 0000D4E0                        fc1
   3654 0000D4E0 33 E2                   	lb		r2,3[r3]	; get background color
   3655 0000D4E2 07 40 5F 32             	and		r2,#0x7f	; clear flash indicator
   3656 0000D4E6                        fcx:
   3657 0000D4E6 33 C2                   	sb		r2,3[r3]
   3658 0000D4E8 F0 80                   	ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 62
noc_boot11.a
                                        
   3661 0000D4EA                        _cls
   3662 0000D4EA 40 40 07 AF             	call	ClearScreen
   3663 0000D4EE 8C 4F 0F AE             	br		FINISH
                                        
                                        
                                        ; ===== Return to the resident monitor, operating system, etc.
                                        ;
   3668 0000D4F2                        BYEBYE
   3669 0000D4F2 73 40 02 FE             	lw		sp,OSSP
   3670 0000D4F6 E0 FF                       lw      lr,[sp]
   3671 0000D4F8 02 6E                       add		sp,sp,#2
   3672 0000D4FA F0 80                   	ret
                                        
                                        ;	MOVE.B	#228,D7 	return to Tutor
                                        ;	TRAP	#14
                                        
   3677 0000D4FC 0D 0A 42 75 74 74      msgInit db	CR,LF,"Butterfly Tiny BASIC v1.1",CR,LF,"(C) 2005-2017  Robert Finch",CR,LF,LF,0
   3677 0000D502 65 72 66 6C 79 20 54  
   3677 0000D509 69 6E 79 20 42 41 53  
   3677 0000D510 49 43 20 76 31 2E 31  
   3677 0000D517 0D 0A 28 43 29 20 32  
   3677 0000D51E 30 30 35 2D 32 30 31  
   3677 0000D525 37 20 20 52 6F 62 65  
   3677 0000D52C 72 74 20 46 69 6E 63  
   3677 0000D533 68 0D 0A 0A 00        
   3678 0000D538 0D 0A 4F 4B 0D 0A      OKMSG	db	CR,LF,"OK",CR,LF,0
   3678 0000D53E 00                    
   3679 0000D53F 57 68 61 74 3F 0D      msgWhat	db	"What?",CR,LF,0
   3679 0000D545 0A 00                 
   3680 0000D547 53 6F 72 72 79 2E      SRYMSG	db	"Sorry."
                                      
   3681 0000D54D 0D 0A 00               CLMSG	db	CR,LF,0
   3682 0000D550 43 6F 6D 70 61 63      msgReadError	db	"Compact FLASH read error",CR,LF,0
   3682 0000D556 74 20 46 4C 41 53 48  
   3682 0000D55D 20 72 65 61 64 20 65  
   3682 0000D564 72 72 6F 72 0D 0A 00  
                                      
   3683 0000D56B 4E 75 6D 62 65 72      msgNumTooBig	db	"Number is too big",CR,LF,0
   3683 0000D571 20 69 73 20 74 6F 6F  
   3683 0000D578 20 62 69 67 0D 0A 00  
                                      
   3684 0000D57F 44 69 76 69 73 69      msgDivZero		db	"Division by zero",CR,LF,0
   3684 0000D585 6F 6E 20 62 79 20 7A  
   3684 0000D58C 65 72 6F 0D 0A 00     
   3685 0000D592 4F 75 74 20 6F 66      msgVarSpace     db  "Out of variable space",CR,LF,0
   3685 0000D598 20 76 61 72 69 61 62  
   3685 0000D59F 6C 65 20 73 70 61 63  
   3685 0000D5A6 65 0D 0A 00           
   3686 0000D5AA 20 62 79 74 65 73      msgBytesFree	db	" bytes free",CR,LF,0
   3686 0000D5B0 20 66 72 65 65 0D 0A  
   3686 0000D5B7 00                    
   3687 0000D5B8 0D 0A 52 65 61 64      msgReady		db	CR,LF,"Ready",CR,LF,0
   3687 0000D5BE 79 0D 0A 00           
   3688 0000D5C2 45 78 70 65 63 74      msgComma		db	"Expecting a comma",CR,LF,0
   3688 0000D5C8 69 6E 67 20 61 20 63  
   3688 0000D5CF 6F 6D 6D 61 0D 0A 00  
                                      
   3689 0000D5D6 4C 69 6E 65 20 6E      msgLineRange	db	"Line number too big",CR,LF,0
   3689 0000D5DC 75 6D 62 65 72 20 74  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 63
noc_boot11.a
   3689 0000D5E3 6F 6F 20 62 69 67 0D  
   3689 0000D5EA 0A 00                 
   3690 0000D5EC 45 78 70 65 63 74      msgVar			db	"Expecting a variable",CR,LF,0
   3690 0000D5F2 69 6E 67 20 61 20 76  
   3690 0000D5F9 61 72 69 61 62 6C 65  
   3690 0000D600 0D 0A 00              
   3691 0000D603 52 4E 44 20 62 61      msgRNDBad		db	"RND bad parameter",CR,LF,0
   3691 0000D609 64 20 70 61 72 61 6D  
   3691 0000D610 65 74 65 72 0D 0A 00  
                                      
   3692 0000D617 53 59 53 20 62 61      msgSYSBad		db	"SYS bad address",CR,LF,0
   3692 0000D61D 64 20 61 64 64 72 65  
   3692 0000D624 73 73 0D 0A 00        
   3693 0000D629 49 4E 50 55 54 20      msgInputVar		db	"INPUT expecting a variable",CR,LF,0
   3693 0000D62F 65 78 70 65 63 74 69  
   3693 0000D636 6E 67 20 61 20 76 61  
   3693 0000D63D 72 69 61 62 6C 65 0D  
   3693 0000D644 0A 00                 
   3694 0000D646 4E 45 58 54 20 77      msgNextFor		db	"NEXT without FOR",CR,LF,0
   3694 0000D64C 69 74 68 6F 75 74 20  
   3694 0000D653 46 4F 52 0D 0A 00     
   3695 0000D659 4E 45 58 54 20 65      msgNextVar		db	"NEXT expecting a defined variable",CR,LF,0
   3695 0000D65F 78 70 65 63 74 69 6E  
   3695 0000D666 67 20 61 20 64 65 66  
   3695 0000D66D 69 6E 65 64 20 76 61  
   3695 0000D674 72 69 61 62 6C 65 0D  
   3695 0000D67B 0A 00                 
   3696 0000D67D 47 4F 54 4F 2F 47      msgBadGotoGosub	db	"GOTO/GOSUB bad line number",CR,LF,0
   3696 0000D683 4F 53 55 42 20 62 61  
   3696 0000D68A 64 20 6C 69 6E 65 20  
   3696 0000D691 6E 75 6D 62 65 72 0D  
   3696 0000D698 0A 00                 
   3697 0000D69A 52 45 54 55 52 4E      msgRetWoGosub   db	"RETURN without GOSUB",CR,LF,0
   3697 0000D6A0 20 77 69 74 68 6F 75  
   3697 0000D6A7 74 20 47 4F 53 55 42  
   3697 0000D6AE 0D 0A 00              
   3698 0000D6B1 50 72 6F 67 72 61      msgTooBig		db	"Program is too big",CR,LF,0
   3698 0000D6B7 6D 20 69 73 20 74 6F  
   3698 0000D6BE 6F 20 62 69 67 0D 0A  
   3698 0000D6C5 00                    
   3699 0000D6C6 45 78 74 72 61 20      msgExtraChars	db	"Extra characters on line ignored",CR,LF,0
   3699 0000D6CC 63 68 61 72 61 63 74  
   3699 0000D6D3 65 72 73 20 6F 6E 20  
   3699 0000D6DA 6C 69 6E 65 20 69 67  
   3699 0000D6E1 6E 6F 72 65 64 0D 0A  
   3699 0000D6E8 00                    
                                        
   3701 0000D6E9 FF FF FF                	.align	4
   3768 = 0000D6EC                      LSTROM	equ	*		; end of possible ROM area
                                        ;
                                        ; Internal variables follow:
                                        ;
                                        		bss
   3707 00000705                        txtWidth	db	0		; BIOS var =60
   3708 00000706                        txtHeight	db	0		; BIOS var =27
   3709 00000707                        cursx	db		0		; cursor x position
   3710 00000708                        cursy	db		0		; cursor y position
   3711 00000709                        pos		dw		0		; text screen position
   3712 0000070B                        tgtNode	db		0
   3713 0000070C                        srcNode	db		0
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 64
noc_boot11.a
   3714 0000070D                        charToPrint		dw		0
   3715 0000070F                        fgColor			db		0
   3716 00000710                        bkColor			db		0
   3717 00000711                        cursFlash		db		0	; flash the cursor ?
   3718 00000712                         				db		0
   3719 00000713                        NormAttr		dw		0
                                        
   3721 00000715                        lineLinkTbl		fill.b	25,0	; screen line link table
   3722 0000072E                         	align 4
                                        
                                        		;org		0x0080
   3725 00000730                        typef   db      0   ; variable / expression type
   3726 00000731                                 align   2
   3727 00000732                        OSSP	dw	1	; OS value of sp
   3728 00000734                        CURRNT	dw	1	;	Current line pointer
   3729 00000736                        STKGOS	dw	1	;	Saves stack pointer in 'GOSUB'
   3730 00000738                        STKINP	dw	1	;	Saves stack pointer during 'INPUT'
   3731 0000073A                        LOPVAR	dw	1	;	'FOR' loop save area
   3732 0000073C                        LOPINC	dw	1	;	increment
   3733 0000073E                        LOPLMT	dw	1	;	limit
   3734 00000740                        LOPLN	dw	1	;	line number
   3735 00000742                        LOPPT	dw	1	;	text pointer
   3736 00000744                        TXTUNF	dw	1	;	points to unfilled text area
   3737 00000746                        VARBGN	dw	1	;	points to variable area
   3738 00000748                        IVARBGN dw  1   ;   points to integer variable area
   3739 0000074A                        SVARBGN dw  1   ;   points to string variable area
   3740 0000074C                        FVARBGN dw  1   ;   points to float variable area
   3741 0000074E                        STKBOT	dw	1	;	holds lower limit for stack growth
   3742 00000750                        NUMWKA	fill.b	50,0			; numeric work area
   3743 00000782                        BUFFER	fill.b	BUFLEN,0x00		;		Keyboard input buffer
                                        
                                                bss
                                                org     0x2000
   3747 00002000                        textScr1
                                                org     0x2000
                                        ;	END
                                        		.code
   3751 0000D6EC FF FF FF FF FF FF FF    		.org	$D800
   3751 0000D6F3 FF FF FF FF FF FF FF  
   3751 0000D6FA FF FF FF FF FF FF FF  
   3751 0000D701 FF FF FF FF FF FF FF  
   3751 0000D708 FF FF FF FF FF FF FF  
   3751 0000D70F FF FF FF FF FF FF FF  
   3751 0000D716 FF FF FF FF FF FF FF  
   3751 0000D71D FF FF FF FF FF FF FF  
   3751 0000D724 FF FF FF FF FF FF FF  
   3751 0000D72B FF FF FF FF FF FF FF  
   3751 0000D732 FF FF FF FF FF FF FF  
   3751 0000D739 FF FF FF FF FF FF FF  
   3751 0000D740 FF FF FF FF FF FF FF  
   3751 0000D747 FF FF FF FF FF FF FF  
   3751 0000D74E FF FF FF FF FF FF FF  
   3751 0000D755 FF FF FF FF FF FF FF  
   3751 0000D75C FF FF FF FF FF FF FF  
   3751 0000D763 FF FF FF FF FF FF FF  
   3751 0000D76A FF FF FF FF FF FF FF  
   3751 0000D771 FF FF FF FF FF FF FF  
   3751 0000D778 FF FF FF FF FF FF FF  
   3751 0000D77F FF FF FF FF FF FF FF  
   3751 0000D786 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 65
noc_boot11.a
   3751 0000D78D FF FF FF FF FF FF FF  
   3751 0000D794 FF FF FF FF FF FF FF  
   3751 0000D79B FF FF FF FF FF FF FF  
   3751 0000D7A2 FF FF FF FF FF FF FF  
   3751 0000D7A9 FF FF FF FF FF FF FF  
   3751 0000D7B0 FF FF FF FF FF FF FF  
   3751 0000D7B7 FF FF FF FF FF FF FF  
   3751 0000D7BE FF FF FF FF FF FF FF  
   3751 0000D7C5 FF FF FF FF FF FF FF  
   3751 0000D7CC FF FF FF FF FF FF FF  
   3751 0000D7D3 FF FF FF FF FF FF FF  
   3751 0000D7DA FF FF FF FF FF FF FF  
   3751 0000D7E1 FF FF FF FF FF FF FF  
   3751 0000D7E8 FF FF FF FF FF FF FF  
   3751 0000D7EF FF FF FF FF FF FF FF  
   3751 0000D7F6 FF FF FF FF FF FF FF  
   3751 0000D7FD FF FF FF              
   3752 0000D800                        start:
   3753 0000D800 E4 31                   		tsr		r1,ID		; id register
   3754 0000D802 20 4B 00 C1             		sb		r1,LEDS
   3755 0000D806 FF 41 0E 1E             		lw		sp,#$1FFE
   3756 0000D80A 17 AF                   		call	ResetNode
                                        ;		lw		r1,#$80					; set router in snoop mode
                                        ;		sb		r1,ROUTER+RTR_RXCTL
                                        		;call	broadcastReset
   3760 0000D80C                        start2:
   3761 0000D80C 08 40 00 11             		lw		r1,#$80					; set router in non-snoop mode
   3762 0000D810 01 4B 01 C1             		sb		r1,ROUTER+RTR_RXCTL
   3763 0000D814 E4 31                   		tsr		r1,ID
   3764 0000D816 EE 4F 1F 10             		cmp		r1,#$111
   3765 0000D81A 07 A9                   		bne		RecvLoop
   3766 0000D81C 8A AF                   		call	ping44
   3767 0000D81E 5B AF                   		call	ReqEnumDevices
   3768 0000D820 05 11                   		lw		r1,#5
   3769 0000D822 20 4B 00 C1             		sb		r1,LEDS
   3770 0000D826 55 4F 03 AE             		jmp		CSTART
   3771 0000D82A                        RecvLoop:
   3772 0000D82A                        noMsg1:
   3773 0000D82A 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
   3774 0000D82E FD B8                   		beq		noMsg1
   3775 0000D830 41 4F 0B AF             		call	Recv
   3776 0000D834 44 4F 00 AF             		call	RecvDispatch
   3777 0000D838 F8 BE                   		bra		RecvLoop
                                        
                                        ;----------------------------------------------------------------------------
                                        ;----------------------------------------------------------------------------
                                        
   3782 0000D83A                        ResetNode:
   3783 0000D83A FC 6E                   		add		sp,sp,#-4
   3784 0000D83C E0 DF                   		sw		lr,[sp]
   3785 0000D83E E2 D1                   		sw		r1,2[sp]
   3786 0000D840 30 AF                   		call	CpyDCB
   3787 0000D842 6F 40 08 D0             		sw		r0,DevListNdx
   3788 0000D846 0A 40 00 C0             		sb		r0,kbdhead
   3789 0000D84A 0A 40 01 C0             		sb		r0,kbdtail
   3790 0000D84E 0A 40 02 C0             		sb		r0,kbdcnt
   3791 0000D852 0A 40 02 D0             		sw		r0,pingcnt
   3792 0000D856 70 40 04 C0             		sb		r0,pingndx
   3793 0000D85A C3 42 00 12             		lw		r2,#TXTSCR+3120
   3794 0000D85E 70 40 00 D2             		sw		r2,packetPtr
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 66
noc_boot11.a
   3795 0000D862 01 11                   		lw		r1,#1
   3796 0000D864 0A 40 08 C1             		sb		r1,FocusTbl
   3797 0000D868 1B 40 05 AF             		call	InitTxtCtrl
   3798 0000D86C 04 11                   		lw		r1,#4
   3799 0000D86E 20 4B 00 C1             		sb		r1,LEDS
   3800 0000D872 01 40 0F 11             		lw		r1,#31
   3801 0000D876 70 40 06 C1             		sb		r1,txtHeight
   3802 0000D87A 03 40 04 11             		lw		r1,#52
   3803 0000D87E 70 40 05 C1             		sb		r1,txtWidth
   3804 0000D882 F0 4B 00 11             		lw		r1,#$BF00
   3805 0000D886 71 40 02 D1             		sw		r1,NormAttr
   3806 0000D88A 23 40 07 AF             		call	ClearScreen
   3807 0000D88E 24 40 09 AF             		call	HomeCursor
   3808 0000D892 F7 4D 02 11             		lw		r1,#msgStarting
   3809 0000D896 24 40 0D AF             		call	putmsgScr
   3810 0000D89A E0 FF                   		lw		lr,[sp]
   3811 0000D89C E2 F1                   		lw		r1,2[sp]
   3812 0000D89E 04 6E                   		add		sp,sp,#4
   3813 0000D8A0 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Copy the DCB tables to ram.
                                        ;----------------------------------------------------------------------------
                                        
   3819 0000D8A2                        CpyDCB:
   3820 0000D8A2 00 13                   		lw		r3,#0
   3821 0000D8A4                        CpyDCB1:
   3822 0000D8A4 EE 4D 32 F1             		lw		r1,DCBTbl[r3]
   3823 0000D8A8 0E 40 38 D1             		sw		r1,NodeDCB[r3]
   3824 0000D8AC 02 63                   		add		r3,r3,#2
   3825 0000D8AE F7 4F 30 10             		cmp		r3,#48*nDCB
   3826 0000D8B2 F8 B4                   		bltu	CpyDCB1
   3827 0000D8B4 F0 80                   		ret
                                        
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Broadcast a reset message on the network.
                                        ;----------------------------------------------------------------------------
                                        
   3834 0000D8B6                        broadcastReset:
   3835 0000D8B6 FE 6E                   		add		sp,sp,#-2
   3836 0000D8B8 E0 DF                   		sw		lr,[sp]
   3837 0000D8BA 3A 4F 01 AF             		call	zeroTxBuf
   3838 0000D8BE FF 40 0F 11             		lw		r1,#$FFF		; global broadcast address
   3839 0000D8C2 04 40 0E D1             		sw		r1,txBuf+MSG_DST
   3840 0000D8C6 01 11                   		lw		r1,#MT_RST
   3841 0000D8C8 04 40 08 C1             		sb		r1,txBuf+MSG_TYPE	; reset message
   3842 0000D8CC 3A 4F 0F AF             		call	Xmit
   3843 0000D8D0 E0 FF                   		lw		lr,[sp]
   3844 0000D8D2 02 6E                   		add		sp,sp,#2
   3845 0000D8D4 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ;----------------------------------------------------------------------------
                                        
   3850 0000D8D6                        ReqEnumDevices:
   3851 0000D8D6 FA 6E                   		add		sp,sp,#-6
   3852 0000D8D8 E0 DF                   		sw		lr,[sp]
   3853 0000D8DA E2 D1                   		sw		r1,2[sp]
   3854 0000D8DC E4 D2                   		sw		r2,4[sp]
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 67
noc_boot11.a
   3855 0000D8DE 00 12                   		lw		r2,#0
   3856 0000D8E0                        ReqEnumDevices2:
   3857 0000D8E0 98 4D 2A E1             		lb		r1,NodeNumTbl[r2]
   3858 0000D8E4 00 40 5F 31             		and		r1,#$0F
   3859 0000D8E8 FF 4F 18 10             		cmp		r1,#$08
   3860 0000D8EC 12 A8                   		beq		ReqEnumDevices1
   3861 0000D8EE 38 4F 07 AF             		call	zeroTxBuf
   3862 0000D8F2 98 4D 2A E1             		lb		r1,NodeNumTbl[r2]
   3863 0000D8F6 0E 21                   		zxb		r1
   3864 0000D8F8 81 31                   		shl		r1,#1
   3865 0000D8FA 81 31                   		shl		r1,#1
   3866 0000D8FC 81 31                   		shl		r1,#1
   3867 0000D8FE 81 31                   		shl		r1,#1
   3868 0000D900 61 31                   		or		r1,#1
   3869 0000D902 04 40 0E D1             		sw		r1,txBuf+MSG_DST
   3870 0000D906 02 40 04 11             		lw		r1,#MT_ENUM_DEVICES
   3871 0000D90A 04 40 08 C1             		sb		r1,txBuf+MSG_TYPE
   3872 0000D90E 38 4F 0E AF             		call	Xmit
   3873 0000D912                        ReqEnumDevices1:
   3874 0000D912 01 4B 00 E1             		lb		r1,ROUTER+RTR_RXSTAT
   3875 0000D916 04 A8                   		beq		ReqEnumDevices3
   3876 0000D918 3A 4F 07 AF             		call	Recv
   3877 0000D91C 3C 4F 0C AF             		call	RecvDispatch
   3878 0000D920                        ReqEnumDevices3:
   3879 0000D920 01 62                   		add		r2,r2,#1
   3880 0000D922 FC 4F 21 10             		cmp		r2,#63
   3881 0000D926 DC B4                   		bltu	ReqEnumDevices2
   3882 0000D928 E0 FF                   		lw		lr,[sp]
   3883 0000D92A E2 F1                   		lw		r1,2[sp]
   3884 0000D92C E4 F2                   		lw		r2,4[sp]
   3885 0000D92E 06 6E                   		add		sp,sp,#6
   3886 0000D930 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Ping all the nodes to ensure everything is okay.
                                        ;----------------------------------------------------------------------------
                                        
   3892 0000D932                        ping44:
   3893 0000D932 FA 6E                   		add		sp,sp,#-6
   3894 0000D934 E0 DF                   		sw		lr,[sp]
   3895 0000D936 E2 D1                   		sw		r1,2[sp]
   3896 0000D938 E4 D2                   		sw		r2,4[sp]
   3897 0000D93A 70 40 04 E2             		lb		r2,pingndx
   3898 0000D93E E2 D2                   		sw		r2,2[sp]
   3899 0000D940 98 4D 2A E1             		lb		r1,NodeNumTbl[r2]
   3900 0000D944 00 40 5F 31             		and		r1,#$0F
   3901 0000D948 FF 4F 18 10             		cmp		r1,#$08				; x8 nodes aren't present anymore
   3902 0000D94C 11 A8                   		beq		ping442
   3903 0000D94E 35 4F 07 AF             		call	zeroTxBuf
   3904 0000D952 98 4D 2A E1             		lb		r1,NodeNumTbl[r2]
   3905 0000D956 0E 21                   		zxb		r1
   3906 0000D958 81 31                   		shl		r1,#1
   3907 0000D95A 81 31                   		shl		r1,#1
   3908 0000D95C 81 31                   		shl		r1,#1
   3909 0000D95E 81 31                   		shl		r1,#1
   3910 0000D960 61 31                   		or		r1,#1
   3911 0000D962 04 40 0E D1             		sw		r1,txBuf+MSG_DST
   3912 0000D966 09 11                   		lw		r1,#MT_PING
   3913 0000D968 04 40 08 C1             		sb		r1,txBuf+MSG_TYPE
   3914 0000D96C 35 4F 0F AF             		call	Xmit
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 68
noc_boot11.a
   3915 0000D970                        ping442:
   3916 0000D970 E2 F2                   		lw		r2,2[sp]
   3917 0000D972 01 62                   		add		r2,r2,#1
   3918 0000D974 FC 4F 21 10             		cmp		r2,#63
   3919 0000D978 01 A4                   		bltu	ping441
   3920 0000D97A 00 12                   		lw		r2,#0
   3921 0000D97C                        ping441:
   3922 0000D97C 70 40 04 C2             		sb		r2,pingndx
   3923 0000D980 E0 FF                   		lw		lr,[sp]
   3924 0000D982 E2 F1                   		lw		r1,2[sp]
   3925 0000D984 E4 F2                   		lw		r2,4[sp]
   3926 0000D986 06 6E                   		add		sp,sp,#6
   3927 0000D988 F0 80                   		ret
                                        
   3929 0000D98A                        NodeNumTbl:
   3930 0000D98A 11 12 13 14 15 16 17    	db	$11,$12,$13,$14,$15,$16,$17,$18	
   3930 0000D991 18                    
   3931 0000D992 21 22 23 24 25 26 27    	db	$21,$22,$23,$24,$25,$26,$27,$28	
   3931 0000D999 28                    
   3932 0000D99A 31 32 33 34 35 36 37    	db	$31,$32,$33,$34,$35,$36,$37,$38	
   3932 0000D9A1 38                    
   3933 0000D9A2 41 42 43 44 45 46 47    	db	$41,$42,$43,$44,$45,$46,$47,$48	
   3933 0000D9A9 48                    
   3934 0000D9AA 51 52 53 54 55 56 57    	db	$51,$52,$53,$54,$55,$56,$57,$58	
   3934 0000D9B1 58                    
   3935 0000D9B2 61 62 63 64 65 66 67    	db	$61,$62,$63,$64,$65,$66,$67,$68	
   3935 0000D9B9 68                    
   3936 0000D9BA 71 72 73 74 75 76 77    	db	$71,$72,$73,$74,$75,$76,$77,$78	
   3936 0000D9C1 78                    
   3937 0000D9C2 81 82 83 84 85 86 87    	db	$81,$82,$83,$84,$85,$86,$87,$88	
   3937 0000D9C9 88                    
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Test if it's time to do a ping message. All the nodes are pinged
                                        ; periodically to ensure the network is working.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        		align	2
   3951 0000D9CA                        DoPing:
   3952 0000D9CA FC 6E                   		add		sp,sp,#-4
   3953 0000D9CC E0 DF                   		sw		lr,[sp]
   3954 0000D9CE E2 D1                   		sw		r1,2[sp]
   3955 0000D9D0 0A 40 02 F1             		lw		r1,pingcnt
   3956 0000D9D4 01 61                   		add		r1,r1,#1
   3957 0000D9D6 0A 40 02 D1             		sw		r1,pingcnt
   3958 0000D9DA CE 4F 10 10             		cmp		r1,#800
   3959 0000D9DE 03 A4                   		bltu	DoPingNoPing
   3960 0000D9E0 0A 40 02 D0             		sw		r0,pingcnt
   3961 0000D9E4 A6 BF                   		call	ping44
   3962 0000D9E6                        DoPingNoPing:
   3963 0000D9E6 E0 FF                   		lw		lr,[sp]
   3964 0000D9E8 E2 F1                   		lw		r1,2[sp]
   3965 0000D9EA 04 6E                   		add		sp,sp,#4
   3966 0000D9EC F0 80                   		ret
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 69
noc_boot11.a
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Command processor for the node.
                                        ;----------------------------------------------------------------------------
                                        
   3972 0000D9EE                        NodeCmdProc:
   3973 0000D9EE F8 6E                   		add		sp,sp,#-8
   3974 0000D9F0 E0 DF                   		sw		lr,[sp]
   3975 0000D9F2 E2 D1                   		sw		r1,2[sp]
   3976 0000D9F4 E4 D2                   		sw		r2,4[sp]
   3977 0000D9F6 E6 D3                   		sw		r3,6[sp]
   3978 0000D9F8 1E 10                   		cmp		r1,#MT_RST_ACK	; status display ?
   3979 0000D9FA 1E A9                   		bne		NodeCmdProc2
   3980 0000D9FC                        RecvPingAck:
   3981 0000D9FC 05 40 0C F1             		lw		r1,rxBuf+MSG_SRC; message source
   3982 0000DA00 10 12                   		mov		r2,r1
   3983 0000DA02 0F 40 50 32             		and		r2,#$0F0		; get Y coord
   3984 0000DA06 A1 32                   		shr		r2,#1
   3985 0000DA08 A1 32                   		shr		r2,#1
   3986 0000DA0A A1 32                   		shr		r2,#1
   3987 0000DA0C FA 4D 24 F2             		lw		r2,lineTbl[r2]
   3988 0000DA10 56 62                   		add		r2,r2,#86		; position table along right edge of screen
   3989 0000DA12 10 13                   		mov		r3,r1			; r3 = ID
   3990 0000DA14 A1 33                   		shr		r3,#1			; set r3 = X coord
   3991 0000DA16 A1 33                   		shr		r3,#1
   3992 0000DA18 A1 33                   		shr		r3,#1
   3993 0000DA1A A1 33                   		shr		r3,#1
   3994 0000DA1C A1 33                   		shr		r3,#1
   3995 0000DA1E A1 33                   		shr		r3,#1
   3996 0000DA20 A1 33                   		shr		r3,#1
   3997 0000DA22 A1 33                   		shr		r3,#1
   3998 0000DA24 81 33                   		shl		r3,#1			; character screen pos = *2
   3999 0000DA26 01 40 5E 33             		and		r3,#$1E
   4000 0000DA2A 20 23                   		add		r3,r2
                                        		;lw		r1,#'*'
                                        		;call	AsciiToScreen
                                        		;lw		r2,NormAttr
                                        		;or		r1,r2
   4005 0000DA2C 00 42 30 F1             		lw		r1,TXTSCR[r3]
   4006 0000DA30 01 61                   		add		r1,r1,#1
   4007 0000DA32 00 42 30 D1             		sw		r1,TXTSCR[r3]
   4008 0000DA36 39 AE                   		bra		NodeCmdProcXit
   4009 0000DA38                        NodeCmdProc2:
   4010 0000DA38                        NodeCmdProc10:
   4011 0000DA38 FE 4F 1E 10             		cmp		r1,#MT_PING_ACK
   4012 0000DA3C DF B8                   		beq		RecvPingAck
   4013 0000DA3E 1C 10                   		cmp		r1,#MT_KEYSTROKE
   4014 0000DA40 3A A8                   		beq		RecvKeystroke
   4015 0000DA42 FE 4F 1D 10             		cmp		r1,#MT_ETH_PACKET
   4016 0000DA46 52 A8                   		beq		RecvEthPacket
   4017 0000DA48 FD 4F 1B 10             		cmp		r1,#MT_ENUM_DEVICES1
   4018 0000DA4C 5D A8                   		beq		NodeCmdProcEnumDevices1
   4019 0000DA4E FD 4F 1A 10             		cmp		r1,#MT_ENUM_DEVICES2
   4020 0000DA52 6D A8                   		beq		NodeCmdProcEnumDevices2
   4021 0000DA54 FF 4F 11 10             		cmp		r1,#MT_REQ_OUT_FOCUS
   4022 0000DA58 1E A9                   		bne		NodeCmdProc3
   4023 0000DA5A 05 40 0C F1             		lw		r1,rxBuf+MSG_SRC
   4024 0000DA5E 10 12                   		mov		r2,r1
   4025 0000DA60 A1 31                   		shr		r1,#1
   4026 0000DA62 A1 31                   		shr		r1,#1
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 70
noc_boot11.a
   4027 0000DA64 A1 31                   		shr		r1,#1
   4028 0000DA66 A1 31                   		shr		r1,#1
   4029 0000DA68 FF 61                   		sub		r1,r1,#1
   4030 0000DA6A 57 31                   		and		r1,#$7
   4031 0000DA6C F0 4F 20 12             		sub		r2,r2,#$100
   4032 0000DA70 70 40 50 32             		and		r2,#$700
   4033 0000DA74 A1 32                   		shr		r2,#1
   4034 0000DA76 A1 32                   		shr		r2,#1
   4035 0000DA78 A1 32                   		shr		r2,#1
   4036 0000DA7A A1 32                   		shr		r2,#1
   4037 0000DA7C A1 32                   		shr		r2,#1
   4038 0000DA7E 26 21                   		or		r1,r2
   4039 0000DA80 01 12                   		lw		r2,#1
   4040 0000DA82 0A 40 18 C2             		sb		r2,FocusTbl[r1]
   4041 0000DA86 6F 40 0C F1             		lw		r1,HTFocus
   4042 0000DA8A 05 A9                   		bne		NodeCmdProc3
   4043 0000DA8C 05 40 0C F1             		lw		r1,rxBuf+MSG_SRC
   4044 0000DA90 6F 40 0C D1             		sw		r1,HTFocus
   4045 0000DA94 0A AE                   		br		NodeCmdProcXit
                                        
   4047 0000DA96                        NodeCmdProc3:
   4048 0000DA96 FD 4F 1F 10             		cmp		r1,#MT_NEXT_IOFOCUS
   4049 0000DA9A 02 A9                   		bne		NodeCmdProc8
   4050 0000DA9C 6D AF                   		call	SetNextFocus
   4051 0000DA9E 05 AE                   		br		NodeCmdProcXit
                                        
   4053 0000DAA0                        NodeCmdProc8:
   4054 0000DAA0 FB 4F 13 10             		cmp		r1,#DVC_PutChar
   4055 0000DAA4 08 A8                   		beq		RecvKeystroke
                                        
   4057 0000DAA6 34 4F 03 AF             		call	StdMsgHandlers
                                        
   4059 0000DAAA                        NodeCmdProc12:
   4060 0000DAAA                        NodeCmdProcXit:
   4061 0000DAAA E0 FF                   		lw		lr,[sp]
   4062 0000DAAC E2 F1                   		lw		r1,2[sp]
   4063 0000DAAE E4 F2                   		lw		r2,4[sp]
   4064 0000DAB0 E6 F3                   		lw		r3,6[sp]
   4065 0000DAB2 08 6E                   		add		sp,sp,#8
   4066 0000DAB4 F0 80                   		ret
                                        
                                        		; Process a keystroke message from node $21
   4069 0000DAB6                        RecvKeystroke:
   4070 0000DAB6 08 11                   		lw		r1,#8
   4071 0000DAB8 20 4B 00 C1             		sb		r1,LEDS
   4072 0000DABC 0A 40 02 E1             		lb		r1,kbdcnt
   4073 0000DAC0 FF 4F 11 10             		cmp		r1,#15
   4074 0000DAC4 12 A1                   		bge		kbdfull
   4075 0000DAC6 01 61                   		add		r1,r1,#1
   4076 0000DAC8 0A 40 02 C1             		sb		r1,kbdcnt
   4077 0000DACC 0A 40 00 E2             		lb		r2,kbdhead
   4078 0000DAD0 05 40 02 E1             		lb		r1,rxBuf+2
   4079 0000DAD4 06 40 20 C1             		sb		r1,kbdbuf[r2]
   4080 0000DAD8 05 40 01 E1             		lb		r1,rxBuf+1
   4081 0000DADC 06 40 21 C1             		sb		r1,kbdbuf+1[r2]
   4082 0000DAE0 02 62                   		add		r2,r2,#2
   4083 0000DAE2 01 40 5E 32             		and		r2,#30
   4084 0000DAE6 0A 40 00 C2             		sb		r2,kbdhead
   4085 0000DAEA                        kbdfull:
   4086 0000DAEA DF BE                   		br		NodeCmdProcXit
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 71
noc_boot11.a
                                        
   4088 0000DAEC                        RecvEthPacket:
   4089 0000DAEC 05 40 02 F1             		lw		r1,rxBuf+2
   4090 0000DAF0 70 40 00 F2             		lw		r2,packetPtr
   4091 0000DAF4 20 D1                   		sw		r1,[r2]
   4092 0000DAF6 02 62                   		add		r2,r2,#2
   4093 0000DAF8 36 4D 28 10             		cmp		r2,#TXTSCR+3224
   4094 0000DAFC 02 A4                   		bltu	RecvEthPacket1
   4095 0000DAFE C3 42 00 12             		lw		r2,#TXTSCR+3120
   4096 0000DB02                        RecvEthPacket1:
   4097 0000DB02 70 40 00 D2             		sw		r2,packetPtr
   4098 0000DB06 D1 BE                   		br		NodeCmdProcXit
                                        
   4100 0000DB08                        NodeCmdProcEnumDevices1:
   4101 0000DB08 6F 40 08 F2             		lw		r2,DevListNdx
   4102 0000DB0C 05 40 00 F1             		lw		r1,rxBuf
   4103 0000DB10 17 40 28 D1             		sw		r1,DevList[r2]
   4104 0000DB14 05 40 02 F1             		lw		r1,rxBuf+2
   4105 0000DB18 17 40 2A D1             		sw		r1,DevList+2[r2]
   4106 0000DB1C 05 40 04 F1             		lw		r1,rxBuf+4
   4107 0000DB20 17 40 2C D1             		sw		r1,DevList+4[r2]
   4108 0000DB24 05 40 06 F1             		lw		r1,rxBuf+6
   4109 0000DB28 17 40 2E D1             		sw		r1,DevList+6[r2]
   4110 0000DB2C BE BE                   		br		NodeCmdProcXit
                                        
   4112 0000DB2E                        NodeCmdProcEnumDevices2:
   4113 0000DB2E 6F 40 08 F2             		lw		r2,DevListNdx
   4114 0000DB32 05 40 00 F1             		lw		r1,rxBuf
   4115 0000DB36 18 40 20 D1             		sw		r1,DevList+8[r2]
   4116 0000DB3A 05 40 02 F1             		lw		r1,rxBuf+2
   4117 0000DB3E 18 40 22 D1             		sw		r1,DevList+10[r2]
   4118 0000DB42 05 40 04 F1             		lw		r1,rxBuf+4
   4119 0000DB46 18 40 24 D1             		sw		r1,DevList+12[r2]
   4120 0000DB4A 05 40 06 F1             		lw		r1,rxBuf+6
   4121 0000DB4E 18 40 26 D1             		sw		r1,DevList+14[r2]
   4122 0000DB52 20 14                   		mov		r4,r2
   4123 0000DB54 10 62                   		add		r2,r2,#16
   4124 0000DB56 6F 40 08 D2             		sw		r2,DevListNdx
                                        		; Now display the device number and name on screen
   4126 0000DB5A 17 40 48 F1             		lw		r1,DevList[r4]
   4127 0000DB5E 86 AF                   		call	DispWord
   4128 0000DB60 7D AF                   		call	DispSpace
   4129 0000DB62 17 40 4A E3             		lb		r3,DevList+2[r4]	; length of string
   4130 0000DB66                        NodeCmdProcEnumDevices3:
   4131 0000DB66 17 40 4B E1             		lb		r1,DevList+3[r4]
   4132 0000DB6A F2 AF                   		call	putcharScr
   4133 0000DB6C 01 64                   		add		r4,r4,#1
   4134 0000DB6E 3D 24                   		cmp		r4,r3
   4135 0000DB70 FA B4                   		bltu	NodeCmdProcEnumDevices3
   4136 0000DB72 74 AF                   		call	DispSpace
   4137 0000DB74 73 AF                   		call	DispSpace
   4138 0000DB76 99 BE                   		br		NodeCmdProcXit
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Set the IO focus to the next node requesting focus.
                                        ;----------------------------------------------------------------------------
                                        
   4144 0000DB78                        SetNextFocus:
   4145 0000DB78 FE 6E                   		add		sp,sp,#-2
   4146 0000DB7A E0 DF                   		sw		lr,[sp]
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 72
noc_boot11.a
   4147 0000DB7C 00 15                   		lw		r5,#0
   4148 0000DB7E 0A 40 08 12             		lw		r2,#FocusTbl
   4149 0000DB82 0A 40 06 F3             		lw		r3,FocusHead
   4150 0000DB86                        SetNextFocus1:
   4151 0000DB86 01 65                   		add		r5,r5,#1
   4152 0000DB88 FC 4F 50 10             		cmp		r5,#64
   4153 0000DB8C 21 A7                   		bgtu	SetFocusNextXit
   4154 0000DB8E 01 63                   		add		r3,r3,#1
   4155 0000DB90 FC 4F 31 10             		cmp		r3,#63
   4156 0000DB94 01 A6                   		bleu	SetNextFocus2
   4157 0000DB96 00 13                   		lw		r3,#0
   4158 0000DB98                        SetNextFocus2:
   4159 0000DB98 20 14                   		mov		r4,r2
   4160 0000DB9A 30 24                   		add		r4,r3
   4161 0000DB9C 40 E1                   		lb		r1,[r4]
   4162 0000DB9E F3 B8                   		beq		SetNextFocus1
   4163 0000DBA0 0A 40 07 C3             		sb		r3,FocusHead
   4164 0000DBA4 98 4D 3A E3             		lb		r3,NodeNumTbl[r3]
   4165 0000DBA8 81 33                   		shl		r3,#1
   4166 0000DBAA 81 33                   		shl		r3,#1
   4167 0000DBAC 81 33                   		shl		r3,#1
   4168 0000DBAE 81 33                   		shl		r3,#1
   4169 0000DBB0 61 33                   		or		r3,#1
   4170 0000DBB2 6F 40 0C D3             		sw		r3,HTFocus
   4171 0000DBB6 22 4F 03 AF             		call	zeroTxBuf
   4172 0000DBBA 04 40 00 D3             		sw		r3,txBuf
   4173 0000DBBE 05 11                   		lw		r1,#MT_SET_IOFOCUS
   4174 0000DBC0 04 40 08 C1             		sb		r1,txBuf+MSG_TYPE
   4175 0000DBC4 21 40 01 11             		lw		r1,#$211
   4176 0000DBC8 04 40 0E D1             		sw		r1,txBuf+MSG_DST
   4177 0000DBCC 22 4F 0F AF             		call	Xmit
   4178 0000DBD0                        SetFocusNextXit:
   4179 0000DBD0 E0 FF                   		lw		lr,[sp]
   4180 0000DBD2 02 6E                   		add		sp,sp,#2
   4181 0000DBD4 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Initialize the text controller.
                                        ;----------------------------------------------------------------------------
                                        
   4187 0000DBD6                        InitTxtCtrl:
   4188 0000DBD6 02 11                   		lw		r1,#2
   4189 0000DBD8 20 4B 00 C1             		sb		r1,LEDS
   4190 0000DBDC 00 12                   		lw		r2,#0
   4191 0000DBDE                        itc1:
   4192 0000DBDE F9 4D 23 E1             		lb		r1,txtctrl_dat[r2]
   4193 0000DBE2 10 4B 20 C1             		sb		r1,TXTCTRL[r2]
   4194 0000DBE6 01 62                   		add		r2,r2,#1
   4195 0000DBE8 FF 4F 21 10             		cmp		r2,#15
   4196 0000DBEC F8 B2                   		ble		itc1
   4197 0000DBEE 03 11                   		lw		r1,#3
   4198 0000DBF0 20 4B 00 C1             		sb		r1,LEDS
   4199 0000DBF4 F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ; Dump recieved message to screen.
                                        ;
                                        ; Parameters:
                                        ;	<none> data in receive buffer
                                        ; Returns:
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 73
noc_boot11.a
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;------------------------------------------------------------------------------
                                        
   4212 0000DBF6                        RecvDump:
   4213 0000DBF6 FC 6E                   		sub		sp,sp,#4
   4214 0000DBF8 E0 DF                   		sw		lr,[sp]
   4215 0000DBFA E2 D1                   		sw		r1,2[sp]
   4216 0000DBFC 05 40 0C F1             		lw		r1,rxBuf+MSG_SRC
   4217 0000DC00 DE 4F 1F 10             		cmp		r1,#$211
   4218 0000DC04 1D A9                   		bne		RecvDump1
   4219 0000DC06 20 AF                   		call	DispCRLF
   4220 0000DC08 05 40 0E F1             		lw		r1,rxBuf+MSG_DST
   4221 0000DC0C 2F AF                   		call	DispWord
   4222 0000DC0E 26 AF                   		call	DispSpace
   4223 0000DC10 05 40 0C F1             		lw		r1,rxBuf+MSG_SRC
   4224 0000DC14 2B AF                   		call	DispWord
   4225 0000DC16 22 AF                   		call	DispSpace
   4226 0000DC18 05 40 09 E1             		lb		r1,rxBuf+MSG_TTL
   4227 0000DC1C 39 AF                   		call	DispByte
   4228 0000DC1E 1E AF                   		call	DispSpace
   4229 0000DC20 05 40 08 E1             		lb		r1,rxBuf+MSG_TYPE
   4230 0000DC24 35 AF                   		call	DispByte
   4231 0000DC26 1A AF                   		call	DispSpace
   4232 0000DC28 05 40 06 F1             		lw		r1,rxBuf+6
   4233 0000DC2C 1F AF                   		call	DispWord
   4234 0000DC2E 05 40 04 F1             		lw		r1,rxBuf+4
   4235 0000DC32 1C AF                   		call	DispWord
   4236 0000DC34 05 40 02 F1             		lw		r1,rxBuf+2
   4237 0000DC38 19 AF                   		call	DispWord
   4238 0000DC3A 05 40 00 F1             		lw		r1,rxBuf+0
   4239 0000DC3E 16 AF                   		call	DispWord
   4240 0000DC40                        RecvDump1:
   4241 0000DC40 E0 FF                   		lw		lr,[sp]
   4242 0000DC42 E2 F1                   		lw		r1,2[sp]
   4243 0000DC44 04 6E                   		add		sp,sp,#4
   4244 0000DC46 F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ;------------------------------------------------------------------------------
                                        
   4249 0000DC48                        DispCRLF:
   4250 0000DC48 FE 6E                   		sub		sp,sp,#2
   4251 0000DC4A E0 DF                   		sw		lr,[sp]
   4252 0000DC4C 00 40 0D 11             		lw		r1,#13
   4253 0000DC50 7F AF                   		call	putcharScr
   4254 0000DC52 0A 11                   		lw		r1,#10
   4255 0000DC54 7D AF                   		call	putcharScr
   4256 0000DC56 E0 FF                   		lw		lr,[sp]
   4257 0000DC58 02 6E                   		add		sp,sp,#2
   4258 0000DC5A F0 80                   		ret
                                        
   4260 0000DC5C                        DispSpace:
   4261 0000DC5C FE 6E                   		sub		sp,sp,#2
   4262 0000DC5E E0 DF                   		sw		lr,[sp]
   4263 0000DC60 02 40 00 11             		lw		r1,#' '
   4264 0000DC64 75 AF                   		call	putcharScr
   4265 0000DC66 E0 FF                   		lw		lr,[sp]
   4266 0000DC68 02 6E                   		add		sp,sp,#2
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 74
noc_boot11.a
   4267 0000DC6A F0 80                   		ret
                                        
   4269 0000DC6C                        DispWord:
   4270 0000DC6C FC 6E                   		add		sp,sp,#-4
   4271 0000DC6E E0 DF                   		sw		lr,[sp]
   4272 0000DC70 E2 D1                   		sw		r1,2[sp]
   4273 0000DC72 A1 31                   		shr		r1,#1
   4274 0000DC74 A1 31                   		shr		r1,#1
   4275 0000DC76 A1 31                   		shr		r1,#1
   4276 0000DC78 A1 31                   		shr		r1,#1
   4277 0000DC7A A1 31                   		shr		r1,#1
   4278 0000DC7C A1 31                   		shr		r1,#1
   4279 0000DC7E A1 31                   		shr		r1,#1
   4280 0000DC80 A1 31                   		shr		r1,#1
   4281 0000DC82 06 AF                   		call	DispByte
   4282 0000DC84 E2 F1                   		lw		r1,2[sp]
   4283 0000DC86 04 AF                   		call	DispByte
   4284 0000DC88 E2 F1                   		lw		r1,2[sp]
   4285 0000DC8A E0 FF                   		lw		lr,[sp]
   4286 0000DC8C 04 6E                   		add		sp,sp,#4
   4287 0000DC8E F0 80                   		ret
                                        
   4289 0000DC90                        DispByte:
   4290 0000DC90 FC 6E                   		add		sp,sp,#-4
   4291 0000DC92 E0 DF                   		sw		lr,[sp]
   4292 0000DC94 E2 D1                   		sw		r1,2[sp]
   4293 0000DC96 A1 31                   		shr		r1,#1
   4294 0000DC98 A1 31                   		shr		r1,#1
   4295 0000DC9A A1 31                   		shr		r1,#1
   4296 0000DC9C A1 31                   		shr		r1,#1
   4297 0000DC9E 06 AF                   		call	DispNybble
   4298 0000DCA0 E2 F1                   		lw		r1,2[sp]
   4299 0000DCA2 04 AF                   		call	DispNybble
   4300 0000DCA4 E2 F1                   		lw		r1,2[sp]
   4301 0000DCA6 E0 FF                   		lw		lr,[sp]
   4302 0000DCA8 04 6E                   		add		sp,sp,#4
   4303 0000DCAA F0 80                   		ret
                                        
   4305 0000DCAC                        DispNybble:
   4306 0000DCAC FC 6E                   		add		sp,sp,#-4
   4307 0000DCAE E0 DF                   		sw		lr,[sp]
   4308 0000DCB0 E2 D1                   		sw		r1,2[sp]
   4309 0000DCB2 00 40 5F 31             		and		r1,#$0F
   4310 0000DCB6 FF 4F 16 10             		cmp		r1,#10
   4311 0000DCBA 04 A1                   		bge		DispNybble1
   4312 0000DCBC 03 40 60 31             		or		r1,#$30
   4313 0000DCC0 47 AF                   		call	putcharScr
   4314 0000DCC2 02 AE                   		br		DispNybble2
   4315 0000DCC4                        DispNybble1:
   4316 0000DCC4 37 61                   		add		r1,#'A'-10
   4317 0000DCC6 44 AF                   		call	putcharScr
   4318 0000DCC8                        DispNybble2:
   4319 0000DCC8 E2 F1                   		lw		r1,2[sp]
   4320 0000DCCA E0 FF                   		lw		lr,[sp]
   4321 0000DCCC 04 6E                   		add		sp,sp,#4
   4322 0000DCCE F0 80                   		ret
                                        				
                                        ; Convert Ascii character to screen character.
                                        ;
                                        ; Parameters:
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 75
noc_boot11.a
                                        ;	r1 = character to convert
                                        ; Returns:
                                        ;	r1 = converted character
                                        ;
                                        ;------------------------------------------------------------------------------
                                        
   4333 0000DCD0                        AsciiToScreen:
   4334 0000DCD0 FE 6E                   		add		sp,sp,#-2
   4335 0000DCD2 E0 D2                   		sw		r2,[sp]
   4336 0000DCD4 0F 40 5F 31             		and		r1,#$FF
   4337 0000DCD8 10 12                   		mov		r2,r1
   4338 0000DCDA 02 40 50 32             		and		r2,#%00100000	; if bit 5 isn't set
   4339 0000DCDE 06 A8                   		beq		ats1
   4340 0000DCE0 10 12                   		mov		r2,r1
   4341 0000DCE2 04 40 50 32             		and		r2,#%01000000	; or bit 6 isn't set
   4342 0000DCE6 02 A8                   		beq		ats1
   4343 0000DCE8 09 40 5F 31             		and		r1,#%10011111
   4344 0000DCEC                        ats1:
   4345 0000DCEC E0 F2                   		lw		r2,[sp]
   4346 0000DCEE 02 6E                   		add		sp,sp,#2
   4347 0000DCF0 F0 80                   		ret
                                        
                                        ;------------------------------------------------------------------------------
                                        ; Convert screen character to Ascii character.
                                        ;
                                        ; Parameters:
                                        ;	r1 = character to convert
                                        ; Returns:
                                        ;	r1 = converted character
                                        ;
                                        ;------------------------------------------------------------------------------
                                        
   4359 0000DCF2                        ScreenToAscii:
   4360 0000DCF2 FE 4F 15 10             	cmp		r1,#26+1
   4361 0000DCF6 01 A5                   	bgeu	ScreenToAscii1
   4362 0000DCF8 60 61                   	add		r1,#$60
   4363 0000DCFA                        ScreenToAscii1:
   4364 0000DCFA F0 80                   	ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Clear the screen.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	r1,r2,r3
                                        ;----------------------------------------------------------------------------
                                        
   4377 0000DCFC                        ClearScreen:
   4378 0000DCFC FE 6E                   		add		sp,sp,#-2
   4379 0000DCFE E0 DF                   		sw		lr,[sp]
   4380 0000DD00 02 40 00 11             		lw		r1,#' '
   4381 0000DD04 E5 BF                   		call	AsciiToScreen
   4382 0000DD06 71 40 02 F2             		lw		r2,NormAttr
   4383 0000DD0A 26 21                   		or		r1,r2
   4384 0000DD0C 10 13                   		mov		r3,r1
   4385 0000DD0E 64 40 0C 11             		lw		r1,#1612	; 52x31
   4386 0000DD12 00 42 00 12             		lw		r2,#TXTSCR
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 76
noc_boot11.a
   4387 0000DD16                        cs1:
   4388 0000DD16 20 D3                   		sw		r3,[r2]
   4389 0000DD18 02 62                   		add		r2,r2,#2
   4390 0000DD1A FF 61                   		add		r1,r1,#-1
   4391 0000DD1C FC BB                   		bpl		cs1
   4392 0000DD1E E0 FF                   		lw		lr,[sp]
   4393 0000DD20 02 6E                   		add		sp,sp,#2
   4394 0000DD22 F0 80                   		ret
                                        
                                        ;----------------------------------------------------------------------------
                                        ; Home the cursor
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	<none>
                                        ; Registers Affected:
                                        ;	<none>
                                        ;----------------------------------------------------------------------------
                                        
   4407 0000DD24                        HomeCursor:
   4408 0000DD24 70 40 08 C0             		sb		r0,cursy
   4409 0000DD28 70 40 07 C0             		sb		r0,cursx
   4410 0000DD2C 70 40 08 D0             		sw		r0,pos
   4411 0000DD30 F0 80                   		ret
                                        
                                        ; flash the character at the screen position
                                        ;   r1: 1 = flash, 0 = no flash
   4415 0000DD32                        flashCursor:
   4416 0000DD32 F0 80                   		ret
                                        
                                        ;-----------------------------------------------------------------
                                        ; Display a message on the screen
                                        ;
                                        ; Parameters:
                                        ;	r1 = message address
                                        ;	screen pos controls where message is displayed
                                        ; Returns:
                                        ; 	r1 = points to null character
                                        ;-----------------------------------------------------------------
                                        
   4428 0000DD34                        putmsgScr:
   4429 0000DD34 FC 6E                   	sub		sp,sp,#4	; allocate stack frame
   4430 0000DD36 E0 DF                   	sw		lr,[sp]	; save off link reg
   4431 0000DD38 E2 D3                   	sw		r3,2[sp]
   4432 0000DD3A 10 13                   	mov		r3,r1		; r3 = msg address
   4433 0000DD3C                        putmsg3:
   4434 0000DD3C 30 E1                   	lb		r1,[r3]		; get char to display
   4435 0000DD3E 03 A8                   	beq		putmsg4
   4436 0000DD40 07 AF                   	call	putcharScr	; store to screen
   4437 0000DD42 01 63                   	add		r3,r3,#1	; inc msg pointer
   4438 0000DD44 FB BE                   	br		putmsg3
   4439 0000DD46                        putmsg4:
   4440 0000DD46 30 11                   	mov		r1,r3
   4441 0000DD48 E2 F3                   	lw		r3,2[sp]
   4442 0000DD4A E0 FF                   	lw		lr,[sp]
   4443 0000DD4C 04 6E                   	add		sp,sp,#4
   4444 0000DD4E F0 80                   	ret
                                        
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 77
noc_boot11.a
                                        ;-----------------------------------------------------------------
                                        ; Put a character to the screen
                                        ;
                                        ; Parameters:
                                        ;	r1.b = character to put
                                        ;-----------------------------------------------------------------
                                        
   4454 0000DD50                        putcharScr
   4455 0000DD50 F6 6E                   	sub		sp,sp,#10
   4456 0000DD52 E0 DF                   	sw		lr,[sp]
   4457 0000DD54 E2 D1                   	sw		r1,2[sp]
   4458 0000DD56 E4 D4                   	sw		r4,4[sp]
   4459 0000DD58 E6 D5                   	sw		r5,6[sp]
   4460 0000DD5A E8 D6                   	sw		r6,8[sp]
                                        
   4462 0000DD5C 0E 21                   	zxb		r1			; mask
                                        
                                        	; first turn off any flashing cursor - it may be moved
   4465 0000DD5E 10 14                   	lw		r4,r1
   4466 0000DD60 00 11                   	lw		r1,#0
   4467 0000DD62 E7 BF                   	call	flashCursor
   4468 0000DD64 40 11                   	lw		r1,r4
                                        
                                        	; process carriage return
   4471 0000DD66 FF 4F 13 10             	cmp		r1,#CR		; carriage return ?
   4472 0000DD6A 0A A9                   	bne		pc1
   4473 0000DD6C 70 40 08 F1             	lw		r1,pos		; subtract X from position
   4474 0000DD70 70 40 07 E4             	lb		r4,cursx
   4475 0000DD74 42 21                   	sub		r1,r4
   4476 0000DD76 70 40 08 D1             	sw		r1,pos
   4477 0000DD7A 70 40 07 C0             	sb		r0,cursx	; and set X to zero
   4478 0000DD7E 70 AE                   	jmp		pc7
                                        
                                        	; process line feed
   4481 0000DD80                        pc1
   4482 0000DD80 FF 4F 16 10             	cmp		r1,#LF		; line feed ?
   4483 0000DD84 14 A9                   	bne		pc2
   4484 0000DD86 70 40 08 E1             	lb		r1,cursy	; past line 31 ?
   4485 0000DD8A 70 40 06 E4             	lb		r4,txtHeight
   4486 0000DD8E FE 64                   	sub		r4,r4,#2
   4487 0000DD90 4D 21                   	cmp		r1,r4
   4488 0000DD92 02 A4                   	bltu	pc3			; if we are, then just scroll the screen
   4489 0000DD94 73 AF                   	call	scrollScreenUp
   4490 0000DD96 64 AE                   	jmp		pc7
   4491 0000DD98                        pc3
   4492 0000DD98 01 61                   	add		r1,r1,#1	; increment Y
   4493 0000DD9A 70 40 08 C1             	sb		r1,cursy
   4494 0000DD9E 70 40 08 F1             	lw		r1,pos		; and the cursor position
   4495 0000DDA2 70 40 05 E4             	lb		r4,txtWidth
   4496 0000DDA6 40 21                   	add		r1,r4
   4497 0000DDA8 70 40 08 D1             	sw		r1,pos
   4498 0000DDAC 59 AE                   	jmp		pc7
                                        
                                        	; backspace
   4501 0000DDAE                        pc2
   4502 0000DDAE FF 4F 18 10             	cmp		r1,#CTRLH	; backspace ?
   4503 0000DDB2 21 A9                   	bne		pc4
   4504 0000DDB4 70 40 07 E1             	lb		r1,cursx	; is cursor.x already zero ?
   4505 0000DDB8 01 A9                   	bne		pc5			
   4506 0000DDBA 52 AE                   	jmp		pc7			; can't backspace
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 78
noc_boot11.a
   4507 0000DDBC                        pc5
   4508 0000DDBC FF 61                   	sub		r1,r1,#1
   4509 0000DDBE 70 40 07 C1             	sb		r1,cursx
   4510 0000DDC2 70 40 08 F4             	lw		r4,pos
   4511 0000DDC6 FF 64                   	sub		r4,r4,#1
   4512 0000DDC8 70 40 08 D4             	sw		r4,pos
                                        	; shift remaining characters on line over
   4514 0000DDCC 81 34                   	shl		r4,#1		; r4 = n
   4515 0000DDCE 00 42 00 16             	lw		r6,#TXTSCR
   4516 0000DDD2 40 26                   	add		r6,r4		; r6 = target pos
   4517 0000DDD4 70 40 05 E4             	lb		r4,txtWidth
   4518 0000DDD8 FE 64                   	sub		r4,r4,#2
   4519 0000DDDA                        pc6
   4520 0000DDDA 62 F5                   	lw		r5,2[r6]	; shift next char
   4521 0000DDDC 60 D5                   	sw		r5,[r6]		; over to this one
   4522 0000DDDE 02 66                   	add		r6,r6,#2
   4523 0000DDE0 01 61                   	add		r1,r1,#1	; until X = 39
   4524 0000DDE2 4D 21                   	cmp		r1,r4
   4525 0000DDE4 FA B4                   	bltu	pc6
                                        	; blank trailing character
   4527 0000DDE6 02 40 00 11             	lw		r1,#' '
   4528 0000DDEA 72 BF                   	call	AsciiToScreen
   4529 0000DDEC 71 40 02 F5             	lw		r5,NormAttr
   4530 0000DDF0 56 21                   	or		r1,r5
   4531 0000DDF2 60 D1                   	sw		r1,[r6]
   4532 0000DDF4 35 AE                   	jmp		pc7
                                        
                                        	; control character (non-printable)
   4535 0000DDF6                        pc4
   4536 0000DDF6 FE 4F 10 10             	cmp		r1,#' '
   4537 0000DDFA 01 A5                   	bgeu	pc11
   4538 0000DDFC 31 AE                   	jmp		pc7
                                        
                                        
                                        	; some other character
                                        	; put the character to the screen, then advance cursor
   4543 0000DDFE                        pc11
   4544 0000DDFE 68 BF                   	call	AsciiToScreen
   4545 0000DE00 71 40 02 F4             	lw		r4,NormAttr
   4546 0000DE04 46 21                   	or		r1,r4
   4547 0000DE06 00 42 00 14             	lw		r4,#TXTSCR
   4548 0000DE0A 70 40 08 F5             	lw		r5,pos
   4549 0000DE0E 81 35                   	shl		r5,#1		; pos * 2
   4550 0000DE10 50 24                   	add		r4,r5		; scr[pos]
   4551 0000DE12 40 D1                   	sw		r1,[r4]		; = char
                                        	; advance cursor
   4553 0000DE14 70 40 08 F5             	lw		r5,pos
   4554 0000DE18 70 40 05 E1             	lb		r1,txtWidth
   4555 0000DE1C FE 61                   	sub		r1,r1,#2
   4556 0000DE1E 70 40 07 E4             	lb		r4,cursx
   4557 0000DE22 1D 24                   	cmp		r4,r1		; would we be at end of line ?
   4558 0000DE24 17 A6                   	bleu	pc8
   4559 0000DE26 42 25                   	sub		r5,r4		; pos -= cursx
   4560 0000DE28 70 40 08 D5             	sw		r5,pos
   4561 0000DE2C 70 40 07 C0             	sb		r0,cursx	; cursor.x = 0
   4562 0000DE30 70 40 08 E4             	lb		r4,cursy
   4563 0000DE34 70 40 06 E1             	lb		r1,txtHeight
   4564 0000DE38 FE 61                   	sub		r1,r1,#2
   4565 0000DE3A 1D 24                   	cmp		r4,r1		; at last line of screen ?
   4566 0000DE3C 02 A6                   	bleu	pc9
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 79
noc_boot11.a
   4567 0000DE3E 1E AF                   	call	scrollScreenUp	; yes, scroll
   4568 0000DE40 0F AE                   	br		pc7
   4569 0000DE42                        pc9
   4570 0000DE42 01 64                   	add		r4,r4,#1	; cursor.y++
   4571 0000DE44 70 40 08 C4             	sb		r4,cursy
   4572 0000DE48 70 40 05 E1             	lb		r1,txtWidth
   4573 0000DE4C 10 25                   	add		r5,r1		; pos += txtWidth
   4574 0000DE4E 70 40 08 D5             	sw		r5,pos
   4575 0000DE52 06 AE                   	br		pc7
   4576 0000DE54                        pc8						; not at EOL
   4577 0000DE54 01 64                   	add		r4,r4,#1	; cursor.x++
   4578 0000DE56 70 40 07 C4             	sb		r4,cursx
   4579 0000DE5A 01 65                   	add		r5,r5,#1	; pos++
   4580 0000DE5C 70 40 08 D5             	sw		r5,pos
                                        
   4582 0000DE60                        pc7
   4583 0000DE60 71 40 01 E1             	lb		r1,cursFlash	; flash or don't flash the cursor
   4584 0000DE64 66 BF                   	call	flashCursor
   4585 0000DE66 70 40 08 F5             	lw		r5,pos
   4586 0000DE6A 10 4B 0E D5             	sw		r5,TXTCTRL+14
   4587 0000DE6E E0 FF                   	lw		lr,[sp]
   4588 0000DE70 E2 F1                   	lw		r1,2[sp]
   4589 0000DE72 E4 F4                   	lw		r4,4[sp]
   4590 0000DE74 E6 F5                   	lw		r5,6[sp]
   4591 0000DE76 E8 F6                   	lw		r6,8[sp]
   4592 0000DE78 0A 6E                   	add		sp,sp,#10
   4593 0000DE7A F0 80                   	ret
                                        
   4595 0000DE7C                        scrollScreenUp:
   4596 0000DE7C FE 6E                   	sub		sp,sp,#2
   4597 0000DE7E E0 D5                   	sw		r5,[sp]
   4598 0000DE80 61 40 07 13             	lw		r3,#1559	; number of chars to move - 1
   4599 0000DE84 00 42 00 12             	lw		r2,#TXTSCR
   4600 0000DE88 70 40 05 E1             	lb		r1,txtWidth
   4601 0000DE8C 81 31                   	shl		r1,#1
   4602 0000DE8E                        scrollScreenUp1:
   4603 0000DE8E 20 15                   	mov		r5,r2
   4604 0000DE90 10 25                   	add		r5,r1
   4605 0000DE92 50 F4                   	lw		r4,[r5]		; char at next line
   4606 0000DE94 20 D4                   	sw		r4,[r2]		; goes to this line
   4607 0000DE96 02 62                   	add		r2,r2,#2
   4608 0000DE98 FF 63                   	sub		r3,r3,#1
   4609 0000DE9A F9 B9                   	bne     scrollScreenUp1
                                        	; blank out last line
                                        	; The character used is a hard-coded constant ($20). No real need to
                                        	; call AsciiToScreen() which also saves having to stack the
                                        	; link register.
   4614 0000DE9C 71 40 02 F1             	lw		r1,NormAttr
   4615 0000DEA0 F0 4F 50 31             	and		r1,#$FF00
   4616 0000DEA4 02 40 60 31             	or		r1,#$20
   4617 0000DEA8 70 40 05 E3             	lb		r3,txtWidth
   4618 0000DEAC                        scrollScreenUp2:
   4619 0000DEAC 20 D1                   	sw		r1,[r2]
   4620 0000DEAE 02 62                   	add		r2,r2,#2
   4621 0000DEB0 FF 63                   	sub		r3,r3,#1
   4622 0000DEB2 FC B9                   	bne     scrollScreenUp2
   4623 0000DEB4 E0 F5                   	lw		r5,[sp]
   4624 0000DEB6 02 6E                   	add		sp,sp,#2
   4625 0000DEB8 F0 80                   	ret
                                        
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 80
noc_boot11.a
                                        ;----------------------------------------------------------------------------
                                        ; Get character from keyboard buffer. Characters are placed in the buffer
                                        ; when a keystroke message is sent by node $21.
                                        ;
                                        ; Parameters:
                                        ;	<none>
                                        ; Returns:
                                        ;	r1 = ascii character, 0 if no char available.
                                        ;	.ZF = 1 if no char available, otherwise .ZF = 0
                                        ;----------------------------------------------------------------------------
                                        
   4638 0000DEBA                        kbdGetChar:
   4639 0000DEBA 0A 40 02 E1             	lb		r1,kbdcnt
   4640 0000DEBE 10 A8                   	beq		kbdGetCharXitZero
   4641 0000DEC0 FE 6E                   	add		sp,sp,#-2
   4642 0000DEC2 E0 D2                   	sw		r2,[sp]
   4643 0000DEC4 FF 61                   	sub		r1,r1,#1
   4644 0000DEC6 0A 40 02 C1             	sb		r1,kbdcnt
   4645 0000DECA 0A 40 01 E2             	lb		r2,kbdtail
   4646 0000DECE 06 40 20 E1             	lb		r1,kbdbuf[r2]
   4647 0000DED2 02 62                   	add		r2,r2,#2
   4648 0000DED4 01 40 5E 32             	and		r2,#30
   4649 0000DED8 0A 40 01 C2             	sb		r2,kbdtail
   4650 0000DEDC E0 F2                   	lw		r2,[sp]
   4651 0000DEDE 02 6E                   	add		sp,sp,#2			; this should leave the ZF clear
   4652 0000DEE0                        kbdGetCharXitZero:
   4653 0000DEE0 F0 80                   	ret
                                        
                                        	align	2
   4656 0000DEE2                        DCBTbl:
   4657 0000DEE2 06 4E 4F 44 31 31 31    	db	6,"NOD111",0,0,0,0,0
   4657 0000DEE9 00 00 00 00 00        
   4658 0000DEEE 00 00                   	dw	0						; type
   4659 0000DEF0 00 00                   	dw  0						; nBPB
   4660 0000DEF2 00 00                   	dw	0						; LastErc
   4661 0000DEF4 00 00                   	dw	0						; reserved
   4662 0000DEF6 00 00                   	dw	0						; start block low
   4663 0000DEF8 00 00                   	dw	0						; start block high
   4664 0000DEFA 00 00                   	dw	0						; number of blocks
   4665 0000DEFC 00 00                   	dw	0						;	"
   4666 0000DEFE EE D9                   	dw	NodeCmdProc				; pCmdProc
   4667 0000DF00 00 00                   	dw	0						; reserved
   4668 0000DF02 00                      	db	0						; reentry count
   4669 0000DF03 00                      	db	0						; single user flag
   4670 0000DF04 00 00                   	dw	0						; hJob
   4671 0000DF06 00 00                   	dw	0						; hMbx
   4672 0000DF08 00 00                   	dw	0						; hSemaphore
   4673 0000DF0A 00 00 00 00 00 00 00    	fill.b	8,0					; reserved
   4673 0000DF11 00                    
   4674 0000DF12 03 54 56 44 00 00 00    		
   4674 0000DF19 00 00 00 00 00        
   4675 0000DF1E 00 00                   	dw	0						; type
   4676 0000DF20 00 00                   	dw  0						; nBPB
   4677 0000DF22 00 00                   	dw	0						; LastErc
   4678 0000DF24 00 00                   	dw	0						; reserved
   4679 0000DF26 00 00                   	dw	0						; start block low
   4680 0000DF28 00 00                   	dw	0						; start block high
   4681 0000DF2A 00 00                   	dw	0						; number of blocks
   4682 0000DF2C 00 00                   	dw	0						;	"
   4683 0000DF2E 2E DF                   	dw	TextCmdProc				; pCmdProc
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 81
noc_boot11.a
   4684 0000DF30 00 00                   	dw	0						; reserved
   4685 0000DF32 00                      	db	0						; reentry count
   4686 0000DF33 00                      	db	0						; single user flag
   4687 0000DF34 00 00                   	dw	0						; hJob
   4688 0000DF36 00 00                   	dw	0						; hMbx
   4689 0000DF38 00 00                   	dw	0						; hSemaphore
   4690 0000DF3A 00 00 00 00 00 00 00    	fill.b	8,0					; reserved
   4690 0000DF41 00                    
                                        
   4692 0000DF42 03 4C 45 44 00 00 00    	db	3,"LED",0,0,0,0,0,0,0,0
   4692 0000DF49 00 00 00 00 00        
   4693 0000DF4E 00 00                   	dw	0						; type
   4694 0000DF50 00 00                   	dw  0						; nBPB
   4695 0000DF52 00 00                   	dw	0						; LastErc
   4696 0000DF54 00 00                   	dw	0						; reserved
   4697 0000DF56 00 00                   	dw	0						; start block low
   4698 0000DF58 00 00                   	dw	0						; start block high
   4699 0000DF5A 00 00                   	dw	0						; number of blocks
   4700 0000DF5C 00 00                   	dw	0						;	"
   4701 0000DF5E 5E DF                   	dw	LedsCmdProc				; pCmdProc
   4702 0000DF60 00 00                   	dw	0						; reserved
   4703 0000DF62 00                      	db	0						; reentry count
   4704 0000DF63 00                      	db	0						; single user flag
   4705 0000DF64 00 00                   	dw	0						; hJob
   4706 0000DF66 00 00                   	dw	0						; hMbx
   4707 0000DF68 00 00                   	dw	0						; hSemaphore
   4708 0000DF6A 00 00 00 00 00 00 00    	fill.b	8,0					; reserved
   4708 0000DF71 00                    
                                        
   4710 0000DF72                        msgStarting:
   4711 0000DF72 42 75 74 74 65 72 66    	db	"Butterfly Grid Computer Starting",0
   4711 0000DF79 6C 79 20 47 72 69 64  
   4711 0000DF80 20 43 6F 6D 70 75 74  
   4711 0000DF87 65 72 20 53 74 61 72  
   4711 0000DF8E 74 69 6E 67 00        
                                        
   4713 0000DF93                        txtctrl_dat:
   4714 0000DF93 34 1F 34 00 10 00 07    	db	52,31,52,0,16,0,7,$22,$1F,$E0,31,0,0,0,3,0
   4714 0000DF9A 22 1F E0 1F 00 00 00  
   4714 0000DFA1 03 00                 
                                        
                                        	; Table of offsets of start of video line in video
                                        	; memory assuming 52 chars per line.
   4718 0000DFA3 FF                      	.align	2
   4719 0000DFA4                        lineTbl:
   4720 0000DFA4 00 00 68 00 D0 00 38    	dw	0,104,208,312,416,520,624,728
   4720 0000DFAB 01 A0 01 08 02 70 02  
   4720 0000DFB2 D8 02                 
   4721 0000DFB4 40 03 A8 03 10 04 78    	dw	832,936,1040,1144,1248,1352,1456,1560,
   4721 0000DFBB 04 E0 04 48 05 B0 05  
   4721 0000DFC2 18 06                 
   4722 0000DFC4 80 06 E8 06 50 07 B8    	dw	1664,1768,1872,1976,2080,2184,2288,2392,
   4722 0000DFCB 07 20 08 88 08 F0 08  
   4722 0000DFD2 58 09                 
   4723 0000DFD4 C0 09 28 0A 90 0A F8    	dw	2496,2600,2704,2808,2912,3016,3120,3224
   4723 0000DFDB 0A 60 0B C8 0B 30 0C  
   4723 0000DFE2 98 0C                 
                                        ; 56 columns display table
                                        ;	dw	0,112,224,336,448,560,672,784
                                        ;	dw	896,1008,1120,1232,1344,1456,1568,1680
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 82
noc_boot11.a
                                        ;	dw	1792,1804,1916,2028,2140,2252,2364,2476
                                        ;	dw	2588,2700,2812,2924,3036,3148,3260,3372
                                        
   4730 0000DFE4 FF FF FF FF FF FF FF    		org		0xFFFE
   4730 0000DFEB FF FF FF FF FF FF FF  
   4730 0000DFF2 FF FF FF FF FF FF FF  
   4730 0000DFF9 FF FF FF FF FF FF FF  
   4730 0000E000 FF FF FF FF FF FF FF  
   4730 0000E007 FF FF FF FF FF FF FF  
   4730 0000E00E FF FF FF FF FF FF FF  
   4730 0000E015 FF FF FF FF FF FF FF  
   4730 0000E01C FF FF FF FF FF FF FF  
   4730 0000E023 FF FF FF FF FF FF FF  
   4730 0000E02A FF FF FF FF FF FF FF  
   4730 0000E031 FF FF FF FF FF FF FF  
   4730 0000E038 FF FF FF FF FF FF FF  
   4730 0000E03F FF FF FF FF FF FF FF  
   4730 0000E046 FF FF FF FF FF FF FF  
   4730 0000E04D FF FF FF FF FF FF FF  
   4730 0000E054 FF FF FF FF FF FF FF  
   4730 0000E05B FF FF FF FF FF FF FF  
   4730 0000E062 FF FF FF FF FF FF FF  
   4730 0000E069 FF FF FF FF FF FF FF  
   4730 0000E070 FF FF FF FF FF FF FF  
   4730 0000E077 FF FF FF FF FF FF FF  
   4730 0000E07E FF FF FF FF FF FF FF  
   4730 0000E085 FF FF FF FF FF FF FF  
   4730 0000E08C FF FF FF FF FF FF FF  
   4730 0000E093 FF FF FF FF FF FF FF  
   4730 0000E09A FF FF FF FF FF FF FF  
   4730 0000E0A1 FF FF FF FF FF FF FF  
   4730 0000E0A8 FF FF FF FF FF FF FF  
   4730 0000E0AF FF FF FF FF FF FF FF  
   4730 0000E0B6 FF FF FF FF FF FF FF  
   4730 0000E0BD FF FF FF FF FF FF FF  
   4730 0000E0C4 FF FF FF FF FF FF FF  
   4730 0000E0CB FF FF FF FF FF FF FF  
   4730 0000E0D2 FF FF FF FF FF FF FF  
   4730 0000E0D9 FF FF FF FF FF FF FF  
   4730 0000E0E0 FF FF FF FF FF FF FF  
   4730 0000E0E7 FF FF FF FF FF FF FF  
   4730 0000E0EE FF FF FF FF FF FF FF  
   4730 0000E0F5 FF FF FF FF FF FF FF  
   4730 0000E0FC FF FF FF FF FF FF FF  
   4730 0000E103 FF FF FF FF FF FF FF  
   4730 0000E10A FF FF FF FF FF FF FF  
   4730 0000E111 FF FF FF FF FF FF FF  
   4730 0000E118 FF FF FF FF FF FF FF  
   4730 0000E11F FF FF FF FF FF FF FF  
   4730 0000E126 FF FF FF FF FF FF FF  
   4730 0000E12D FF FF FF FF FF FF FF  
   4730 0000E134 FF FF FF FF FF FF FF  
   4730 0000E13B FF FF FF FF FF FF FF  
   4730 0000E142 FF FF FF FF FF FF FF  
   4730 0000E149 FF FF FF FF FF FF FF  
   4730 0000E150 FF FF FF FF FF FF FF  
   4730 0000E157 FF FF FF FF FF FF FF  
   4730 0000E15E FF FF FF FF FF FF FF  
   4730 0000E165 FF FF FF FF FF FF FF  
   4730 0000E16C FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 83
noc_boot11.a
   4730 0000E173 FF FF FF FF FF FF FF  
   4730 0000E17A FF FF FF FF FF FF FF  
   4730 0000E181 FF FF FF FF FF FF FF  
   4730 0000E188 FF FF FF FF FF FF FF  
   4730 0000E18F FF FF FF FF FF FF FF  
   4730 0000E196 FF FF FF FF FF FF FF  
   4730 0000E19D FF FF FF FF FF FF FF  
   4730 0000E1A4 FF FF FF FF FF FF FF  
   4730 0000E1AB FF FF FF FF FF FF FF  
   4730 0000E1B2 FF FF FF FF FF FF FF  
   4730 0000E1B9 FF FF FF FF FF FF FF  
   4730 0000E1C0 FF FF FF FF FF FF FF  
   4730 0000E1C7 FF FF FF FF FF FF FF  
   4730 0000E1CE FF FF FF FF FF FF FF  
   4730 0000E1D5 FF FF FF FF FF FF FF  
   4730 0000E1DC FF FF FF FF FF FF FF  
   4730 0000E1E3 FF FF FF FF FF FF FF  
   4730 0000E1EA FF FF FF FF FF FF FF  
   4730 0000E1F1 FF FF FF FF FF FF FF  
   4730 0000E1F8 FF FF FF FF FF FF FF  
   4730 0000E1FF FF FF FF FF FF FF FF  
   4730 0000E206 FF FF FF FF FF FF FF  
   4730 0000E20D FF FF FF FF FF FF FF  
   4730 0000E214 FF FF FF FF FF FF FF  
   4730 0000E21B FF FF FF FF FF FF FF  
   4730 0000E222 FF FF FF FF FF FF FF  
   4730 0000E229 FF FF FF FF FF FF FF  
   4730 0000E230 FF FF FF FF FF FF FF  
   4730 0000E237 FF FF FF FF FF FF FF  
   4730 0000E23E FF FF FF FF FF FF FF  
   4730 0000E245 FF FF FF FF FF FF FF  
   4730 0000E24C FF FF FF FF FF FF FF  
   4730 0000E253 FF FF FF FF FF FF FF  
   4730 0000E25A FF FF FF FF FF FF FF  
   4730 0000E261 FF FF FF FF FF FF FF  
   4730 0000E268 FF FF FF FF FF FF FF  
   4730 0000E26F FF FF FF FF FF FF FF  
   4730 0000E276 FF FF FF FF FF FF FF  
   4730 0000E27D FF FF FF FF FF FF FF  
   4730 0000E284 FF FF FF FF FF FF FF  
   4730 0000E28B FF FF FF FF FF FF FF  
   4730 0000E292 FF FF FF FF FF FF FF  
   4730 0000E299 FF FF FF FF FF FF FF  
   4730 0000E2A0 FF FF FF FF FF FF FF  
   4730 0000E2A7 FF FF FF FF FF FF FF  
   4730 0000E2AE FF FF FF FF FF FF FF  
   4730 0000E2B5 FF FF FF FF FF FF FF  
   4730 0000E2BC FF FF FF FF FF FF FF  
   4730 0000E2C3 FF FF FF FF FF FF FF  
   4730 0000E2CA FF FF FF FF FF FF FF  
   4730 0000E2D1 FF FF FF FF FF FF FF  
   4730 0000E2D8 FF FF FF FF FF FF FF  
   4730 0000E2DF FF FF FF FF FF FF FF  
   4730 0000E2E6 FF FF FF FF FF FF FF  
   4730 0000E2ED FF FF FF FF FF FF FF  
   4730 0000E2F4 FF FF FF FF FF FF FF  
   4730 0000E2FB FF FF FF FF FF FF FF  
   4730 0000E302 FF FF FF FF FF FF FF  
   4730 0000E309 FF FF FF FF FF FF FF  
   4730 0000E310 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 84
noc_boot11.a
   4730 0000E317 FF FF FF FF FF FF FF  
   4730 0000E31E FF FF FF FF FF FF FF  
   4730 0000E325 FF FF FF FF FF FF FF  
   4730 0000E32C FF FF FF FF FF FF FF  
   4730 0000E333 FF FF FF FF FF FF FF  
   4730 0000E33A FF FF FF FF FF FF FF  
   4730 0000E341 FF FF FF FF FF FF FF  
   4730 0000E348 FF FF FF FF FF FF FF  
   4730 0000E34F FF FF FF FF FF FF FF  
   4730 0000E356 FF FF FF FF FF FF FF  
   4730 0000E35D FF FF FF FF FF FF FF  
   4730 0000E364 FF FF FF FF FF FF FF  
   4730 0000E36B FF FF FF FF FF FF FF  
   4730 0000E372 FF FF FF FF FF FF FF  
   4730 0000E379 FF FF FF FF FF FF FF  
   4730 0000E380 FF FF FF FF FF FF FF  
   4730 0000E387 FF FF FF FF FF FF FF  
   4730 0000E38E FF FF FF FF FF FF FF  
   4730 0000E395 FF FF FF FF FF FF FF  
   4730 0000E39C FF FF FF FF FF FF FF  
   4730 0000E3A3 FF FF FF FF FF FF FF  
   4730 0000E3AA FF FF FF FF FF FF FF  
   4730 0000E3B1 FF FF FF FF FF FF FF  
   4730 0000E3B8 FF FF FF FF FF FF FF  
   4730 0000E3BF FF FF FF FF FF FF FF  
   4730 0000E3C6 FF FF FF FF FF FF FF  
   4730 0000E3CD FF FF FF FF FF FF FF  
   4730 0000E3D4 FF FF FF FF FF FF FF  
   4730 0000E3DB FF FF FF FF FF FF FF  
   4730 0000E3E2 FF FF FF FF FF FF FF  
   4730 0000E3E9 FF FF FF FF FF FF FF  
   4730 0000E3F0 FF FF FF FF FF FF FF  
   4730 0000E3F7 FF FF FF FF FF FF FF  
   4730 0000E3FE FF FF FF FF FF FF FF  
   4730 0000E405 FF FF FF FF FF FF FF  
   4730 0000E40C FF FF FF FF FF FF FF  
   4730 0000E413 FF FF FF FF FF FF FF  
   4730 0000E41A FF FF FF FF FF FF FF  
   4730 0000E421 FF FF FF FF FF FF FF  
   4730 0000E428 FF FF FF FF FF FF FF  
   4730 0000E42F FF FF FF FF FF FF FF  
   4730 0000E436 FF FF FF FF FF FF FF  
   4730 0000E43D FF FF FF FF FF FF FF  
   4730 0000E444 FF FF FF FF FF FF FF  
   4730 0000E44B FF FF FF FF FF FF FF  
   4730 0000E452 FF FF FF FF FF FF FF  
   4730 0000E459 FF FF FF FF FF FF FF  
   4730 0000E460 FF FF FF FF FF FF FF  
   4730 0000E467 FF FF FF FF FF FF FF  
   4730 0000E46E FF FF FF FF FF FF FF  
   4730 0000E475 FF FF FF FF FF FF FF  
   4730 0000E47C FF FF FF FF FF FF FF  
   4730 0000E483 FF FF FF FF FF FF FF  
   4730 0000E48A FF FF FF FF FF FF FF  
   4730 0000E491 FF FF FF FF FF FF FF  
   4730 0000E498 FF FF FF FF FF FF FF  
   4730 0000E49F FF FF FF FF FF FF FF  
   4730 0000E4A6 FF FF FF FF FF FF FF  
   4730 0000E4AD FF FF FF FF FF FF FF  
   4730 0000E4B4 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 85
noc_boot11.a
   4730 0000E4BB FF FF FF FF FF FF FF  
   4730 0000E4C2 FF FF FF FF FF FF FF  
   4730 0000E4C9 FF FF FF FF FF FF FF  
   4730 0000E4D0 FF FF FF FF FF FF FF  
   4730 0000E4D7 FF FF FF FF FF FF FF  
   4730 0000E4DE FF FF FF FF FF FF FF  
   4730 0000E4E5 FF FF FF FF FF FF FF  
   4730 0000E4EC FF FF FF FF FF FF FF  
   4730 0000E4F3 FF FF FF FF FF FF FF  
   4730 0000E4FA FF FF FF FF FF FF FF  
   4730 0000E501 FF FF FF FF FF FF FF  
   4730 0000E508 FF FF FF FF FF FF FF  
   4730 0000E50F FF FF FF FF FF FF FF  
   4730 0000E516 FF FF FF FF FF FF FF  
   4730 0000E51D FF FF FF FF FF FF FF  
   4730 0000E524 FF FF FF FF FF FF FF  
   4730 0000E52B FF FF FF FF FF FF FF  
   4730 0000E532 FF FF FF FF FF FF FF  
   4730 0000E539 FF FF FF FF FF FF FF  
   4730 0000E540 FF FF FF FF FF FF FF  
   4730 0000E547 FF FF FF FF FF FF FF  
   4730 0000E54E FF FF FF FF FF FF FF  
   4730 0000E555 FF FF FF FF FF FF FF  
   4730 0000E55C FF FF FF FF FF FF FF  
   4730 0000E563 FF FF FF FF FF FF FF  
   4730 0000E56A FF FF FF FF FF FF FF  
   4730 0000E571 FF FF FF FF FF FF FF  
   4730 0000E578 FF FF FF FF FF FF FF  
   4730 0000E57F FF FF FF FF FF FF FF  
   4730 0000E586 FF FF FF FF FF FF FF  
   4730 0000E58D FF FF FF FF FF FF FF  
   4730 0000E594 FF FF FF FF FF FF FF  
   4730 0000E59B FF FF FF FF FF FF FF  
   4730 0000E5A2 FF FF FF FF FF FF FF  
   4730 0000E5A9 FF FF FF FF FF FF FF  
   4730 0000E5B0 FF FF FF FF FF FF FF  
   4730 0000E5B7 FF FF FF FF FF FF FF  
   4730 0000E5BE FF FF FF FF FF FF FF  
   4730 0000E5C5 FF FF FF FF FF FF FF  
   4730 0000E5CC FF FF FF FF FF FF FF  
   4730 0000E5D3 FF FF FF FF FF FF FF  
   4730 0000E5DA FF FF FF FF FF FF FF  
   4730 0000E5E1 FF FF FF FF FF FF FF  
   4730 0000E5E8 FF FF FF FF FF FF FF  
   4730 0000E5EF FF FF FF FF FF FF FF  
   4730 0000E5F6 FF FF FF FF FF FF FF  
   4730 0000E5FD FF FF FF FF FF FF FF  
   4730 0000E604 FF FF FF FF FF FF FF  
   4730 0000E60B FF FF FF FF FF FF FF  
   4730 0000E612 FF FF FF FF FF FF FF  
   4730 0000E619 FF FF FF FF FF FF FF  
   4730 0000E620 FF FF FF FF FF FF FF  
   4730 0000E627 FF FF FF FF FF FF FF  
   4730 0000E62E FF FF FF FF FF FF FF  
   4730 0000E635 FF FF FF FF FF FF FF  
   4730 0000E63C FF FF FF FF FF FF FF  
   4730 0000E643 FF FF FF FF FF FF FF  
   4730 0000E64A FF FF FF FF FF FF FF  
   4730 0000E651 FF FF FF FF FF FF FF  
   4730 0000E658 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 86
noc_boot11.a
   4730 0000E65F FF FF FF FF FF FF FF  
   4730 0000E666 FF FF FF FF FF FF FF  
   4730 0000E66D FF FF FF FF FF FF FF  
   4730 0000E674 FF FF FF FF FF FF FF  
   4730 0000E67B FF FF FF FF FF FF FF  
   4730 0000E682 FF FF FF FF FF FF FF  
   4730 0000E689 FF FF FF FF FF FF FF  
   4730 0000E690 FF FF FF FF FF FF FF  
   4730 0000E697 FF FF FF FF FF FF FF  
   4730 0000E69E FF FF FF FF FF FF FF  
   4730 0000E6A5 FF FF FF FF FF FF FF  
   4730 0000E6AC FF FF FF FF FF FF FF  
   4730 0000E6B3 FF FF FF FF FF FF FF  
   4730 0000E6BA FF FF FF FF FF FF FF  
   4730 0000E6C1 FF FF FF FF FF FF FF  
   4730 0000E6C8 FF FF FF FF FF FF FF  
   4730 0000E6CF FF FF FF FF FF FF FF  
   4730 0000E6D6 FF FF FF FF FF FF FF  
   4730 0000E6DD FF FF FF FF FF FF FF  
   4730 0000E6E4 FF FF FF FF FF FF FF  
   4730 0000E6EB FF FF FF FF FF FF FF  
   4730 0000E6F2 FF FF FF FF FF FF FF  
   4730 0000E6F9 FF FF FF FF FF FF FF  
   4730 0000E700 FF FF FF FF FF FF FF  
   4730 0000E707 FF FF FF FF FF FF FF  
   4730 0000E70E FF FF FF FF FF FF FF  
   4730 0000E715 FF FF FF FF FF FF FF  
   4730 0000E71C FF FF FF FF FF FF FF  
   4730 0000E723 FF FF FF FF FF FF FF  
   4730 0000E72A FF FF FF FF FF FF FF  
   4730 0000E731 FF FF FF FF FF FF FF  
   4730 0000E738 FF FF FF FF FF FF FF  
   4730 0000E73F FF FF FF FF FF FF FF  
   4730 0000E746 FF FF FF FF FF FF FF  
   4730 0000E74D FF FF FF FF FF FF FF  
   4730 0000E754 FF FF FF FF FF FF FF  
   4730 0000E75B FF FF FF FF FF FF FF  
   4730 0000E762 FF FF FF FF FF FF FF  
   4730 0000E769 FF FF FF FF FF FF FF  
   4730 0000E770 FF FF FF FF FF FF FF  
   4730 0000E777 FF FF FF FF FF FF FF  
   4730 0000E77E FF FF FF FF FF FF FF  
   4730 0000E785 FF FF FF FF FF FF FF  
   4730 0000E78C FF FF FF FF FF FF FF  
   4730 0000E793 FF FF FF FF FF FF FF  
   4730 0000E79A FF FF FF FF FF FF FF  
   4730 0000E7A1 FF FF FF FF FF FF FF  
   4730 0000E7A8 FF FF FF FF FF FF FF  
   4730 0000E7AF FF FF FF FF FF FF FF  
   4730 0000E7B6 FF FF FF FF FF FF FF  
   4730 0000E7BD FF FF FF FF FF FF FF  
   4730 0000E7C4 FF FF FF FF FF FF FF  
   4730 0000E7CB FF FF FF FF FF FF FF  
   4730 0000E7D2 FF FF FF FF FF FF FF  
   4730 0000E7D9 FF FF FF FF FF FF FF  
   4730 0000E7E0 FF FF FF FF FF FF FF  
   4730 0000E7E7 FF FF FF FF FF FF FF  
   4730 0000E7EE FF FF FF FF FF FF FF  
   4730 0000E7F5 FF FF FF FF FF FF FF  
   4730 0000E7FC FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 87
noc_boot11.a
   4730 0000E803 FF FF FF FF FF FF FF  
   4730 0000E80A FF FF FF FF FF FF FF  
   4730 0000E811 FF FF FF FF FF FF FF  
   4730 0000E818 FF FF FF FF FF FF FF  
   4730 0000E81F FF FF FF FF FF FF FF  
   4730 0000E826 FF FF FF FF FF FF FF  
   4730 0000E82D FF FF FF FF FF FF FF  
   4730 0000E834 FF FF FF FF FF FF FF  
   4730 0000E83B FF FF FF FF FF FF FF  
   4730 0000E842 FF FF FF FF FF FF FF  
   4730 0000E849 FF FF FF FF FF FF FF  
   4730 0000E850 FF FF FF FF FF FF FF  
   4730 0000E857 FF FF FF FF FF FF FF  
   4730 0000E85E FF FF FF FF FF FF FF  
   4730 0000E865 FF FF FF FF FF FF FF  
   4730 0000E86C FF FF FF FF FF FF FF  
   4730 0000E873 FF FF FF FF FF FF FF  
   4730 0000E87A FF FF FF FF FF FF FF  
   4730 0000E881 FF FF FF FF FF FF FF  
   4730 0000E888 FF FF FF FF FF FF FF  
   4730 0000E88F FF FF FF FF FF FF FF  
   4730 0000E896 FF FF FF FF FF FF FF  
   4730 0000E89D FF FF FF FF FF FF FF  
   4730 0000E8A4 FF FF FF FF FF FF FF  
   4730 0000E8AB FF FF FF FF FF FF FF  
   4730 0000E8B2 FF FF FF FF FF FF FF  
   4730 0000E8B9 FF FF FF FF FF FF FF  
   4730 0000E8C0 FF FF FF FF FF FF FF  
   4730 0000E8C7 FF FF FF FF FF FF FF  
   4730 0000E8CE FF FF FF FF FF FF FF  
   4730 0000E8D5 FF FF FF FF FF FF FF  
   4730 0000E8DC FF FF FF FF FF FF FF  
   4730 0000E8E3 FF FF FF FF FF FF FF  
   4730 0000E8EA FF FF FF FF FF FF FF  
   4730 0000E8F1 FF FF FF FF FF FF FF  
   4730 0000E8F8 FF FF FF FF FF FF FF  
   4730 0000E8FF FF FF FF FF FF FF FF  
   4730 0000E906 FF FF FF FF FF FF FF  
   4730 0000E90D FF FF FF FF FF FF FF  
   4730 0000E914 FF FF FF FF FF FF FF  
   4730 0000E91B FF FF FF FF FF FF FF  
   4730 0000E922 FF FF FF FF FF FF FF  
   4730 0000E929 FF FF FF FF FF FF FF  
   4730 0000E930 FF FF FF FF FF FF FF  
   4730 0000E937 FF FF FF FF FF FF FF  
   4730 0000E93E FF FF FF FF FF FF FF  
   4730 0000E945 FF FF FF FF FF FF FF  
   4730 0000E94C FF FF FF FF FF FF FF  
   4730 0000E953 FF FF FF FF FF FF FF  
   4730 0000E95A FF FF FF FF FF FF FF  
   4730 0000E961 FF FF FF FF FF FF FF  
   4730 0000E968 FF FF FF FF FF FF FF  
   4730 0000E96F FF FF FF FF FF FF FF  
   4730 0000E976 FF FF FF FF FF FF FF  
   4730 0000E97D FF FF FF FF FF FF FF  
   4730 0000E984 FF FF FF FF FF FF FF  
   4730 0000E98B FF FF FF FF FF FF FF  
   4730 0000E992 FF FF FF FF FF FF FF  
   4730 0000E999 FF FF FF FF FF FF FF  
   4730 0000E9A0 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 88
noc_boot11.a
   4730 0000E9A7 FF FF FF FF FF FF FF  
   4730 0000E9AE FF FF FF FF FF FF FF  
   4730 0000E9B5 FF FF FF FF FF FF FF  
   4730 0000E9BC FF FF FF FF FF FF FF  
   4730 0000E9C3 FF FF FF FF FF FF FF  
   4730 0000E9CA FF FF FF FF FF FF FF  
   4730 0000E9D1 FF FF FF FF FF FF FF  
   4730 0000E9D8 FF FF FF FF FF FF FF  
   4730 0000E9DF FF FF FF FF FF FF FF  
   4730 0000E9E6 FF FF FF FF FF FF FF  
   4730 0000E9ED FF FF FF FF FF FF FF  
   4730 0000E9F4 FF FF FF FF FF FF FF  
   4730 0000E9FB FF FF FF FF FF FF FF  
   4730 0000EA02 FF FF FF FF FF FF FF  
   4730 0000EA09 FF FF FF FF FF FF FF  
   4730 0000EA10 FF FF FF FF FF FF FF  
   4730 0000EA17 FF FF FF FF FF FF FF  
   4730 0000EA1E FF FF FF FF FF FF FF  
   4730 0000EA25 FF FF FF FF FF FF FF  
   4730 0000EA2C FF FF FF FF FF FF FF  
   4730 0000EA33 FF FF FF FF FF FF FF  
   4730 0000EA3A FF FF FF FF FF FF FF  
   4730 0000EA41 FF FF FF FF FF FF FF  
   4730 0000EA48 FF FF FF FF FF FF FF  
   4730 0000EA4F FF FF FF FF FF FF FF  
   4730 0000EA56 FF FF FF FF FF FF FF  
   4730 0000EA5D FF FF FF FF FF FF FF  
   4730 0000EA64 FF FF FF FF FF FF FF  
   4730 0000EA6B FF FF FF FF FF FF FF  
   4730 0000EA72 FF FF FF FF FF FF FF  
   4730 0000EA79 FF FF FF FF FF FF FF  
   4730 0000EA80 FF FF FF FF FF FF FF  
   4730 0000EA87 FF FF FF FF FF FF FF  
   4730 0000EA8E FF FF FF FF FF FF FF  
   4730 0000EA95 FF FF FF FF FF FF FF  
   4730 0000EA9C FF FF FF FF FF FF FF  
   4730 0000EAA3 FF FF FF FF FF FF FF  
   4730 0000EAAA FF FF FF FF FF FF FF  
   4730 0000EAB1 FF FF FF FF FF FF FF  
   4730 0000EAB8 FF FF FF FF FF FF FF  
   4730 0000EABF FF FF FF FF FF FF FF  
   4730 0000EAC6 FF FF FF FF FF FF FF  
   4730 0000EACD FF FF FF FF FF FF FF  
   4730 0000EAD4 FF FF FF FF FF FF FF  
   4730 0000EADB FF FF FF FF FF FF FF  
   4730 0000EAE2 FF FF FF FF FF FF FF  
   4730 0000EAE9 FF FF FF FF FF FF FF  
   4730 0000EAF0 FF FF FF FF FF FF FF  
   4730 0000EAF7 FF FF FF FF FF FF FF  
   4730 0000EAFE FF FF FF FF FF FF FF  
   4730 0000EB05 FF FF FF FF FF FF FF  
   4730 0000EB0C FF FF FF FF FF FF FF  
   4730 0000EB13 FF FF FF FF FF FF FF  
   4730 0000EB1A FF FF FF FF FF FF FF  
   4730 0000EB21 FF FF FF FF FF FF FF  
   4730 0000EB28 FF FF FF FF FF FF FF  
   4730 0000EB2F FF FF FF FF FF FF FF  
   4730 0000EB36 FF FF FF FF FF FF FF  
   4730 0000EB3D FF FF FF FF FF FF FF  
   4730 0000EB44 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 89
noc_boot11.a
   4730 0000EB4B FF FF FF FF FF FF FF  
   4730 0000EB52 FF FF FF FF FF FF FF  
   4730 0000EB59 FF FF FF FF FF FF FF  
   4730 0000EB60 FF FF FF FF FF FF FF  
   4730 0000EB67 FF FF FF FF FF FF FF  
   4730 0000EB6E FF FF FF FF FF FF FF  
   4730 0000EB75 FF FF FF FF FF FF FF  
   4730 0000EB7C FF FF FF FF FF FF FF  
   4730 0000EB83 FF FF FF FF FF FF FF  
   4730 0000EB8A FF FF FF FF FF FF FF  
   4730 0000EB91 FF FF FF FF FF FF FF  
   4730 0000EB98 FF FF FF FF FF FF FF  
   4730 0000EB9F FF FF FF FF FF FF FF  
   4730 0000EBA6 FF FF FF FF FF FF FF  
   4730 0000EBAD FF FF FF FF FF FF FF  
   4730 0000EBB4 FF FF FF FF FF FF FF  
   4730 0000EBBB FF FF FF FF FF FF FF  
   4730 0000EBC2 FF FF FF FF FF FF FF  
   4730 0000EBC9 FF FF FF FF FF FF FF  
   4730 0000EBD0 FF FF FF FF FF FF FF  
   4730 0000EBD7 FF FF FF FF FF FF FF  
   4730 0000EBDE FF FF FF FF FF FF FF  
   4730 0000EBE5 FF FF FF FF FF FF FF  
   4730 0000EBEC FF FF FF FF FF FF FF  
   4730 0000EBF3 FF FF FF FF FF FF FF  
   4730 0000EBFA FF FF FF FF FF FF FF  
   4730 0000EC01 FF FF FF FF FF FF FF  
   4730 0000EC08 FF FF FF FF FF FF FF  
   4730 0000EC0F FF FF FF FF FF FF FF  
   4730 0000EC16 FF FF FF FF FF FF FF  
   4730 0000EC1D FF FF FF FF FF FF FF  
   4730 0000EC24 FF FF FF FF FF FF FF  
   4730 0000EC2B FF FF FF FF FF FF FF  
   4730 0000EC32 FF FF FF FF FF FF FF  
   4730 0000EC39 FF FF FF FF FF FF FF  
   4730 0000EC40 FF FF FF FF FF FF FF  
   4730 0000EC47 FF FF FF FF FF FF FF  
   4730 0000EC4E FF FF FF FF FF FF FF  
   4730 0000EC55 FF FF FF FF FF FF FF  
   4730 0000EC5C FF FF FF FF FF FF FF  
   4730 0000EC63 FF FF FF FF FF FF FF  
   4730 0000EC6A FF FF FF FF FF FF FF  
   4730 0000EC71 FF FF FF FF FF FF FF  
   4730 0000EC78 FF FF FF FF FF FF FF  
   4730 0000EC7F FF FF FF FF FF FF FF  
   4730 0000EC86 FF FF FF FF FF FF FF  
   4730 0000EC8D FF FF FF FF FF FF FF  
   4730 0000EC94 FF FF FF FF FF FF FF  
   4730 0000EC9B FF FF FF FF FF FF FF  
   4730 0000ECA2 FF FF FF FF FF FF FF  
   4730 0000ECA9 FF FF FF FF FF FF FF  
   4730 0000ECB0 FF FF FF FF FF FF FF  
   4730 0000ECB7 FF FF FF FF FF FF FF  
   4730 0000ECBE FF FF FF FF FF FF FF  
   4730 0000ECC5 FF FF FF FF FF FF FF  
   4730 0000ECCC FF FF FF FF FF FF FF  
   4730 0000ECD3 FF FF FF FF FF FF FF  
   4730 0000ECDA FF FF FF FF FF FF FF  
   4730 0000ECE1 FF FF FF FF FF FF FF  
   4730 0000ECE8 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 90
noc_boot11.a
   4730 0000ECEF FF FF FF FF FF FF FF  
   4730 0000ECF6 FF FF FF FF FF FF FF  
   4730 0000ECFD FF FF FF FF FF FF FF  
   4730 0000ED04 FF FF FF FF FF FF FF  
   4730 0000ED0B FF FF FF FF FF FF FF  
   4730 0000ED12 FF FF FF FF FF FF FF  
   4730 0000ED19 FF FF FF FF FF FF FF  
   4730 0000ED20 FF FF FF FF FF FF FF  
   4730 0000ED27 FF FF FF FF FF FF FF  
   4730 0000ED2E FF FF FF FF FF FF FF  
   4730 0000ED35 FF FF FF FF FF FF FF  
   4730 0000ED3C FF FF FF FF FF FF FF  
   4730 0000ED43 FF FF FF FF FF FF FF  
   4730 0000ED4A FF FF FF FF FF FF FF  
   4730 0000ED51 FF FF FF FF FF FF FF  
   4730 0000ED58 FF FF FF FF FF FF FF  
   4730 0000ED5F FF FF FF FF FF FF FF  
   4730 0000ED66 FF FF FF FF FF FF FF  
   4730 0000ED6D FF FF FF FF FF FF FF  
   4730 0000ED74 FF FF FF FF FF FF FF  
   4730 0000ED7B FF FF FF FF FF FF FF  
   4730 0000ED82 FF FF FF FF FF FF FF  
   4730 0000ED89 FF FF FF FF FF FF FF  
   4730 0000ED90 FF FF FF FF FF FF FF  
   4730 0000ED97 FF FF FF FF FF FF FF  
   4730 0000ED9E FF FF FF FF FF FF FF  
   4730 0000EDA5 FF FF FF FF FF FF FF  
   4730 0000EDAC FF FF FF FF FF FF FF  
   4730 0000EDB3 FF FF FF FF FF FF FF  
   4730 0000EDBA FF FF FF FF FF FF FF  
   4730 0000EDC1 FF FF FF FF FF FF FF  
   4730 0000EDC8 FF FF FF FF FF FF FF  
   4730 0000EDCF FF FF FF FF FF FF FF  
   4730 0000EDD6 FF FF FF FF FF FF FF  
   4730 0000EDDD FF FF FF FF FF FF FF  
   4730 0000EDE4 FF FF FF FF FF FF FF  
   4730 0000EDEB FF FF FF FF FF FF FF  
   4730 0000EDF2 FF FF FF FF FF FF FF  
   4730 0000EDF9 FF FF FF FF FF FF FF  
   4730 0000EE00 FF FF FF FF FF FF FF  
   4730 0000EE07 FF FF FF FF FF FF FF  
   4730 0000EE0E FF FF FF FF FF FF FF  
   4730 0000EE15 FF FF FF FF FF FF FF  
   4730 0000EE1C FF FF FF FF FF FF FF  
   4730 0000EE23 FF FF FF FF FF FF FF  
   4730 0000EE2A FF FF FF FF FF FF FF  
   4730 0000EE31 FF FF FF FF FF FF FF  
   4730 0000EE38 FF FF FF FF FF FF FF  
   4730 0000EE3F FF FF FF FF FF FF FF  
   4730 0000EE46 FF FF FF FF FF FF FF  
   4730 0000EE4D FF FF FF FF FF FF FF  
   4730 0000EE54 FF FF FF FF FF FF FF  
   4730 0000EE5B FF FF FF FF FF FF FF  
   4730 0000EE62 FF FF FF FF FF FF FF  
   4730 0000EE69 FF FF FF FF FF FF FF  
   4730 0000EE70 FF FF FF FF FF FF FF  
   4730 0000EE77 FF FF FF FF FF FF FF  
   4730 0000EE7E FF FF FF FF FF FF FF  
   4730 0000EE85 FF FF FF FF FF FF FF  
   4730 0000EE8C FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 91
noc_boot11.a
   4730 0000EE93 FF FF FF FF FF FF FF  
   4730 0000EE9A FF FF FF FF FF FF FF  
   4730 0000EEA1 FF FF FF FF FF FF FF  
   4730 0000EEA8 FF FF FF FF FF FF FF  
   4730 0000EEAF FF FF FF FF FF FF FF  
   4730 0000EEB6 FF FF FF FF FF FF FF  
   4730 0000EEBD FF FF FF FF FF FF FF  
   4730 0000EEC4 FF FF FF FF FF FF FF  
   4730 0000EECB FF FF FF FF FF FF FF  
   4730 0000EED2 FF FF FF FF FF FF FF  
   4730 0000EED9 FF FF FF FF FF FF FF  
   4730 0000EEE0 FF FF FF FF FF FF FF  
   4730 0000EEE7 FF FF FF FF FF FF FF  
   4730 0000EEEE FF FF FF FF FF FF FF  
   4730 0000EEF5 FF FF FF FF FF FF FF  
   4730 0000EEFC FF FF FF FF FF FF FF  
   4730 0000EF03 FF FF FF FF FF FF FF  
   4730 0000EF0A FF FF FF FF FF FF FF  
   4730 0000EF11 FF FF FF FF FF FF FF  
   4730 0000EF18 FF FF FF FF FF FF FF  
   4730 0000EF1F FF FF FF FF FF FF FF  
   4730 0000EF26 FF FF FF FF FF FF FF  
   4730 0000EF2D FF FF FF FF FF FF FF  
   4730 0000EF34 FF FF FF FF FF FF FF  
   4730 0000EF3B FF FF FF FF FF FF FF  
   4730 0000EF42 FF FF FF FF FF FF FF  
   4730 0000EF49 FF FF FF FF FF FF FF  
   4730 0000EF50 FF FF FF FF FF FF FF  
   4730 0000EF57 FF FF FF FF FF FF FF  
   4730 0000EF5E FF FF FF FF FF FF FF  
   4730 0000EF65 FF FF FF FF FF FF FF  
   4730 0000EF6C FF FF FF FF FF FF FF  
   4730 0000EF73 FF FF FF FF FF FF FF  
   4730 0000EF7A FF FF FF FF FF FF FF  
   4730 0000EF81 FF FF FF FF FF FF FF  
   4730 0000EF88 FF FF FF FF FF FF FF  
   4730 0000EF8F FF FF FF FF FF FF FF  
   4730 0000EF96 FF FF FF FF FF FF FF  
   4730 0000EF9D FF FF FF FF FF FF FF  
   4730 0000EFA4 FF FF FF FF FF FF FF  
   4730 0000EFAB FF FF FF FF FF FF FF  
   4730 0000EFB2 FF FF FF FF FF FF FF  
   4730 0000EFB9 FF FF FF FF FF FF FF  
   4730 0000EFC0 FF FF FF FF FF FF FF  
   4730 0000EFC7 FF FF FF FF FF FF FF  
   4730 0000EFCE FF FF FF FF FF FF FF  
   4730 0000EFD5 FF FF FF FF FF FF FF  
   4730 0000EFDC FF FF FF FF FF FF FF  
   4730 0000EFE3 FF FF FF FF FF FF FF  
   4730 0000EFEA FF FF FF FF FF FF FF  
   4730 0000EFF1 FF FF FF FF FF FF FF  
   4730 0000EFF8 FF FF FF FF FF FF FF  
   4730 0000EFFF FF FF FF FF FF FF FF  
   4730 0000F006 FF FF FF FF FF FF FF  
   4730 0000F00D FF FF FF FF FF FF FF  
   4730 0000F014 FF FF FF FF FF FF FF  
   4730 0000F01B FF FF FF FF FF FF FF  
   4730 0000F022 FF FF FF FF FF FF FF  
   4730 0000F029 FF FF FF FF FF FF FF  
   4730 0000F030 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 92
noc_boot11.a
   4730 0000F037 FF FF FF FF FF FF FF  
   4730 0000F03E FF FF FF FF FF FF FF  
   4730 0000F045 FF FF FF FF FF FF FF  
   4730 0000F04C FF FF FF FF FF FF FF  
   4730 0000F053 FF FF FF FF FF FF FF  
   4730 0000F05A FF FF FF FF FF FF FF  
   4730 0000F061 FF FF FF FF FF FF FF  
   4730 0000F068 FF FF FF FF FF FF FF  
   4730 0000F06F FF FF FF FF FF FF FF  
   4730 0000F076 FF FF FF FF FF FF FF  
   4730 0000F07D FF FF FF FF FF FF FF  
   4730 0000F084 FF FF FF FF FF FF FF  
   4730 0000F08B FF FF FF FF FF FF FF  
   4730 0000F092 FF FF FF FF FF FF FF  
   4730 0000F099 FF FF FF FF FF FF FF  
   4730 0000F0A0 FF FF FF FF FF FF FF  
   4730 0000F0A7 FF FF FF FF FF FF FF  
   4730 0000F0AE FF FF FF FF FF FF FF  
   4730 0000F0B5 FF FF FF FF FF FF FF  
   4730 0000F0BC FF FF FF FF FF FF FF  
   4730 0000F0C3 FF FF FF FF FF FF FF  
   4730 0000F0CA FF FF FF FF FF FF FF  
   4730 0000F0D1 FF FF FF FF FF FF FF  
   4730 0000F0D8 FF FF FF FF FF FF FF  
   4730 0000F0DF FF FF FF FF FF FF FF  
   4730 0000F0E6 FF FF FF FF FF FF FF  
   4730 0000F0ED FF FF FF FF FF FF FF  
   4730 0000F0F4 FF FF FF FF FF FF FF  
   4730 0000F0FB FF FF FF FF FF FF FF  
   4730 0000F102 FF FF FF FF FF FF FF  
   4730 0000F109 FF FF FF FF FF FF FF  
   4730 0000F110 FF FF FF FF FF FF FF  
   4730 0000F117 FF FF FF FF FF FF FF  
   4730 0000F11E FF FF FF FF FF FF FF  
   4730 0000F125 FF FF FF FF FF FF FF  
   4730 0000F12C FF FF FF FF FF FF FF  
   4730 0000F133 FF FF FF FF FF FF FF  
   4730 0000F13A FF FF FF FF FF FF FF  
   4730 0000F141 FF FF FF FF FF FF FF  
   4730 0000F148 FF FF FF FF FF FF FF  
   4730 0000F14F FF FF FF FF FF FF FF  
   4730 0000F156 FF FF FF FF FF FF FF  
   4730 0000F15D FF FF FF FF FF FF FF  
   4730 0000F164 FF FF FF FF FF FF FF  
   4730 0000F16B FF FF FF FF FF FF FF  
   4730 0000F172 FF FF FF FF FF FF FF  
   4730 0000F179 FF FF FF FF FF FF FF  
   4730 0000F180 FF FF FF FF FF FF FF  
   4730 0000F187 FF FF FF FF FF FF FF  
   4730 0000F18E FF FF FF FF FF FF FF  
   4730 0000F195 FF FF FF FF FF FF FF  
   4730 0000F19C FF FF FF FF FF FF FF  
   4730 0000F1A3 FF FF FF FF FF FF FF  
   4730 0000F1AA FF FF FF FF FF FF FF  
   4730 0000F1B1 FF FF FF FF FF FF FF  
   4730 0000F1B8 FF FF FF FF FF FF FF  
   4730 0000F1BF FF FF FF FF FF FF FF  
   4730 0000F1C6 FF FF FF FF FF FF FF  
   4730 0000F1CD FF FF FF FF FF FF FF  
   4730 0000F1D4 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 93
noc_boot11.a
   4730 0000F1DB FF FF FF FF FF FF FF  
   4730 0000F1E2 FF FF FF FF FF FF FF  
   4730 0000F1E9 FF FF FF FF FF FF FF  
   4730 0000F1F0 FF FF FF FF FF FF FF  
   4730 0000F1F7 FF FF FF FF FF FF FF  
   4730 0000F1FE FF FF FF FF FF FF FF  
   4730 0000F205 FF FF FF FF FF FF FF  
   4730 0000F20C FF FF FF FF FF FF FF  
   4730 0000F213 FF FF FF FF FF FF FF  
   4730 0000F21A FF FF FF FF FF FF FF  
   4730 0000F221 FF FF FF FF FF FF FF  
   4730 0000F228 FF FF FF FF FF FF FF  
   4730 0000F22F FF FF FF FF FF FF FF  
   4730 0000F236 FF FF FF FF FF FF FF  
   4730 0000F23D FF FF FF FF FF FF FF  
   4730 0000F244 FF FF FF FF FF FF FF  
   4730 0000F24B FF FF FF FF FF FF FF  
   4730 0000F252 FF FF FF FF FF FF FF  
   4730 0000F259 FF FF FF FF FF FF FF  
   4730 0000F260 FF FF FF FF FF FF FF  
   4730 0000F267 FF FF FF FF FF FF FF  
   4730 0000F26E FF FF FF FF FF FF FF  
   4730 0000F275 FF FF FF FF FF FF FF  
   4730 0000F27C FF FF FF FF FF FF FF  
   4730 0000F283 FF FF FF FF FF FF FF  
   4730 0000F28A FF FF FF FF FF FF FF  
   4730 0000F291 FF FF FF FF FF FF FF  
   4730 0000F298 FF FF FF FF FF FF FF  
   4730 0000F29F FF FF FF FF FF FF FF  
   4730 0000F2A6 FF FF FF FF FF FF FF  
   4730 0000F2AD FF FF FF FF FF FF FF  
   4730 0000F2B4 FF FF FF FF FF FF FF  
   4730 0000F2BB FF FF FF FF FF FF FF  
   4730 0000F2C2 FF FF FF FF FF FF FF  
   4730 0000F2C9 FF FF FF FF FF FF FF  
   4730 0000F2D0 FF FF FF FF FF FF FF  
   4730 0000F2D7 FF FF FF FF FF FF FF  
   4730 0000F2DE FF FF FF FF FF FF FF  
   4730 0000F2E5 FF FF FF FF FF FF FF  
   4730 0000F2EC FF FF FF FF FF FF FF  
   4730 0000F2F3 FF FF FF FF FF FF FF  
   4730 0000F2FA FF FF FF FF FF FF FF  
   4730 0000F301 FF FF FF FF FF FF FF  
   4730 0000F308 FF FF FF FF FF FF FF  
   4730 0000F30F FF FF FF FF FF FF FF  
   4730 0000F316 FF FF FF FF FF FF FF  
   4730 0000F31D FF FF FF FF FF FF FF  
   4730 0000F324 FF FF FF FF FF FF FF  
   4730 0000F32B FF FF FF FF FF FF FF  
   4730 0000F332 FF FF FF FF FF FF FF  
   4730 0000F339 FF FF FF FF FF FF FF  
   4730 0000F340 FF FF FF FF FF FF FF  
   4730 0000F347 FF FF FF FF FF FF FF  
   4730 0000F34E FF FF FF FF FF FF FF  
   4730 0000F355 FF FF FF FF FF FF FF  
   4730 0000F35C FF FF FF FF FF FF FF  
   4730 0000F363 FF FF FF FF FF FF FF  
   4730 0000F36A FF FF FF FF FF FF FF  
   4730 0000F371 FF FF FF FF FF FF FF  
   4730 0000F378 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 94
noc_boot11.a
   4730 0000F37F FF FF FF FF FF FF FF  
   4730 0000F386 FF FF FF FF FF FF FF  
   4730 0000F38D FF FF FF FF FF FF FF  
   4730 0000F394 FF FF FF FF FF FF FF  
   4730 0000F39B FF FF FF FF FF FF FF  
   4730 0000F3A2 FF FF FF FF FF FF FF  
   4730 0000F3A9 FF FF FF FF FF FF FF  
   4730 0000F3B0 FF FF FF FF FF FF FF  
   4730 0000F3B7 FF FF FF FF FF FF FF  
   4730 0000F3BE FF FF FF FF FF FF FF  
   4730 0000F3C5 FF FF FF FF FF FF FF  
   4730 0000F3CC FF FF FF FF FF FF FF  
   4730 0000F3D3 FF FF FF FF FF FF FF  
   4730 0000F3DA FF FF FF FF FF FF FF  
   4730 0000F3E1 FF FF FF FF FF FF FF  
   4730 0000F3E8 FF FF FF FF FF FF FF  
   4730 0000F3EF FF FF FF FF FF FF FF  
   4730 0000F3F6 FF FF FF FF FF FF FF  
   4730 0000F3FD FF FF FF FF FF FF FF  
   4730 0000F404 FF FF FF FF FF FF FF  
   4730 0000F40B FF FF FF FF FF FF FF  
   4730 0000F412 FF FF FF FF FF FF FF  
   4730 0000F419 FF FF FF FF FF FF FF  
   4730 0000F420 FF FF FF FF FF FF FF  
   4730 0000F427 FF FF FF FF FF FF FF  
   4730 0000F42E FF FF FF FF FF FF FF  
   4730 0000F435 FF FF FF FF FF FF FF  
   4730 0000F43C FF FF FF FF FF FF FF  
   4730 0000F443 FF FF FF FF FF FF FF  
   4730 0000F44A FF FF FF FF FF FF FF  
   4730 0000F451 FF FF FF FF FF FF FF  
   4730 0000F458 FF FF FF FF FF FF FF  
   4730 0000F45F FF FF FF FF FF FF FF  
   4730 0000F466 FF FF FF FF FF FF FF  
   4730 0000F46D FF FF FF FF FF FF FF  
   4730 0000F474 FF FF FF FF FF FF FF  
   4730 0000F47B FF FF FF FF FF FF FF  
   4730 0000F482 FF FF FF FF FF FF FF  
   4730 0000F489 FF FF FF FF FF FF FF  
   4730 0000F490 FF FF FF FF FF FF FF  
   4730 0000F497 FF FF FF FF FF FF FF  
   4730 0000F49E FF FF FF FF FF FF FF  
   4730 0000F4A5 FF FF FF FF FF FF FF  
   4730 0000F4AC FF FF FF FF FF FF FF  
   4730 0000F4B3 FF FF FF FF FF FF FF  
   4730 0000F4BA FF FF FF FF FF FF FF  
   4730 0000F4C1 FF FF FF FF FF FF FF  
   4730 0000F4C8 FF FF FF FF FF FF FF  
   4730 0000F4CF FF FF FF FF FF FF FF  
   4730 0000F4D6 FF FF FF FF FF FF FF  
   4730 0000F4DD FF FF FF FF FF FF FF  
   4730 0000F4E4 FF FF FF FF FF FF FF  
   4730 0000F4EB FF FF FF FF FF FF FF  
   4730 0000F4F2 FF FF FF FF FF FF FF  
   4730 0000F4F9 FF FF FF FF FF FF FF  
   4730 0000F500 FF FF FF FF FF FF FF  
   4730 0000F507 FF FF FF FF FF FF FF  
   4730 0000F50E FF FF FF FF FF FF FF  
   4730 0000F515 FF FF FF FF FF FF FF  
   4730 0000F51C FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 95
noc_boot11.a
   4730 0000F523 FF FF FF FF FF FF FF  
   4730 0000F52A FF FF FF FF FF FF FF  
   4730 0000F531 FF FF FF FF FF FF FF  
   4730 0000F538 FF FF FF FF FF FF FF  
   4730 0000F53F FF FF FF FF FF FF FF  
   4730 0000F546 FF FF FF FF FF FF FF  
   4730 0000F54D FF FF FF FF FF FF FF  
   4730 0000F554 FF FF FF FF FF FF FF  
   4730 0000F55B FF FF FF FF FF FF FF  
   4730 0000F562 FF FF FF FF FF FF FF  
   4730 0000F569 FF FF FF FF FF FF FF  
   4730 0000F570 FF FF FF FF FF FF FF  
   4730 0000F577 FF FF FF FF FF FF FF  
   4730 0000F57E FF FF FF FF FF FF FF  
   4730 0000F585 FF FF FF FF FF FF FF  
   4730 0000F58C FF FF FF FF FF FF FF  
   4730 0000F593 FF FF FF FF FF FF FF  
   4730 0000F59A FF FF FF FF FF FF FF  
   4730 0000F5A1 FF FF FF FF FF FF FF  
   4730 0000F5A8 FF FF FF FF FF FF FF  
   4730 0000F5AF FF FF FF FF FF FF FF  
   4730 0000F5B6 FF FF FF FF FF FF FF  
   4730 0000F5BD FF FF FF FF FF FF FF  
   4730 0000F5C4 FF FF FF FF FF FF FF  
   4730 0000F5CB FF FF FF FF FF FF FF  
   4730 0000F5D2 FF FF FF FF FF FF FF  
   4730 0000F5D9 FF FF FF FF FF FF FF  
   4730 0000F5E0 FF FF FF FF FF FF FF  
   4730 0000F5E7 FF FF FF FF FF FF FF  
   4730 0000F5EE FF FF FF FF FF FF FF  
   4730 0000F5F5 FF FF FF FF FF FF FF  
   4730 0000F5FC FF FF FF FF FF FF FF  
   4730 0000F603 FF FF FF FF FF FF FF  
   4730 0000F60A FF FF FF FF FF FF FF  
   4730 0000F611 FF FF FF FF FF FF FF  
   4730 0000F618 FF FF FF FF FF FF FF  
   4730 0000F61F FF FF FF FF FF FF FF  
   4730 0000F626 FF FF FF FF FF FF FF  
   4730 0000F62D FF FF FF FF FF FF FF  
   4730 0000F634 FF FF FF FF FF FF FF  
   4730 0000F63B FF FF FF FF FF FF FF  
   4730 0000F642 FF FF FF FF FF FF FF  
   4730 0000F649 FF FF FF FF FF FF FF  
   4730 0000F650 FF FF FF FF FF FF FF  
   4730 0000F657 FF FF FF FF FF FF FF  
   4730 0000F65E FF FF FF FF FF FF FF  
   4730 0000F665 FF FF FF FF FF FF FF  
   4730 0000F66C FF FF FF FF FF FF FF  
   4730 0000F673 FF FF FF FF FF FF FF  
   4730 0000F67A FF FF FF FF FF FF FF  
   4730 0000F681 FF FF FF FF FF FF FF  
   4730 0000F688 FF FF FF FF FF FF FF  
   4730 0000F68F FF FF FF FF FF FF FF  
   4730 0000F696 FF FF FF FF FF FF FF  
   4730 0000F69D FF FF FF FF FF FF FF  
   4730 0000F6A4 FF FF FF FF FF FF FF  
   4730 0000F6AB FF FF FF FF FF FF FF  
   4730 0000F6B2 FF FF FF FF FF FF FF  
   4730 0000F6B9 FF FF FF FF FF FF FF  
   4730 0000F6C0 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 96
noc_boot11.a
   4730 0000F6C7 FF FF FF FF FF FF FF  
   4730 0000F6CE FF FF FF FF FF FF FF  
   4730 0000F6D5 FF FF FF FF FF FF FF  
   4730 0000F6DC FF FF FF FF FF FF FF  
   4730 0000F6E3 FF FF FF FF FF FF FF  
   4730 0000F6EA FF FF FF FF FF FF FF  
   4730 0000F6F1 FF FF FF FF FF FF FF  
   4730 0000F6F8 FF FF FF FF FF FF FF  
   4730 0000F6FF FF FF FF FF FF FF FF  
   4730 0000F706 FF FF FF FF FF FF FF  
   4730 0000F70D FF FF FF FF FF FF FF  
   4730 0000F714 FF FF FF FF FF FF FF  
   4730 0000F71B FF FF FF FF FF FF FF  
   4730 0000F722 FF FF FF FF FF FF FF  
   4730 0000F729 FF FF FF FF FF FF FF  
   4730 0000F730 FF FF FF FF FF FF FF  
   4730 0000F737 FF FF FF FF FF FF FF  
   4730 0000F73E FF FF FF FF FF FF FF  
   4730 0000F745 FF FF FF FF FF FF FF  
   4730 0000F74C FF FF FF FF FF FF FF  
   4730 0000F753 FF FF FF FF FF FF FF  
   4730 0000F75A FF FF FF FF FF FF FF  
   4730 0000F761 FF FF FF FF FF FF FF  
   4730 0000F768 FF FF FF FF FF FF FF  
   4730 0000F76F FF FF FF FF FF FF FF  
   4730 0000F776 FF FF FF FF FF FF FF  
   4730 0000F77D FF FF FF FF FF FF FF  
   4730 0000F784 FF FF FF FF FF FF FF  
   4730 0000F78B FF FF FF FF FF FF FF  
   4730 0000F792 FF FF FF FF FF FF FF  
   4730 0000F799 FF FF FF FF FF FF FF  
   4730 0000F7A0 FF FF FF FF FF FF FF  
   4730 0000F7A7 FF FF FF FF FF FF FF  
   4730 0000F7AE FF FF FF FF FF FF FF  
   4730 0000F7B5 FF FF FF FF FF FF FF  
   4730 0000F7BC FF FF FF FF FF FF FF  
   4730 0000F7C3 FF FF FF FF FF FF FF  
   4730 0000F7CA FF FF FF FF FF FF FF  
   4730 0000F7D1 FF FF FF FF FF FF FF  
   4730 0000F7D8 FF FF FF FF FF FF FF  
   4730 0000F7DF FF FF FF FF FF FF FF  
   4730 0000F7E6 FF FF FF FF FF FF FF  
   4730 0000F7ED FF FF FF FF FF FF FF  
   4730 0000F7F4 FF FF FF FF FF FF FF  
   4730 0000F7FB FF FF FF FF FF FF FF  
   4730 0000F802 FF FF FF FF FF FF FF  
   4730 0000F809 FF FF FF FF FF FF FF  
   4730 0000F810 FF FF FF FF FF FF FF  
   4730 0000F817 FF FF FF FF FF FF FF  
   4730 0000F81E FF FF FF FF FF FF FF  
   4730 0000F825 FF FF FF FF FF FF FF  
   4730 0000F82C FF FF FF FF FF FF FF  
   4730 0000F833 FF FF FF FF FF FF FF  
   4730 0000F83A FF FF FF FF FF FF FF  
   4730 0000F841 FF FF FF FF FF FF FF  
   4730 0000F848 FF FF FF FF FF FF FF  
   4730 0000F84F FF FF FF FF FF FF FF  
   4730 0000F856 FF FF FF FF FF FF FF  
   4730 0000F85D FF FF FF FF FF FF FF  
   4730 0000F864 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 97
noc_boot11.a
   4730 0000F86B FF FF FF FF FF FF FF  
   4730 0000F872 FF FF FF FF FF FF FF  
   4730 0000F879 FF FF FF FF FF FF FF  
   4730 0000F880 FF FF FF FF FF FF FF  
   4730 0000F887 FF FF FF FF FF FF FF  
   4730 0000F88E FF FF FF FF FF FF FF  
   4730 0000F895 FF FF FF FF FF FF FF  
   4730 0000F89C FF FF FF FF FF FF FF  
   4730 0000F8A3 FF FF FF FF FF FF FF  
   4730 0000F8AA FF FF FF FF FF FF FF  
   4730 0000F8B1 FF FF FF FF FF FF FF  
   4730 0000F8B8 FF FF FF FF FF FF FF  
   4730 0000F8BF FF FF FF FF FF FF FF  
   4730 0000F8C6 FF FF FF FF FF FF FF  
   4730 0000F8CD FF FF FF FF FF FF FF  
   4730 0000F8D4 FF FF FF FF FF FF FF  
   4730 0000F8DB FF FF FF FF FF FF FF  
   4730 0000F8E2 FF FF FF FF FF FF FF  
   4730 0000F8E9 FF FF FF FF FF FF FF  
   4730 0000F8F0 FF FF FF FF FF FF FF  
   4730 0000F8F7 FF FF FF FF FF FF FF  
   4730 0000F8FE FF FF FF FF FF FF FF  
   4730 0000F905 FF FF FF FF FF FF FF  
   4730 0000F90C FF FF FF FF FF FF FF  
   4730 0000F913 FF FF FF FF FF FF FF  
   4730 0000F91A FF FF FF FF FF FF FF  
   4730 0000F921 FF FF FF FF FF FF FF  
   4730 0000F928 FF FF FF FF FF FF FF  
   4730 0000F92F FF FF FF FF FF FF FF  
   4730 0000F936 FF FF FF FF FF FF FF  
   4730 0000F93D FF FF FF FF FF FF FF  
   4730 0000F944 FF FF FF FF FF FF FF  
   4730 0000F94B FF FF FF FF FF FF FF  
   4730 0000F952 FF FF FF FF FF FF FF  
   4730 0000F959 FF FF FF FF FF FF FF  
   4730 0000F960 FF FF FF FF FF FF FF  
   4730 0000F967 FF FF FF FF FF FF FF  
   4730 0000F96E FF FF FF FF FF FF FF  
   4730 0000F975 FF FF FF FF FF FF FF  
   4730 0000F97C FF FF FF FF FF FF FF  
   4730 0000F983 FF FF FF FF FF FF FF  
   4730 0000F98A FF FF FF FF FF FF FF  
   4730 0000F991 FF FF FF FF FF FF FF  
   4730 0000F998 FF FF FF FF FF FF FF  
   4730 0000F99F FF FF FF FF FF FF FF  
   4730 0000F9A6 FF FF FF FF FF FF FF  
   4730 0000F9AD FF FF FF FF FF FF FF  
   4730 0000F9B4 FF FF FF FF FF FF FF  
   4730 0000F9BB FF FF FF FF FF FF FF  
   4730 0000F9C2 FF FF FF FF FF FF FF  
   4730 0000F9C9 FF FF FF FF FF FF FF  
   4730 0000F9D0 FF FF FF FF FF FF FF  
   4730 0000F9D7 FF FF FF FF FF FF FF  
   4730 0000F9DE FF FF FF FF FF FF FF  
   4730 0000F9E5 FF FF FF FF FF FF FF  
   4730 0000F9EC FF FF FF FF FF FF FF  
   4730 0000F9F3 FF FF FF FF FF FF FF  
   4730 0000F9FA FF FF FF FF FF FF FF  
   4730 0000FA01 FF FF FF FF FF FF FF  
   4730 0000FA08 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 98
noc_boot11.a
   4730 0000FA0F FF FF FF FF FF FF FF  
   4730 0000FA16 FF FF FF FF FF FF FF  
   4730 0000FA1D FF FF FF FF FF FF FF  
   4730 0000FA24 FF FF FF FF FF FF FF  
   4730 0000FA2B FF FF FF FF FF FF FF  
   4730 0000FA32 FF FF FF FF FF FF FF  
   4730 0000FA39 FF FF FF FF FF FF FF  
   4730 0000FA40 FF FF FF FF FF FF FF  
   4730 0000FA47 FF FF FF FF FF FF FF  
   4730 0000FA4E FF FF FF FF FF FF FF  
   4730 0000FA55 FF FF FF FF FF FF FF  
   4730 0000FA5C FF FF FF FF FF FF FF  
   4730 0000FA63 FF FF FF FF FF FF FF  
   4730 0000FA6A FF FF FF FF FF FF FF  
   4730 0000FA71 FF FF FF FF FF FF FF  
   4730 0000FA78 FF FF FF FF FF FF FF  
   4730 0000FA7F FF FF FF FF FF FF FF  
   4730 0000FA86 FF FF FF FF FF FF FF  
   4730 0000FA8D FF FF FF FF FF FF FF  
   4730 0000FA94 FF FF FF FF FF FF FF  
   4730 0000FA9B FF FF FF FF FF FF FF  
   4730 0000FAA2 FF FF FF FF FF FF FF  
   4730 0000FAA9 FF FF FF FF FF FF FF  
   4730 0000FAB0 FF FF FF FF FF FF FF  
   4730 0000FAB7 FF FF FF FF FF FF FF  
   4730 0000FABE FF FF FF FF FF FF FF  
   4730 0000FAC5 FF FF FF FF FF FF FF  
   4730 0000FACC FF FF FF FF FF FF FF  
   4730 0000FAD3 FF FF FF FF FF FF FF  
   4730 0000FADA FF FF FF FF FF FF FF  
   4730 0000FAE1 FF FF FF FF FF FF FF  
   4730 0000FAE8 FF FF FF FF FF FF FF  
   4730 0000FAEF FF FF FF FF FF FF FF  
   4730 0000FAF6 FF FF FF FF FF FF FF  
   4730 0000FAFD FF FF FF FF FF FF FF  
   4730 0000FB04 FF FF FF FF FF FF FF  
   4730 0000FB0B FF FF FF FF FF FF FF  
   4730 0000FB12 FF FF FF FF FF FF FF  
   4730 0000FB19 FF FF FF FF FF FF FF  
   4730 0000FB20 FF FF FF FF FF FF FF  
   4730 0000FB27 FF FF FF FF FF FF FF  
   4730 0000FB2E FF FF FF FF FF FF FF  
   4730 0000FB35 FF FF FF FF FF FF FF  
   4730 0000FB3C FF FF FF FF FF FF FF  
   4730 0000FB43 FF FF FF FF FF FF FF  
   4730 0000FB4A FF FF FF FF FF FF FF  
   4730 0000FB51 FF FF FF FF FF FF FF  
   4730 0000FB58 FF FF FF FF FF FF FF  
   4730 0000FB5F FF FF FF FF FF FF FF  
   4730 0000FB66 FF FF FF FF FF FF FF  
   4730 0000FB6D FF FF FF FF FF FF FF  
   4730 0000FB74 FF FF FF FF FF FF FF  
   4730 0000FB7B FF FF FF FF FF FF FF  
   4730 0000FB82 FF FF FF FF FF FF FF  
   4730 0000FB89 FF FF FF FF FF FF FF  
   4730 0000FB90 FF FF FF FF FF FF FF  
   4730 0000FB97 FF FF FF FF FF FF FF  
   4730 0000FB9E FF FF FF FF FF FF FF  
   4730 0000FBA5 FF FF FF FF FF FF FF  
   4730 0000FBAC FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 99
noc_boot11.a
   4730 0000FBB3 FF FF FF FF FF FF FF  
   4730 0000FBBA FF FF FF FF FF FF FF  
   4730 0000FBC1 FF FF FF FF FF FF FF  
   4730 0000FBC8 FF FF FF FF FF FF FF  
   4730 0000FBCF FF FF FF FF FF FF FF  
   4730 0000FBD6 FF FF FF FF FF FF FF  
   4730 0000FBDD FF FF FF FF FF FF FF  
   4730 0000FBE4 FF FF FF FF FF FF FF  
   4730 0000FBEB FF FF FF FF FF FF FF  
   4730 0000FBF2 FF FF FF FF FF FF FF  
   4730 0000FBF9 FF FF FF FF FF FF FF  
   4730 0000FC00 FF FF FF FF FF FF FF  
   4730 0000FC07 FF FF FF FF FF FF FF  
   4730 0000FC0E FF FF FF FF FF FF FF  
   4730 0000FC15 FF FF FF FF FF FF FF  
   4730 0000FC1C FF FF FF FF FF FF FF  
   4730 0000FC23 FF FF FF FF FF FF FF  
   4730 0000FC2A FF FF FF FF FF FF FF  
   4730 0000FC31 FF FF FF FF FF FF FF  
   4730 0000FC38 FF FF FF FF FF FF FF  
   4730 0000FC3F FF FF FF FF FF FF FF  
   4730 0000FC46 FF FF FF FF FF FF FF  
   4730 0000FC4D FF FF FF FF FF FF FF  
   4730 0000FC54 FF FF FF FF FF FF FF  
   4730 0000FC5B FF FF FF FF FF FF FF  
   4730 0000FC62 FF FF FF FF FF FF FF  
   4730 0000FC69 FF FF FF FF FF FF FF  
   4730 0000FC70 FF FF FF FF FF FF FF  
   4730 0000FC77 FF FF FF FF FF FF FF  
   4730 0000FC7E FF FF FF FF FF FF FF  
   4730 0000FC85 FF FF FF FF FF FF FF  
   4730 0000FC8C FF FF FF FF FF FF FF  
   4730 0000FC93 FF FF FF FF FF FF FF  
   4730 0000FC9A FF FF FF FF FF FF FF  
   4730 0000FCA1 FF FF FF FF FF FF FF  
   4730 0000FCA8 FF FF FF FF FF FF FF  
   4730 0000FCAF FF FF FF FF FF FF FF  
   4730 0000FCB6 FF FF FF FF FF FF FF  
   4730 0000FCBD FF FF FF FF FF FF FF  
   4730 0000FCC4 FF FF FF FF FF FF FF  
   4730 0000FCCB FF FF FF FF FF FF FF  
   4730 0000FCD2 FF FF FF FF FF FF FF  
   4730 0000FCD9 FF FF FF FF FF FF FF  
   4730 0000FCE0 FF FF FF FF FF FF FF  
   4730 0000FCE7 FF FF FF FF FF FF FF  
   4730 0000FCEE FF FF FF FF FF FF FF  
   4730 0000FCF5 FF FF FF FF FF FF FF  
   4730 0000FCFC FF FF FF FF FF FF FF  
   4730 0000FD03 FF FF FF FF FF FF FF  
   4730 0000FD0A FF FF FF FF FF FF FF  
   4730 0000FD11 FF FF FF FF FF FF FF  
   4730 0000FD18 FF FF FF FF FF FF FF  
   4730 0000FD1F FF FF FF FF FF FF FF  
   4730 0000FD26 FF FF FF FF FF FF FF  
   4730 0000FD2D FF FF FF FF FF FF FF  
   4730 0000FD34 FF FF FF FF FF FF FF  
   4730 0000FD3B FF FF FF FF FF FF FF  
   4730 0000FD42 FF FF FF FF FF FF FF  
   4730 0000FD49 FF FF FF FF FF FF FF  
   4730 0000FD50 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 100
noc_boot11.a
   4730 0000FD57 FF FF FF FF FF FF FF  
   4730 0000FD5E FF FF FF FF FF FF FF  
   4730 0000FD65 FF FF FF FF FF FF FF  
   4730 0000FD6C FF FF FF FF FF FF FF  
   4730 0000FD73 FF FF FF FF FF FF FF  
   4730 0000FD7A FF FF FF FF FF FF FF  
   4730 0000FD81 FF FF FF FF FF FF FF  
   4730 0000FD88 FF FF FF FF FF FF FF  
   4730 0000FD8F FF FF FF FF FF FF FF  
   4730 0000FD96 FF FF FF FF FF FF FF  
   4730 0000FD9D FF FF FF FF FF FF FF  
   4730 0000FDA4 FF FF FF FF FF FF FF  
   4730 0000FDAB FF FF FF FF FF FF FF  
   4730 0000FDB2 FF FF FF FF FF FF FF  
   4730 0000FDB9 FF FF FF FF FF FF FF  
   4730 0000FDC0 FF FF FF FF FF FF FF  
   4730 0000FDC7 FF FF FF FF FF FF FF  
   4730 0000FDCE FF FF FF FF FF FF FF  
   4730 0000FDD5 FF FF FF FF FF FF FF  
   4730 0000FDDC FF FF FF FF FF FF FF  
   4730 0000FDE3 FF FF FF FF FF FF FF  
   4730 0000FDEA FF FF FF FF FF FF FF  
   4730 0000FDF1 FF FF FF FF FF FF FF  
   4730 0000FDF8 FF FF FF FF FF FF FF  
   4730 0000FDFF FF FF FF FF FF FF FF  
   4730 0000FE06 FF FF FF FF FF FF FF  
   4730 0000FE0D FF FF FF FF FF FF FF  
   4730 0000FE14 FF FF FF FF FF FF FF  
   4730 0000FE1B FF FF FF FF FF FF FF  
   4730 0000FE22 FF FF FF FF FF FF FF  
   4730 0000FE29 FF FF FF FF FF FF FF  
   4730 0000FE30 FF FF FF FF FF FF FF  
   4730 0000FE37 FF FF FF FF FF FF FF  
   4730 0000FE3E FF FF FF FF FF FF FF  
   4730 0000FE45 FF FF FF FF FF FF FF  
   4730 0000FE4C FF FF FF FF FF FF FF  
   4730 0000FE53 FF FF FF FF FF FF FF  
   4730 0000FE5A FF FF FF FF FF FF FF  
   4730 0000FE61 FF FF FF FF FF FF FF  
   4730 0000FE68 FF FF FF FF FF FF FF  
   4730 0000FE6F FF FF FF FF FF FF FF  
   4730 0000FE76 FF FF FF FF FF FF FF  
   4730 0000FE7D FF FF FF FF FF FF FF  
   4730 0000FE84 FF FF FF FF FF FF FF  
   4730 0000FE8B FF FF FF FF FF FF FF  
   4730 0000FE92 FF FF FF FF FF FF FF  
   4730 0000FE99 FF FF FF FF FF FF FF  
   4730 0000FEA0 FF FF FF FF FF FF FF  
   4730 0000FEA7 FF FF FF FF FF FF FF  
   4730 0000FEAE FF FF FF FF FF FF FF  
   4730 0000FEB5 FF FF FF FF FF FF FF  
   4730 0000FEBC FF FF FF FF FF FF FF  
   4730 0000FEC3 FF FF FF FF FF FF FF  
   4730 0000FECA FF FF FF FF FF FF FF  
   4730 0000FED1 FF FF FF FF FF FF FF  
   4730 0000FED8 FF FF FF FF FF FF FF  
   4730 0000FEDF FF FF FF FF FF FF FF  
   4730 0000FEE6 FF FF FF FF FF FF FF  
   4730 0000FEED FF FF FF FF FF FF FF  
   4730 0000FEF4 FF FF FF FF FF FF FF  
Bird Computer Butterfly assembler   version 1.0.2   Thu Jun 29 00:05:12 2017     Page 101
noc_boot11.a
   4730 0000FEFB FF FF FF FF FF FF FF  
   4730 0000FF02 FF FF FF FF FF FF FF  
   4730 0000FF09 FF FF FF FF FF FF FF  
   4730 0000FF10 FF FF FF FF FF FF FF  
   4730 0000FF17 FF FF FF FF FF FF FF  
   4730 0000FF1E FF FF FF FF FF FF FF  
   4730 0000FF25 FF FF FF FF FF FF FF  
   4730 0000FF2C FF FF FF FF FF FF FF  
   4730 0000FF33 FF FF FF FF FF FF FF  
   4730 0000FF3A FF FF FF FF FF FF FF  
   4730 0000FF41 FF FF FF FF FF FF FF  
   4730 0000FF48 FF FF FF FF FF FF FF  
   4730 0000FF4F FF FF FF FF FF FF FF  
   4730 0000FF56 FF FF FF FF FF FF FF  
   4730 0000FF5D FF FF FF FF FF FF FF  
   4730 0000FF64 FF FF FF FF FF FF FF  
   4730 0000FF6B FF FF FF FF FF FF FF  
   4730 0000FF72 FF FF FF FF FF FF FF  
   4730 0000FF79 FF FF FF FF FF FF FF  
   4730 0000FF80 FF FF FF FF FF FF FF  
   4730 0000FF87 FF FF FF FF FF FF FF  
   4730 0000FF8E FF FF FF FF FF FF FF  
   4730 0000FF95 FF FF FF FF FF FF FF  
   4730 0000FF9C FF FF FF FF FF FF FF  
   4730 0000FFA3 FF FF FF FF FF FF FF  
   4730 0000FFAA FF FF FF FF FF FF FF  
   4730 0000FFB1 FF FF FF FF FF FF FF  
   4730 0000FFB8 FF FF FF FF FF FF FF  
   4730 0000FFBF FF FF FF FF FF FF FF  
   4730 0000FFC6 FF FF FF FF FF FF FF  
   4730 0000FFCD FF FF FF FF FF FF FF  
   4730 0000FFD4 FF FF FF FF FF FF FF  
   4730 0000FFDB FF FF FF FF FF FF FF  
   4730 0000FFE2 FF FF FF FF FF FF FF  
   4730 0000FFE9 FF FF FF FF FF FF FF  
   4730 0000FFF0 FF FF FF FF FF FF FF  
   4730 0000FFF7 FF FF FF FF FF FF FF  
                                      
   4731 0000FFFE 00 D8                   		dw		start
