; ============================================================================
;        __
;   \\__/ o\    (C) 2020  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

		code	18 bits
		align	4
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

MMUInit:
	gcsub	$sp,$sp,#4
	stt		$ra,[$sp]
	ldi		$t0,#MEMSZ-OSPAGES-4  ; set number of available pages (20 pages already allocated)
	stt		$t0,NPAGES
	; Free all memory for all tasks
	; Sets all pages to map to page zero for all tasks, except for the system
	; task (task #0) which pre-allocates the first 16kB of memory.
	ldi		$t0,#$00
	ldi		$t4,#31					; app id
.0004:
	ldi		$t1,#$000				; regno
	ldi		$t2,#256				; number of registers to update
	ldi		$t3,#16					; number of pages pre-allocated
.0001:
	sll		$s1,$t4,#16			; put app id in place
	or		$s1,$s1,$t1			; or in page number
	mvmap	$x0,$t0,$s1
	add		$t0,$t0,#$01
	add		$t1,$t1,#$01		; increment page number
	bgtz  $t4,.0005
	bltu	$t1,$t3,.0003
.0005:
	mov		$t0,$x0					; mark pages unallocated
.0003:
	sub		$t2,$t2,#1
	bnez	$t2,.0001
	sub		$t4,$t4,#1      ; next app id
	bge		$t4,$x0,.0004
	; Now ensure all pages in PAM are marked as free or OS allocated
	call  PAMInit

	; allocate last 4 pages for system stacks
	ldi		$t1,#$FF				
	ldi		$t0,#$1FF
	mvmap	$x0,$t0,$t1
	ldi		$t1,#$FE
	ldi		$t0,#$1FE
	mvmap	$x0,$t0,$t1
	ldi		$t1,#$FD			
	ldi		$t0,#$1FD
	mvmap	$x0,$t0,$t1
	ldi		$t1,#$FC			
	ldi		$t0,#$1FC
	mvmap	$x0,$t0,$t1

	; Now setup segment registers
	ldi		$t0,#$0
	ldi		$t1,#$07				; t1 = value to load RWX=111, base = 0
.0002:
	mvseg	$x0,$t1,$t0			; move to the segment register identifed by t0
	add		$t0,$t0,#1			; pick next segment register
	slt		$t2,$t0,#16			; 16 segment regs
	bnez	$t2,.0002
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
	ret

;------------------------------------------------------------------------------
; Find a run of buckets available for mapping virtual to physical addresses.
;
; Parameters:
;		a0 = mid
;		a1 = number of pages required.
; Modifies:
;		t1,t2,t3,t5
; Returns:
;		a0 = starting bucket number (includes ASID), -1 if no run found
;------------------------------------------------------------------------------

FindRun:
	and			$t3,$a0,#$1F			; t3 = mid
	sll			$t3,$t3,#16				; shift into usable position
	ldi			$t1,#0						; t1 = count of consecutive empty buckets
	mov			$t2,$t3						; t2 = map entry number
	or			$t2,$t2,#OSPAGES	; start looking at page 32 (others are for OS)
	ldi			$t5,#511					; max number of pages - 1
	or			$t5,$t5,$t3				; t5 = max in ASID
.0001:
	mvmap		$a0,$x0,$t2				; get map entry into v0
	beq			$a0,$x0,.empty0		; is it empty?
	add			$t2,$t2,#1
	bltu		$t2,$t5,.0001
.0002:
	ldi			$a0,#-1						; got here so no run was found
	ret
.empty0:
	mov			$t3,$t2						; save first empty bucket
.empty1:
	bgeu		$t2,$t5,.0002
	add			$t1,$t1,#1
	bgeu		$t1,$a1,.foundEnough
	add			$t2,$t2,#1				; next bucket
	mvmap		$a0,$x0,$t2				; get map entry
	beq			$a0,$x0,.empty1
	mov			$t1,$x0						; reset counter
	bra			.0001							; go back and find another run
.foundEnough:
	mov			$a0,$t3						; v0 = start of run
	ret

;------------------------------------------------------------------------------
; Parameters:
;		$a0 = mid
;		$a1 = amount of memory to allocate
; Modifies:
;		t0
; Returns:
;		$a1 = pointer to allocated memory in virtual address space.
;		$a0 = E_Ok for success, E_NotAlloc otherwise
;------------------------------------------------------------------------------
;
Alloc:
	gcsub		$sp,$sp,#24
	stt			$ra,[$sp]
	stt			$s1,4[$sp]			; these regs must be saved
	stt			$s2,8[$sp]
	stt			$s3,16[$sp]
	stt     $s4,20[$sp]
	beqz    $a1,.allocZero
	; First check if there are enough pages available in the system.
	add			$s4,$a1,#PAGESZ-1	; v0 = round memory request
	srl			$s4,$s4,#LOG_PGSZ	; v0 = convert to pages required
	ldt			$t0,NPAGES				; check number of pages available
	bleu		$s4,$t0,.enough
.noRun2:
	ldi			$a1,#0						; not enough, return null
	bra			.noRun
.enough:
	mov			$s1,$a0
	; There are enough pages, but is there a run long enough in map space?
	mov			$s2,$s4				    ; save required # pages
	mov			$a1,$s4
	call		FindRun						; find a run of available slots
	bltz		$a0,.noRun2
	; Now there are enough pages, and a run available, so allocate
	mov			$s1,$a0						; s1 = start of run
	ldt			$s3,NPAGES				; decrease number of pages available in system
	sub			$s3,$s3,$s2
	stt			$s3,NPAGES
	mov			$s3,$a0						; s3 = start of run
.0001:
  call    PAMMarkPage       ; allocates a page
;	palloc	$v0								; allocate a page (cheat and use hardware)
	;call		AllocPage
	beqz		$a0,.noRun        ; shouldn't get an error here
	mvmap		$x0,$a0,$s3				; map the page
	add			$s3,$s3,#1				; next bucket
	sub			$s2,$s2,#1
	bnez		$s2,.0001
	and     $a1,$s1,#$FFFF    ; strip out ASID
	sll			$a1,$a1,#LOG_PGSZ	; $a1 = virtual address of allocated mem.
	ldt     $s1,12[$sp]
	; Clear the allocated memory
  mov     $s4,$a1
.zm:
  stt     $x0,[$s4]
  add     $s4,$s4,#4
  sub     $s1,$s1,#4
  bge     $s1,$x0,.zm	
	ldi			$a0,#E_Ok
	bra			.xit
.noRun:
	ldi			$a0,#E_NotAlloc
.xit
	ldt			$ra,[$sp]
	ldt			$s1,4[$sp]			; restore regs
	ldt			$s2,8[$sp]
	ldt			$s3,16[$sp]
	ldt     $s4,20[$sp]
	add			$sp,$sp,#24
	ret
.allocZero:
  ldi     $a1,#0
	ldi			$a0,#E_Ok
  bra     .xit

;------------------------------------------------------------------------------
; Allocate the stack page for a task. The stack is located at the highest
; virtual address ($7FC00).
;
; Parameters:
;		$a0 = mid to allocate for
;	Returns:
;		$a0 = physical address, 0 if unsuccessful
;		$a1 = virtual address, not valid unless successful
;------------------------------------------------------------------------------

AllocStack:
  gcsub   $sp,$sp,#12
  stt     $ra,[$sp]
  stt     $s1,4[$sp]
  stt     $s2,8[$sp]
  mov     $s2,$a0
	sll			$s1,$a0,#16			; 
	or			$s1,$s1,#511		; last page of memory is for stack
	mvmap		$a0,$x0,$s1			; check if stack already allocated
	bnez		$a0,.0001
	stt     $s1,-4[$sp]
  sub     $sp,$sp,#4
	call    PAMMarkPage
  add     $sp,$sp,#4
	ldt     $s1,-4[$sp]
;	palloc	$v0							; allocate a page
	beqz		$a0,.xit		    ; success?
	mvmap		$x0,$a0,$s1
.0001:
	and			$s1,$s1,#511
	sll			$a0,$a0,#LOG_PGSZ			; convert pages to addresses
	sll			$s1,$s1,#LOG_PGSZ
;	beqz    $s2,.xit
	or      $a1,$s1,#$A0000000    ; set stack segment
.xit:
  ldt     $ra,[$sp]
  ldt     $s1,4[$sp]
  ldt     $s2,8[$sp]
  add     $sp,$sp,#12
	ret

;------------------------------------------------------------------------------
; This routine will de-allocate all the pages associated with a task including
; the stack.
;
; Parameters:
;		$a0 = mid to free memory for
;	Modifies:
;		a0,t0,t1,t3,t4
; Returns:
;		none
;------------------------------------------------------------------------------

FreeAll:
  gcsub   $sp,$sp,#4
  stt     $ra,[$sp]
	ldi			$t3,#0
	sll			$t4,$a0,#16
.nxt:
	slt			$t1,$t3,#512		; number of buckets to check
	beqz		$t1,.0001
	and			$t4,$t4,#$1F0000
	or			$t4,$t4,$t3			; combine pid and bucket number
	ldi			$a0,#0					; new page number to set (indicates free)
	mvmap		$a0,$a0,$t4			; get page mapping and set to zero
	add			$t3,$t3,#1			; advance to next bucket
	beqz		$a0,.nxt				; 0 = no map in this bucket
	call    PAMUnmarkPage
;	pfree		$t0							; free the page
	ldt			$t0,NPAGES			; update the number of available pages
	add			$t0,$t0,#1
	stt			$t0,NPAGES
	bra			.nxt
.0001:
  ldt     $ra,[$sp]
  add     $sp,$sp,#4
	ret

;------------------------------------------------------------------------------
; Convert a virtual address to a linear one.
;
; Parameters:
;		$a0 = virtual address to convert
; Modifies:
;		$a1,$t0
; Returns:
;		$a0 = linear address
;------------------------------------------------------------------------------

VirtToLinear:
	srl   $a1,$a0,#28         ; get segment register of address
	mvseg $a1,$x0,$a1         ; get segment register value
	and   $a1,$a1,#$FFFFFFF0  ; mask off acr bits
	sll   $a1,$a1,#6          ; shift into position
	and   $t0,$a0,#$0FFFFFFF  ; mask off segment
	add   $a0,$a1,$t0         ; v0 = linear address (segment base + address)
  ret

;------------------------------------------------------------------------------
; Convert a virtual address to a linear one.
;
; Parameters:
;   $a0 = tid
;		$a1 = virtual address to convert
; Modifies:
;		$v1
; Returns:
;		$v0 = linear address
;------------------------------------------------------------------------------

;VirtToLinear2:
;	srl   $v0,$a1,#28         ; get base register selector of address
;	sll   $v0,$v0,#2          ; convert to index
;	sll   $v1,$a0,#2
;	ldt   $v1,TidTcbMap[$v1]  ; $v1 = pointer to TCB
;	add   $v0,$v0,$v1
;	ldt   $v1,TCBbases[$v0]   ; $v1 = base register value
;	and   $v0,$v1,#$FFFFFFF0  ; mask off acr bits
;	sll   $v0,$v0,#6          ; shift into position
;	and   $v1,$a1,#$0FFFFFFF  ; mask off base selector
;	add   $v0,$v1,$v0         ; v0 = linear address (base + address)
;  ret

;------------------------------------------------------------------------------
; Convert a virtual address to a physical one
;
; Parameters:
;		$a0 = virtual address to convert
; Modifies:
;		$t0, $t1
; Returns:
;		$a0 = physical address
;------------------------------------------------------------------------------

VirtToPhys:
	gcsub $sp,$sp,#8
	stt   $ra,[$sp]
	stt   $s1,4[$sp]
	mov   $s1,$a0
	call  VirtToLinear
	bltz	$a0,.notMapped
	srl		$t0,$a0,#LOG_PGSZ		; convert virt to page
	mGetCurrentTid
	sll		$a0,$a0,#16
	or		$a0,$a0,$t0					; and in tid
	mvmap	$a0,$x0,$a0					; get the translation
	sll		$a0,$a0,#LOG_PGSZ		; convert page to address
	and		$t0,$s1,#$3FF				; insert LSB's
	or		$a0,$a0,$t0
.notMapped:
	ldt   $ra,[$sp]
	ldt   $s1,4[$sp]
	add   $sp,$sp,#8
	ret

;------------------------------------------------------------------------------
; VirtToPhys2:
;   Used by the OS to convert virtual to physcial addresses.
; Convert a virtual address to a physical one. Slightly tricky as linear
; addresses are associated with the TID while paged addresses are associated
; with the MID of the task.
;
; Parameters:
;   $a0 = tid
;		$a1 = virtual address to convert
; Modifies:
;		t0
; Returns:
;		$v0 = physical address
;------------------------------------------------------------------------------

VirtToPhys2:
	gcsub $sp,$sp,#4
	stt   $ra,[$sp]
;	call  VirtToLinear2
;	bltz	$v0,.notMapped
;	srl		$t0,$v0,#LOG_PGSZ		; convert virt to page
;	sll   $v1,$a0,#2
;	ldt   $v1,TidTcbMap[$v1]  ; $v1 = pointer to TCB
;	ldbu  $v1,TCBmid[$v1]     ; $v1 = mid
;	sll		$v0,$v1,#16         ; set map id field
;	or		$v0,$v0,$t0					; and in tid
;	mvmap	$v0,$x0,$v0					; get the translation
;	sll		$v0,$v0,#LOG_PGSZ		; convert page to address
;	and		$t0,$a0,#$3FF				; insert LSB's
;	or		$v0,$v0,$t0
.notMapped:
	ldt   $ra,[$sp]
	add   $sp,$sp,#4
	ret

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

FetchMemoryWord:
  ldt   $a1,[$a1]
  ldi   $a0,#E_Ok
  jmp   OSExit
