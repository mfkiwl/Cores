; ============================================================================
;        __
;   \\__/ o\    (C) 2020  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

;------------------------------------------------------------------------------
; PAM
; 0 = unallocated
; 1 = reserved
; 2 = end of run of pages
; 3 = allocated
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
; PAMFindRun
;    Find a run of unallocated pages.
;
; Parameters:
;   $a0 = number of consecutive pages required
; Returns:
;   $a0 = page starting run, -1 if not enough memory
;------------------------------------------------------------------------------

PAMFindRun:
  gcsub $sp,$sp,#20
  stt   $ra,[$sp]
  stt   $s1,4[$sp]
  stt   $s2,8[$sp]
  stt   $s3,12[$sp]
  stt   $s4,16[$sp]
  mov   $s1,$a0             ; save argument value
  stt   $a0,$4010
  ldi   $a0,#OSPAGES
.nextPage:
  mov   $s4,$a0
  call  PAMGetbitPair
  bnez  $a0,.notAvailable
  mov   $s3,$s4             ; remember start of run
  mov   $s2,$s1             ; $s2 = run length
.runInc:
  sub   $s2,$s2,#1
  beqz  $s2,.foundRun
  add   $a0,$s4,#1          ; increment run start
  slt   $t1,$a0,#MEMSZ
  beqz  $t1,.outOfMem
  mov   $s4,$a0             ; remember $a0
  stt   $s4,$4020
  call  PAMGetbitPair
  beqz  $a0,.runInc
  add   $a0,$s3,#1          ; increment run start pos
  bra   .nextPage
.notAvailable:
  add   $a0,$s4,#1
  slt   $t1,$a0,#MEMSZ
  bnez  $t1,.nextPage
.outOfMem:
  mov   $a0,#-1
  bra   .xit
.foundRun:
  mov   $a0,$s3
.xit
  ldt   $ra,[$sp]
  ldt   $s1,4[$sp]
  ldt   $s2,8[$sp]
  ldt   $s3,12[$sp]
  ldt   $s4,16[$sp]
  add   $sp,$sp,#20
  ret

;------------------------------------------------------------------------------
; Find a run of pages and mark them all allocated.
;
; Parameters:
;   $a0 = amount of memory to allocate
; Returns:
;   $a0 = pointer to memory, -1 if insufficient memory
;------------------------------------------------------------------------------

PAMAlloc:
  gcsub $sp,$sp,#16
  stt   $ra,[$sp]
  stt   $s1,4[$sp]
  stt   $s4,8[$sp]
  stt   $s5,12[$sp]
  beqz  $a0,.outOfMem       ; request sensible?
  add   $t0,$a0,#PAGESZ-1   ; round allocation up
  srl   $a0,$t0,#LOG_PGSZ   ; convert size to pages
  mov   $s4,$a0             ; $s4 = length of run in pages
  ldt   $t0,NPAGES          ; check number of pages of memory available
  sub   $t0,$t0,$a0
  bltz  $t0,.outOfMem
  stt   $t0,NPAGES          ; update the number of available pages
  call  PAMFindRun
  bltz  $a0,.xit
  mov   $s1,$a0
  mov   $a3,$a0
  mov   $s5,$a0             ; $s5 = start of run
.markNext:
  mov   $a0,$a3
  slt   $a1,$s4,#2          ; if $s4 <= 1
  xor   $a1,$a1,#3          ; $a1 = 3, 2 if end of run
  call  PAMSetbitPair
  add   $a3,$a3,#1          ; increment page number
  sub   $s4,$s4,#1          ; decrement length
  bgtz  $s4,.markNext
  mov   $a0,$s5             ; $a0 = start of run
  sll   $a0,$a0,#LOG_PGSZ   ; $a0 = physical address of page
.xit:
  ldt   $ra,[$sp]
  ldt   $s1,4[$sp]
  ldt   $s4,8[$sp]
  ldt   $s5,12[$sp]
  add   $sp,$sp,#16
  ret
.outOfMem:
  ldi   $a0,#-1
  bra   .xit

;------------------------------------------------------------------------------
; Free memory previously allocated with PAMAlloc.
;
; Parameters:
;   $a0 = pointer to start of memory
; Modifies:
;   $a0,$t0,$t1,$t2,$t3,$t4
; Returns:
;   none
;------------------------------------------------------------------------------

PAMFree:
  gcsub   $sp,$sp,#12
  stt     $ra,[$sp]
  stt     $s1,4[$sp]
  mov     $s1,$a0
  and     $a0,$a0,#$FFF803FF  ; check page 1kB aligned
  bnez    $a0,.xit
  srl     $a0,$s1,#LOG_PGSZ   ; convert to page number
  ldi     $t4,#1
.nextPage:
  mov     $s1,$a0
  call    PAMGetbitPair
  beqz    $a0,.endOfRun
  slt     $a0,$a0,#3
  bnez    $a0,.lastPage
  mov     $a0,$s1
  ldi     $a1,#0
  call    PAMSetbitPair
  add     $s1,$a0,#1
  add     $t4,$t4,#1
  bra     .nextPage  
.lastPage:
  mov     $a0,$s1
  ldi     $a1,#0
  call    PAMSetbitPair
  add     $t4,$t4,#1
.endOfRun:
  ldt     $a1,NPAGES
  add     $a1,$a1,$t4
  stt     $a1,NPAGES
.xit:
  ldt     $ra,[$sp]
  ldt     $s1,4[$sp]
  add     $sp,$sp,#12
  ret

;------------------------------------------------------------------------------
; Allocate a single page of memory. Available memory is indicated by a bitmmap
; called the PAM for page allocation map.
;
; Modifies:
;		$t0,$t1,$t2,$t3
; Returns:
;		$a0 = page allocated
;------------------------------------------------------------------------------
;
PAMMarkPage:
	gcsub	$sp,$sp,#8
	stt		$ra,[$sp]
	stt   $s1,4[$sp]
	ldi   $a0,#OSPAGES
  mov   $s1,$a0
.0001:
  mov   $a0,$s1
	call  PAMGetbitPair
	beqz  $a0,.gotFree
	add   $s1,$s1,#1
	slt   $t0,$s1,#MEMSZ
	bnez  $t0,.0001
	ldi   $a0,#0
	bra   .xit
.gotFree:
  mov   $a0,$s1
  ldi   $a1,#2          ; end of run bits
  call  PAMSetbitPair
.xit:
	ldt		$ra,[$sp]
	ldt   $s1,4[$sp]
	add		$sp,$sp,#8
  ret

;------------------------------------------------------------------------------
; Parameters:
;		$a0 = page number to free
; Modifies:
;		$a1,$t0,$t1,$t2,$t3
;------------------------------------------------------------------------------

PAMUnmarkPage:
	ldi		$t2,#MEMSZ-1  			; last page is permanently allocated to system stack
	bgeu	$a0,$t2,PAMxit
	ldi		$t2,#OSPAGES
	bltu	$a0,$t2,PAMxit			; first 64 pages (64kB) allocated permanently to system
	ldi   $a1,#0
; Tail recursion here

;------------------------------------------------------------------------------
; Parameters:
;		$a0 = bit number to set
;   $a1 = value to set 0,1,2 or 3
; Does not modify:
;   $a0, $a1
; Modifies:
;		$t0,$t1,$t2,$t3
;------------------------------------------------------------------------------

PAMSetbitPair:
  srl   $t2,$a0,#4          ; t2 = word
  sll   $t2,$t2,#2          ; t2 = word index
  and   $t3,$a0,#15         ; t3 = bit pair no
  sll   $t3,$t3,#1          ; t3 = bit pair index
  ldi   $t0,#3              ; make a bit mask
  sll   $t0,$t0,$t3
  xor   $t0,$t0,#-1         ; get inverted mask
  sll   $a1,$a1,$t3
	ldt		$t1,PAM[$t2]        ; get word
	and		$t0,$t1,$t0					; clear bit
	or    $t0,$t0,$a1         ; set new bit status
	stt		$t0,PAM[$t2]        ; store word
	srl   $a1,$a1,$t3         ; restore $a1
PAMxit:
	ret

;------------------------------------------------------------------------------
; Parameters:
;		$a0 = bit number to get
; Modifies:
;		$t0,$t2,$t3
; Returns:
;   $a0 = value of bit (1 or 0)
;------------------------------------------------------------------------------

PAMGetbitPair:
  srl   $t2,$a0,#4          ; $t2 = word
  sll   $t2,$t2,#2          ; $t2 = word index
  and   $t3,$a0,#15         ; $t3 = bit pair no
  sll   $t3,$t3,#1          ; $t3 = bit pair index
	ldt		$t0,PAM[$t2]        ; get word
	srl   $t2,$t0,$t3         ; extract bits
	and   $a0,$t2,#3          ; return 0,1,2, or 3
	ret

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

PAMInit:
  gcsub $sp,$sp,#4
  stt   $ra,[$sp]
  ; First zero out the entire PAM using word stores
  ldi   $a0,#0
.0002:
  stt   $x0,PAM[$a0]
  add   $a0,$a0,#4
  slt   $t0,$a0,#32*4   ; 1024 bits = 128 bytes
  bnez  $t0,.0002

  ; Now set bits for preallocated memory pages
  ldi   $a0,#OSPAGES-1  ; OS pages
  ldi   $a1,#3
.0001:
  call  PAMSetbitPair
  sub   $a0,$a0,#1
  bge   $a0,$x0,.0001
  ldi   $a0,#15         ; Last OS page
  ldi   $a1,#2          ; set mark end of run
  call  PAMSetbitPair
  ldi   $a1,#2          ; end of run
  ldi   $a0,#MEMSZ-1    ; OS stack page
  call  PAMSetbitPair
  ldi   $a0,#MEMSZ-2    ; OS stack page
  ldi   $a1,#3          ; mid run
  call  PAMSetbitPair
  ldi   $a0,#MEMSZ-3    ; OS stack page
  call  PAMSetbitPair
  ldi   $a0,#MEMSZ-4    ; OS stack page
  call  PAMSetbitPair
  ldt   $ra,[$sp]
  add   $sp,$sp,#4
  ret

GetPamBit:
  mov   $a0,$a1
  call  PAMGetbitPair
  mov   $a1,$a0
  ldi   $a0,#E_Ok
  jmp   OSExit
