.include "../fmtk/const.r5a"
.include "../fmtk/types.r5a"
.include "../fmtk/config.r5a"
.include "../fmtk/device.r5a"
.include "../fmtk/macro.r5a"
.include "../fmtk/globals.r5a"

CTRLC				equ		$03
CTRLT       equ   $14
BS					equ		$08
LF					equ		$0A
LNFD				equ		$0A
CR					equ		$0D
XON					equ		$11
XOFF				equ		$13
EOF         equ   $1A
DEL					equ		$7F
VIA					equ		$FFDC0600
VIA_PA			equ		$04
VIA_DDRA		equ		$0C
VIA_T1CL		equ		$10
VIA_T1CH		equ		$14
VIA_T2CL    equ   $20
VIA_T2CH    equ   $24
VIA_ACR			equ		$2C
VIA_PCR			equ		$30
VIA_IFR			equ		$34
VIA_IER			equ		$38
VIA_PARAW		equ		$3C
UART				equ		$FFDC0A00
UART_TRB		equ		$00
UART_STAT		equ		$04
UART_CMD		equ		$08
TMOQ				equ		$FFDC0400
OS_SEMA			equ		$FFDB0000

CSR_UIE     equ   $004

	code	18 bits
;------------------------------------------------------------------------------
; Exception vector table.
;------------------------------------------------------------------------------
	org		$FFFC0000				; user mode exception
	jmp		IRQRout
	org 	$FFFC00C0				; machine mode exception
	jmp		IRQRout
	org		$FFFC00FC				; non-maskable interrupt
	jmp		MachineStart

;------------------------------------------------------------------------------
; Reset starting address.
;------------------------------------------------------------------------------
	org		$FFFC0100
MachineStart:
	ldi   $t0,#$FFFFFC1C  		; select register set #28, user register set #0
	csrrw $x0,#CSR_RSSTACK,$t0
	ldi		$sp,#$2007E800-4		; setup machine mode stack pointer
	csrrs $x0,#CSR_TRACECTRL,#1 ; turn on tracing
	ldi		$t0,#1
	stt		$t0,OS_SEMA+$4000		; prime OS semaphore = 1
	ldi		$t0,#0
	csrrw $x0,#CSR_MSEMA,$t0  ; turn off semaphores
	csrrw $x0,#CSR_TASKID,$t0 ; clear task id
	call	MMUInit					; initialize MMU for address space zero.
	call	FMTKInit
	call	ViaSetup
	call	SerialSetup

	ldi		$sp,#$FF07CFFC
ramtest:
	ldi		$a0,#msgRamTest
	call	PutString
	ldi		$t0,#$FF000000
	ldi		$t1,#$55555555
.0001:
	stt		$t1,[$t0]
	sll		$t1,$t1,#1
	stt		$t1,4[$t0]
	srl		$t1,$t1,#1
	add		$t0,$t0,#8
	ldi		$t3,#$FF07CFE0
	bltu	$t0,$t3,.0001

	ldi		$t0,#$FF000000
	ldi		$t1,#$55555555
.0002:
	ldt		$t2,[$t0]
	beq		$t2,$t1,.0003
	mov		$a0,$t0
	call	PutHexWord
	ldi		$a0,#' '
	call	Putch
.0003:
	sll		$t1,$t1,#1
	ldt		$t2,4[$t0]
	beq		$t2,$t1,.0004
	mov		$a0,$t0
	call	PutHexWord
	ldi		$a0,#' '
	call	Putch
.0004:
	srl		$t1,$t1,#1
	add		$t0,$t0,#8
	ldi		$t3,#$FF07CFE0
	bltu	$t0,$t3,.0002

	; re-run setup, it got toasted by the ram test
	call	MMUInit					; initialize MMU for address space zero.
	call	FMTKInit
	call	ViaSetup
	call	SerialSetup

	ldi   $t0,#5          ; set current input and output to serial port
	stb   $t0,CURIN
	stb   $t0,CUROUT
	ldi		$t0,#$FFFC0000
	csrrw $x0,#$301,$t0		; set tvec
	ldi		$t0,#UserStart
	csrrw	$x0,#$341,$t0		; set mepc
	stt   $t0,MEPC1
  ldi   $a0,#5         	; start app
  ldi   $a1,#UserASR
  call  OSOCall
  csrrw $x0,#CSR_TASKID,$a1
  csrrw	$a0,#CSR_IMSTACK,$x0
  and		$a0,$a0,#$FFFFFF00
	csrrw	$x0,#CSR_IMSTACK,$a0	; set lowest IRQ level on return
  csrrs $x0,#CSR_PMSTACK,#8 	; enable interrupts on return
;	csrrc $x0,#CSR_TRACECTRL,#0 ; turn off tracing
;	call	DumpReadyQueue
	mret                      	; switch to user mode
;------------------------------------------------------------------------------
; User mode code starts here
; First thing to do is start a task so that the startup code may run on the
; first task switch.
;------------------------------------------------------------------------------
UserStart:
;	ldi		$sp,#$2007fff0
;  call  DumpTraceQueue
	ldi		$sp,#$2007FFF8-4		; setup machine mode stack pointer
	call	PAMDump
;  wfi                   ; wait for task switch
UserStart2:
  ldi   $a0,#12         ; start app
  ldi   $a1,#SystemASR
  ecall
.appBad:
	ldi		$t0,#E_Busy
	beq		$a0,$t0,UserStart2
	stt		$a0,$10004
;  bnez  $a0,.appBad
  mov   $s1,$a1
.0001:
  mov   $a1,$s1
  ldi   $a0,#14         ; get current tid
  ecall                 ; $a1 = task id
	ldi		$t0,#E_Busy
	beq		$a0,$t0,.0001

  mov		$s2,$a1
.0002:
  mov		$a1,$s2
  stw		$s2,IdleTaskId
  ldi   $a0,#30         ; set task's app id
  mov   $a2,$s1         ; $a2 = app id
  ecall
	ldi		$t0,#E_Busy
	beq		$a0,$t0,.0002

  mov   $s1,$a1         ; s1 = app id
	ldi		$sp,#$2007A000-4  ; setup user mode stack pointer

.0003:
  ldi   $a0,#12         ; start app
  ldi   $a1,#TinyBasicASR
  ecall
	ldi		$t0,#E_Busy
	beq		$a0,$t0,.0003

	ldi		$a0,#1          ; Start finalizer task, task #1
.0004:
	mov   $a1,$s1
	ldi		$a2,#0
	ldi		$a3,#Finalizer
	ldi   $a4,#$0B        ; user mode, regset 11
	ecall
	ldi		$t0,#E_Busy
	beq		$a0,$t0,.0004
.0005:
  ldi   $a0,#12         ; start app
  ldi   $a1,#MonitorASR
  ecall
	ldi		$t0,#E_Busy
	beq		$a0,$t0,.0005
;	ldi		$a0,#1          ; Start task for monitor, task #2
;	mov   $a1,$s1
;	ldi		$a2,#0
;	ldi		$a3,#MonEntry
;	ldi   $a4,#$0A        ; user mode, regset 10
;	ecall
.0006:
  ldi   $a0,#25         ; map OS vars
  ecall
  mov   $gp,$a1
	ldi		$t0,#E_Busy
	beq		$a0,$t0,.0006

UserStart3:
	ldi		$sp,#$20079800-4  ; setup user mode stack pointer
	ldi		$a0,#24							; RequestIOFocus
	mov   $a1,$s1
	ecall
;	ldi		$sp,#$70000		      ; setup temporary user mode stack pointer
;	mov   $a0,$a1             ; $a0 = tid
;	call  AllocStack
;	add   $sp,$v1,#1020       ; place stack pointer at top of allocated region
	ldi		$t0,#$08						; turn on the LED
	stt		$t0,VIA+VIA_PARAW
	ldi		$s2,#16							; send an XON just in case
.0004:
	ldi		$a3,#XON
	call	Putch
	sub		$s2,$s2,#1
	bnez	$s2,.0004
.0002:
;  ldi   $a0,#25             ; Map OS vars
;  ecall
;  mov   $gp,$a1
  ; Request that the idle task announce itself.
;  ldi   $a0,#9              ; SendMsg
;  ldwu  $a1,IdleTaskMbx[$gp]
;  beqz  $a1,.noMbx
;  ldi   $a2,#MT_ANNOUNCE
;  ldi   $a3,#0
;  ldi   $a4,#0
;  ecall
.noMbx:
	ldi		$a0,#msgStart				; spit out a startup message
	call	PutString
;		ldi		a0,#1
;		ldi		a1,#24000
;		ldi		a2,#Monitor
;		ecall
;	call	DumpReadyQueue
	jmp		MonEntry

		; Now a loop to recieve and echo back characters
.0003:
;	ldi		$a0,#26							; FMTK_IO
;	ldi   $a1,#5
;	ldi		$a2,#9							; peekchar function
;	ecall
;	mov   $v0,$v1
;	bltz	$v1,.0003
;	ldi		$a0,#26							; FMTK_IO
;	ldi   $a1,#5
;	ldi		$a2,#8							; getchar function
;	ecall
;	mov		$a3,$v1
;	mov   $a0,$a3
;	call  PutHexByte
;	bra		.0003

;------------------------------------------------------------------------------
; This task runs only if nothing else can run. It must run at the machine
; operating mode.
; Search for ready tasks and add them back into the ready queue.
;------------------------------------------------------------------------------
  align 16
IdleTask:
;  ldi   $a0,#6                ; alloc mailbox
;  ldi   $a1,#0                ; app #0
;  ecall
  stw   $a1,IdleTaskMbx[$gp]  ; save mailbox handle off
.loop2:
	wfi
  ldi   $t0,#$4000
  ldi   $t1,#1
.loop:
  ldi   $a0,#11               ; PeekMsg
  ldwu  $a1,IdleTaskMbx[$gp]
  ldi   $a2,#IdleTaskMsgD1
  ldi   $a3,#IdleTaskMsgD2
  ldi   $a4,#IdleTaskMsgD3
  ldi   $a5,#1                ; remove from queue if present
;  ecall
;  bnez  $a0,.noMsg
;  ldt   $a0,IdleTaskMsgD1
;  xor   $t1,$a0,#MT_ANNOUNCE
;  bnez  $t1,.noAnnounce
  ldi   $a0,#msgIdleAnnounce
  call  PutString
.noAnnounce:
.noMsg:
  ldi   $a0,#17               ; run as OS
  ldi   $a1,#.IdleCode
  mov   $a2,$t0
  ecall
  add   $t0,$t0,#PAGESZ
  slt   $t2,$t0,#MEMSZ*1024
  bnez  $t2,.loop
	bra		.loop2
  ; This section of code runs as part of the OS
  ; Don't call any functions though as there's no stack available
.IdleCode:
	ldi		$a2,#$00
.nxtObj:
	add		$a2,$a2,#$400					; 1k blocks
	ldi		$t3,#$80000
	beq		$a2,$t3,.0001
	; Check if block contains a TCB
  ldt   $t0,OBJMagic[$a2]
  ldi   $t3,#TCB_MAGIC
  bne   $t0,$t3,.nxtObj
  ; Is it ready?
  ldbu  $t3,TCBStatus[$t2]    ; get status
  and   $t3,$t3,#TS_READY
  beqz  $t3,.nxtObj
  ; On Ready queue?
  ldt		$t3,TCBNext[$t2]
  beqz	$t3,.addToReady
  ldt		$t3,TCBStatus[$t3]
  and		$t3,$t3,#TS_READY
  bnez	$t3,.nxtObj
  ; The task was ready, but not found in the ready queue. So add it
.addToReady:
  mov		$a0,$a2
  sub		$sp,$sp,#4
  stt		$ra,[$sp]
  call	InsertIntoReadyQueue
  ldt		$ra,[$sp]
  add		$sp,$sp,#4
  bra		.nxtObj
.0001:
  ldi   $a0,#E_Ok
  ret

msgIdleAnnounce:
  db  "Idle task running.",CR,0

;------------------------------------------------------------------------------
; Get a character from input device. Checks for a CTRL-T which indicates to
; switch the I/O focus.
;
; Parameters:
;		none
; Returns:
;		$a0 = character, -1 if none available
;------------------------------------------------------------------------------
  align 16
Getch:
	sub		$sp,$sp,#12
	stt		$ra,[$sp]
	stt		$a1,8[$sp]
	ldi   $a1,#5  ;CURIN
	call  fgetc
	ldt		$ra,[$sp]
	ldt		$a1,8[$sp]
	add		$sp,$sp,#12
	ret

;------------------------------------------------------------------------------
; Parameters:
;   $a0 = character to put
;------------------------------------------------------------------------------
  align 16
Putch:
	sub		$sp,$sp,#20
	stt		$ra,[$sp]
	stt		$a3,8[$sp]
	stt		$a1,16[$sp]
	mov		$a3,$a0
	ldi		$a1,#5  ;CUROUT    ; serial port
	call	fputc
	ldt		$ra,[$sp]
	ldt		$a3,8[$sp]
	ldt		$a1,16[$sp]
	add		$sp,$sp,#20
	ret

;------------------------------------------------------------------------------
; fputc - put a character to an I/O device. If the task doesn't have the I/O
; focus then it is rescheduled, allowing another task to run.
;
; Stack Space:
;		6 words
; Register Usage:
;		a0 = FMTK_IO specify
;		a2 = device putchar function
; Parameters:
;		a1 = I/O channel
;		a3 = character to put
; Modifies:
;		none
; Returns:
;   EOF if error occurred, otherwise character to put
;------------------------------------------------------------------------------
  align 16
fputc:
	sub		$sp,$sp,#28
	stt		$ra,[$sp]
	stt		$a0,8[$sp]
	stt		$a1,16[$sp]
	stt		$a2,20[$sp]
	stt		$a3,24[$sp]
	xor   $a6,$a6,#'B'
	bnez  $a6,.noBypass
;	call  SerialPutChar
;	jmp   .xit
.noBypass:
	; If the device is a UI device there may be multiple owning jobs. It doesn't
	; do any good to check for ownership. Instead the I/O focus is checked to
	; see if it's present.
	bra		.0001
	call  GetUIFlag
	beqz  $a1,.checkOwner
  ldt   $a1,16[$sp]
	call  WaitForIOFocus
	bra   .0001
.checkOwner:
  call  CheckDevOwner
  bnez  $a0,.notOwner
.0001:
	call	SerialPutCharEx
;  ldt   $a1,16[$sp]
;  ldt		$a3,24[$sp]
;	ldi		$a0,#26							; FMTK_IO
;	ldi		$a2,#13							; putchar function
;	ecall
.xit:
	ldt		$ra,[$sp]
	ldt		$a0,8[$sp]
	ldt		$a1,16[$sp]
	ldt		$a2,20[$sp]
	ldt		$a3,24[$sp]
	add		$sp,$sp,#28
	ret
.notOwner:
  ldi   $a0,#EOF
  bra   .xit
 
;------------------------------------------------------------------------------
; fgetc - get a character from an I/O device. If the task doesn't have the I/O
; focus then it is rescheduled, allowing another task to run.
;
; Stack Space:
;		6 words
; Register Usage:
;		a0 = FMTK_IO specify
;		a2 = device getchar function
; Parameters:
;		a1 = I/O channel
; Modifies:
;		none
; Returns:
;		a0 character, -1 if none available
;------------------------------------------------------------------------------
  align 16
fgetc:
	sub		$sp,$sp,#24
	stt		$ra,[$sp]
	stt		$a1,16[$sp]
	stt		$a2,20[$sp]
	bra		.0001
	call  GetUIFlag
	beqz  $a1,.checkOwner
	ldt		$a1,16[$sp]
	call  WaitForIOFocus
	bra   .0001
.checkOwner:
	ldt		$a1,16[$sp]
  call  CheckDevOwner
  bnez  $a0,.notOwner
.0001:
	call	SerialPeekCharEx
	bltz	$a1,.0003
	call	SerialGetCharEx
;	ldi		$a0,#26							; FMTK_IO
;	ldt		$a1,16[$sp]
;	ldi		$a2,#8							; getchar function
;	ecall
.0003:
	mov   $a0,$a1
.0002:
	ldt		$ra,[$sp]
	ldt		$a1,16[$sp]
	ldt		$a2,20[$sp]
	add		$sp,$sp,#24
	ret
.notOwner:
  ldi   $a0,#-1
  bra   .0002

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
MonEntry:
;  ldi   $a0,#25         ; map OS vars
;  ecall
;  mov   $gp,$a1
;		flw			$f2,fltTen
;		fsw			$f2,f2Save
;		flw			$f1,fltTen
;		fsw			$f1,f1Save
;		fadd		$f18,$f2,$f1
;		fsw			$f18,f18Save
		ldi		$a0,#10
		ldi		$a2,#6
;		call	fltToString
;		ldi		$a0,#STRTMP
;		call	PutString
	ldi		$a0,#38					; Get current app id
	ecall
	ldi		$a0,#24					; request I/O focus
	ecall

Monitor:
.getFocus:
	ldi		$a0,#38					; Get current app id
	ecall
	ldi   $a0,#20       	; has IO focus
	ecall
	bnez  $a1,.hasFocus
	ldi   $a0,#21       	; switch focus
	ecall
	bra   .getFocus
.hasFocus:
;		call	DumpReadyList
;		call	DumpTimeoutList
	ldi		$s1,#0					; s1 = input pointer
	ldi		$a0,#CR
	call	Putch
	ldi		$a0,#LF
	call	Putch
	ldi		$a0,#'$'
	call	Putch
.0001:
	call	Getch						; wait until character pressed
	bltz	$a0,.0001
	xor		$t0,$a0,#LF			; ignore line feed
	beqz	$t0,.procLine
	xor		$t0,$a0,#CR
	beqz	$t0,.procLine
	xor		$t0,$a0,#BS
	beqz	$t0,.doBackspace
	xor		$t0,$a0,#DEL
	beqz	$t0,.doDelete
	stb		$a0,INBUF[$s1]
	add		$s1,$s1,#1
	ldi		$t0,#80
	sltu	$t0,$s1,$t0
	bnez	$t0,.bufndx1
	sub		$s1,$s1,#1
.bufndx1:
	call	Putch
	bra		.0001
.doDelete:
	mov		$s2,$s1
	add		$s2,$s2,#1
.0002:
	ldb		$t0,INBUF[$s2]
	stb		$t0,INBUF-1[$s2]
	add		$s2,$s2,#1
	add		$t0,$s2,#INBUF
	slt		$t0,$t0,#INBUF+$7F
	bne		$t0,$x0,.0002
	stb		$x0,INBUF[$s2]
	bra		.0001
.doBackspace:
	beq		$s1,$x0,.0001		; can't backspace anymore
	call	Putch           ; show the backspace
	sub		$s1,$s1,#1
	mov		$s2,$s1
.0003:
	ldb		$t0,INBUF+1[$s2]
	stb		$t0,INBUF[$s2]
	add		$s2,$s2,#1
	add		$t0,$s2,#INBUF
	slt		$t0,$t0,#INBUF+$7F
	bne		$t0,$x0,.0003
	stb		$x0,INBUF[$s2]
	bra		.0001
.procLine:
	stb		$x0,INBUF[$s1]
	ldi		$s1,#0
.skip:
	ldb		$t0,INBUF[$s1]
	beq		$t0,$x0,.0005
	xor		$t1,$t0,#'>'
	bne		$t1,$x0,.0004
.skip2:
	add		$s1,$s1,#1
	bra		.skip
.0004:
	xor		$t1,$t0,#' '
	beq		$t1,$x0,.skip2
	xor		$t1,$t0,#'\t'
	beq		$t1,$x0,.skip2
	xor   $t1,$t0,#'X'  ; exit from monitor
	bnez  $t1,.notX
	ldi   $a0,#E_Ok
	ret
.notX:
	xor		$t1,$t0,#'M'
	beqz	$t1,doMem
	xor   $t1,$t0,#'V'
	beqz  $t1,doVMem
	xor   $t1,$t0,#'P'
	beqz  $t1,doPStat
	ldi		$t1,#'B'
	bne		$t0,$t1,.0006
	call  GetDecNum
	bnez  $a0,.basSize
	ldi   $a0,#32000
.basSize:
	ldi		$a0,#12					; Start App
	ldi   $a1,#TBASR
	ecall
	mov		$s1,$a1					; save a1
	ldi		$a0,#msgCRLF
	call	PutString
	mov		$a0,$s1					; get back a1
	call	PutHexByte
	ldi		$a0,#msgTaskStart
	call	PutString
;	call  DumpReadyQueue
	; The monitor is running in machine mode. A return instruction is used to
	; switch to user mode. The return address must be set to the desired user
	; code address.
;	mDI                     ; disable interrupts
;	ldi   $t0,#CSTART       ; pick start of Tiny Basic
;	csrrw $x0,#$341,$t0     ; set as return address
;	ldi   $t0,#$00011111    ; bits to select register set #1
;	csrrw $x0,#CSR_REGSET,$t0     ; select register set #1 (will decrement to zero then on mret)
;	mret                    ; will begin running Tiny Basic in user mode
	;ldi		$a0,#5					; Reschedule task
	;ldi		$a1,#1					; sleep(0)
	;ecall
	jmp		CSTART
	jmp		Monitor
.0006:
	ldi		$t1,#'D'
	bne		$t0,$t1,.0007
	lb		$t0,INBUF+1[$s1]
	ldi		$t1,#'T'
	bne		$t0,$t1,.noT
	call	DumpTimeoutList
	jmp		Monitor
.noT:
	ldi		$a0,#39						; Dump ready queue
	ecall
	;call 	DumpReadyQueue
	jmp		Monitor
.0007:
	ldi		$t1,#'E'
	bne		$t0,$t1,.0008
	jmp		EditMem
.0008:
	ldi		$t1,#'F'
	bne		$t0,$t1,.0009
	ldb   $t0,INBUF+1[$s1]
	ldi   $t1,#'I'
	bne   $t1,$t0,.notFind
	add   $s1,$s1,#1
	jmp   Find
.notFind:
	jmp		FillMem
.0009:
	ldi		$t1,#'S'
	bne		$t0,$t1,.0010
	ldi		$a0,#5					; sleep(0)
	ldi		$a1,#1
	ecall
	jmp		Monitor
.0010:
	ldi		$t1,#'K'
	bne		$t0,$t1,.0011
	call	GetHexNum
	mov		$a1,$a0					; a0 = pid
	ldi		$a0,#3					; kill task
	ecall
	jmp		Monitor
.0011:
	ldi		$t1,#'?'
	bne		$t0,$t1,.0012
	ldi		$a0,#msgMonHelp
	call	PutString
	jmp		Monitor
.0012:
	ldi		$t1,#'R'
	bne		$t0,$t1,.0013
	jmp		DumpRegs
.0013:
.0005:
	jmp		Monitor

  align 16
DumpRegs:
  add   $s1,$s1,#1
  call  GetDecNum
  ldi		$t1,#255
  bne		$a0,$t1,.0001
  ldi   $a0,#14         ; get current tid
  ecall                 ; $a1 = task id
  mov		$a0,$a1
.0001:
  mov		$s2,$a0
  ldt		$s2,TCBPtrs[$s2]
  ldbu	$a0,TCBOpMode[$s2]
  call  PutHexByte
  ldi		$s4,#0
.0003:
  sll		$s3,$s4,#2
  add		$s3,$s3,#msgRegName
  ldbu	$a0,[$s3]
  call	Putch
  ldbu	$a0,1[$s3]
  call	Putch
  ldbu	$a0,2[$s3]
  call	Putch
  ldbu	$a0,3[$s3]
  call	Putch
  ldi		$a0,#':'
  call	Putch
  sll		$s3,$s4,#2
  ldt		$a0,TCBIntRegs[$s3]
  call	PutHexWord
  and		$s3,$s4,#3
  bnez	$s3,.0002
  ldi		$a0,#CR
  call	Putch
.0002:
  add		$s4,$s4,#1
  ldi		$a0,#32
  bltu	$s4,$a0,.0003
  jmp		Monitor

msgRegName:
	db	" x0 "," ra "," sp "," gp "," tp "," t0 "," t1 "," t2 "," fp "," s1 "
	db	" a0 "," a1 "," a2 "," a3 "," a4 "," a5 "," a6 "," a7 "," s2 "," s3 "
	db	" s4 "," s5 "," s6 "," s7 "," s8 "," s9 "," s10"," s11"," t3 "," t4 "
	db	" t5 "," t6 "
msgPC:
	db	" pc ",0

  align 16
doMem:
	sub		$sp,$sp,#4
	add		$s1,$s1,#1
	ldb		$t0,INBUF[$s1]
	xor   $t0,$t0,#'O'
	bnez  $t0,.0001
	add		$s1,$s1,#1
.0001:
	stt		$s1,[$sp]
	ldi		$a0,#CR
	call	Putch
	ldi		$a0,#INBUF
	call	PutString
	ldt		$s1,[$sp]
	add		$sp,$sp,#4
	call	GetHexNum
	mov		$s3,$a0
	mov   $s5,$a0
	add		$s1,$s1,#1
	call	GetHexNum
	add		$s4,$a0,$s3
.loop2:
	call	Getch						; check for ctrl-c
	xor		$a0,$a0,#3
	beq		$a0,$x0,Monitor
	ldi		$a0,#CR
	call	Putch
	mov		$a0,$s3
	call	PutHexWord
	ldi		$a0,#':'
	call	Putch
	ldi		$s2,#7
.loop:
	ldi		$a0,#' '
	call	Putch
	bnez  $t0,.userMem
	ldi   $a0,#33         ; Fetch memory word
	mov   $a1,$s3
	ecall
	mov   $a0,$a1
	bra   .0002
.userMem
	ldb		$a0,[$s3]
.0002:
	call	PutHexByte
	add		$s3,$s3,#1
	sub		$s2,$s2,#1
	bge		$s2,$x0,.loop

	sub		$s3,$s3,#8
	ldi		$s2,#7
.0004:
	ldbu  $a0,[$s3]
	slt   $t0,$a0,#$20
	bnez  $t0,.unprintable
	call  Putch
	bra   .0003
.unprintable:
  ldi   $a0,#'.'
  call  Putch
.0003:
  add   $s3,$s3,#1
	sub		$s2,$s2,#1
	bge		$s2,$x0,.0004
	bltu	$s3,$s4,.loop2
	ldi		$a0,#' '
	call	Putch
	ldi		$a0,#' '
	call	Putch
	
	mov   $s3,$s5
	jmp		Monitor		

  align 16
EditMem:
	csrrs $x0,#CSR_UIE,#1        ; enable gc interrupt
	call	GetHexNum			; get address to edit
	mov		$s3,$a0
	add		$s1,$s1,#1
	call	GetHexNum			; get value to set
	stb		$s3,[$a0]			; update mem
	jmp		Monitor

;------------------------------------------------------------------------------
; >V 0
; Displays the virtual memory map for the specified app.
;------------------------------------------------------------------------------

  align 16
doVMem:
  add   $s1,$s1,#1
  call  GetDecNum
  ldi   $s3,#0
  sll   $s2,$a0,#16
.0001:
  and   $a0,$s3,#3
  bnez  $a0,.notLF
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
.notLF:
  mov   $a0,$s2
  call  PutHexWord
  ldi   $a0,#':'
  call  Putch
  mvmap $a0,$x0,$s2
  call  PutHexHalf
  ldi   $a0,#' '
  call  Putch
  add   $s2,$s2,#1
  add   $s3,$s3,#1
  slt   $a0,$s3,#256
  bnez  $a0,.0001  
  jmp   Monitor

;------------------------------------------------------------------------------
; >P
; Display the PAM bits status.
;------------------------------------------------------------------------------

  align 16
doPStat:
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
  ldi   $t1,#0        ; $a1 = bit number
.0001:
  ldi   $a0,#32       ; Get PAM bit pair
  ecall
  add   $a0,$a1,#'0'
  call  Putch
  add   $t1,$t1,#1
  slt   $a0,$t1,#MEMSZ
  bnez  $a0,.0001
  jmp   Monitor
 
;------------------------------------------------------------------------------
;	>F 1000 800 EE
; Fills memory beginning at address $1000 for $800 bytes with the value $EE
;------------------------------------------------------------------------------

  align 16
FillMem:
	call	GetHexNum			; get address
	mov		$s3,$a0
	add		$s1,$s1,#1
	call	GetHexNum			; get length
	mov		$s4,$a0
	add		$s1,$s1,#1
	call	GetHexNum			; get byte to use
.0001:
	stb		$a0,[$s3]
	sub		$s4,$s4,#1
	bgt		$s4,$x0,.0001
	jmp		Monitor

;------------------------------------------------------------------------------
; FI Hello
;------------------------------------------------------------------------------

  align 16
Find:
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
  call  SkipSpaces
  mov   $s2,$s1
.fwe:
  ldbu  $t0,INBUF[$s2]
  beqz  $t0,.endOfWord
  ldi   $t1,#' '
  beq   $t0,$t1,.endOfWord
  ldi   $t1,#CR
  beq   $t0,$t1,.endOfWord
  add   $s2,$s2,#1
  bra   .fwe
.endOfWord:
  stb   $x0,INBUF[$s2]
  mov   $s2,$s1
  ldi   $a0,#0
  ldi   $a1,#0
.loop:
	call	Getch						; check for ctrl-c
	xor		$a0,$a0,#3
	bnez	$a0,.0001
	jmp   Monitor
.0001:
  ldbu  $t0,[$a0]
  ldbu  $t1,INBUF[$s2]
  beqz  $t1,.found
  bne   $t0,$t1,.next
  add   $a0,$a0,#1
  add   $s2,$s2,#1
  bra   .loop
.next:
  mov   $s2,$s1         ; start over again with $s2
  add   $a0,$a1,#1      ; start over again with $a0, but increment by one
  ldi   $t2,#$80000     ; 512k
  mov   $a1,$a0         ; remember new starting pos.
  slt   $t2,$a0,$t2
  bnez  $t2,.loop
  bra   .notFound
.found:
  call  PutHexWord
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
  bra   .next
.notFound:
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
  jmp   Monitor

;------------------------------------------------------------------------------
; Skip over spaces and tabs in the input buffer.
;------------------------------------------------------------------------------

SkipSpaces:
.skip2:
	ldb		$t0,INBUF[$s1]
	xor		$t1,$t0,#' '
	beqz	$t1,.skip1
	xor		$t1,$t0,#'\t'
	beqz	$t1,.skip1
	ret
.skip1:
	add		$s1,$s1,#1
	bra		.skip2

;------------------------------------------------------------------------------
; Get a hex number from the input buffer.
;------------------------------------------------------------------------------

  align 16
GetHexNum:
	ldi		$a0,#0							; a0 = num
	sub		$sp,$sp,#4
	stt		$ra,[$sp]
	call	SkipSpaces
.next:
	ldb		$t0,INBUF[$s1]
	ldi		$t2,#'0'
	blt		$t0,$t2,.0001
	ldi		$t2,#'9'+1
	blt		$t0,$t2,.isDigit
	ldi		$t2,#'A'
	blt		$t0,$t2,.0001
	ldi		$t2,#'F'+1
	blt		$t0,$t2,.isHexUpper
	ldi		$t2,#'a'
	blt		$t0,$t2,.0001
	ldi		$t2,#'f'+1
	blt		$t0,$t2,.isHexLower
.0001:
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
	ret
.isHexUpper:
	sll		$a0,$a0,#4
	sub		$t0,$t0,#'A'
	add		$t0,$t0,#10
	or		$a0,$a0,$t0
	add		$s1,$s1,#1
	bra		.next
.isHexLower:
	sll		$a0,$a0,#4
	sub		$t0,$t0,#'a'
	add		$t0,$t0,#10
	or		$a0,$a0,$t0
	add		$s1,$s1,#1
	bra		.next
.isDigit:
	sll		$a0,$a0,#4
	sub		$t0,$t0,#'0'
	or		$a0,$a0,$t0
	add		$s1,$s1,#1
	bra		.next

;------------------------------------------------------------------------------
; Get a decimal number from the input buffer.
;------------------------------------------------------------------------------
  align 16
GetDecNum:
	ldi		$a0,#0							; a0 = num
	sub		$sp,$sp,#4
	stt		$ra,[$sp]
	call	SkipSpaces
.next:
	ldb		$t0,INBUF[$s1]
	ldi		$t2,#'0'
	blt		$t0,$t2,.0001
	ldi		$t2,#'9'+1
	blt		$t0,$t2,.isDigit
.0001:
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
	ret
.isDigit:
	sll		$t2,$a0,#1    ; multiply by 10
	sll   $a0,$a0,#3    ; * 8
	add   $a0,$a0,$t2   ; + *2
	sub		$t0,$t0,#'0'
	add		$a0,$a0,$t0
	add		$s1,$s1,#1
	bra		.next

;------------------------------------------------------------------------------
; Output a word as a hex string.
;
; Parameters:
;   a0 = contains word to output
; Registers Affected:
;   none
; Returns:
;   none
;------------------------------------------------------------------------------
  align 16
PutHexWord:
	sub		$sp,$sp,#8
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	srl		$a0,$a0,#16
	call	PutHexHalf
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	add		$sp,$sp,#8	; fall through to PutHexHalf
	bra		PutHexHalf

;------------------------------------------------------------------------------
; Output a half-word (16 bits) as a hex string.
;------------------------------------------------------------------------------
	align	16
PutHexHalf:
	sub		$sp,$sp,#8
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	srl		$a0,$a0,#8
	call	PutHexByte
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]		
	add		$sp,$sp,#8	; fall through to PutHexByte
	bra		PutHexByte

;------------------------------------------------------------------------------
; Output a byte as a hex string.
;------------------------------------------------------------------------------
	align	16
PutHexByte:
	sub		$sp,$sp,#8
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	srl		$a0,$a0,#4		; put the high order nybble first
	call	PutHexNybble
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	add		$sp,$sp,#8		; fall through to PutHexNybble
	bra		PutHexNybble

;------------------------------------------------------------------------------
; Output a nybble as a hex string.
;
; Parameters:
;   a0 = contains nybble to output
; Registers Affected:
;   none
; Returns:
;   none
;------------------------------------------------------------------------------
	align	16
PutHexNybble:
	sub		$sp,$sp,#12
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	stt   $t0,8[$sp]
	and		$a0,$a0,#15		; strip off high order bits
	ldi		$t0,#10
	blt		$a0,$t0,.lt10
	sub		$a0,$a0,#10
	add		$a0,$a0,#'A'
	call	Putch
	bra		.0001
.lt10:
	add		$a0,$a0,#'0'
	call	Putch
.0001:
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	ldt   $t0,8[$sp]
	add		$sp,$sp,#12
	ret

;------------------------------------------------------------------------------
; PutString
;    Put a string of characters to the serial transmitter. Calls the 
; Putch routine, so this routine also blocks if the transmitter is not
; empty.
;
; Parameters:
;		$a0 = pointer to null terminated string to put
; Modifies:
;		$t0 and $t1
; Stack Space:
;		2 words
;------------------------------------------------------------------------------
  align 16
PutString:
	sub		$sp,$sp,#8				; save link register
	stt		$ra,[$sp]
	stt		$a0,4[$sp]				; and argument
	mov		$t1,$a0						; t1 = pointer to string
.0001:
	ldb		$a0,[$t1]
	add		$t1,$t1,#1				; advance pointer to next byte
	beqz	$a0,.done			    ; branch if done
	call	Putch							; output character
	bra		.0001
.done:
	ldt		$ra,[$sp]					; restore return address
	ldt		$a0,4[$sp]				; and argument
	add		$sp,$sp,#8
	ret

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

DumpTraceQueue:
	sub		$sp,$sp,#4
	stt		$ra,[$sp]
	ldi   $a6,#'X'        ; bypass='B' in fputc routine
	ldi		$s1,#0
	ldi   $a0,#CR
	call  Putch
.dmpTrace:
	ldi   $a1,#14         ; processor trace queue
	popq  $a0,$a1
	bltz  $a0,.dmpTraceEmpty  ; emptied out?
	and   $a0,$a0,#$FFFFF
	call  PutHexWord
	ldi		$a0,#' '
	call	Putch
	ldi   $a1,#13         ; processor trace queue
	peekq $a0,$a1
	call	PutHexWord
	ldi		$a0,#' '
	call	Putch
	add		$s1,$s1,#1
	and		$s2,$s1,#7
	bnez	$s2,.0001
	ldi		$a0,#CR
	call	Putch
.00001:
	bra   .dmpTrace
.dmpTraceEmpty:
	ldi   $a0,#CR
	call  Putch
.inf:
;  bra   .inf
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
  ret

;------------------------------------------------------------------------------
; Exception processing code starts here.
; As per the RISCV privilege spec, the MSB indicates an external interrupt.
; The system uses cause codes 32 to 63 for external devices. This cause code
; range is reserved in the RISCV spec.
;
; On incoming the register file has been set to the interrupt register file
; or the machine mode register file.
;------------------------------------------------------------------------------
  align 16
; Top of stack for different register sets
StackTbl:
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $0
  dw    $F207E800-4
  dw    $F607F000-4
  dw    $FA07F800-4
  dw    $FE080000-4

StackTbl2:
	dw		$D207A800-4
	dw		$D607B000-4
	dw		$DA07B800-4
	dw		$DE07C000-4
	dw		$E207C800-4
	dw		$E607D000-4
	dw		$EA07D800-4
	dw		$EE07E000-4
	
	code
	align	16
IRQRout:
	csrrw	$t0,#$342,$x0			; get cause code
	bltz	$t0,.isIRQ		  	; irq or ecall?
	beqz	$t0,.instAlign
	xor		$t2,$t0,#25				; bus error?
	beqz	$t2,.busError
	xor   $t2,$t0,#2      	; illegal instruction?
	beqz  $t2,.illegal
	and   $t2,$t0,#$FFFFFFFC
	xor   $t2,$t2,#8
	beqz  $t2,.ecall
	; Some other cause
.busError:
.illegal:
	ldi		$sp,#$FE080000-4
	csrrc $x0,#CSR_TRACECTRL,#1 ; turn off tracing
	csrrc	$x0,#CSR_PMSTACK,#1		; disable interrupts
	call	DumpTraceQueue
;	ldi   $t0,#DumpTraceQueue
;	csrrw $x0,#CSR_MEPC,$t0
.illegal1:
	bra		.illegal1
	mret
.soc:
  bra   .soc

.instAlign:
	ldi		$sp,#$FE080000-4
	csrrc $x0,#CSR_TRACECTRL,#1 ; turn off tracing
	csrrc	$x0,#CSR_PMSTACK,#1		; disable interrupts
	call	DumpTraceQueue
.instAlign1:
	bra		.instAlign1


; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Environment Call entry point.
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.ecall:
	jmp		OSECALL					  ; goto operating system call dispatcher

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; For IRQs the register set is automatically set according to the interrupt
; level active level 0 to 7 use register sets 52 to 59.
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.isIRQ:
	; Switch to map 52 to 59
  csrrw	$t1,#CSR_SATP,$x0
  and		$t1,$t1,#$f03fffff			; mask off asid
  csrrw	$t2,#CSR_RSSTACK,$x0
  and		$t2,$t2,#63
  sll		$t2,$t2,#22
  or		$t1,$t1,$t2							; set new asid
	csrrw	$x0,#CSR_SATP,$t1				; set satp
  ; Reset stack pointer for interrupt register set.
	csrrw	$t0,#CSR_IMSTACK,$x0
	and		$t0,$t0,#7
  sll   $t2,$t0,#2        	; $t2 = table index
	ldt		$sp,StackTbl2[$t2]	; setup machine mode stack pointer
	csrrw	$t0,#$342,$x0				; get cause code
	csrrs	$x0,#CSR_PMSTACK,#1	; enable higher-level interrupts
  ldt   $t1,IRQFlag     		; update IRQ flag for Tiny Basic
  add   $t1,$t1,#1
  stt   $t1,IRQFlag
  and   $t0,$t0,#$FF
  stt   $t0,IRQCause    ; update cause code for Tiny Basic
  sub   $t1,$t0,#1
  beqz  $t1,.softwareIrq
  sub   $t1,$t1,#1
  beqz  $t1,.timerIrq
  sub   $t1,$t1,#1      ; garbage collect interrupt?
  beqz  $t1,.gcIrq
	and		$t4,$t0,#31			; interrupting device # is low order 5 bits of cause code
	ldi   $t3,#5          ; try 5 times
.devAgain:
	mov   $t5,$t4
	sll		$t5,$t5,#7				; 128 bytes per device func table
	add		$t5,$t5,#DVF_Base+22*4	; load IRQ routine vector from device func table
	ldt		$t5,[$t5]
	beqz	$t5,.noIRQ	    ; make sure there's an address to go to
	jmp		[$t5]						; jump to the IRQ routine

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; IRQ exit point. All IRQ routines should exit through this piece of code.
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IRQExit:
	; Switch back to app map
	di		11
  csrrw	$t1,#CSR_SATP,$x0
  and		$t1,$t1,#$f03fffff		; mask off asid
  csrrw	$t2,#CSR_RSSTACK,$x0
  srl		$t2,$t2,#6
  and		$t2,$t2,#$3f
  sll		$t2,$t2,#22
  or		$t1,$t1,$t2						; restore asid
	csrrw	$x0,#CSR_SATP,$t1			; set satp
	mret

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.noIRQ:
  sub   $t3,$t3,#1
  bnez  $t3,.InitDev
.softwareIrq:
.timerIrq:
  mret
	; The device function tables may have been zeroed out, try initializing them.
	; The following uses $a0-$a1, $t0-$t2
.InitDev:
	ldi		$a0,#5							; serial device
	bne   $a0,$t4,.notSerial
	ldi		$a1,#SerialFuncTbl
	call	CopyDevFuncTbl
	ldi		$a0,#5							; serial device
	ldi   $a1,#SerialDCB
	call  CopyDevDCB
	bra   .devAgain
.notSerial:
	ldi		$a0,#15							; VIA device
	bne   $a0,$t4,.notVia
	ldi		$a1,#ViaFuncTbl
	call	CopyDevFuncTbl
	ldi		$a0,#15							; VIA device
	ldi		$a1,#ViaDCB
	call	CopyDevDCB
	bra   .devAgain
.notVia:
  mret
.gcIrq:
;	ldi		$sp,#$7F800-4		; setup interrupt mode stack pointer
  call  gcIncrement
ERETx2:
;  mDI
;  csrrc $x0,#$7C0,#31   ; select machine regs only
;  csrrw $t0,#$7C0,$x0   ; get register sets
;  srl   $t0,$t0,#5      ; extract register set selection
;  sll   $t0,$t0,#3
;  ldt   $t1,MEPC0[$t0]  ; get it
;  csrrw $x0,#$341,$t1   ; set mepc
  mDI
  nop
  nop
;  csrrw $t0,#CSR_RSSTACK,$x0   ; get register sets
;  and   $t0,$t0,#15       ; extract register set selection (will be 13,14, or 15)
;  sll   $t2,$t0,#2        ; $t2 = table index
;	ldt		$sp,StackTbl[$t2]	; setup machine mode stack pointer
	mret

	; In case the pipeline runs ahead into the following table which will
	; result in illegal instructions.
	nop
	nop
  nop

msgRamTest:
	db	"RAM Test:",CR,LNFD,0

	align	4
; Application startup record for Monitor
MonitorASR:
  db    0     ; page size (can't change on this system)
  db    2     ; priority normal
  db    60    ; register set for startup task
  db    60    ; memory map #0
  dw    0     ; processor affinity
  dw    0     ; code size (0 = in ROM, don't move)
  dw    0     ; reserved
  dw    0     ; data size (preinitialized data)
  dw    0     ; reserved
  dw    0     ; uninitialized data size
  dw    0     ; reserved
  dw    0     ; Heap size
  dw    0     ; reserved
  dw    1024  ; stack size
  dw    0     ; reserved
  dw    MonEntry  ; pointer to code
  dw    0       ; reserved
  dw    0     ; pointer to data
  dw    0     ; reserved
  dw    0     ; ui data
  dw    0     ; reserved

; Application startup record for system
SystemASR:
  db    0     ; page size (can't change on this system)
  db    2     ; priority normal
  db    60    ; register set for startup task
  db    60    ; memory map #0
  dw    0     ; processor affinity
  dw    0     ; code size (0 = in ROM, don't move)
  dw    0     ; reserved
  dw    0     ; data size (preinitialized data)
  dw    0     ; reserved
  dw    0     ; uninitialized data size
  dw    0     ; reserved
  dw    0     ; Heap size
  dw    0     ; reserved
  dw    1024  ; stack size
  dw    0     ; reserved
  dw    IdleTask  ; pointer to code
  dw    0       ; reserved
  dw    0     ; pointer to data
  dw    0     ; reserved
  dw    0     ; ui data
  dw    0     ; reserved

; Application startup record for Tiny Basic
TinyBasicASR:
  db    0     ; page size (can't change on this system)
  db    2     ; priority normal
  db    3     ; register set
  db    3     ; memory map
  dw    0     ; processor affinity
  dw    0     ; code size (0 = in ROM, don't move)
  dw    0     ; reserved
  dw    0     ; data size (preinitialized data)
  dw    0     ; reserved
  dw    32768 ; uninitialized data size
  dw    0     ; reserved
  dw    0     ; Heap size
  dw    0     ; reserved
  dw    2048  ; stack size
  dw    0     ; reserved
  dw    CSTART  ; pointer to code
  dw    0       ; reserved
  dw    0     ; pointer to data
  dw    0     ; reserved
  dw    0     ; ui data
  dw    0     ; reserved
    
; Application startup record for Tiny Basic
UserASR:
  db    0     ; page size (can't change on this system)
  db    2     ; priority normal
  db    0     ; register set
  db    0     ; memory map
  dw    0     ; processor affinity
  dw    0     ; code size (0 = in ROM, don't move)
  dw    0     ; reserved
  dw    0     ; data size (preinitialized data)
  dw    0     ; reserved
  dw    32768 ; uninitialized data size
  dw    0     ; reserved
  dw    0     ; Heap size
  dw    0     ; reserved
  dw    1024  ; stack size
  dw    0     ; reserved
  dw    UserStart2  ; pointer to code
  dw    0       ; reserved
  dw    0     ; pointer to data
  dw    0     ; reserved
  dw    0     ; ui data
  dw    0     ; reserved
    
;------------------------------------------------------------------------------
; Message strings
;------------------------------------------------------------------------------

msgStart:
		db		"CS01 System Starting.",13
msgMonHelp:
		db		"Monitor Commands",13
		db		"B - start tiny basic",13
		db		"D - dump ready que",13
		db		"E - edit memory",13
		db		"F - fill memory",13
		db    "FI <string>- find string in memory",13
		db		"K <tid> - kill task", 13
		db		"M <start> <length>	- dump memory",13
		db    "P - display PAM",13
		db		"R - registers",13
		db		"S - switch task",13
		db    "V <mid> dump virtual memory map",13
		db		0
		align 4
msgTaskStart:
		db		" task started."
msgCRLF:
		db		13,10,0
flt50:
	dw	0x00000000,0x00000000,0x00000000,0x40049000
flt20:
	dw	0x00000000,0x00000000,0x00000000,0x40034000
flt10:
	dw	0x00000000,0x00000000,0x00000000,0x40024000

.include "fltToString.r5a"
.include "cs01Mem.r5a"
.include "cs01PAM.r5a"
.include "../fmtk/serial.r5a"
.include "../fmtk/via.r5a"
.include "../fmtk/task.r5a"
.include "../fmtk/msg.r5a"
.include "../fmtk/app.r5a"
.include "../fmtk/tcb.r5a"
.include "../fmtk/iofocus.r5a"
.include "../fmtk/io.r5a"
.include "../fmtk/finalizer.r5a"
.include "../fmtk/gcIncremental.r5a"
.include "TinyBasic.r5a"
