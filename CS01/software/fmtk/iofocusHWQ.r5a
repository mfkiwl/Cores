; ============================================================================
;        __
;   \\__/ o\    (C) 2020  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------

	code
	align	4

;-----------------------------------------------------------------------------
; Determine if the currently running task has the I/O focus.
;
; Stack Space:
;		none
; Parameters:
;		none
; Modifies:
;		none
; Returns:
;		$a0 = E_Ok
;		$a1 = 1 if task has IO focus, 0 otherwise
;-----------------------------------------------------------------------------

FMTK_HasIOFocus:
	mGetCurrentTid
	sll   $a0,$a0,#LOG_PGSZ
	ldwu  $a0,TCBappid[$a0]
	sll   $a0,$a0,#LOG_PGSZ   ; $a0 = ACB pointer
	ldt   $t0,IOFocusNdx
	bne   $t0,$a0,.notEqual
	ldi   $a1,#1
	ldi		$a0,#E_Ok
	jmp		OSExit
.notEqual:
  ldi   $a1,#0
	ldi		$a0,#E_Ok
	jmp		OSExit
	
FMTK_HasIOFocusHWQ:
	mGetCurrentTid
	sll   $a0,$a0,#LOG_PGSZ
	ldwu  $a0,TCBappid[$a0]
.nxt:
	ldi   $t1,#6
	peekq $t0,$t1
	bltz  $t0,.empty
	srl   $t1,$t0,#30
	bnez  $t1,.valid
;	ldi   $t1,#6
;	popq  $t0,$t1
	bra   .nxt
.valid:
  and   $t1,$t0,#$FFFF
	beq		$a0,$t1,.hasFocus
.empty:
	ldi		$a1,#0
	bra		.xit
.hasFocus:
	ldi		$a1,#1
.xit:
	ldi		$a0,#E_Ok
	jmp		OSExit

;-----------------------------------------------------------------------------
; First check if it's even possible to switch the focus to another
; task. The I/O focus list could be empty or there may be only a
; single task in the list. In either case it's not possible to
; switch.
;
;	Parameters:
;		none
;	Modifies:
;		none
;	Returns:
;		a0 = E_Ok
;-----------------------------------------------------------------------------

SwitchIOFocusHelper:
  ldt   $t0,IOFocusNdx
  ldt   $t1,IOF_NEXT[$t0]
  stt   $t1,IOFocusNdx
  bne   $t0,$t1,.notSame
	ldi		$a0,E_Ok
	ret
.notSame:
	; swap virtual screens
	; set vidmem pointer
	ldi		$a0,E_Ok
	ret
    
SwitchIOFocusHelperHWQ:
chknxt:
  ldi   $t0,#6
  peekq $t1,$t0
  bltz  $t1,.noFocus
  srl   $t0,$t1,#30
  beqz  $t0,.nxt
  and   $t0,$t1,#$FFFF
	sll   $t0,$t1,#LOG_PGSZ
	ldb   $t1,ACBHasFocus[$t0]
	bnez	$t1,.hasFocus
.nxt:
;	ldi   $t0,#6
;	popq  $t1,$t0
	bra   .chknxt
.hasFocus:
	; swap virtual screens
	; set vidmem pointer
.noFocus:
	ldi		$a0,E_Ok
	ret

FMTK_SwitchIOFocus:
	call	SwitchIOFocusHelper
	jmp		OSExit

;-----------------------------------------------------------------------------
; RequestIOFocus requests that the task receive the I/O focus. It does not
; mean the task will receive the focus immediately. Instead it is placed
; on a list of requesters. Which task has the I/O focus is determined from
; user input.
; The I/O focus list is an array indicating which apps are requesting the
; I/O focus. The I/O focus is user controlled by pressing CNTRL-T on the
; keyboard.
;
; Parameters:
;		$a1 = app id requesting focus for
; Returns:
;   $a0 = E_Ok
;   $a1 (unmodified)
;-----------------------------------------------------------------------------

FMTK_RequestIOFocusHWQ:
  sll   $t2,$a1,#LOG_PGSZ
	ldb		$t1,ACBHasFocus[$t2]  ; Is the task already included in the IO focus?
	bnez	$t1,.ret				      ; If so, don't add again
	ldwu	$t0,IOFocusNdx			  ; get current index
;	bnez	$t0,.notEmpty		      ; is there one? (!= 0)
	ldi   $a2,#6                ; queue #6 = focus queue
	pushq $a1,$a2
	stb   $a2,ACBHasFocus[$t2]  ; set has focus flag
.ret:
	ldi		$a0,#E_Ok
	jmp		OSExit

FMTK_RequestIOFocus:
  sll   $t2,$a1,#LOG_PGSZ
	ldb		$t1,ACBHasFocus[$t2]  ; Is the task already included in the IO focus?
	bnez	$t1,.ret				      ; If so, don't add again
	ldt	  $t0,IOFocusNdx			  ; get current index
	ldi   $a2,#1
	bnez	$t0,.notEmpty		      ; is there one? (!= 0)
	stt   $t2,IOFocusNdx
	stt   $t2,IOF_NEXT[$t2]
	stt   $t2,IOF_PREV[$t2]
	stb   $a2,ACBHasFocus[$t2]  ; set has focus flag
	ldi		$a0,#E_Ok
	jmp		OSExit
.notEmpty:
  ; Insert just before head which is end of queue
  ldt   $t1,IOF_PREV[$t0]
  stt   $t2,IOF_PREV[$t0]     ; head->prev = new
  stt   $t2,IOF_NEXT[$t1]     ; head->prev->next = new
  stt   $t0,IOF_NEXT[$t2]     ; new->next = head
  stt   $t1,IOF_PREV[$t2]     ; new->prev = head->prev
	stb   $a2,ACBHasFocus[$t2]  ; set has focus flag
.ret:
	ldi		$a0,#E_Ok
	jmp		OSExit

;-----------------------------------------------------------------------------
; ReleaseIOFocus called when the task no longer desires to be on the I/O
; focus list.
;-----------------------------------------------------------------------------

FMTK_ReleaseIOFocus:
	mGetCurrentTid
	sll   $a1,$a0,#LOG_TCBSZ
	ldwu  $a1,TCBappid[$a1]
	; fall into ForceReleaseIOFocus

;-----------------------------------------------------------------------------
; Releasing the I/O focus causes the focus to switch if the running app
; had the I/O focus.
; ForceReleaseIOFocus forces the release of the IO focus for a app
; different than the one currently running.
; 
; Stack Space:
;		2 words
; Parameters:
;		a1 = task id to release
; Returns:
;		a0 = E_Ok
;-----------------------------------------------------------------------------

FMTK_ForceReleaseIOFocus:
	sll		$t0,$a1,#LOG_PGSZ
	ldb		$t1,ACBHasFocus[$t0]
	beqz	$t1,.noFocus	    ; does it even have the focus?
	stb   $x0,ACBHasFocus[$t0]
	ldt   $t1,IOFocusNdx
	bne   $t0,$t1,.notAtTop
	ldt   $t1,IOF_NEXT[$t0]
	bne   $t1,$t0,.0001
	; removing last entry
	stt   $x0,IOFocusNdx
	stt   $x0,IOF_NEXT[$t0]
	stt   $x0,IOF_PREV[$t0]
	ldi		$a0,#E_Ok
	jmp		OSExit
.0001:	
	stt   $t1,IOFocusNdx
.notAtTop:
	ldt   $t1,IOF_NEXT[$t0]
	ldt   $t2,IOF_PREV[$t0]
	stt   $t2,IOF_PREV[$t1]
	stt   $t1,IOF_NEXT[$t2]
	stt   $x0,IOF_NEXT[$t0]
	stt   $x0,IOF_PREV[$t0]
	ldi		$a0,#E_Ok
	jmp		OSExit

FMTK_ForceReleaseIOFocusHWQ:
	sll		$t0,$a1,#LOG_PGSZ
	ldb		$t1,ACBHasFocus[$t0]
	beqz	$t1,.noFocus	    ; does it even have the focus?
	stb   $x0,ACBHasFocus[$t0]
.nxtQ:
	ldi   $a2,#6
	peekq $a0,$a2
	bltz  $a0,.done         ; queue empty ?
	srl   $a2,$a0,#30       ; extract valid bit
	bnez  $a2,.valid
;	ldi   $a2,#6
;	popq  $a0,$a2           ; get rid of invalid queue entry
	bra   .nxtQ
.valid:
  and   $a0,$a0,#$1FF
  xor   $a0,$a0,$a1       ; same as one being released?
  bnez  $a0,.done
  ; Was the one with the focus, so switch focus
	popq  $a0,$a2           ; get rid of queue entry
	gcsub	$sp,$sp,#8
	stt		$t0,[$sp]
	stt		$t1,4[$sp]
	call	SwitchIOFocusHelper
	ldt		$t0,[$sp]
	ldt		$t1,4[$sp]
	add		$sp,$sp,#8
.done:
.noFocus:
	ldi		$a0,#E_Ok
	jmp		OSExit

;------------------------------------------------------------------------------
;     Wait for the IO Focus. Returns only when focus is present.
; Parameters:
;   a1 = device # to check, 5 = COM1 serial port, 1 = KBD keyboard
;------------------------------------------------------------------------------

_WaitForIOFocus:
WaitForIOFocus:
  gcsub $sp,$sp,#12
  stt   $a0,[$sp]
  stt   $a1,4[$sp]
  stt   $a2,8[$sp]
.WFF1:
	ldi		$a0,#20           ; FMTK Has Focus
	ecall
	bnez	$a1,.HasFocus
	ldi   $a0,#26           ; FMTK_IO
	ldi   $a1,#5
	ldi   $a2,#9            ; peekchar function
	ecall
	bltz  $a1,.0001
.0001:
	ldi		$a0,#$14					; CTRL-T
	bne		$a1,$a0,.WFF2
	; eat up the CTRL-T
	ldi		$a0,#26						; FMTK_IO
	ldt   $a1,4[$sp]        ; get back device #
	ldi		$a2,#8						; getchar function
	ecall
	ldi		$a0,#21						; switch IO Focus
	ecall
	bra		.WFF1
.WFF2:
	ldi		$a0,#5            ; FMTK Sleep() function
	ldi		$a1,#1
	ecall
	bra		.WFF1
.HasFocus:
  ldt   $a0,[$sp]
  ldt   $a1,4[$sp]
  ldt   $a2,8[$sp]
  add   $sp,$sp,#12
  ret

;------------------------------------------------------------------------------

GetUIFlag:
  gcsub $sp,$sp,#12
  stt   $a2,4[$sp]
  stt   $a3,8[$sp]
  ldi   $a0,#27           ; Get DCB Field
  ldi   $a2,#DCB_fUI      ; Get UI Flag
  ldi   $a3,#1            ; 1 byte
  ecall
  ldt   $a2,4[$sp]
  ldt   $a3,8[$sp]
  add   $sp,$sp,#12
  ret
