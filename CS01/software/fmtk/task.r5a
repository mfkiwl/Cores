; ============================================================================
;        __
;   \\__/ o\    (C) 2020-2021  Robert Finch, Waterloo
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

	code
	align	4
OSCallTbl:
  dh    SchedulerIRQ >> 4
  dh    IStartTask >> 4
  dh    ISendMsg >> 4
  dh    ISleep >> 4
  dh		ISetDCBField >> 4
  dh		IStartApp >> 4							; 5

OSEcallTbl:
	dh		FMTK_Initialize	>> 4				; 0
	dh		FMTK_StartTask >> 4					; 1
	dh		FMTK_ExitTask >> 4
	dh		FMTK_KillTask >> 4
	dh		FMTK_SetTaskPriority >> 4
	dh		FMTK_Sleep >> 4							; 5
	dh		FMTK_AllocMbx >> 4
	dh		FMTK_FreeMbx >> 4
	dh		FMTK_PostMsg >> 4
	dh		FMTK_SendMsg >> 4
	dh		FMTK_WaitMsg >> 4					; 10
	dh		FMTK_PeekMsg >> 4
	dh		FMTK_StartApp >> 4          ; 12
	dh		FMTK_ExitApp >> 4           ; 13
	dh		FMTK_GetCurrentTid >> 4
	dh		FMTK_TCBFinalizerExit >> 4  ; 15
	dh		FMTK_KillApp >> 4
	dh		FMTK_RunAsOS >> 4            ; 17
	dh		FMTK_GetTaskAppId >> 4      ; 18
	dh		FMTK_SetTaskId >> 4         ; 19
	dh		FMTK_HasIOFocus	>> 4				; 20
	dh		FMTK_SwitchIOFocus >> 4			; 21
	dh		FMTK_ReleaseIOFocus	>> 4		; 22
	dh		FMTK_ForceReleaseIOFocus >> 4	; 23
	dh		FMTK_RequestIOFocus	>> 4		; 24
	dh		FMTK_MapOSVars >> 4         ; 25
	dh		FMTK_IO	>> 4								; 26
	dh    FMTK_GetDCBField >> 4       ; 27
	dh    FMTK_SetDCBField >> 4       ; 28
	dh    FMTK_GetAppTaskId >> 4      ; 29
	dh    FMTK_SetTaskAppId >> 4      ; 30
	dh    0
	dh    GetPamBit >> 4              ; 32
	dh    FetchMemoryWord >> 4        ; 33
	dh    Monitor >> 4                ; 34
	dh    GetIRQFlag >> 4             ; 35
	dh    SetIRQFlag >> 4             ; 36
	dh    FMTK_Alloc >> 4							; 37
	dh    FMTK_GetCurrentAppId >> 4		; 38
	dh    FMTK_DumpReadyQueue >> 4		; 39
	dh    0                       ; 40
	dh    0                       ; 41
	dh    0                       ; 42
	dh    0                       ; 43
	dh    0                       ; 44
	dh    0                       ; 45
	dh    0                       ; 46
	dh    0                       ; 47

qToChk:
	db	0,0,0,1,0,0,2,1
	db	0,0,3,1,0,0,2,1
	db	0,0,4,1,0,0,2,1
	db	0,0,3,1,0,0,2,1

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
	align	16
FMTKInit:
	stt		$x0,QNDX
	stt   $x0,APPID_POOL
	stt   $x0,CHAINA0
	stt		$x0,missed_ticks
	ldi   $t0,#0
	csrrw $x0,#CSR_TASKID,$t0   ; task id = 0
	stt   $x0,TaskNum
	stt		$x0,TimeoutList
	stt		$x0,HEADRDY0
	stt		$x0,HEADRDY1
	stt		$x0,HEADRDY2
	stt		$x0,HEADRDY3
	stt		$x0,HEADRDY4
	stt		$x0,TAILRDY0
	stt		$x0,TAILRDY1
	stt		$x0,TAILRDY2
	stt		$x0,TAILRDY3
	stt		$x0,TAILRDY4
	
	stt		$x0,IOFocusNdx

  ; one out the register set last tid
  ldi   $t0,#$FFFFFFFF
  stt   $t0,RegsetTid
  stt   $t0,RegsetTid+4
  stt   $t0,RegsetTid+8
  stt   $t0,RegsetTid+12

	; zero out device function table
	ldi		$t0,#DVF_Base
	ldi		$t1,#32*32
.0003:
	stt		$x0,[$t0]
	add		$t0,$t0,#4
	sub		$t1,$t1,#1
	bgtz	$t1,.0003

	; Initialize free message list
	stt		$x0,FreeMsg

	; Initialize mailboxes
	stt   $x0,FreeMbx
	stw   $x0,IdleTaskMbx
	stw   $x0,IdleTaskId
	stb   $x0,MbxBlockCounter
	ldi   $t0,#MBX_BLOCKPTR_BUFSZ
	ldi   $t1,#MbxBlockPtr
.0001:
	stt   $x0,[$t1]
	add   $t1,$t1,#4
	sub   $t0,$t0,#1
	bnez  $t0,.0001

	; Initialize ACB pointers
	ldi		$t0,#31*4
.0002:
	stt		$x0,ACBPtrs[$t0]
	sub		$t0,$t0,#4
	bge		$t0,$x0,.0002

	; Initialize TCB pointers
	stt		$x0,TCBID_POOL
	stt		$x0,TCBID_POOL+4
	ldi		$t0,#63*4
.0004:
	stt		$x0,TCBPtrs[$t0]
	sub		$t0,$t0,#4
	bge		$t0,$x0,.0004

	; unlock the system semaphore	
	mUnlockSemaphore(SysSema)
	ret

	align	16
FMTK_Initialize:
  mEI
  jmp  FMTKInit
 
;------------------------------------------------------------------------------
; Get the task id for the currently running task.
;
; Returns:
;		v0 = task id
;------------------------------------------------------------------------------

	align	16
GetCurrentTid:
	mGetCurrentTid
	ret

	align	16
FMTK_GetCurrentTid:
	mGetCurrentTid
	mov		$a1,$a0
	ldi		$a0,#E_Ok
	ret

	align	16
GetIRQFlag:
  ldt   $a1,IRQFlag
  ldi   $a0,#E_Ok
  ret

	align	16
SetIRQFlag:
  stt   $a1,IRQFlag
  ldi   $a0,#E_Ok
  ret

; Accessors

	align	16
FMTK_GetCurrentAppId:
	mGetCurrentTid
	mov		$a1,$a0
	jmp		FMTK_GetTaskAppId

	align	16
FMTK_GetTaskAppId:
	sll		$t0,$a1,#2
	ldt		$t0,TCBPtrs[$t0]
	and		$t0,$t0,#$FFC00
  ldwu  $a1,TCBappid[$t0]
  ldi   $a0,#E_Ok
  ret

	align	16
FMTK_SetTaskAppId:
  sll		$t0,$a1,#2
  ldt		$t0,TCBPtrs[$t0]
	and		$t0,$t0,#$FFC00
  stw   $a2,TCBappid[$t0]
  ldi   $a0,#E_Ok
  ret

	align	16
FMTK_GetAppTaskId:
	sll		$a1,$a1,#2
	ldt		$a1,ACBPtrs[$a1]
	and		$a1,$a1,#$FFC00
  ldwu  $a1,ACBTask[$a1]
  ldi   $a0,#E_Ok
  ret

; The following only really needed by startup code, otherwise the task id
; is completely managed by the OS.
	align	16
FMTK_SetTaskId:
  ; Should get the id and see if it's currently zero (unset).
  ; but this would be more code bloat.
  csrrw $x0,#CSR_TASKID,$a1
  ldi   $a0,#E_Ok
  ret

;------------------------------------------------------------------------------
; Setting the task priority will take effect the next time the task is
; scheduled.
;
; Parameters:
;   $a1 = new priority to set
; Returns:
;   $a0 = E_Ok
;------------------------------------------------------------------------------
	align	16
FMTK_SetTaskPriority:
  mGetCurrentTid
  sll		$t0,$a0,#2
  ldt		$t0,TCBPtrs[$t0]
	and		$t0,$t0,#$FFC00
  stb   $a1,TCBPriority[$t0]
  ldi   $a0,#E_Ok
  ret
.badTid:
  ldi   $a0,#E_BadTid
  ret
.badPtr:
  call  FreeTID
  ldi   $a0,#E_BadTcbPointer
  ret

;------------------------------------------------------------------------------
; RunAsOS
;   Runs a piece of code as part of the OS.
; Only certain tasks are allowed to run code this way.
;
; Parameters:
;   $a1 = pointer to code to run
;------------------------------------------------------------------------------
	align	16
FMTK_RunAsOS:
  mov   $t0,$a1
  jmp   [$t0]
.badFunc:
  ldi   $a0,#E_Func
  ret
 
;------------------------------------------------------------------------------
; Map operating system variables into the app's address space.
;
; Parameters:
;		none
; Returns:
;   $a0 = E_Ok if successful
;   $a1 = virtual address space location of vars., -1 if unsuccessful
;------------------------------------------------------------------------------
	align	16
FMTK_MapOSVars:
  ldi   $a0,#0          ; OS app
  ldi   $a1,#OSPAGES
  sub		$sp,$sp,#4
  stt		$ra,[$sp]
  call  FindRun
  bltz  $a0,.noMem
  ldi   $t0,#0
  mov   $a1,$a0
.mapMore:
  mvmap $x0,$t0,$a0
  add   $t0,$t0,#1
  add   $a0,$a0,#1
  slt   $t1,$t0,#16
  bnez  $t1,.mapMore
  and   $a1,$a1,#$1FF
  sll   $a1,$a1,#LOG_PGSZ
  ldi   $a0,#E_Ok
.retx:
  ldt		$ra,[$sp]
  add		$sp,$sp,#4
  ret
.noMem:
  ldi   $a1,#-1
  ldi   $a0,#E_NoMem
  bra		.retx

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

	align	16
LockOSSemaphore:
LockOS:
	csrrw	$s11,#CSR_PMSTACK,$x0		; Get current interrupt enable setting
.spin:
	mTimeSliceEI2(1)
	csrrs	$x0,#CSR_PMSTACK,#1			; ensure interrupts are enabled
	ldt		$t0,OS_SEMA+4						; try and lock semaphore
	beqz	$t0,.spin
	ret
	
	align	16
UnlockOSSemaphore:
UnlockOS:
	csrrw	$x0,#CSR_PMSTACK,$s11		; restore interrupts
	ldi		$s11,#1
	stt		$s11,OS_SEMA+$4000			; unlock semaphore
	ret

;------------------------------------------------------------------------------
; Select the next task to run. The ready lists are searched in a circular
; fashion beginning with the list identified indirectly by QNDX. There are
; five ready lists to hold tasks of five different priorities.
; Cannot wait for an interrupt in this routine because it is called by
; the SchedulerIRQ() routine. 
;
; Parameters:
;		none
; Modifies:
;		$a1, t0, t1, t2, t3, t4
;	Returns:
;		$a0 = TCB pointer of task to run. 0 if no task is ready to run.
;------------------------------------------------------------------------------
  align 16
SelectTaskToRun:
  sub   $sp,$sp,#12
  stt   $ra,[$sp]
  stt		$s1,4[$sp]
  stt		$s2,8[$sp]
	; Pick the first queue to check, occasionally the queue
	; chosen isn't the highest priority one in order to 
	; prevent starvation of lower priority tasks.
	
	call	LockOS
	ldbu	$a1,QNDX						; get index into que check table
	add		$a1,$a1,#1					; increment it, and limit
	and		$a1,$a1,#31
	stb		$a1,QNDX						; store back
	ldbu	$a1,qToChk[$a1]			; assume this will be valid
	sll		$a1,$a1,#2					; turn $a1 into index
	ldi		$t2,#5							; 5 queues to check
.nxtQ:
  ldt		$a0,HEADRDY[$a1]
  bnez  $a0,.dq      				;
	add		$a1,$a1,#4					; no, advance to next queue
	slt   $a0,$a1,#20
	bnez  $a0,.mod
	ldi   $a1,#0
.mod:
	sub		$t2,$t2,#1					;
	bgtz	$t2,.nxtQ				    ; go back to check next queue
	; Here, nothing else is actually ready to run?
	; This should not be possible as the IdleTask should always
	; be present. Return NULL.
	ldi		$a0,#0
	call	UnlockOS
	bra		.xit
.dq:
	; TCBs should be 1kB aligned and within the RAM memory range.
	and		$a0,$a0,#$0007FC00
	ldt		$t0,[$a0]
	xor		$t0,$t0,#TCB_MAGIC
	bnez	$t0,.listCorrupt
  ; Rotate ready list
;  call	LockOS
	mov		$s1,$a0
	mov		$s2,$a1
	call	PutHexWord
	ldi		$a0,#' '
	call	Putch
	mov		$a0,$s1
	mov		$a1,$s2
  ldt   $t1,TCBNext[$a0]
  stt		$t1,HEADRDY[$a1]
  stt		$a0,TAILRDY[$a1]
	call	UnlockOS
  ; Return $a0 equal selected task
.xit:
  ldt   $ra,[$sp]
  ldt		$s1,4[$sp]
  ldt		$s2,8[$sp]
  add   $sp,$sp,#12
	ret
.listCorrupt:
	ldi		$a0,#msgReadyQueueCorrupt
	call	PutString
.0001:
	bra		.0001

msgReadyQueueCorrupt:
	db	"Ready Queue corrupt",CR,LNFD,0

;------------------------------------------------------------------------------
; Swap from outgoing context to incoming context.
;
; Parameters:
;		$s1 = pointer to TCB of outgoing context
;		$s2 = pointer to TCB of incoming context
; Must not modify:
;   $t2
; Modifies:
;   $t0,$t1,$t3,$t4,$t5
;------------------------------------------------------------------------------
  align 16
SwapContext:
	sub		$sp,$sp,#8
	stt		$ra,[$sp]
	stt		$t2,4[$sp]
/*
	ldbu	$a0,TCBRegset[$s1]
	mov		$a0,$s1
	call	PutHexByte
	ldi		$a0,#' '
	call 	Putch
	ldbu	$a0,TCBRegset[$s2]
	call	PutHexByte
	ldi		$a0,#CR
	call	Putch
*/
	; Save outgoing register set in TCB
	call	LockOS
	csrrs	$x0,#CSR_REGSET,#4	  ; select prior register set for Rs2, epc
	stt		$x1,TCBxRA[$s1]
	stt		$x2,TCBxSP[$s1]
	stt		$x3,TCBxGP[$s1]
	stt		$x4,TCBxTP[$s1]
	stt		$x5,TCBxT0[$s1]
	stt		$x6,TCBxT1[$s1]
	stt		$x7,TCBxT2[$s1]
	stt		$x8,TCBxFP[$s1]
	stt		$x9,TCBxS1[$s1]
	stt		$x10,TCBxA0[$s1]
	stt		$x11,TCBxA1[$s1]
	stt		$x12,TCBxA2[$s1]
	stt		$x13,TCBxA3[$s1]
	stt		$x14,TCBxA4[$s1]
	stt		$x15,TCBxA5[$s1]
	stt		$x16,TCBxA6[$s1]
	csrrc	$x0,#CSR_REGSET,#31   ; restore register set selections
	call	UnlockOS
	call	LockOS
	csrrs	$x0,#CSR_REGSET,#4	  ; select prior register set for Rs2, epc
	stt		$x17,TCBxA7[$s1]
	stt		$x18,TCBxS2[$s1]
	stt		$x19,TCBxS3[$s1]
	stt		$x20,TCBxS4[$s1]
	stt		$x21,TCBxS5[$s1]
	stt		$x22,TCBxS6[$s1]
	stt		$x23,TCBxS7[$s1]
	stt		$x24,TCBxS8[$s1]
	stt		$x25,TCBxS9[$s1]
	stt		$x26,TCBxS10[$s1]
	stt		$x27,TCBxS11[$s1]
	stt		$x28,TCBxT3[$s1]
	stt		$x29,TCBxT4[$s1]
	stt		$x30,TCBxT5[$s1]
	stt		$x31,TCBxT6[$s1]
	csrrc	$x0,#CSR_REGSET,#31   ; restore register set selections
	call	UnlockOS

	; Save MEPC
	csrrw $t3,#CSR_MEPC,$x0
	stt   $t3,TCBepc[$s1]

	; Save the operating mode
	csrrw $t3,#CSR_PMSTACK,$x0
	and   $t3,$t3,#$38
	stb   $t3,TCBOpMode[$s1]

	; Save interrupt mask
	csrrw	$t3,#CSR_IMSTACK,$x0
	and		$t3,$t3,#15
	stb		$t3,TCBImMask[$s1]

	; set task id
	call	LockOS
  srl   $a0,$s2,#LOG_PGSZ
	csrrw $x0,#CSR_TASKID,$a0			

	; Switch to destination memory map
  ldbu  $a0,TCBRegset[$s2]
;  ldbu  $a0,TCBmid[$s2]
  sll		$a0,$a0,#22							; shift into position
  csrrw	$t1,#CSR_SATP,$x0				; get satp
  and		$t1,$t1,#$f03fffff			; mask off asid
  or		$t1,$t1,$a0							; set new asid
	csrrw	$x0,#CSR_SATP,$t1				; set satp
	; User map has now been switched

	; Select register set to return to
  ldbu  $a0,TCBRegset[$s2]
	csrrw $t1,#CSR_RSSTACK,$x0
	and   $t1,$t1,#$FFFFF03F
	sll   $t0,$a0,#5
	or    $t1,$t1,$t0
	csrrw $x0,#CSR_RSSTACK,$t1
	call	UnlockOS

	call	LockOS
	csrrs $x0,#CSR_REGSET,#1      ; select task's register set
	; These two registers always need to be loaded so that the OS return values
	; can be transferred.
	ldt		$x2,TCBxSP[$s2]         ; manipulated by StartTask
	ldt		$x3,TCBxGP[$s2]         ; manipulated by StartApp
	ldt		$x10,TCBxA0[$s2]
	ldt		$x11,TCBxA1[$s2]
;	beqz  $t1,.skipCtxLoad
	ldt		$x1,TCBxRA[$s2]
	ldt		$x4,TCBxTP[$s2]
	ldt		$x5,TCBxT0[$s2]
	ldt		$x6,TCBxT1[$s2]
	ldt		$x7,TCBxT2[$s2]
	ldt		$x8,TCBxFP[$s2]
	ldt		$x9,TCBxS1[$s2]
	ldt		$x12,TCBxA2[$s2]
	ldt		$x13,TCBxA3[$s2]
	ldt		$x14,TCBxA4[$s2]
	ldt		$x15,TCBxA5[$s2]
	ldt		$x16,TCBxA6[$s2]
	csrrc	$x0,#CSR_REGSET,#31   ; restore register set selections
	call	UnlockOS
	call	LockOS
	csrrs $x0,#CSR_REGSET,#1      ; select task's register set
	ldt		$x17,TCBxA7[$s2]
	ldt		$x18,TCBxS2[$s2]
	ldt		$x19,TCBxS3[$s2]
	ldt		$x20,TCBxS4[$s2]
	ldt		$x21,TCBxS5[$s2]
	ldt		$x22,TCBxS6[$s2]
	ldt		$x23,TCBxS7[$s2]
	ldt		$x24,TCBxS8[$s2]
	ldt		$x25,TCBxS9[$s2]
	ldt		$x26,TCBxS10[$s2]
	ldt		$x27,TCBxS11[$s2]
	ldt		$x28,TCBxT3[$s2]
	ldt		$x29,TCBxT4[$s2]
	ldt		$x30,TCBxT5[$s2]
	ldt		$x31,TCBxT6[$s2]
	csrrc	$x0,#CSR_REGSET,#31   ; restore register set selections
	call	UnlockOS

	call	LockOS
  ; Setup return privilege mode
  ldbu  $t3,TCBOpMode[$s2]
  csrrw $t0,#CSR_PMSTACK,$x0
  and   $t0,$t0,#$FFFFFFC7
  and   $t3,$t3,#$38          ; four operating modes max
  or    $t0,$t0,$t3
  csrrw $x0,#CSR_PMSTACK,$t0

	; Setup interrupt mask
	ldbu	$t3,TCBImMask[$s2]
	csrrw	$t0,#CSR_IMSTACK,$x0
	and		$t0,$t0,#$FFFFFFF0
	and		$t3,$t3,#15
	or		$t0,$t0,$t3
	csrrw	$x0,#CSR_IMSTACK,$t0

	; Setup EPC to return to task
  ldt   $t3,TCBepc[$s2]
  csrrw $x0,#CSR_MEPC,$t3
	call	UnlockOS

  ldt		$ra,[$sp]
  ldt		$t2,4[$sp]
  add		$sp,$sp,#8

	ret
/*
	; Now save off segment registers
	ldi		$t1,#0
.svseg:
	mvseg	$t0,$x0,$t1
	sll		$t3,$t1,#2
	add		$t3,$t3,$s1
	stt		$t0,TCBbases[$t3]
	add		$t1,$t1,#1
	and		$t1,$t1,#15
	bnez	$t1,.svseg

	; Switch memory maps
;	srl		$v0,$a1,#10					; convert pointer to tid
;	and		$v0,$v0,#$F					; mask to 16 task
  ldbu  $a0,TCBmid[$s2]
  sll		$a0,$a0,#22					; shift into position
  csrrw	$t1,#$180,$x0				; get satp
  and		$t1,$t1,#$f83fffff	; mask off asid
  or		$t1,$t1,$a0					; set new asid
	csrrw	$x0,#$180,$t1				; set satp
  srl   $a0,$s2,#LOG_PGSZ
	csrrw $x0,#CSR_TASKID,$a0
	; User map has now been switched

	; Restore segment register set
	ldi		$t1,#0
.rsseg:
	sll		$t3,$t1,#2
	add		$t3,$t3,$s2
	ldt		$t0,TCBbases[$t3]
	mvseg	$x0,$t0,$t1
	add		$t1,$t1,#1
	and		$t1,$t1,#15
	bnez	$t1,.rsseg

.0005:
	; We can skip over a bunch of load operations if the last task to use the
	; register set is the same task that wants it. In that event there are no
	; registers to reload other than the return value ones.
	srl   $t0,$t0,#4              ; position $t0 as index
	ldbu  $t1,RegsetTid[$t0]
	beq   $t1,$t0,.0001:
	stb   $t0,RegsetTid[$t0]      ; flag as the last user
	ldi   $t1,#1
	jmp   .0002
.0001:
  ldi   $t1,#0
.0002:
*/

;------------------------------------------------------------------------------
; Operating system ordinary call dispatcher.
;------------------------------------------------------------------------------
  align 8
  db  "OSOCall",0
  align 16
OSOCall:
  slt   $t0,$a0,#8
	beqz  $t0,.badFunc
  csrrs $t0,#$7C1,#1    		; set OS running semaphore
  and		$t0,$t0,#1
  bnez	$t0,.busy
  sub		$sp,$sp,#4
  stt		$ra,[$sp]
	mTimeSliceDI
	; The function address table is compressed by assuming all the code is
	; located within the same 64kB block of memory. We're really saving bytes
	; here.
	add		$a0,$a0,$a0         ; shift left one bit, assume add might be faster
	ldwu  $t0,OSCallTbl[$a0]  ; get the low order 16 bits of the address
	beqz  $t0,.badFunc
	sll		$t0,$t0,#4
	or    $t0,$t0,#$FFFC0000  ; add in the high order address bits
	call	[$t0]
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
	mTimeSliceEI2(10)
	csrrc $x0,#$7C1,#1        ; clear OS running semaphore
	ret
.badFunc:
  ldi   $a0,#E_Func
  ret
.busy:
	ldi		$a0,#E_Busy
	ret
  
;------------------------------------------------------------------------------
; Operating system ecall dispatcher.
; On entry machine registers are selected.
;------------------------------------------------------------------------------
  align 16
OSECALL:
	; Switch to map 61
	di		16
  csrrw	$t1,#CSR_SATP,$x0
  and		$t1,$t1,#$f03fffff			; mask off asid
  or		$t1,$t1,#$0f400000			; set new asid
	csrrw	$x0,#CSR_SATP,$t1				; set satp
  csrrs $t0,#$7C1,#1    ; set OS running semaphore
  and		$t0,$t0,#1
  bnez	$t0,.busy
  ; We reset the stack pointer at each call to the OS in case an error causes
  ; it to be messed up.
	ldi		$sp,#$F607F000-4	; setup machine mode stack pointer
  call	LockOS
  mTimeSliceDI
	csrrs	$x0,#CSR_REGSET,#2  ; get register sets
	mov		$a0,$a0					; move user to machine
	mov		$a1,$a1
	mov		$a2,$a2
	mov		$a3,$a3
	mov		$a4,$a4
	mov		$a5,$a5
	csrrc	$x0,#CSR_REGSET,#15 ; get back current registers for all
  ; Enable other kinds of interrupts. While accessing the previous register set
  ; we cannot be interrupted because the regset would be in flux.
  call	UnlockOS
  slt   $t0,$a0,#47     
	beqz  $t0,.badFunc
	; The function address table is compressed by assuming all the code is
	; located within the same 64kB block of memory. We're really saving bytes
	; here.
	add		$a0,$a0,$a0     ; shift left one bit, assume add might be faster
	ldwu  $t0,OSEcallTbl[$a0] ; get the low order 16 bits of the address
	beqz  $t0,.badFunc
	sll		$t0,$t0,#4
	or    $t0,$t0,#$FFFC0000  ; add in the high order address bits
	call	[$t0]
	jmp		OSExit
.badFunc:
  ldi   $a0,#E_Func
  jmp   OSExit
.busy:
	ldi		$a0,#E_Busy
	jmp		OSExit

;------------------------------------------------------------------------------
; Exit from the operating system. All operating system routines use this
; fragment of code to return. Return values are transferred to the previously
; active register set.
;------------------------------------------------------------------------------
  align 16
OSExit:
  call	LockOS
  nop                       ; landing zone for interrupts
  nop
	; Switch back to app map
	di		16
  csrrw	$t1,#CSR_SATP,$x0
  and		$t1,$t1,#$f03fffff		; mask off asid
  csrrw	$t2,#CSR_RSSTACK,$x0
  srl		$t2,$t2,#6
  and		$t2,$t2,#$3f
  sll		$t2,$t2,#22
  or		$t1,$t1,t2						; restore asid
	csrrw	$x0,#CSR_SATP,$t1			; set satp
	csrrs	$x0,#CSR_REGSET,#1		; get register sets
	mov		$a1,$a1							; move return values to user registers
	mov		$a0,$a0
	csrrc $x0,#CSR_REGSET,#15 ; restore register set selection
	call	UnlockOS
	csrrc $x0,#$7C1,#1        ; clear OS running semaphore
	mTimeSliceEI
	mret

;------------------------------------------------------------------------------
; Time accounting.
; Update the length of time the task has been running.
;
; Parameters:
;		s1 = pointer to TCB
; Modifies:
;		t2,t3,t4,t5
;------------------------------------------------------------------------------

AccountTime:
;	csrrw	$t3,#$741,$x0					; get high time
;	csrrw	$t2,#$701,$x0					; get low time
;	csrrw	$t4,#$741,$x0
;	bne		$t3,$t4,.again
	sub		$sp,$sp,#4
	stt		$ra,[$sp]
	call	ViaTime
	stt		$a0,TCBEndTick[$s1]
	ldt		$t3,TCBStartTick[$s1]
	sub		$t4,$t2,$t3						; end - start
	ldt		$t5,TCBTicks[$s1]
	add		$t5,$t5,$t4						; ticks + (end - start)
	stt		$t5,TCBTicks[$s1]
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
	ret

;------------------------------------------------------------------------------
; UpdateMsgFields
;    Place message data in target address by calling PeekMsg().
;
; Parameters:
;   $a0 = target tid
;   $t2 = TCB status (updated)
;   $s2 = target TCB to update
; Modifies:
;   $a1,$a2,$a3,$a4,$a5,$t3,$t4
;------------------------------------------------------------------------------
  align 16
UpdateMsgFields:
  sub 	$sp,$sp,#8
  stt   $ra,[$sp]
  stt		$s1,4[$sp]
  ldbu	$t2,TCBStatus[$s2]
  and   $t3,$t2,#TS_WAITMSG
  beqz  $t3,.notWaiting
;  call	DumpReadyQueue
;  call	DumpTimeoutList
;.0001:
;	bra		.0001
	; If a message is ready, update status to ready and put
	; message in target memory. The task will be returning
	; from a WaitMsg so a return status of E_Ok is also set.
	ldi		$t3,#E_NoMsg						; setup to return E_NoMsg
	stt		$t3,TCBxA0[$s2]					; in a0
	and		$t3,$t2,#TS_MSGRDY
	beqz	$t3,.noMsg
	mov   $t4,$a1                 ; save $a1
	ldt		$a1,TCBxA1[$s2]					; user a1 (x20)
	ldt		$a2,TCBxA2[$s2]					; user a2 (x20)
	ldt		$a3,TCBxA3[$s2]					; user a3 (x20)
	ldt		$a4,TCBxA4[$s2]					; user a4 (x20)
	ldt		$a5,TCBxA5[$s2]					; user a5 (x20)
	call  PeekMsg
	mov   $a1,$t4                 ; restore $a1
	ldi		$t3,#E_Ok						    ; setup to return E_Ok
	stt		$t3,TCBxA0[$s2]					; in a0
.noMsg:
	call	LockOS
  ldbu	$t2,TCBStatus[$s2]
	and		$t2,$t2,#~(TS_WAITMSG|TS_MSGRDY)  ; mask out message ready status
	stb		$t2,TCBStatus[$s2]
	call	UnlockOS
.notWaiting:
  ldt   $ra,[$sp]
  ldt		$s1,4[$sp]
  add   $sp,$sp,#8
  ret

;------------------------------------------------------------------------------
; Sleep for a number of ticks. Tick interval determined by the VIA timer #3.
; Passing a time of zero or less causes the function to return right away.
;
; Parameters:
;		$a1 = length of time to sleep (must be >= 0)
; Returns:
;		$v0 = E_Ok
;   $v1 = 1 = context switched, 0 = same context
;------------------------------------------------------------------------------
  align 16
ISleep:
  sub 	$sp,$sp,#16
  stt   $ra,[$sp]
  stt   $s1,4[$sp]
  stt   $s2,8[$sp]
  stt		$s3,12[$sp]
	bltz	$a1,.xit
	mGetCurrentTid
;	beqz  $a0,.xit
	sll		$s1,$a0,#2
	ldt		$s1,TCBPtrs[$s1]
	and		$s1,$s1,#$FFC00
	mov   $s2,$s1               ; for bad pointer processing
	beqz	$a1,.0001             ; zero timeout?
	mov		$a0,$s1
	call	RemoveFromReadyQueue
	call	InsertIntoTimeoutList	; a1 = timeout
.0001:
	call	LockOS
	ldbu	$a0,TCBStatus[$s1]		; flag task as no longer running
	and		$a0,$a0,#~TS_RUNNING
	stb		$a0,TCBStatus[$s1]
	call	UnlockOS

	call	AccountTime						; uses s1
	call	SelectTaskToRun
  mov   $s2,$a0    						; $s2 = $a0 = TCB pointer
  call	LockOS
	ldbu	$t2,TCBStatus[$s2]		; x2 = incoming status
	or		$t2,$t2,#TS_RUNNING	  ; set status = running
	stb   $t2,TCBStatus[$s2]
	call	UnlockOS
	ldt		$t3,TCBException[$s2]	;
	beqz	$t3,.noException
	; set link register to catch handler address
	;{
	;	t->regs[29] = t->regs[28];   // set link register to catch handler
	;	t->epc = t->regs[28];        // and the PC register
	;	t->regs[1] = t->exception;    // r1 = exception value
	;	t->exception = 0;
	;	t->regs[2] = 45;              // r2 = exception type
	;}
	stt		$t3,TCBxA0[$s2]						; r1 = exception
	stt		$x0,TCBException[$s2]	; tcb->exception = 0
	ldi		$t3,#45
	stt		$t3,TCBxA1[$s2]						; r2 = 45
.noException:
	ldi   $a1,#0
	beq		$s1,$s2,.noCtxSwitch	; incoming and outgoing contexts the same?
	call	SwapContext
	ldi   $a1,#1
.noCtxSwitch:
;	call  UpdateMsgFields       ; must be after context is set
	call	ViaTime
	stt		$a0,TCBStartTick[$s1]
.xit:
;	mov		$a0,$s1
;	call	PutHexWord
;	ldi		$a0,#' '
;	call	Putch
	ldi   $a0,#E_Ok
  ldt   $ra,[$sp]
  ldt   $s1,4[$sp]
  ldt   $s2,8[$sp]
  ldt		$s3,12[$sp]
  add   $sp,$sp,#16
	ret

	align	16
FMTK_Sleep:
  jmp  	ISleep

;------------------------------------------------------------------------------
; SchedulerIRQ meant to be called from the timer ISR. This routine will not
; be invoked if the operating system is active.
; Does not return anything.
; The user mode task may be switched to the highest priority task.
;------------------------------------------------------------------------------
  align 16
SchedulerIRQ:
	; See if the OS was interrupted.
	csrrw $a0,#$7C1,$x0   ; Is the OS running?
	and   $a0,$a0,#1
	beqz  $a0,.noOS
	ret                   ; refuse to continue this function
.noOS:
	sub		$sp,$sp,#20
	stt		$ra,[$sp]
	stt   $s1,4[$sp]
	stt   $s2,8[$sp]
	stt		$s3,12[$sp]
	; Keep popping the timeout list as long as there are tasks on it with
	; expired timeouts.
	call	LockOS

.0001:
	ldt		$s1,TMOQ+$200
	stt		$x0,TMOQ+$200
	beqz	$s1,.0002
	ldi		$a0,#0
.0004:
	and		$s3,$s1,#1
	beqz	$s3,.0003
	ldt		$t0,TCBPtrs[$a0]									; $t0 = TCB pointer
	and		$t0,$t0,#$7FC00										; help ensure valid pointer
	ldt		$t2,[$t0]													; check magic number
	xor		$t2,$t2,#TCB_MAGIC
	bnez	$t2,.0003													; not pointing to a TCB? Go to next
	ldbu	$t2,TCBStatus[$t0]
	and		$t2,$t2,#~(TS_TIMEOUT|TS_WAITMSG) ; no longer timing out or waiting
	stb		$t2,TCBStatus[$t0]
	call	RemoveFromTimeoutList
	; Remove task from task queue of mailbox
	stt		$a0,16[$sp]
	mov		$a0,$t0
	call	UnlockOS
	call  MbxRemoveTask
	call	LockOS
	call	UnlockOS
	call	InsertIntoReadyQueue
	call	LockOS
	ldt		$a0,16[$sp]
.0003:
	srl		$s1,$s1,#1
	beqz	$s1,.0002
	add		$a0,$a0,#4
	ldi		$s3,#128
	bltu	$a0,$s3,.0004

.0002:
	ldt		$s1,TMOQ+$204
	stt		$x0,TMOQ+$204
	beqz	$s1,.0007
	ldi		$a0,#32
.0005:
	and		$s3,$s1,#1
	beqz	$s3,.0006
	ldt		$t0,TCBPtrs[$a0]									; $t0 = TCB pointer
	and		$t0,$t0,#$7FC00										; help ensure valid pointer
	ldt		$t2,[$t0]													; check magic number
	xor		$t2,$t2,#TCB_MAGIC
	bnez	$t2,.0006													; not pointing to a TCB? Go to next
	ldbu	$t2,TCBStatus[$t0]
	and		$t2,$t2,#~(TS_TIMEOUT|TS_WAITMSG) ; no longer timing out or waiting
	stb		$t2,TCBStatus[$t0]
	call	RemoveFromTimeoutList
	; Remove task from task queue of mailbox
	stt		$a0,16[$sp]
	mov		$a0,$t0
	call	UnlockOS
	call  MbxRemoveTask
	call	LockOS
	call	UnlockOS
	call	InsertIntoReadyQueue
	call	LockOS
	ldt		$a0,16[$sp]
.0006:
	srl		$s1,$s1,#1
	beqz	$s1,.0007
	add		$a0,$a0,#4
	ldi		$s3,#256
	bltu	$a0,$s3,.0005
.0007:
	; Clear timeout flags
	stt		$x0,TMOQ+$200
	stt		$x0,TMOQ+$200
/*
	ldt		$a0,TimeoutList
	beqz	$a0,.toDone
	ldi		$t1,#512<<LOG_PGSZ			; valid tid?
	bgeu	$a0,$t1,.toDone
	ldt		$t1,TCBTimeout[$a0]
	beqz	$t1,.rmvFromTol
	sub		$t1,$t1,#1			; decrement timeouts for tasks on timeout list
	stt		$t1,TCBTimeout[$a0]
	bra		.toDone
.rmvFromTol:
	ldbu	$t2,TCBStatus[$a0]
	and		$t2,$t2,#~(TS_TIMEOUT|TS_WAITMSG) ; no longer timing out or waiting
	stb		$t2,TCBStatus[$a0]
	; Remove task from task queue of mailbox
	call	UnlockOS
	call  MbxRemoveTask
	call	LockOS
	; Remove task from timeout list
	ldt		$s3,TCBNext[$a0]
	stt		$s3,TimeoutList
	stt		$x0,TCBNext[$a0]
	call	UnlockOS
	call	InsertIntoReadyQueue
	call	LockOS
	beqz	$s3,.toDone						; list empty?
	bra		.0001
*/
.toDone:
	call	UnlockOS
	mGetCurrentTid
	sll   $s1,$a0,#LOG_PGSZ
; Might need the following if the external timer isn't used.
;	csrrw	$v0,#$701,$x0					; get the time
;	add		$v0,$v0,#600000				; wait 600,000 cycles @20MHz (30ms)
;	csrrw	$x0,#$321,$v0					; set next interrupt time
	call	AccountTime
	call	LockOS
	ldbu	$t5,TCBStatus[$s1]
	or		$t5,$t5,#TS_PREEMPT
	and		$t5,$t5,#~TS_RUNNING	; no longer running, but may still be ready
	stb		$t5,TCBStatus[$s1]
	call	UnlockOS
	; The ready queue was just updated, there could be new tasks
	; ready to run.
	call	SelectTaskToRun
	beqz	$a0,.noCtxSwitch
  mov   $s2,$a0
	call	LockOS
	lbu		$t3,TCBStatus[$s2]	; t3 = incoming status
	or		$t2,$t3,#TS_RUNNING|TS_READY	; status = running
	and   $t2,$t2,#~TS_PREEMPT
	stt		$t2,TCBStatus[$s2]
	call	UnlockOS
	ldt		$t3,TCBException[$s2]	;
	beqz	$t3,.noException
	; set link register to catch handler address
	;{
	;	t->regs[29] = t->regs[28];   // set link register to catch handler
	;	t->epc = t->regs[28];        // and the PC register
	;	t->regs[1] = t->exception;    // r1 = exception value
	;	t->exception = 0;
	;	t->regs[2] = 45;              // r2 = exception type
	;}
.noException:
	beq		$s1,$s2,.noCtxSwitch
	call	SwapContext
.noCtxSwitch:
;	call  UpdateMsgFields       ; must be after context set
	call	ViaTime
	stt		$a0,TCBStartTick[$s1]
	ldt		$ra,[$sp]
	ldt   $s1,4[$sp]
	ldt   $s2,8[$sp]
	ldt		$s3,12[$sp]
	add		$sp,$sp,#16
	ret

;------------------------------------------------------------------------------
; Start a task.
;	Task status is set to ready, priority normal, and the task is inserted into
; the ready queue. Segment registers are setup for a flat memory model.
; 
;	Parameters:
;   $a1 = app id
;		$a2 = memory required (task's local memory)
;		$a3 = start pc (usually $400)
;   $a4 = register set, operating mode
;	Modifies:
;	Returns:
;		$a0 = E_Ok if successful
;		$a1 = tid of started task if successful
;------------------------------------------------------------------------------
  align 16
FMTK_StartTask:
IStartTask:
  sub 	$sp,$sp,#24
  stt   $ra,[$sp]
  stt   $s1,4[$sp]
  stt   $s2,8[$sp]
  stt   $s3,12[$sp]
  stt   $s4,16[$sp]
  stt   $s5,20[$sp]
  mov   $s3,$a1       ; $s3 = app id
  mov   $s2,$a2       ; $s2 = memory required
  mov   $s5,$a3       ; $s5 = start address
  ldi   $a0,#1024     ; TCB is 1kB
  call  PAMAlloc      ; allocate storage for the TCB
	bltz	$a0,.err
	call	MapTCBStorage

	; Initialize OBJECT fields
	; More todo here yet.
	ldi		$t0,#TCB_MAGIC
	stt		$t0,[$a0]
	ldi		$t0,#1024
	stt		$t0,OBJSize[$a0]
	ldi		$t0,#OST_WHITE
	stb		$t0,OBJState[$a0]
	stb		$x0,OBJScavcnt[$a0]
	stt		$x0,OBJFinalizer[$a0]

	mov   $s4,$a0
	call	LockOS
	call	AllocTCBId
	bltz	$a0,.noTcbId
  stw   $a0,TCBtid[$s4]
  sll		$a0,$a0,#2
  stt		$s4,TCBPtrs[$a0]
	and		$s4,$s4,#$FFC00
  call	UnlockOS
  mov   $s1,$s4         ; $s1 = pointer to TCB
;	call	FreeAll
;	call	MapOSPages			; Map OS pages into address space
  mov   $a0,$s3         ; $a0 = app id
  stw   $a0,TCBappid[$s4]
  call	DumpACBPtrs
  mGetAppMid
  stw   $a0,TCBmid[$s4] ; record the mid
	call	AllocStack
	beqz  $a0,.AllocStackErr
	or		$t0,$a0,#$200003FC	; set stack pointer
	stt		$t0,TCBxSP[$s1]
	stt		$s5,TCBepc[$s1]	; address task will begin at
	ldi		$t0,#TS_READY
	stb		$t0,TCBStatus[$s1]
	ldi		$t0,#2					; normal execution priority
	stb		$t0,TCBPriority[$s1]
	stt   $x0,TCBTimeout[$s1]

	; leave segment base at $0, flat memory model
	ldi		$t0,#6							; read,write
	sll		$a0,$s3,#2					; $a0 = appid shifted into place
	mvseg	$x0,$a0,$t0
	add		$a0,$a0,#1
	mvseg	$x0,$a0,$t0
	add		$a0,$a0,#1
	mvseg	$x0,$a0,$t0
	add		$a0,$a0,#1
	mvseg	$x0,$a0,$t0
	; Set bounds registers
	ldi		$t0,#-1
	or		$a0,$a0,#128
	and		$a0,$a0,#$FC
	mvseg	$x0,$a0,$t0
	add		$a0,$a0,#1
	mvseg	$x0,$a0,$t0
	add		$a0,$a0,#1
	mvseg	$x0,$a0,$t0
	add		$a0,$a0,#1
	mvseg	$x0,$a0,$t0
	
	; Clear time accounting fields
	stt		$x0,TCBTicks[$s1]
	stt		$x0,TCBStartTick[$s1]
	stt		$x0,TCBEndTick[$s1]

;	srl		$a0,$s1,#LOG_TCBSZ	; need the tid again
  stt   $x0,TCBMbxNext[$s1]
  stt   $x0,TCBMbxPrev[$s1]
  mov   $a0,$s1							; a0 = tid
  and   $t0,$a4,#63
  stb   $t0,TCBRegset[$s1]
  and   $t0,$a4,#$300
  ldi		$t1,#$300
  beq		$t0,$t1,.mm
  ldb		$t0,TCBRegset[$s1]
  ldi		$t1,#52
  bgeu	$t0,$t1,.mm
  ldi		$t0,#$08						; enable interrupts, user mode
  bra		.mm1
.mm:
	ldi		$t0,#$38						; enable interrupts, machine mode
.mm1:
  stb   $t0,TCBOpMode[$s1]
  stb		$x0,TCBImMask[$s1]
  stb   $x0,TCBHasFocus[$s1]
  stt   $x0,IOF_NEXT[$s1]
  stt   $x0,IOF_PREV[$s1]
  ldt   $t0,TaskNum
  stt   $t0,TCBTaskNum[$s1]
  add   $t0,$t0,#1
  stt   $t0,TaskNum
  sub   $t0,$t0,#1
  bnez  $t0,.notIdleTask
  srl		$a0,$a0,#LOG_PGSZ
  stw   $a0,IdleTaskId
  sll		$a0,$a0,#LOG_PGSZ
.notIdleTask:
	call	InsertIntoReadyQueue
	ldwu	$a1,TCBtid[$s1]
	ldi   $a0,#E_Ok
.xit:
	ldt   $ra,[$sp]
  ldt   $s1,4[$sp]
  ldt   $s2,8[$sp]
  ldt   $s3,12[$sp]
  ldt   $s4,16[$sp]
  ldt   $s5,20[$sp]
	add   $sp,$sp,#24
  ret
.err:
  ldi   $a0,#E_NoMem
  bra   .xit
.AllocStackErr:
	call	LockOS
	ldwu	$a0,TCBtid[$s4]
	sll		$t0,$a0,#2
	stt		$x0,TCBPtrs[$t0]
	call	FreeTCBId
	call	UnlockOS
	mov		$a0,$s4
	call	PAMFree
	call	UnmapTCBStorage
	ldi		$a0,#E_NoMem
	bra		.xit
.noTcbId:
	call	UnlockOS
	mov		$a0,$s4
	call	PAMFree
	call	UnmapTCBStorage
	ldi		$a0,#E_NoMoreTcbs
	bra		.xit

; Map the TCB storage into maps 60 to 63
MapTCBStorage:
	srl		$t0,$a0,#LOG_PGSZ
	ldi		$t1,#60<<16
	or		$t1,$t1,$t0
	mvmap	$x0,$t0,$t1
	add		$t1,$t1,#1
	mvmap	$x0,$t0,$t1
	add		$t1,$t1,#1
	mvmap	$x0,$t0,$t1
	add		$t1,$t1,#1
	mvmap	$x0,$t0,$t1
	ret

; Remove TCB storage from maps 60 to 63
UnmapTCBStorage:
	srl		$t0,$s4,#LOG_PGSZ
	ldi		$t1,#60<<16
	or		$t1,$t1,$t0
	ldi		$t0,#0
	mvmap	$x0,$t0,$t1
	add		$t1,$t1,#1
	mvmap	$x0,$t0,$t1
	add		$t1,$t1,#1
	mvmap	$x0,$t0,$t1
	add		$t1,$t1,#1
	mvmap	$x0,$t0,$t1
	ret

;------------------------------------------------------------------------------
; Exit the current task.
;
; Parameters:
;		none
; Modifies:
;		a1 = task id
;------------------------------------------------------------------------------
	align	16
FMTK_ExitTask:
	mGetCurrentTid
	sll		$a1,$a0,#LOG_PGSZ
	; fall through to KillTask
	
;------------------------------------------------------------------------------
; Parameters:
;		a1 = tid of task to kill
;------------------------------------------------------------------------------
  align 16
FMTK_KillTask:
	sll		$a1,$a1,#2
	ldt		$a1,TCBPtrs[$a1]
	and		$a1,$a1,#$FFC00
	ldt   $t0,TCBTaskNum[$a1]
	beqz	$t0,.immortal		    ; tid #0 is immortal (the system)
	ldi		$t0,#TS_UNDEAD			; flag task as undead
	stb		$t0,TCBStatus[$a1]
	; Move the task to the undead queue, it will no longer be selected by the
	; scheduler.
	mov		$a0,$a1
	sub		$sp,$sp,#4
	stt		$ra,[$sp]
	call	RemoveFromReadyQueue
	ldi   $t0,#UNDEADQ
	stb   $t0,TCBPriority[$a1]
	call	InsertIntoReadyQueue
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
;	ldbu  $a0,TCBmid[$a1]
;	call	FreeAll							; free all the memory associated with the task
.immortal:
	ldi		$a0,#E_Ok
	ret

	