; ============================================================================
;        __
;   \\__/ o\    (C) 2020-2021  Robert Finch, Waterloo
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

	code
;------------------------------------------------------------------------------
; Insert task into ready queue.
; Inserting into the ready queue is done by both OS ecall functions and
; interrupt driven scheduling. It's important to have interrupts disabled
; so that there is no contention for the ready queue.
;
; Parameters:
;		$a0 = tid to insert (TCB pointer)
; Modifies:
;	  $t0,$t1
; Stack Space:
;		1 word
; Returns:
;		none
;------------------------------------------------------------------------------
	align	16
InsertIntoReadyQueue:
	beqz	$a0,.retx
	sub		$sp,$sp,#4
	stt		$ra,[$sp]
	call	LockOS
	ldbu	$t0,TCBStatus[$a0]		; set status to ready
	or		$t0,$t0,#TS_READY
	stb		$t0,TCBStatus[$a0]
	ldb		$t0,TCBPriority[$a0]	; $t0 = priority
	and		$t0,$t0,#7
	sll		$t0,$t0,#2						; $t0 = index to priority list
	ldt		$t1,TAILRDY[$t0]			; $t1 = tail
	beqz	$t1,.qempty
	stt		$a0,TCBNext[$t1]			; tail->next = new
	stt		$a0,TAILRDY[$t0]			; tail = new
	stt		$t1,TCBPrev[$a0]			; new->prev = $t1
	ldt		$t1,HEADRDY[$t0]
	stt		$t1,TCBNext[$a0]			; new->next = head
	stt		$a0,TCBPrev[$t1]			; head->prev = new
	call	UnlockOS
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
.retx:
	ret
.qempty:
	stt		$a0,HEADRDY[$t0]
	stt		$a0,TAILRDY[$t0]
	stt		$a0,TCBNext[$a0]
	stt		$a0,TCBPrev[$a0]
	call	UnlockOS
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
	ret


;------------------------------------------------------------------------------
; Remove from ready queue.
;
; Parameters:
;		$a0 = tid to remove (TCB pointer)
; Modifies:
;		$t0,$t1
; Stack Space:
;		1 word
; Returns:
;		none
;------------------------------------------------------------------------------

	align	16
RemoveFromReadyQueue:
	beqz	$a0,.retx
	sub		$sp,$sp,#4
	stt		$ra,[$sp]
	call	LockOS
	ldb		$t0,TCBStatus[$a0]		; set status no longer ready or running
	and		$t0,$t0,#~(TS_READY|TS_RUNNING)
	stb		$t0,TCBStatus[$a0]
	ldt		$t0,TCBNext[$a0]
	beq		$t0,$a0,.emptyList
	ldt		$t1,TCBPrev[$a0]
	stt		$t1,TCBPrev[$t0]
	stt		$t0,TCBNext[$t1]
.xit:
	call	UnlockOS
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
.retx:
	ret

; Removing the last task from a ready list.
; Find the task in the ready lists
.emptyList:
	ldt		$t0,HEADRDY0
	bne		$t0,$a0,.hr1
	stt		$x0,HEADRDY0
	stt		$x0,TAILRDY0
.hr1:
	ldt		$t0,HEADRDY1
	bne		$t0,$a0,.hr2
	stt		$x0,HEADRDY1
	stt		$x0,TAILRDY1
.hr2:
	ldt		$t0,HEADRDY2
	bne		$t0,$a0,.hr3
	stt		$x0,HEADRDY2
	stt		$x0,TAILRDY2
.hr3:
	ldt		$t0,HEADRDY3
	bne		$t0,$a0,.hr4
	stt		$x0,HEADRDY3
	stt		$x0,TAILRDY3
.hr4:
	ldt		$t0,HEADRDY4
	bne		$t0,$a0,.xit
	stt		$x0,HEADRDY4
	stt		$x0,TAILRDY4
	bra		.xit
	
;------------------------------------------------------------------------------
; Parameters:
;		$a0 = task id to insert
;		$a1 = timeout value
; Modifies:
;		t0,t1,t2,t3,t4
;------------------------------------------------------------------------------

	align	16
InsertIntoTimeoutList:
	beqz	$a0,.retx
	sub		$sp,$sp,#4
	stt		$ra,[$sp]
	call	LockOS
	ldbu	$t2,TCBStatus[$a0]		; set status to timing out
	or		$t2,$t2,#TS_TIMEOUT
	stb		$t2,TCBStatus[$a0]
	ldt		$t0,TimeoutList
	ldi		$t3,#0
	beqz	$t0,.listEmpty
.loop:
	beq		$t0,$a0,.xit				; task already on TimeoutList
	ldt		$t1,TCBTimeout[$t0]
	sltu	$t2,$a1,$t1
	bnez	$t2,.lessThan
	; Here timeout was >
	sub		$a1,$a1,$t1
	mov		$t3,$t0
	ldt		$t0,TCBNext[$t0]
	bnez	$t0,.loop
	; Add at end
	stt		$a0,TCBNext[$t0]
	stt		$x0,TCBNext[$a0]
	stt		$a1,TCBTimeout[$a0]
	bra		.xit
.listEmpty:
	stt		$a1,TCBTimeout[$a0]
	stt		$a0,TimeoutList
	stt		$x0,TCBNext[$a0]
	bra		.xit
.lessThan:
	beq		$t0,$a0,.xit
	sub		$t1,$t1,$a1
	stt		$t1,TCBTimeout[$t0]
	stt		$t0,TCBNext[$a0]
	beqz	$t3,.atHead
	stt		$a0,TCBNext[$t3]
	bra		.xit
.atHead:
	stt		$a0,TimeoutList
.xit:
	call	UnlockOS
	ldi		$a0,#E_Ok
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
.retx:
	ret

;------------------------------------------------------------------------------
; Remove a task from the timeout list.
; Called when a mailbox is freed and a task is waiting at the
; mailbox.
;
; Parameters:
;		$a0 = task id to remove
; Modifies:
;		$t0,$t1,$t2,$t3,$t4
; Returns:
;		none
;------------------------------------------------------------------------------

	align	16
RemoveFromTimeoutList:
	beqz	$a0,.retx
	sub		$sp,$sp,#4
	stt		$ra,[$sp]
	call	LockOS
	ldt		$t0,TimeoutList
	beq		$t0,$a0,.atHead				; quick test for head of list
	ldi		$t3,#0
.0001:
	beq		$t0,$a0,.found
	mov		$t3,$t0
	ldt		$t0,TCBNext[$t0]
	bnez	$t0,.0001
	bra		.xit
.found:
	ldt		$t0,TCBNext[$a0]
	beqz	$t0,.atTail2
	ldt		$t1,TCBTimeout[$t0]
	ldt		$t2,TCBTimeout[$a0]
	sub		$t1,$t1,$t2
	stt		$t1,TCBTimeout[$t0]
	stt		$t0,TCBNext[$t3]			; this->prev->next = this->next
	stt		$x0,TCBNext[$a0]
	stt		$x0,TCBTimeout[$a0]
	bra		.xit
.atHead:
	ldt		$t0,TCBNext[$a0]
	ldt		$t1,TCBTimeout[$t0]
	ldt		$t2,TCBTimeout[$a0]
	sub		$t1,$t1,$t2
	stt		$t1,TCBTimeout[$t0]
	stt		$t0,TimeoutList
	stt		$x0,TCBNext[$a0]
	stt		$x0,TCBTimeout[$a0]
	bra		.xit
.atTail2:
	stt		$x0,TCBNext[$t3]
	stt		$x0,TCBNext[$a0]
	stt		$x0,TCBTimeout[$a0]
.xit:
	call	UnlockOS
	ldt		$ra,[$sp]
	add		$sp,$sp,#4
.retx:
	ret

;------------------------------------------------------------------------------
; Diagnostics
;------------------------------------------------------------------------------

	align	16
DumpReadyQueue:
	sub		$sp,$sp,#32
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	stt		$a2,8[$sp]
	stt		$a3,12[$sp]
	stt		$t1,16[$sp]
	stt		$t2,20[$sp]
	stt		$t3,24[$sp]
	stt		$s1,28[$sp]
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
  ; Display PAM
  ldi   $t1,#0        ; $a1 = bit number
.0006:
  ldi   $a0,#32       ; Get PAM bit pair
  mov   $a1,$t1
;  csrrw	$t0,#CSR_RSSTACK,$x0
;  stt		$t0,$10000
  ecall
;  csrrw	$t0,#CSR_RSSTACK,$x0
;  stt		$t0,$10004
  add   $a0,$a1,#'0'
  call  Putch
  add   $t1,$t1,#1
  slt   $a0,$t1,#MEMSZ
  bnez  $a0,.0006

	ldi		$a0,#msgReadyQueue
	call	PutString
	ldi		$s2,#0
;	csrrc	$s1,#CSR_PMSTACK,#1
.0002:
;	call	SerialPeekCharDirect
;	xor		$v0,$v0,#CTRLC
;	beqz	$v0,.brk
	ldi		$a0,#CR
	call	Putch
	ldi		$a0,#'Q'
	call	Putch
	;srl		$a0,$t1,#1
	mov   $a0,$s2
	call	PutHexNybble
	ldi		$a0,#':'
	call	Putch
	sll		$t1,$s2,#2
	ldt		$s3,HEADRDY[$t1]
	mov		$s4,$s3							; record head of list
.0007:
	beqz	$s3,.0008
	srl		$a0,$s3,#LOG_PGSZ
	call	PutHexHalf
	ldi		$a0,#CR
	call	Putch
	ldt		$s3,TCBNext[$s3]
	beqz	$s3,.0008
	bne		$s3,$s4,.0007
.0008:
	add		$s2,$s2,#1
	ldi		$t1,#5
	blt		$s2,$t1,.0002
.0005:
;	bra   .0001
;	sll		$a3,$a3,#LOG_TCBSZ
;	ldw		$a0,TCBNext[$a3]
;	call	PutHexHalf
;	ldi		$a0,#' '
;	call	Putch
;	ldw		$a0,TCBPrev[$a3]
;	call	PutHexHalf
.brk:
	ldi		$a0,#msgTaskInfo
	call	PutString
  ldi   $s0,#$1000
.0004:
  ldt   $a0,[$s0]
  xor   $a0,$a0,#TCB_MAGIC
  bnez  $a0,.nxtT
;  ldi   $t2,#1
;  sll   $t2,$t2,$t0
;  ldt   $a0,TID_POOL
;  and   $t2,$t2,$a0
;  beqz  $t2,.nxtT
  mov   $t2,$s0
  mov		$a0,$s0
  call  PutHexWord
  ldi   $a0,' '
  call  Putch
  ldwu  $a0,TCBtid[$t2]
  call  PutHexHalf
  ldi   $a0,' '
  call  Putch
  ldbu  $a0,TCBPriority[$t2]
  call  PutHexByte
  ldi   $a0,' '
  call  Putch
  ldbu  $a0,TCBStatus[$t2]
  call  PutHexByte
  ldi   $a0,' '
  call  Putch
  ldt   $a0,TCBTimeout[$t2]
  call  PutHexWord
  ldi   $a0,' '
  call  Putch
  ldt   $a0,TCBxSP[$t2]
  call  PutHexWord
	ldi		$a0,#CR
	call	Putch
.nxtT:
  add   $s0,$s0,#$400
  slt   $t1,$s0,#$7D000
  bnez  $t1,.0004
;	csrrw	$x0,#CSR_PMSTACK,$s1
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	ldt		$a2,8[$sp]
	ldt		$a3,12[$sp]
	ldt		$t1,16[$sp]
	ldt		$t2,20[$sp]
	ldt		$t3,24[$sp]
	ldt		$s1,28[$sp]
	add		$sp,$sp,#32
	ret

	align	16
DumpTimeoutList:
	sub		$sp,$sp,#32
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	stt		$a2,8[$sp]
	stt		$a3,12[$sp]
	stt		$t1,16[$sp]
	stt		$t2,20[$sp]
	stt		$t3,24[$sp]
	stt		$s1,28[$sp]
	ldi		$a0,#msgTimeoutList
	call	PutString
	ldt		$a2,TimeoutList
.0002:
	call	SerialPeekCharDirect
	xor		$a0,$a0,#CTRLC
	beqz	$a0,.brk
	ldi		$a0,#CR
	call	Putch
	beqz	$a2,.brk
	srl		$a0,$a2,#LOG_PGSZ
	call	PutHexHalf
	ldi		$a0,#'-'
	call	Putch
	ldt		$a0,TCBTimeout[$a2]
	call	PutHexWord
	ldi		$a0,#CR
	call	Putch
	ldt		$a2,TCBNext[$a2]
	bnez	$a2,.0002
.brk:
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	ldt		$a2,8[$sp]
	ldt		$a3,12[$sp]
	ldt		$t1,16[$sp]
	ldt		$t2,20[$sp]
	ldt		$t3,24[$sp]
	ldt		$s1,28[$sp]
	add		$sp,$sp,#32
	ret

msgReadyQueue:
	db	CR,"Ready Queue",CR
	db	"Que: Tid List",CR
	db	"-------------",CR,0
msgTaskInfo:
  db  CR,"Task Info",CR
  db  "TCB Ptr   Tid  Pr St Timeout    SP",CR
  db  0
msgTimeoutList:
	db	CR,"Timeout List",CR
	db	" Tid - Timeout",CR
	db	"--------------",CR,0

	align 4