; ============================================================================
;        __
;   \\__/ o\    (C) 2020-2021  Robert Finch, Waterloo
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

	code
	align	4
;------------------------------------------------------------------------------
; Insert task into ready queue.
; Inserting into the ready queue is done by both OS ecall functions and
; interrupt driven scheduling. It's important to have interrupts disabled
; so that there is no contention for the ready queue.
;
; Parameters:
;		$a0 = tid to insert (TCB pointer)
; Modifies:
;	  $t0,$t1
; Returns:
;		none
;------------------------------------------------------------------------------

InsertIntoReadyQueue:
	ldbu	$t1,TCBStatus[$a0]		; set status to ready
	or		$t1,$t1,#TS_READY
	stb		$t1,TCBStatus[$a0]
	ldb		$t1,TCBPriority[$a0]	; $t1 = priority
	sll		$t1,$t1,#2						; $t1 = index to priority list
	ldt		$t2,TAILRDY[$t1]
	beqz	$t2,.qempty
	stt		$a0,TCBNext[$t2]
	stt		$a0,TAILRDY[$t1]
	stt		$x0,TCBNext[$a0]
	ret
.qempty:
	stt		$a0,HEADRDY[$t1]
	stt		$a0,TAILRDY[$t1]
	stt		$x0,TCBNext[$a0]
	ret


;------------------------------------------------------------------------------
; Removal from the ready queue is easy. Just flag the task status as no longer
; ready or running. The next time it appears in a dequeue the code will ignore
; it and pop the next ready task.
;
; Parameters:
;		$a0 = tid to remove
; Modifies:
;		t0,t1
; Returns:
;		none
;------------------------------------------------------------------------------

RemoveFromReadyQueue:
	ldb		$t1,TCBStatus[$a0]		; set status no longer ready or running
	and		$t1,$t1,#~(TS_READY|TS_RUNNING)
	stb		$t1,TCBStatus[$a0]
	ret

;------------------------------------------------------------------------------
; Parameters:
;		$a0 = task id to insert
;		$a1 = timeout value
; Modifies:
;		t0,t1,t2,t3,t4,t5
;------------------------------------------------------------------------------

InsertIntoTimeoutList:
	ldbu	$t2,TCBStatus[$a0]		; set status to timing out
	or		$t2,$t2,#TS_TIMEOUT
	stb		$t2,TCBStatus[$a0]
	ldt		$t0,TimeoutList
	beqz	$t0,.listEmpty
.loop:
	ldt		$t1,TCBTimeout[$t0]
	sltu	$t2,$a1,$t1
	bnez	$t2,.lessThan
	; Here timeout was >
	sub		$a1,$a1,$t1
	ldt		$t0,TCBNext[$t0]
	bnez	$t0,.loop
	; Add at end
	stt		$a0,TCBNext[$t0]
	stt		$t0,TCBPrev[$a0]
	stt		$x0,TCBNext[$a0]
	stt		$a1,TCBTimeout[$a0]
	ldi		$a0,#E_Ok
	ret
.listEmpty:
	stt		$a1,TCBTimeout[$a0]
	stt		$a0,TimeoutList
	stt		$x0,TCBNext[$a0]
	stt		$x0,TCBPrev[$a0]
	ldi		$a0,#E_Ok
	ret
.lessThan:
	sub		$t1,$t1,$a1
	stt		$t1,TCBTimeout[$t0]
	ldt		$t2,TCBPrev[$t0]
	stt		$t0,TCBNext[$a0]
	stt		$a0,TCBPrev[$t0]
	stt		$t2,TCBPrev[$a0]
	beqz	$t2,.atHead
	stt		$a0,TCBNext[$t2]
	ldi		$a0,#E_Ok
	ret
.atHead:
	stt		$a0,TimeoutList
	ldi		$a0,#E_Ok
	ret

;------------------------------------------------------------------------------
; Remove a task from the timeout list.
; Called when a mailbox is freed and a task is waiting at the
; mailbox.
;
; Parameters:
;		$a0 = task id to remove
; Modifies:
;		none
; Returns:
;		none
;------------------------------------------------------------------------------

RemoveFromTimeoutList:
	ldt		$t0,TCBPrev[$a0]
	beqz	$t0,.atHead
	ldt		$t1,TCBNext[$a0]
	beqz	$t1,.atTail2
	ldt		$t3,TCBTimeout[$t1]
	ldt		$t4,TCBTimeout[$a0]
	sub		$t3,$t3,$t4
	stt		$t3,TCBTimeout[$t1]
	stt		$t1,TCBNext[$t0]	; this->prev->next = this->next
	ldt		$t2,TCBNext[$a0]
	beqz	$t2,.atTail
	stt		$t0,TCBPrev[$t2]	; this->next->prev = this->prev
.atTail:
	stt		$x0,TCBTimeout[$a0]
	ret
.atHead:
	ldt		$t1,TimeoutList
	bne		$t1,$t0,.notAtHead
	ldt		$t1,TCBNext[$a0]
	beqz	$t1,.atTail
	ldt		$t3,TCBTimeout[$t1]
	ldt		$t4,TCBTimeout[$a0]
	sub		$t3,$t3,$t4
	stt		$t3,TCBTimeout[$t1]
	stt		$t1,TimeoutList
.notAtHead:
	stt		$x0,TCBTimeout[$a0]
	ret
.atTail2:
	stt		$x0,TCBNext[$t0]
	stt		$x0,TCBTimeout[$a0]
	ret

;------------------------------------------------------------------------------
; Diagnostics
;------------------------------------------------------------------------------

DumpReadyQueue:
	sub		$sp,$sp,#32
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	stt		$a2,8[$sp]
	stt		$a3,12[$sp]
	stt		$t1,16[$sp]
	stt		$t2,20[$sp]
	stt		$t3,24[$sp]
	stt		$s1,28[$sp]
  ldi   $a0,#CR
  call  Putch
  ldi   $a0,#LF
  call  Putch
  ; Display PAM
  ldi   $t1,#0        ; $a1 = bit number
.0006:
  ldi   $a0,#32       ; Get PAM bit pair
  mov   $a1,$t1
  ecall
  add   $a0,$a1,#'0'
  call  Putch
  add   $t1,$t1,#1
  slt   $a0,$t1,#MEMSZ
  bnez  $a0,.0006

	ldi		$a0,#msgReadyQueue
	call	PutString
	ldi		$t1,#0
	csrrc	$s1,#$300,#1
.0002:
;	call	SerialPeekCharDirect
;	xor		$v0,$v0,#CTRLC
;	beqz	$v0,.brk
	ldi		$a0,#CR
	call	Putch
	ldi		$a0,#'Q'
	call	Putch
	;srl		$a0,$t1,#1
	mov   $a0,$t1
	call	PutHexNybble
	ldi		$a0,#':'
	call	Putch
	popq  $a2,$t1         ; get number of queue entries
	srl   $t2,$a2,#16
	and   $t2,$t2,#63
	ldi		$a0,#'['
	call	Putch
	mov		$a0,$t2
	call	PutHexByte
	ldi		$a0,#']'
	call	Putch
	ldi		$a0,#' '
	call	Putch
	and   $a2,$a2,#$1FF
	pushq $a2,$t1         ; put the entry back on the queue
.0003:
	popq  $a2,$t1
	bltz  $a2,.nxt        ; if empty get next
	srl   $a3,$a2,#30     ; extract valid bit
	beqz  $a3,.0005       ; valid entry ? no: get next
	and   $a2,$a2,#$1FF
	pushq $a2,$t1         ; put the entry back on the queue
	mov		$a0,$a2
	call	PutHexHalf
	ldi		$a0,#' '
	call	Putch
.0005:
	sub   $t2,$t2,#1
	bgtz  $t2,.0003
	bra   .0001
;	sll		$a3,$a3,#LOG_TCBSZ
;	ldw		$a0,TCBNext[$a3]
;	call	PutHexHalf
;	ldi		$a0,#' '
;	call	Putch
;	ldw		$a0,TCBPrev[$a3]
;	call	PutHexHalf
.nxt:
	mov		$a0,$a2
	call	PutHexByte
	ldi		$a0,#' '
	call	Putch
	and   $a2,$a2,#$1FF
	pushq $a2,$t1         ; put the entry back on the queue
.0001:
	ldi		$a0,#CR
	call	Putch
;	ldw		$a3,TCBNext[$a3]
;	bne		$a2,$a3,.0001
	add		$t1,$t1,#1
	slt		$t2,$t1,#8
	bnez	$t2,.0002
.brk:
	ldi		$a0,#msgTaskInfo
	call	PutString
  ldi   $t0,#$4000
.0004:
  ldt   $a0,[$t0]
  xor   $a0,$a0,#TCB_MAGIC
  bnez  $a0,.nxtT
;  ldi   $t2,#1
;  sll   $t2,$t2,$t0
;  ldt   $a0,TID_POOL
;  and   $t2,$t2,$a0
;  beqz  $t2,.nxtT
  mov   $t2,$a0
  srl   $t0,$t0,#2
  call  PutHexWord
  ldi   $a0,' '
  call  Putch
  ldwu  $a0,TCBtid[$t2]
  call  PutHexHalf
  ldi   $a0,' '
  call  Putch
  ldbu  $a0,TCBPriority[$t2]
  call  PutHexByte
  ldi   $a0,' '
  call  Putch
  ldbu  $a0,TCBStatus[$t2]
  call  PutHexByte
  ldi   $a0,' '
  call  Putch
  ldt   $a0,TCBTimeout[$t2]
  call  PutHexWord
  ldi   $a0,' '
  call  Putch
  ldt   $a0,TCBxSP[$t2]
  call  PutHexWord
	ldi		$a0,#CR
	call	Putch
.nxtT:
  add   $t0,$t0,#$400
  slt   $t1,$t0,#$80000
  bnez  $t1,.0004
	csrrw	$x0,#$300,$s1
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	ldt		$a2,8[$sp]
	ldt		$a3,12[$sp]
	ldt		$t1,16[$sp]
	ldt		$t2,20[$sp]
	ldt		$t3,24[$sp]
	ldt		$s1,28[$sp]
	add		$sp,$sp,#32
	ret

DumpTimeoutList:
	sub		$sp,$sp,#32
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	stt		$a2,8[$sp]
	stt		$a3,12[$sp]
	stt		$t1,16[$sp]
	stt		$t2,20[$sp]
	stt		$t3,24[$sp]
	stt		$s1,28[$sp]
	ldi		$a0,#msgTimeoutList
	call	PutString
	ldi		$t1,#0
	csrrc	$s1,#$300,#1
	ldi		$a3,#0
.0002:
	call	SerialPeekCharDirect
	xor		$a0,$a0,#CTRLC
	beqz	$a0,.brk
	ldi		$a0,#CR
	call	Putch
;	ldw		$a2,TimeoutList
;	bltz	$a2,.brk
;	mov		$a3,$a2
;.0001:
	mov		$a0,$a3
	call	PutHexHalf
	ldi		$a0,#'-'
	call	Putch
	getto	$a0,$t1
;	sll		$a3,$a3,#LOG_TCBSZ
;	ldt		$a0,TCBTimeout[$a3]
	call	PutHexWord
;	ldi		$a0,#CR
;	call	Putch
	add		$a3,$a3,#1
	and		$a3,$a3,#15
	bgt		$a3,$x0,.0002
;	ldw		$a3,TCBNext[$a3]
;	bge		$a3,$x0,.0001
.brk:
	csrrw	$x0,#$300,$s1
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	ldt		$a2,8[$sp]
	ldt		$a3,12[$sp]
	ldt		$t1,16[$sp]
	ldt		$t2,20[$sp]
	ldt		$t3,24[$sp]
	ldt		$s1,28[$sp]
	add		$sp,$sp,#32
	ret

msgReadyQueue:
	db	CR,"Ready Queue",CR
	db	"Que: Tid List",CR
	db	"-------------",CR,0
msgTaskInfo:
  db  CR,"Task Info",CR
  db  "TCB Ptr   Tid  Pr St Timeout    SP",CR
  db  0
msgTimeoutList:
	db	CR,"Timeout List",CR
	db	" Tid - Timeout",CR
	db	"--------------",CR,0

	align 4