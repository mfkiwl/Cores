Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 1
bootrom.asm

                                             ; N4V68kSys bootrom - (C) 2017 Robert Finch, Waterloo
                                             ;
                                             ; This file is part of N4V68kSys
                                             ;
                                             ; how to build:
                                             ; 1. assemble using "asm68 bootrom.asm /G00 /olyebvm"
                                             ; 2. copy bootrom.vh to the correct directory if not already there
                                             ;
                                             ;------------------------------------------------------------------------------
                                             ;
                                             ; system memory map
                                             ;
                                             ;
                                             ; 00000000 +----------------+
                                             ;          | startup sp,pc  | 8 B
                                             ; 00000008 +----------------+
                                             ;          |                |
                                             ;          |                |
                                             ;          |                |
                                             ;          :  dram memory   : 512 MB
                                             ;          |                |
                                             ;          |                |
                                             ;          |                |
                                             ; 20000000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FF800000 +----------------+
                                             ;          |                |
                                             ;          : display buffer : 1.0 MB
                                             ;          |                |
                                             ; FF900000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFD00000 +----------------+
                                             ;          |                |
                                             ;          :    I/O area    : 1.0 M
                                             ;          |                |
                                             ; FFE00000 +----------------+
                                             ;          |   VDG regs     |
                                             ; FFE01000 +----------------+
                                             ;          |                |
                                             ;          :     unused     :
                                             ;          |                |
                                             ; FFFC0000 +----------------+
                                             ;          |                |
                                             ;          :    boot rom    :
                                             ;          |                |
                                             ; FFFFFFFF +----------------+
                                             ;
                                             ;
                                             RGBMASK		EQU		%0111111111111111
                                             RED			EQU		%0111110000000000
                                             DARK_BLUE	EQU		%0000000000001111
                                             BLACK		EQU		%0000000000000000
                                             WHITE		EQU		%0111111111111111
                                             
                                             CTRLC	EQU		$03
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 2
bootrom.asm
                                             CTRLH	EQU		$08
                                             CTRLX	EQU		$18
                                             LF		EQU		$0A
                                             CR		EQU		$0D
                                             
                                             SC_F12  EQU    $07
                                             SC_C    EQU    $21
                                             SC_T    EQU    $2C
                                             SC_Z    EQU    $1A
                                             SC_KEYUP	EQU		$F0
                                             SC_EXTEND   EQU		$E0
                                             SC_CTRL		EQU		$14
                                             SC_RSHIFT	EQU		$59
                                             SC_NUMLOCK	EQU		$77
                                             SC_SCROLLLOCK	EQU	$7E
                                             SC_CAPSLOCK		EQU	$58
                                             SC_ALT		EQU		$11
                                             SC_LSHIFT	EQU		$12
                                             SC_DEL		EQU		$71		; extend
                                             SC_LCTRL	EQU		$58
                                             SC_TAB      EQU		$0D
                                             
                                             TEXTCOLS	EQU	50
                                             TEXTROWS	EQU	37
                                             BMP_WIDTH	EQU	400
                                             BMP_HEIGHT	EQU	300
                                             
                                             VDGBUF		EQU	$FF800000
                                             VDGREG		EQU	$FFE00000
                                             VDG_CURX	EQU	$0440
                                             VDG_CURY	EQU	$0442
                                             VDG_CURSZ	EQU	$0444
                                             VDG_CURFLSH	EQU	$0446
                                             VDG_CUR0X	EQU	$0204
                                             VDG_CUR0Y	EQU	$0206
                                             VDG_CURCLR0	EQU	$0448
                                             VDG_CURCLR1	EQU	$044A
                                             VDG_CURCLR2	EQU	$044C
                                             VDG_CURCLR3	EQU	$044E
                                             VDG_CURIMG	EQU	$0460
                                             I2C			EQU	$FFDC0E00
                                             I2C2		EQU	$FFDC0E10
                                             VirtScreen	EQU	$1FFF0000
                                             KEYBD		EQU	$FFDC0000
                                             leds		EQU	$FFDC0600
                                             rand		EQU	$FFDC0C00
                                             
                                             fgcolor		EQU	$10002
                                             bkcolor		EQU	$10004
                                             fntsz		EQU	$10006
                                             memend		EQU	$10008
                                             CursorRow	EQU	$10418
                                             CursorCol	EQU $10419
                                             TextRows	EQU	$1041A
                                             TextCols	EQU	$1041B
                                             TextCurpos	EQU	$1041C
                                             TextScr		EQU	$10420
                                             KeybdEcho		EQU	$10424
                                             KeybdWaitFlag	EQU	$10425
                                             _KeyState1		EQU	$10426
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 3
bootrom.asm
                                             _KeyState2		EQU	$10427
                                             KeybdLEDs		EQU	$10428
                                             gfx_control_reg_mem		EQU	$1042C
                                             milliseconds	EQU	$10430
                                             systick			EQU	$10434
                                             S19StartAddress	EQU	$10438
                                             
                                             ball_dx			EQU	$10500
                                             ball_dy			EQU	$10600
                                             
                                             GFX_CONTROL			EQU		$00
                                             GFX_STATUS			EQU		$04
                                             GFX_TARGET_BASE		EQU		$10
                                             GFX_TARGET_SIZE_X	EQU		$14
                                             GFX_TARGET_SIZE_Y	EQU		$18
                                             GFX_DEST_PIXEL_X	EQU		$38
                                             GFX_DEST_PIXEL_Y	EQU		$3C
                                             GFX_DEST_PIXEL_Z	EQU		$40
                                             GFX_COLOR0			EQU		$84
                                             
                                             GFX_ACTIVE_POINT0	EQU		0
                                             GFX_ACTIVE_POINT1	EQU		$10000
                                             GFX_LINE			EQU		$200
                                             
                                             reg_d0			EQU	$10500
                                             reg_d1			EQU	$10504
                                             reg_d2			EQU	$10508
                                             reg_d3			EQU	$1050C
                                             reg_d4			EQU $10510
                                             reg_d5			EQU $10514
                                             reg_d6			EQU	$10518
                                             reg_d7			EQU	$1051C
                                             reg_a0			EQU $10520
                                             reg_a1			EQU	$10524
                                             reg_a2			EQU	$10528
                                             reg_a3			EQU $1052C
                                             reg_a4			EQU $10530
                                             reg_a5			EQU $10534
                                             reg_a6			EQU $10538
                                             reg_ssp			EQU	$1053C
                                             reg_usp			EQU	$10540
                                             reg_pc			EQU $10544
                                             reg_sr			EQU	$10548
                                             
                                             RTCBuf			EQU	$10600
                                             RTFBufEnd		EQU	$10660
                                             CmdBuf			EQU	$10800
                                             CmdBufEnd		EQU	$10850
                                             
                                             MACRO mGetRand abc
                                             		clr.w	$0C04(a6)		; gen next number
                                             		move.l	$0C00(a6),abc
                                             ENDM
                                             
                                             MACRO mGrCmd val,cmdno
                                             		move.l	val,$440(a5)
                                             		move.w	#cmdno,$446(a5)
                                             		clr.b	$448(a5)
                                             ENDM
                                             
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 4
bootrom.asm
                                             	code
                                             	org		$FFFC0000
    182 FFFC0000 600E                        	bra.s	Start
    183 FFFC0002 FF FF                       	align	4
                                             
                                             ;------------------------------------------------------------------------------
                                             
                                             ;	dc.l	$FF401000	; initial SSP
    188 FFFC0004 FFFC0010                    	dc.l	Start		; initial PC
                                             	
                                             ;------------------------------------------------------------------------------
    191 FFFC0008                             fpga_version:
    192 FFFC0008 41 41 30 30 30 30 30 30     	dc.b	"AA000000"	; FPGA core version - 8 ASCII characters
                                             
                                             
                                             ;------------------------------------------------------------------------------
    196 FFFC0010                             	Start:
                                             ;------------------------------------------------------------------------------
    198 FFFC0010 33FC A1A1 FFDC 0600         		move.w	#$A1A1,leds		; diagnostics
    199 FFFC0018 2E7C FF40 1000              		move.l	#$FF401000,sp	; set stack pointer
    200 FFFC001E 003C 0080                   		ori.b	#$80,ccr		; select big endian mode for lword data access
                                             
                                             		; SIM croaked because the upper half of D1 was undefined. This caused
                                             		; problems with a dbra instruction. So the contents of all the registers
                                             		; are defined at startup. This is only needed for SIM.
    205 FFFC0022 7000                        		moveq	#0,D0
    206 FFFC0024 7200                        		moveq	#0,D1				; for SIM
    207 FFFC0026 7400                        		moveq	#0,D2
    208 FFFC0028 7600                        		moveq	#0,D3
    209 FFFC002A 7800                        		moveq	#0,D4
    210 FFFC002C 7A00                        		moveq	#0,D5
    211 FFFC002E 7C00                        		moveq	#0,D6
    212 FFFC0030 7E00                        		moveq	#0,D7
    213 FFFC0032 4288                        		clr.l	A0
    214 FFFC0034 4289                        		clr.l	A1
    215 FFFC0036 428A                        		clr.l	A2
    216 FFFC0038 428B                        		clr.l	A3
    217 FFFC003A 428C                        		clr.l	A4
    218 FFFC003C 428D                        		clr.l	A5
    219 FFFC003E 428E                        		clr.l	A6
                                             ;		move.l	A7,usp
                                             
                                             		; setup vector table
                                             		;
    224 FFFC0040 023C 007F                   		andi.b	#$7F,ccr
                                             ;		lea		BusError,a0
                                             ;		move.l	a0,0x008		; set bus error vector
    227 FFFC0044 41F9 FFFC 013C              		lea		IllegalInstruction,a0
    228 FFFC004A 21C8 0010                   		move.l	a0,0x010
    229 FFFC004E 41F9 FFFC 0122              		lea		Pulse1000,a0
    230 FFFC0054 21C8 0078                   		move.l	a0,0x078		; set autovector 6
                                             ;		lea		KeybdNMI,a0
                                             ;		move.l	a0,0x07C		; set autovector 7
    233 FFFC0058 41F9 FFFC 015E              		lea		TRAP15,a0
    234 FFFC005E 21C8 00BC                   		move.l	a0,188			; set trap 15 vector
    235 FFFC0062 003C 0080                   		ori.b	#$80,ccr
                                             
    237 FFFC0066 6100 0BFE                   		bsr		_KeybdInit
                                             ;		bsr		mmu_init
    239 FFFC006A 6100 1DAC                   		bsr		i2c_setup
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 5
bootrom.asm
                                             ;		bsr		rtc_read
    241 FFFC006E 33FC A2A2 FFDC 0600         		move.w	#$A2A2,leds		; diagnostics
                                             
    243 FFFC0076 4239 0001 0419              		clr.b	CursorCol
    244 FFFC007C 4239 0001 0418              		clr.b	CursorRow
    245 FFFC0082 4279 0001 041C              		clr.w	TextCurpos
    246 FFFC0088 23FC 0002 0000 0001 0420    		move.l	#$00020000,TextScr		; set virtual screen location
                                             
                                             
    249 FFFC0092 4DF9 FFDC 0000              		lea	$FFDC0000,A6	; I/O base
                                             
                                             		; Initialize random number generator
                                             
    253 FFFC0098 426E 0C06                   		clr.w	$0C06(a6)				; select stream #0
    254 FFFC009C 2D7C 8888 8888 0C08         		move.l	#$88888888,$0C08(a6)	; set initial m_z
    255 FFFC00A4 2D7C 0123 4567 0C0C         		move.l	#$01234567,$0C0C(a6)	; set initial m_w
                                             
    257 FFFC00AC 6100 0460                   		bsr		Set400x300
                                             ;		bsr		Set800x600
    259 FFFC00B0 6100 0598                   		bsr		ColorBandMemory
    260 FFFC00B4 6100 052C                   		bsr		BootSetZBuffer
    261 FFFC00B8 6100 07BA                   		bsr		InitCursorColorPalette
                                             ;		bsr		SetCursorColor
                                             ;		bsr		SetCursorImage
    264 FFFC00BC 6100 07EC                   		bsr		SetCursorImage64
    265 FFFC00C0 6100 070E                   		bsr		EnableCursor
                                             
    267 FFFC00C4 6100 0546                   		bsr		BootClearScreen		
    268 FFFC00C8 33FC A2A2 FFDC 0600         		move.w	#$A2A2,leds			; diagnostics
                                             		
                                             		; turn on audio test mode
    271 FFFC00D0 4DF9 FFDC 0000              		lea		$FFDC0000,A6		; set I/O base
    272 FFFC00D6 3D7C FFFF 0700              		move.w	#$FFFF,$0700(a6)	; turn on audio clocks
    273 FFFC00DC 2A7C FFE0 0000              		movea.l	#VDGREG,a5
    274 FFFC00E2 3B7C 4000 0650              		move.w	#%0100000000000000,$650(a5)
                                             
                                             ;		bsr		DrawLines
                                             ;		bsr		TestBlitter
                                             
    279 FFFC00E8 6100 0598                   		bsr		BootCopyFont
    280 FFFC00EC 33FC A3A3 FFDC 0600         		move.w	#$A3A3,leds			; diagnostics
                                             
    282 FFFC00F4 33FC 7FFF 0001 0002         		move.w	#WHITE,fgcolor		; set text colors
    283 FFFC00FC 33FC 000F 0001 0004         		move.w	#DARK_BLUE,bkcolor
                                             
                                             		; Write startup message to screen
                                             
    287 FFFC0104 43F9 FFFC 238C              		lea		msg_start,a1
    288 FFFC010A 6100 032E                   		bsr		DisplayString
    289 FFFC010E 33FC A4A4 FFDC 0600         		move.w	#$A4A4,leds			; diagnostics
                                             
    291 FFFC0116 47F9 FFFC 0120              		lea		j1,a3
    292 FFFC011C 6000 1206                   		bra		DisplayHelp
    293 FFFC0120                             j1:
    294 FFFC0120 60FE                        		bra		j1
                                             
                                             ;------------------------------------------------------------------------------
                                             ; 1000 Hz interrupt
                                             ;------------------------------------------------------------------------------
                                             ;
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 6
bootrom.asm
    300 FFFC0122                             Pulse1000:
    301 FFFC0122 52B9 0001 0430              		add.l	#1,milliseconds
    302 FFFC0128 5279 0001 0434              		add.w	#1,systick
    303 FFFC012E 0279 001F 0001 0434         		and.w	#$1F,systick
    304 FFFC0136 6702                        		beq.s	Pulse31
    305 FFFC0138 4E73                        		rte
    306 FFFC013A                             Pulse31:
    307 FFFC013A 4E73                        		rte
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             
    312 FFFC013C                             IllegalInstruction:
    313 FFFC013C 43F9 FFFC 014A              		lea		MSG_ILLEGAL_INSN,a1
    314 FFFC0142 4EB9 FFFC 043A              		jsr		DisplayString
    315 FFFC0148 4E73                        		rte
                                             
    317 FFFC014A                             MSG_ILLEGAL_INSN:
    318 FFFC014A 49 6C 6C 65 67 61 6C 20     		dc.b	"Illegal instruction",0
    319 FFFC0152 69 6E 73 74 72 75 63 74     
    320 FFFC015A 69 6F 6E 00                 
                                             
                                             		align	2
                                             
                                             ;------------------------------------------------------------------------------
                                             ; TRAP #15 handler
                                             ;------------------------------------------------------------------------------
                                             ;
    328 FFFC015E                             TRAP15:
    329 FFFC015E 48E7 8080                   		movem.l	d0/a0,-(a7)
    330 FFFC0162 41F9 FFFC 0178              		lea		T15DispatchTable,a0
    331 FFFC0168 E580                        		asl.l	#2,d0
    332 FFFC016A 2070 0000                   		move.l	(a0,d0.w),a0
    333 FFFC016E 4E90                        		jsr		(a0)
    334 FFFC0170 4CDF 0101                   		movem.l	(a7)+,d0/a0
    335 FFFC0174 4E73                        		rte
                                             
    337 FFFC0176 FF FF                       		align	4
    338 FFFC0178                             T15DispatchTable:
    339 FFFC0178 FFFC0218                    dc.l	StubRout
    340 FFFC017C FFFC0218                    dc.l	StubRout
    341 FFFC0180 FFFC0218                    dc.l	StubRout
    342 FFFC0184 FFFC0218                    dc.l	StubRout
    343 FFFC0188 FFFC0218                    dc.l	StubRout
    344 FFFC018C FFFC0CEC                    dc.l	GetKey
    345 FFFC0190 FFFC0268                    dc.l	DisplayChar
    346 FFFC0194 FFFC0CDA                    dc.l	CheckForKey
    347 FFFC0198 FFFC0218                    dc.l	StubRout
    348 FFFC019C FFFC0218                    dc.l	StubRout
    349 FFFC01A0 FFFC0218                    dc.l	StubRout
    350 FFFC01A4 FFFC0484                    dc.l	Cursor1
    351 FFFC01A8 FFFC021A                    dc.l	SetKeyboardEcho
    352 FFFC01AC FFFC0454                    dc.l	DisplayStringCRLF
    353 FFFC01B0 FFFC043A                    dc.l	DisplayString
    354 FFFC01B4 FFFC0218                    dc.l	StubRout
    355 FFFC01B8 FFFC0218                    dc.l	StubRout
    356 FFFC01BC FFFC0218                    dc.l	StubRout
    357 FFFC01C0 FFFC0218                    dc.l	StubRout
    358 FFFC01C4 FFFC0218                    dc.l	StubRout
    359 FFFC01C8 FFFC0218                    dc.l	StubRout
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 7
bootrom.asm
    360 FFFC01CC FFFC0218                    dc.l	StubRout
    361 FFFC01D0 FFFC0218                    dc.l	StubRout
    362 FFFC01D4 FFFC0218                    dc.l	StubRout
    363 FFFC01D8 FFFC0218                    dc.l	StubRout
    364 FFFC01DC FFFC0218                    dc.l	StubRout
    365 FFFC01E0 FFFC0218                    dc.l	StubRout
    366 FFFC01E4 FFFC0218                    dc.l	StubRout
    367 FFFC01E8 FFFC0218                    dc.l	StubRout
    368 FFFC01EC FFFC0218                    dc.l	StubRout
    369 FFFC01F0 FFFC0218                    dc.l	StubRout
    370 FFFC01F4 FFFC0218                    dc.l	StubRout
    371 FFFC01F8 FFFC0218                    dc.l	StubRout
    372 FFFC01FC FFFC0218                    dc.l	StubRout
    373 FFFC0200 FFFC0218                    dc.l	StubRout
    374 FFFC0204 FFFC0218                    dc.l	StubRout
    375 FFFC0208 FFFC0218                    dc.l	StubRout
    376 FFFC020C FFFC0218                    dc.l	StubRout
    377 FFFC0210 FFFC0218                    dc.l	StubRout
    378 FFFC0214 FFFC0218                    dc.l	StubRout
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Stub routine for unimplemented functionality.
                                             ;------------------------------------------------------------------------------
                                             ;
    384 FFFC0218                             StubRout:
    385 FFFC0218 4E75                        	rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; d1.b 0=echo off, non-zero = echo on
                                             ;------------------------------------------------------------------------------
    390 FFFC021A                             SetKeyboardEcho:
    391 FFFC021A 13C1 0001 0424              	move.b	d1,KeybdEcho
    392 FFFC0220 4E75                        	rts
                                             
                                             
    395 FFFC0222                             CRLF:
    396 FFFC0222 2F01                        		move.l	d1,-(a7)
    397 FFFC0224 123C 000D                   		move.b	#'\r',d1
    398 FFFC0228 6100 003E                   		bsr		DisplayChar
    399 FFFC022C 123C 000A                   		move.b	#'\n',d1
    400 FFFC0230 6100 0036                   		bsr		DisplayChar
    401 FFFC0234 221F                        		move.l	(a7)+,d1
    402 FFFC0236 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Calculate screen memory location from CursorRow,CursorCol.
                                             ; Destroys d0,d2,a0
                                             ;------------------------------------------------------------------------------
                                             ;
    409 FFFC0238                             CalcScreenLoc:
    410 FFFC0238 1039 0001 0418              		move.b	CursorRow,d0		; compute screen location
    411 FFFC023E 0240 007F                   		andi.w	#0x7f,d0
    412 FFFC0242 1439 0001 041B              		move.b	TextCols,d2
    413 FFFC0248 4882                        		ext.w	d2
    414 FFFC024A C0C2                        		mulu.w	d2,d0
    415 FFFC024C 1439 0001 0419              		move.b	CursorCol,d2
    416 FFFC0252 0242 00FF                   		andi.w	#0xff,d2
    417 FFFC0256 D042                        		add.w	d2,d0
    418 FFFC0258 33C0 0001 041C              		move.w	d0,TextCurpos
    419 FFFC025E D0B9 0001 0420              		add.l	TextScr,d0
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 8
bootrom.asm
    420 FFFC0264 2040                        		move.l	d0,a0				; a0 = screen location
    421 FFFC0266 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a character on the screen
                                             ; d1.b = char to display
                                             ;------------------------------------------------------------------------------
                                             ;
    428 FFFC0268                             DisplayChar:
    429 FFFC0268 48E7 3000                   		movem.l	d2/d3,-(a7)
    430 FFFC026C 0C01 000D                   		cmpi.b	#'\r',d1			; carriage return ?
    431 FFFC0270 660C                        		bne.s	dccr
    432 FFFC0272 4239 0001 0419              		clr.b	CursorCol			; just set cursor column to zero on a CR
    433 FFFC0278 4CDF 000C                   		movem.l	(a7)+,d2/d3
    434 FFFC027C 4E75                        		rts
    435 FFFC027E                             dccr:
    436 FFFC027E 0C01 0091                   		cmpi.b	#0x91,d1			; cursor right ?
    437 FFFC0282 6620                        		bne.s   dcx6
    438 FFFC0284 1439 0001 041B              		move.b	TextCols,d2
    439 FFFC028A 5302                        		sub.b	#1,d2
    440 FFFC028C 9439 0001 0419              		sub.b	CursorCol,d2
    441 FFFC0292 670A                        		beq.s	dcx7
    442 FFFC0294 5239 0001 0419              		addi.b	#1,CursorCol
    443 FFFC029A                             dcx14:
    444 FFFC029A 6100 056C                   		bsr		SyncCursor
    445 FFFC029E                             dcx7:
    446 FFFC029E 4CDF 000C                   		movem.l	(a7)+,d2/d3
    447 FFFC02A2 4E75                        		rts
    448 FFFC02A4                             dcx6:
    449 FFFC02A4 0C01 0090                   		cmpi.b	#0x90,d1			; cursor up ?
    450 FFFC02A8 6612                        		bne.s	dcx8
    451 FFFC02AA 0C39 0000 0001 0418         		cmpi.b	#0,CursorRow
    452 FFFC02B2 67EA                        		beq.s	dcx7
    453 FFFC02B4 5339 0001 0418              		subi.b	#1,CursorRow
    454 FFFC02BA 60DE                        		bra.s	dcx14
    455 FFFC02BC                             dcx8:
    456 FFFC02BC 0C01 0093                   		cmpi.b	#0x93,d1			; cursor left?
    457 FFFC02C0 6612                        		bne.s	dcx9
    458 FFFC02C2 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    459 FFFC02CA 67D2                        		beq.s	dcx7
    460 FFFC02CC 5339 0001 0419              		subi.b	#1,CursorCol
    461 FFFC02D2 60C6                        		bra.s	dcx14
    462 FFFC02D4                             dcx9:
    463 FFFC02D4 0C01 0092                   		cmpi.b	#0x92,d1			; cursor down ?
    464 FFFC02D8 6618                        		bne.s	dcx10
    465 FFFC02DA 1439 0001 041A              		move.b	TextRows,d2
    466 FFFC02E0 5302                        		sub.b	#1,d2
    467 FFFC02E2 B439 0001 0418              		cmp.b	CursorRow,d2
    468 FFFC02E8 67B4                        		beq.s	dcx7
    469 FFFC02EA 5239 0001 0418              		addi.b	#1,CursorRow
    470 FFFC02F0 60A8                        		bra.s	dcx14
    471 FFFC02F2                             dcx10:
    472 FFFC02F2 0C01 0094                   		cmpi.b	#0x94,d1			; cursor home ?
    473 FFFC02F6 661A                        		bne.s	dcx11
    474 FFFC02F8 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol
    475 FFFC0300 6708                        		beq.s	dcx12
    476 FFFC0302 4239 0001 0419              		clr.b	CursorCol
    477 FFFC0308 6090                        		bra.s	dcx14
    478 FFFC030A                             dcx12:
    479 FFFC030A 4239 0001 0418              		clr.b	CursorRow
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 9
bootrom.asm
    480 FFFC0310 6088                        		bra.s	dcx14
    481 FFFC0312                             dcx11:
    482 FFFC0312 48E7 E080                   		movem.l	d0/d1/d2/a0,-(a7)
    483 FFFC0316 0C01 0099                   		cmpi.b	#0x99,d1			; delete ?
    484 FFFC031A 6756                        		beq.s	doDelete
    485 FFFC031C 0C01 0008                   		cmpi.b	#CTRLH,d1			; backspace ?
    486 FFFC0320 6740                        		beq.s   doBackspace
    487 FFFC0322 0C01 0018                   		cmpi.b	#CTRLX,d1			; delete line ?
    488 FFFC0326 6700 0096                   		beq.s	doCtrlX
    489 FFFC032A 0C01 000A                   		cmpi.b	#'\n',d1		; linefeed ?
    490 FFFC032E 6720                        		beq.s	dclf
                                             
                                             		; regular char
    493 FFFC0330 6100 FF06                   		bsr		CalcScreenLoc	; a0 = screen location
    494 FFFC0334 1081                        		move.b	d1,(a0)
    495 FFFC0336 1001                        		move.b	d1,d0
    496 FFFC0338 4880                        		ext.w	d0
    497 FFFC033A 6100 040C                   		bsr		DispChar
    498 FFFC033E 6100 00A4                   		bsr		IncCursorPos
    499 FFFC0342 6100 04C4                   		bsr		SyncCursor
    500 FFFC0346 4CDF 0107                   		movem.l	(a7)+,d0/d1/d2/a0
    501 FFFC034A 4CDF 000C                   		movem.l	(a7)+,d2/d3
    502 FFFC034E 4E75                        		rts
    503 FFFC0350                             dclf:
    504 FFFC0350 6100 00B2                   		bsr		IncCursorRow
    505 FFFC0354                             dcx16:
    506 FFFC0354 6100 04B2                   		bsr		SyncCursor
    507 FFFC0358                             dcx4:
    508 FFFC0358 4CDF 0107                   		movem.l	(a7)+,d0/d1/d2/a0		; get back a0
    509 FFFC035C 4CDF 000C                   		movem.l	(a7)+,d2/d3
    510 FFFC0360 4E75                        		rts
                                             
                                             		;---------------------------
                                             		; CTRL-H: backspace
                                             		;---------------------------
    515 FFFC0362                             doBackspace:
    516 FFFC0362 0C39 0000 0001 0419         		cmpi.b	#0,CursorCol		; if already at start of line
    517 FFFC036A 67EC                        		beq.s   dcx4				; nothing to do
    518 FFFC036C 5339 0001 0419              		subi.b	#1,CursorCol		; decrement column
                                             
                                             		;---------------------------
                                             		; Delete key
                                             		;---------------------------
    523 FFFC0372                             doDelete:
    524 FFFC0372 6100 FEC4                   		bsr		CalcScreenLoc		; a0 = screen location
    525 FFFC0376 2F08                        		move.l	a0,-(a7)			; save off screen location
    526 FFFC0378 1039 0001 0419              		move.b	CursorCol,d0
    527 FFFC037E                             .0001:
    528 FFFC037E 10E8 0001                   		move.b	1(a0),(a0)+			; pull remaining characters on line over 1
    529 FFFC0382 5200                        		addi.b	#1,d0
    530 FFFC0384 B039 0001 041B              		cmp.b	TextCols,d0
    531 FFFC038A 65F2                        		blo.s	.0001
    532 FFFC038C 103C 0020                   		move.b	#' ',d0				; terminate line with a space
    533 FFFC0390 1140 FFFF                   		move.b	d0,-1(a0)
                                             		; now re-render the chars to the display
    535 FFFC0394 205F                        		move.l	(a7)+,a0			; get back screen location
    536 FFFC0396 1439 0001 0419              		move.b	CursorCol,d2		; save off cursor column
    537 FFFC039C                             .0002:
    538 FFFC039C 1018                        		move.b	(a0)+,d0			; get a char
    539 FFFC039E 6100 03A8                   		bsr		DispChar			; render to screen
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 10
bootrom.asm
    540 FFFC03A2 5239 0001 0419              		add.b	#1,CursorCol		; increment column
    541 FFFC03A8 1039 0001 0419              		move.b	CursorCol,d0		; check if end of line hit
    542 FFFC03AE 9039 0001 041B              		sub.b	TextCols,d0
    543 FFFC03B4 66E6                        		bne.s	.0002				; no, go back
    544 FFFC03B6 13C2 0001 0419              		move.b	d2,CursorCol		; restore cursor pos
    545 FFFC03BC 6096                        		bra.s	dcx16				; finished
                                             		;---------------------------
                                             		; CTRL-X: erase line
                                             		;---------------------------
    549 FFFC03BE                             doCtrlX:
    550 FFFC03BE 4239 0001 0419              		clr.b	CursorCol			; Reset cursor to start of line
    551 FFFC03C4 1039 0001 041B              		move.b	TextCols,d0			; and display TextCols number of spaces
    552 FFFC03CA 4880                        		ext.w	d0
    553 FFFC03CC 48C0                        		ext.l	d0
    554 FFFC03CE 123C 0020                   		move.b	#' ',d1				; d1 = space char
    555 FFFC03D2                             .0001:
                                             		; DisplayChar is called recursively here
                                             		; It's safe to do because we know it won't recurse again due to the
                                             		; fact we know the character being displayed is a space char
    559 FFFC03D2 6100 FE94                   		bsr		DisplayChar			
    560 FFFC03D6 5380                        		subq	#1,d0
    561 FFFC03D8 66F8                        		bne.s	.0001
    562 FFFC03DA 4239 0001 0419              		clr.b	CursorCol			; now really go back to start of line
    563 FFFC03E0 6000 FF72                   		bra.s	dcx16				; we're done
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Increment the cursor position, scroll the screen if needed.
                                             ;------------------------------------------------------------------------------
                                             ;
    569 FFFC03E4                             IncCursorPos:
    570 FFFC03E4 5279 0001 041C              		addi.w	#1,TextCurpos
    571 FFFC03EA 5239 0001 0419              		addi.b	#1,CursorCol
    572 FFFC03F0 1039 0001 041B              		move.b	TextCols,d0
    573 FFFC03F6 B039 0001 0419              		cmp.b	CursorCol,d0
    574 FFFC03FC 643A                        		bhs.s	icc1
    575 FFFC03FE 4239 0001 0419              		clr.b	CursorCol
    576 FFFC0404                             IncCursorRow:
    577 FFFC0404 5239 0001 0418              		addi.b	#1,CursorRow
    578 FFFC040A 1039 0001 041A              		move.b	TextRows,d0
    579 FFFC0410 B039 0001 0418              		cmp.b	CursorRow,d0
    580 FFFC0416 6220                        		bhi.s	icc1
    581 FFFC0418 1039 0001 041A              		move.b	TextRows,d0
    582 FFFC041E 13C0 0001 0418              		move.b	d0,CursorRow		; in case CursorRow is way over
    583 FFFC0424 5339 0001 0418              		subi.b	#1,CursorRow
    584 FFFC042A 4880                        		ext.w	d0
    585 FFFC042C E340                        		asl.w	#1,d0
    586 FFFC042E 9179 0001 041C              		sub.w	d0,TextCurpos
    587 FFFC0434 6100 1266                   		bsr		ScrollUp
    588 FFFC0438                             icc1:
    589 FFFC0438 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen.
                                             ;------------------------------------------------------------------------------
                                             ;
    595 FFFC043A                             DisplayString:
    596 FFFC043A 48E7 C040                   		movem.l	d0/d1/a1,-(a7)
    597 FFFC043E                             dspj1:
    598 FFFC043E 4281                        		clr.l	d1				; clear upper bits of d1
    599 FFFC0440 1219                        		move.b	(a1)+,d1		; move string char into d1
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 11
bootrom.asm
    600 FFFC0442 0C01 0000                   		cmpi.b	#0,d1			; is it end of string ?
    601 FFFC0446 6706                        		beq.s	dsret			
    602 FFFC0448 6100 FE1E                   		bsr		DisplayChar		; display character
    603 FFFC044C 60F0                        		bra.s	dspj1			; go back for next character
    604 FFFC044E                             dsret:
    605 FFFC044E 4CDF 0203                   		movem.l	(a7)+,d0/d1/a1
    606 FFFC0452 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen followed by carriage return / linefeed.
                                             ;------------------------------------------------------------------------------
                                             ;
    612 FFFC0454                             DisplayStringCRLF:
    613 FFFC0454 6100 FFE4                   		bsr		DisplayString
    614 FFFC0458 6000 FDC8                   		bra		CRLF
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen. Stop at 255 chars, or NULL or D1.W
                                             ;------------------------------------------------------------------------------
                                             ;
    620 FFFC045C                             DisplayString1:
    621 FFFC045C 48E7 C040                   		movem.l	d0/d1/a1,-(a7)
    622 FFFC0460 0241 00FF                   		andi.w	#255,d1			; max 255 chars
    623 FFFC0464 2001                        		move.l	d1,d0
    624 FFFC0466                             dspj11:
    625 FFFC0466 1219                        		move.b	(a1)+,d1		; move string char into d1
    626 FFFC0468 0C01 0000                   		cmpi.b	#0,d1			; is it end of string ?
    627 FFFC046C 6708                        		beq		dsret1			
    628 FFFC046E 6100 FDF8                   		bsr		DisplayChar		; display character
    629 FFFC0472 57C8 FFF2                   		dbeq	d0,dspj11		; go back for next character
    630 FFFC0476                             dsret1:
    631 FFFC0476 4CDF 0203                   		movem.l	(a7)+,d0/d1/a1
    632 FFFC047A 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display a string on the screen. Stop at 255 chars, or NULL or D1.W
                                             ; end string with CR,LF
                                             ;------------------------------------------------------------------------------
                                             ;
    639 FFFC047C                             DisplayString0:
    640 FFFC047C 6100 FFDE                   		bsr		DisplayString1
    641 FFFC0480 6000 FDA0                   		bra		CRLF
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Dispatch cursor functions
                                             ;------------------------------------------------------------------------------
                                             ;
    647 FFFC0484                             Cursor1:
    648 FFFC0484 0C41 00FF                   		cmpi.w	#0x00ff,d1
    649 FFFC0488 670E                        		beq		GetCursorPos
    650 FFFC048A 0C41 FF00                   		cmpi.w	#0xFF00,d1
    651 FFFC048E 6718                        		beq		SetCursorPos
    652 FFFC0490 4EB9 FFFC 15FA              		jsr		ClearScreen
    653 FFFC0496 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get the cursor position.
                                             ; d1.b0 = row
                                             ; d1.b1 = col
                                             ;------------------------------------------------------------------------------
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 12
bootrom.asm
                                             ;
    661 FFFC0498                             GetCursorPos:
    662 FFFC0498 1239 0001 0419              		move.b	CursorCol,d1
    663 FFFC049E E141                        		asl.w	#8,d1
    664 FFFC04A0 1239 0001 0418              		move.b	CursorRow,d1
    665 FFFC04A6 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Set the position of the cursor, update the linear screen pointer.
                                             ; d1.b0 = row
                                             ; d1.b1 = col
                                             ;------------------------------------------------------------------------------
                                             ;
    673 FFFC04A8                             SetCursorPos:
    674 FFFC04A8 48E7 6000                   		movem.l	d1/d2,-(a7)
    675 FFFC04AC 13C1 0001 0418              		move.b	d1,CursorRow
    676 FFFC04B2 E049                        		lsr.w	#8,d1
    677 FFFC04B4 13C1 0001 0419              		move.b	d1,CursorCol
    678 FFFC04BA 1239 0001 0418              		move.b	CursorRow,d1
    679 FFFC04C0 4881                        		ext.w	d1
    680 FFFC04C2 1439 0001 041B              		move.b	TextCols,d2
    681 FFFC04C8 4882                        		ext.w	d2
    682 FFFC04CA C2C2                        		mulu.w	d2,d1
    683 FFFC04CC 1439 0001 0419              		move.b	CursorCol,d2
    684 FFFC04D2 D242                        		add.w	d2,d1
    685 FFFC04D4 33C1 0001 041C              		move.w	d1,TextCurpos
    686 FFFC04DA                             scp1:
    687 FFFC04DA 4CDF 0006                   		movem.l	(a7)+,d1/d2
    688 FFFC04DE 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             
    693 FFFC04E0                             Set320x192:
    694 FFFC04E0 4DF9 FFE0 0000              		lea		VDGREG,a6			; a6 = pointer to register set
    695 FFFC04E6 41F9 FFFC 05C0              		lea		tbl1280x768,a0
    696 FFFC04EC 43EE 07C0                   		lea		$7C0(a6),a1			; a1 points to timing registers
    697 FFFC04F0 3D7C A123 07F2              		move.w	#$A123,$7F2(a6)		; unlock timing regs
    698 FFFC04F6 700E                        		moveq	#14,d0
    699 FFFC04F8                             .0001:
    700 FFFC04F8 32D8                        		move.w	(a0)+,(a1)+
    701 FFFC04FA 51C8 FFFC                   		dbra	d0,.0001
    702 FFFC04FE 3D7C 0000 07F2              		move.w	#$0000,$7F2(a6)		; lock timing regs
    703 FFFC0504 4E75                        		rts
                                             
    705 FFFC0506                             Set320x240:
    706 FFFC0506 2C7C FFE0 0000              		movea.l	#VDGREG,a6			; a6 = pointer to register set
    707 FFFC050C 4E75                        		rts
                                             
    709 FFFC050E                             Set400x300:
    710 FFFC050E 2C7C FFE0 0000              		movea.l	#VDGREG,a6			; a6 = pointer to register set
    711 FFFC0514 3D7C 0001 07F0              		move.w	#1,$7F0(a6)			; 1 = divide by 2 mode
    712 FFFC051A 3D7C 0190 0406              		move.w	#400,$406(a6)		; bitmap width register
    713 FFFC0520 3D7C 012C 040A              		move.w	#300,$40A(a6)		; bitmap height
    714 FFFC0526 41F9 FFFC 059E              		lea		tbl800x600,a0
    715 FFFC052C 43EE 07C0                   		lea		$7C0(a6),a1			; a1 points to timing registers
    716 FFFC0530 3D7C A123 07F2              		move.w	#$A123,$7F2(a6)		; unlock timing regs
    717 FFFC0536 7010                        		moveq	#16,d0
    718 FFFC0538                             .0001:
    719 FFFC0538 32D8                        		move.w	(a0)+,(a1)+
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 13
bootrom.asm
    720 FFFC053A 51C8 FFFC                   		dbra	d0,.0001
    721 FFFC053E 3D7C 0000 07F2              		move.w	#$0000,$7F2(a6)		; lock timing regs
    722 FFFC0544 13FC 0032 0001 041B         		move.b	#50,TextCols
    723 FFFC054C 13FC 0025 0001 041A         		move.b	#37,TextRows
    724 FFFC0554 4E75                        		rts
                                             
    726 FFFC0556                             Set800x600:
    727 FFFC0556 2C7C FFE0 0000              		movea.l	#VDGREG,a6			; a6 = pointer to register set
    728 FFFC055C 3D7C 0000 07F0              		move.w	#0,$7F0(a6)			; 0 = no divide
    729 FFFC0562 3D7C 0320 0406              		move.w	#800,$406(a6)		; bitmap width register
    730 FFFC0568 3D7C 0258 040A              		move.w	#600,$40A(a6)		; bitmap height
    731 FFFC056E 41F9 FFFC 059E              		lea		tbl800x600,a0
    732 FFFC0574 43EE 07C0                   		lea		$7C0(a6),a1			; a1 points to timing registers
    733 FFFC0578 3D7C A123 07F2              		move.w	#$A123,$7F2(a6)		; unlock timing regs
    734 FFFC057E 7010                        		moveq	#16,d0
    735 FFFC0580                             .0001:
    736 FFFC0580 32D8                        		move.w	(a0)+,(a1)+
    737 FFFC0582 51C8 FFFC                   		dbra	d0,.0001
    738 FFFC0586 3D7C 0000 07F2              		move.w	#$0000,$7F2(a6)		; lock timing regs
    739 FFFC058C 13FC 0064 0001 041B         		move.b	#100,TextCols
    740 FFFC0594 13FC 004B 0001 041A         		move.b	#75,TextRows
    741 FFFC059C 4E75                        		rts
                                             
                                             	align	2
                                             ;tbl640x480:
                                             ;	dc.w	800,525
    746 FFFC059E                             tbl800x600:
    747 FFFC059E 0420 0274 0028 00A8         	dc.w	1056,628,40,168,1,5,1056,256,628,28,1055,257,628,28,$EFE,$FE5,0
    748 FFFC05A6 0001 0005 0420 0100         
    749 FFFC05AE 0274 001C 041F 0101         
    750 FFFC05B6 0274 001C 0EFE 0FE5         
    751 FFFC05BE 0000                        
    752 FFFC05C0                             tbl1280x768:
    753 FFFC05C0 0690 031B 0043 00C9         	dc.w	1680,795,67,201,2,5,1680,400,795,27,1680,400,795,27,$EFD,$FD7,0
    754 FFFC05C8 0002 0005 0690 0190         
    755 FFFC05D0 031B 001B 0690 0190         
    756 FFFC05D8 031B 001B 0EFD 0FD7         
    757 FFFC05E0 0000                        
                                             
                                             ;------------------------------------------------------------------------------
                                             ; The z buffer is setup so that display has the lowest priority. This allows
                                             ; sprites to appear in front of graphics. At power on the buffer likely
                                             ; contains all zeros making graphics the highest priority.
                                             ;------------------------------------------------------------------------------
                                             
    765 FFFC05E2                             BootSetZBuffer:
    766 FFFC05E2 2C7C FFE0 0000              		movea.l	#VDGREG,a6			; a6 = pointer to register set
    767 FFFC05E8 207C FF80 0000              		move.l	#VDGBUF,A0			; a0 = pointer to display buffer
    768 FFFC05EE 3D7C 0001 043E              		move.w	#$1,$43E(a6)		; switch to z buffer
    769 FFFC05F4 223C 0000 3A98              		move.l	#BMP_WIDTH*BMP_HEIGHT/8,D1		; number of words to update
    770 FFFC05FA                             .0001:
    771 FFFC05FA 20FC FFFF FFFF              		move.l	#$FFFFFFFF,(a0)+	; set z layer to 3
    772 FFFC0600 5381                        		sub.l	#1,d1
    773 FFFC0602 66F6                        		bne.s	.0001
    774 FFFC0604 3D7C 0000 043E              		move.w	#$0,$43E(a6)		; switch to regular buffer
    775 FFFC060A 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; clear screen	
                                             ;
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 14
bootrom.asm
                                             ; Trashes:
                                             ;	a0,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    784 FFFC060C                             BootClearScreen:
    785 FFFC060C 207C FF80 0000              		move.l	#VDGBUF,A0
    786 FFFC0612 700F                        		moveq	#DARK_BLUE,D0				; dark blue
    787 FFFC0614 223C 0001 D4C0              		move.l	#BMP_WIDTH*BMP_HEIGHT,D1	; number of pixels
    788 FFFC061A                             .loop1:
    789 FFFC061A 30C0                        		move.w	d0,(a0)+					; store it to the screen
    790 FFFC061C 5381                        		subq	#1,d1						; can't use dbra here
    791 FFFC061E 66FA                        		bne.s	.loop1
    792 FFFC0620 4DF9 FFE0 0000              		lea		VDGREG,a6
    793 FFFC0626 3D7C 0001 043E              		move.w	#1,$43E(a6)					; access z buffer
    794 FFFC062C 41F9 FF80 0000              		lea		VDGBUF,a0
    795 FFFC0632 70FF                        		move.l	#$FFFFFFFF,d0				; lowest priority
    796 FFFC0634 223C 0000 1D4C              		move.l	#BMP_WIDTH*BMP_HEIGHT/16,D1	; number of pixels
    797 FFFC063A                             .0002:
    798 FFFC063A 20C0                        		move.l	d0,(a0)+
    799 FFFC063C 5381                        		subq	#1,d1
    800 FFFC063E 66FA                        		bne.s	.0002
    801 FFFC0640 3D7C 0000 043E              		move.w	#0,$43E(a6)					; access normal buffer
    802 FFFC0646 6000 1040                   		bra		ClearVirtScreen				; clear the virtual screen too.
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Copy bands of color to the display controller's memory. These bands should
                                             ; show up if the bitmap address get toasted.
                                             ;------------------------------------------------------------------------------
                                             
    809 FFFC064A                             ColorBandMemory:
    810 FFFC064A 2C7C FFDC 0000              		move.l	#$FFDC0000,a6
    811 FFFC0650 207C FF80 0000              		move.l	#$FF800000,a0
    812 FFFC0656 227C FF90 0000              		move.l	#$FF900000,a1
    813 FFFC065C 7200                        		move.l	#0,d1
    814 FFFC065E 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
    815 FFFC0662 262E 0C00                   		move.l	$0C00(a6),d3		; get random value
    816 FFFC0666                             .0002:
    817 FFFC0666 30C3                        		move.w	d3,(a0)+			; move to z buffer
    818 FFFC0668 2801                        		move.l	d1,d4
    819 FFFC066A 0284 0000 03FF              		and.l	#$03FF,d4
    820 FFFC0670 6608                        		bne.s	.0001
    821 FFFC0672 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
    822 FFFC0676 262E 0C00                   		move.l	$0C00(a6),d3		; get random value
    823 FFFC067A                             .0001:
    824 FFFC067A 5281                        		addq	#1,d1
    825 FFFC067C B1C9                        		cmpa	a1,a0
    826 FFFC067E 65E6                        		blo.s	.0002	
    827 FFFC0680 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; copy font to VDG ram
                                             ;
                                             ; The font address is 1/2 of the memory address that the cpu sees because
                                             ; the AV controller only deals with word accesses.
                                             ;
                                             ; Trashes:
                                             ;	a0,a1,a6,d0,d1
                                             ;------------------------------------------------------------------------------
                                             
    839 FFFC0682                             BootCopyFont:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 15
bootrom.asm
    840 FFFC0682 2C7C FFE0 0000              		movea.l	#VDGREG,a6
    841 FFFC0688 3D7C 0000 043E              		move.w	#0,$43E(a6)			; access normal buffer
                                             		; Setup font table
    843 FFFC068E 2D7C 0005 C000 0410         		move.l	#$5C000,$410(a6)	; set font table address 1/2 B8000
    844 FFFC0696 203C 0005 C004              		move.l	#$5C004,d0			; set bitmap address (directly follows)
    845 FFFC069C 4840                        		swap	d0
    846 FFFC069E 0040 9CE0                   		or.w	#%1001110011100000,d0	; set font fixed, width, height
    847 FFFC06A2 4840                        		swap	d0
    848 FFFC06A4 23C0 FF8B 8000              		move.l	d0,$FF8B8000
    849 FFFC06AA 42B9 FF8B 8004              		clr.l	$FF8B8004			; clear glyph width table address (not used)
    850 FFFC06B0 227C FF8B 8008              		movea.l	#$FF8B8008,a1		; font table address
                                             
    852 FFFC06B6 41F9 FFFC 2446              		lea		font8,a0
    853 FFFC06BC 223C 0000 1000              		move.l	#8*512,d1			; 512 chars * 8 bytes per char
                                             
    855 FFFC06C2 3D7C 0000 0414              		move.w	#0,$414(a6)			; select font id (0)
                                             
    857 FFFC06C8 7000                        		moveq	#0,d0				; zero out high order bits
    858 FFFC06CA                             cpyfnt:
    859 FFFC06CA 1018                        		move.b	(a0)+,d0			; get a byte
    860 FFFC06CC 32C0                        		move.w	d0,(a1)+			; store in font table
    861 FFFC06CE 51C9 FFFA                   		dbra	d1,cpyfnt
    862 FFFC06D2 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	d0.w		character to display
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ;------------------------------------------------------------------------------
                                             
    871 FFFC06D4                             DispCharAt:
    872 FFFC06D4 48E7 6002                   		movem.l	d1/d2/a6,-(a7)
    873 FFFC06D8 2C7C FFE0 0000              		move.l	#VDGREG,a6
    874 FFFC06DE 4840                        		swap	d0						; save off d0 low
    875 FFFC06E0                             .0001:									; wait for character que to empty
    876 FFFC06E0 302E 042C                   		move.w	$42C(a6),d0			; read command queue index into d0
    877 FFFC06E4 B07C 0018                   		cmp.w	#24,d0					; allow up 24 entries to be in progress
    878 FFFC06E8 64F6                        		bhs.s	.0001					; branch if too many chars queued
    879 FFFC06EA 4840                        		swap	d0						; get back d0 low
    880 FFFC06EC 3D79 0001 0002 0442         		move.w	fgcolor,$442(a6)		; set fg color
    881 FFFC06F4 3D7C 000C 0446              		move.w	#12,$446(a6)			; 12 = set pen color
    882 FFFC06FA 422E 0448                   		clr.b	$448(a6)			; queue
    883 FFFC06FE 3D79 0001 0004 0442         		move.w	bkcolor,$442(a6)		; set bk color
    884 FFFC0706 3D7C 000D 0446              		move.w	#13,$446(a6)			; 13 = set fill color
    885 FFFC070C 422E 0448                   		clr.b	$448(a6)			; queue
    886 FFFC0710 E181                        		asl.l	#8,d1
    887 FFFC0712 E181                        		asl.l	#8,d1
    888 FFFC0714 2D41 0440                   		move.l	d1,$440(a6)
    889 FFFC0718 3D7C 0010 0446              		move.w	#16,$446(a6)			; 16 = set X0 pos
    890 FFFC071E 422E 0448                   		clr.b	$448(a6)			; queue
    891 FFFC0722 E182                        		asl.l	#8,d2
    892 FFFC0724 E182                        		asl.l	#8,d2
    893 FFFC0726 2D42 0440                   		move.l	d2,$440(a6)
    894 FFFC072A 3D7C 0011 0446              		move.w	#17,$446(a6)			; 16 = set Y0 pos
    895 FFFC0730 422E 0448                   		clr.b	$448(a6)			; queue
    896 FFFC0734 3D40 0442                   		move.w	d0,$442(a6)				; data = char code
    897 FFFC0738 3D7C 0000 0446              		move.w	#0,$446(a6)				; 0 = draw character
    898 FFFC073E 422E 0448                   		clr.b	$448(a6)			; queue
    899 FFFC0742 4CDF 4006                   		movem.l	(a7)+,d1/d2/a6
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 16
bootrom.asm
    900 FFFC0746 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; DispChar:
                                             ;
                                             ; Display character at cursor position. The current foreground color and
                                             ; background color are used.
                                             ;
                                             ; Parameters:
                                             ;	d0.w		character to display
                                             ; Returns:
                                             ;	<none>
                                             ; Registers Affected:
                                             ;	<none>
                                             ;------------------------------------------------------------------------------
                                             
    916 FFFC0748                             DispChar:
    917 FFFC0748 48E7 4002                   		movem.l	d1/a6,-(a7)
    918 FFFC074C 2C7C FFE0 0000              		move.l	#VDGREG,a6
    919 FFFC0752 4840                        		swap	d0					; save off d0 low
    920 FFFC0754                             .0001:								; wait for character que to empty
    921 FFFC0754 302E 042C                   		move.w	$42C(a6),d0			; read character queue index into d0
    922 FFFC0758 B07C 0018                   		cmp.w	#24,d0				; allow up 28 entries to be in progress
    923 FFFC075C 64F6                        		bhs.s	.0001				; branch if too many chars queued
    924 FFFC075E 4840                        		swap	d0					; get back d0 low
    925 FFFC0760 426E 0440                   		clr.w	$440(a6)			; clear out high order word
    926 FFFC0764 3D79 0001 0002 0442         		move.w	fgcolor,$442(a6)	; set fg color
    927 FFFC076C 3D7C 000C 0446              		move.w	#12,$446(a6)		; 12 = set pen color
    928 FFFC0772 422E 0448                   		clr.b	$448(a6)			; queue
    929 FFFC0776 3D79 0001 0004 0442         		move.w	bkcolor,$442(a6)	; set bk color
    930 FFFC077E 3D7C 000D 0446              		move.w	#13,$446(a6)		; 13 = set fill color
    931 FFFC0784 422E 0448                   		clr.b	$448(a6)			; queue
                                             
    933 FFFC0788 1239 0001 0419              		move.b	CursorCol,d1
    934 FFFC078E 4881                        		ext.w	d1
    935 FFFC0790 E781                        		asl.l	#3,d1
    936 FFFC0792 4841                        		swap	d1					; shift by 16
    937 FFFC0794 2D41 0440                   		move.l	d1,$440(a6)
    938 FFFC0798 3D7C 0010 0446              		move.w	#16,$446(a6)		; 16 = set X0 pos
    939 FFFC079E 422E 0448                   		clr.b	$448(a6)			; queue
                                             
    941 FFFC07A2 1239 0001 0418              		move.b	CursorRow,d1
    942 FFFC07A8 4881                        		ext.w	d1
    943 FFFC07AA E781                        		asl.l	#3,d1
    944 FFFC07AC 4841                        		swap	d1					; shift by 16
    945 FFFC07AE 2D41 0440                   		move.l	d1,$440(a6)
    946 FFFC07B2 3D7C 0011 0446              		move.w	#17,$446(a6)		; 17 = set Y0 pos
    947 FFFC07B8 422E 0448                   		clr.b	$448(a6)			; queue
                                             
    949 FFFC07BC 3D40 0442                   		move.w	d0,$442(a6)			; data = character code
    950 FFFC07C0 3D7C 0000 0446              		move.w	#0,$446(a6)			; pulse character queue write signal
    951 FFFC07C6 422E 0448                   		clr.b	$448(a6)			; queue
    952 FFFC07CA 4CDF 4002                   		movem.l	(a7)+,d1/a6
    953 FFFC07CE 4E75                        		rts
                                             
                                             ;==============================================================================
                                             ; Cursor Routines
                                             ;
                                             ; BIOS uses cursor #0. The BIOS cursor is 10 x 10
                                             ;==============================================================================
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 17
bootrom.asm
                                             
    961 FFFC07D0                             EnableCursor:
    962 FFFC07D0 48E7 8002                   		movem.l	d0/a6,-(a7)
    963 FFFC07D4 4DF9 FFE0 0000              		lea		VDGREG,a6
    964 FFFC07DA 202E 0108                   		move.l	$108(a6),d0
    965 FFFC07DE 08C0 0000                   		bset	#0,d0
    966 FFFC07E2 2D40 0108                   		move.l	d0,$108(a6)
    967 FFFC07E6 4CDF 4001                   		movem.l	(a7)+,d0/a6
    968 FFFC07EA 4E75                        		rts
                                             		
    970 FFFC07EC                             DisableCursor:
    971 FFFC07EC 48E7 8002                   		movem.l	d0/a6,-(a7)
    972 FFFC07F0 4DF9 FFE0 0000              		lea		VDGREG,a6
    973 FFFC07F6 202E 0108                   		move.l	$108(a6),d0
    974 FFFC07FA 0880 0000                   		bclr	#0,d0
    975 FFFC07FE 2D40 0108                   		move.l	d0,$108(a6)
    976 FFFC0802 4CDF 4001                   		movem.l	(a7)+,d0/a6
    977 FFFC0806 4E75                        		rts
                                             		
                                             ;------------------------------------------------------------------------------
                                             ; SyncCursor:
                                             ;
                                             ; Sync the hardware cursor's position to the text cursor position.
                                             ;
                                             ; Parameters:
                                             ;	<none>
                                             ; Returns:
                                             ;	<none>
                                             ; Registers Affected:
                                             ;	<none>
                                             ;------------------------------------------------------------------------------
                                             
    992 FFFC0808                             SyncCursor:
    993 FFFC0808 48E7 4002                   		movem.l	d1/a6,-(a7)
    994 FFFC080C 2C7C FFE0 0000              		move.l	#VDGREG,a6
                                             ;		move.w	#$0A0A,VDG_CURSZ(a6)	; defunct size set in SetCursorImage64
    996 FFFC0812 1239 0001 0419              		move.b	CursorCol,d1
    997 FFFC0818 4881                        		ext.w	d1
    998 FFFC081A E741                        		asl.w	#3,d1
    999 FFFC081C 5341                        		sub.w	#1,d1
   1000 FFFC081E 0641 0080                   		add.w	#128,d1					; add fudge factor since cursor coordinate
   1001 FFFC0822 3D41 0204                   		move.w	d1,VDG_CUR0X(a6)		; system is different
   1002 FFFC0826 1239 0001 0418              		move.b	CursorRow,d1
   1003 FFFC082C 4881                        		ext.w	d1
   1004 FFFC082E E741                        		asl.w	#3,d1
   1005 FFFC0830 5341                        		sub.w	#1,d1
   1006 FFFC0832 0641 001A                   		add.w	#26,d1
   1007 FFFC0836 3D41 0206                   		move.w	d1,VDG_CUR0Y(a6)
   1008 FFFC083A 4CDF 4002                   		movem.l	(a7)+,d1/a6
   1009 FFFC083E 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Cursor Color
                                             ; - cursor color is a 32 bit vector
                                             ;
                                             ;	aaaaaaaa--ifffff-rrrrrgggggbbbbb
                                             ;	    |     |  |     |    |    |
                                             ;       |     |  |     |    |    +-- blue
                                             ;     	|     |  |     |    +------- green
                                             ;       |     |  |     +------------ red
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 18
bootrom.asm
                                             ;       |     |  +------------------ flashrate 0xxxx = no flash
                                             ;       |     +--------------------- invert video (rgb ignored)
                                             ;       +--------------------------- alpha 0 = cursor color, 255 = background
                                             ;
                                             ;   flash rate
                                             ;		 0xxxx = no flash
                                             ;        00001 = 1/8 vsync (7.5 Hz)
                                             ;	     00010 = 1/16 vsync (3.75 Hz)
                                             ;        00100 = 1/32 vsync (1.875 Hz)
                                             ;------------------------------------------------------------------------------
                                             
   1031 FFFC0840                             SetCursorColor:
   1032 FFFC0840 2F02                        		move.l  d2/a5/a6,-(a7)
   1033 FFFC0842 2A7C FFDC 0000              		move.l	#$FFDC0000,a5
   1034 FFFC0848 2C7C FFE0 0000              		move.l	#VDGREG,a6
   1035 FFFC084E 3D7C 0004 0446              		move.w	#%00100,VDG_CURFLSH(a6)
   1036 FFFC0854 3D7C 7FFF 0448              		move.w	#%0111111111111111,VDG_CURCLR0(a6)
   1037 FFFC085A 743F                        		moveq	#63,d2
   1038 FFFC085C                             .0001:
   1039 FFFC085C 426D 0C04                   		clr.w	$0C04(a5)			; gen next number
   1040 FFFC0860 262D 0C00                   		move.l	$0C00(a5),d3
   1041 FFFC0864 0283 0000 FFFF              		and.l	#$FFFF,d3
   1042 FFFC086A 2CC3                        		move.l	d3,(a6)+
   1043 FFFC086C 51CA FFEE                   		dbra	d2,.0001
   1044 FFFC0870 241F                        		move.l	(a7)+,d2/a5/a6
   1045 FFFC0872 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Put some values in the cursors color palette so they will be visible.
                                             ; Otherwise they will all be black.
                                             ;------------------------------------------------------------------------------
                                             
   1052 FFFC0874                             InitCursorColorPalette:
   1053 FFFC0874 2F02                        		move.l  d2/d3/a5/a6,-(a7)
   1054 FFFC0876 2A7C FFDC 0000              		move.l	#$FFDC0000,a5
   1055 FFFC087C 2C7C FFE0 0000              		move.l	#VDGREG,a6
   1056 FFFC0882 743F                        		moveq	#63,d2
   1057 FFFC0884                             .0001:
   1058 FFFC0884 426D 0C04                   		clr.w	$0C04(a5)			; gen next number
   1059 FFFC0888 262D 0C00                   		move.l	$0C00(a5),d3		; move random number
   1060 FFFC088C 0283 FF00 7FFF              		and.l	#$FF007FFF,d3		; mask off other attributes
                                             		;or.l	#$FF000000,d3		; alpha blend to background color
   1062 FFFC0892 2CC3                        		move.l	d3,(a6)+
   1063 FFFC0894 51CA FFEE                   		dbra	d2,.0001
   1064 FFFC0898 2C7C FFE0 0000              		move.l	#VDGREG,a6
   1065 FFFC089E 2D7C 0000 7C00 0004         		move.l	#RED,4(a6)			; force cursor red
   1066 FFFC08A6 241F                        		move.l	(a7)+,d2/d3/a5/a6
   1067 FFFC08A8 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Setup an image for the cursor.
                                             ; Cursor may be up to 32h x 512v pixels.
                                             ; The BIOS cursor is 10 x 10
                                             ;------------------------------------------------------------------------------
                                             
   1075 FFFC08AA                             SetCursorImage64:
   1076 FFFC08AA 48E7 70C2                   		movem.l	d1/d2/d3/a0/a1/a6,-(a7)
   1077 FFFC08AE 41F9 FFFC 0920              		lea		CursorImage64,a0
   1078 FFFC08B4 7214                        		moveq	#20,d1					; set count number of long words to move
   1079 FFFC08B6 227C FF8B 7E00              		move.l	#$FF8B7E00,a1
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 19
bootrom.asm
   1080 FFFC08BC                             .0001:
   1081 FFFC08BC 22D8                        		move.l	(a0)+,(a1)+
   1082 FFFC08BE 51C9 FFFC                   		dbra	d1,.0001
   1083 FFFC08C2 343C 0200                   		move.w	#$200,d2
   1084 FFFC08C6 207C FFE0 0000              		move.l	#VDGREG,a0
   1085 FFFC08CC 2C7C FFDC 0000              		move.l	#$FFDC0000,a6
   1086 FFFC08D2                             .0002:
   1087 FFFC08D2 21BC 0005 BF00 2000         		move.l	#$5BF00,(a0,d2.w)
   1088 FFFC08DA 31BC 0249 2008              		move.w	#$0249,8(a0,d2.w)	; set cursor size 10x10
   1089 FFFC08E0 31BC 0064 200C              		move.w	#100,12(a0,d2.w)	; set total pixel count (10*10)
   1090 FFFC08E6 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1091 FFFC08EA 262E 0C00                   		move.l	$0C00(a6),d3
   1092 FFFC08EE 0243 00FF                   		and.w	#$FF,d3
   1093 FFFC08F2 3183 2004                   		move.w	d3,4(a0,d2.w)		; set h pos
   1094 FFFC08F6 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1095 FFFC08FA 262E 0C00                   		move.l	$0C00(a6),d3
   1096 FFFC08FE 0243 00FF                   		and.w	#$FF,d3
   1097 FFFC0902 3183 2006                   		move.w	d3,6(a0,d2.w)		; set v pos
   1098 FFFC0906 363C 0000                   		move.w	#$0,d3
   1099 FFFC090A 3183 200A                   		move.w	d3,10(a0,d2.w)		; set z pos
   1100 FFFC090E 0642 0010                   		add.w	#$10,d2
   1101 FFFC0912 B47C 0400                   		cmp.w	#$400,d2
   1102 FFFC0916 65BA                        		blo.s	.0002
   1103 FFFC0918 4CDF 430E                   		movem.l	(a7)+,d1/d2/d3/a0/a1/a6
   1104 FFFC091C 4E75                        		rts
                                             		
   1106 FFFC091E FF FF                       	align	4
   1107 FFFC0920                             CursorImage64:
   1108 FFFC0920 55555000 00000000           	dc.l	%01010101010101010101000000000000,$00
   1109 FFFC0928 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1110 FFFC0930 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1111 FFFC0938 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1112 FFFC0940 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1113 FFFC0948 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1114 FFFC0950 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1115 FFFC0958 40001000 00000000           	dc.l	%01000000000000000001000000000000,$00
   1116 FFFC0960 40501000 00000000           	dc.l	%01000000010100000001000000000000,$00
   1117 FFFC0968 55555000 00000000           	dc.l	%01010101010101010101000000000000,$00
   1118 FFFC0970 00000000 00000000           	dc.l	$00,$00
   1119 FFFC0978 00000000 00000000           	dc.l	$00,$00
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Bouncing Balls
                                             ; 
                                             ; Displays the sprites as 'X's and 'O's and moves them around on the screen.
                                             ; The sprites will bounce off the screen edges.
                                             ;------------------------------------------------------------------------------
                                             
   1128 FFFC0980                             BouncingBalls:
   1129 FFFC0980 48E7 70C2                   		movem.l	d1/d2/d3/a0/a1/a6,-(a7)
                                             
                                             		; Setup background depth
   1132 FFFC0984 227C FFE0 0000              		move.l	#VDGREG,a1
   1133 FFFC098A 2C7C FFDC 0000              		move.l	#$FFDC0000,a6		; set I/O address
   1134 FFFC0990 207C FF80 0000              		movea.l	#$FF800000,a0		; address of z buffer ram
   1135 FFFC0996 243C 0000 1D4C              		move.l	#BMP_WIDTH*BMP_HEIGHT/16,d2
                                             ;		move.w	#1,$43E(a1)			; select z buffer
   1137 FFFC099C                             .0003:
                                             ;		clr.w	$0C04(a6)			; gen next number
                                             ;		move.l	$0C00(a6),d3		; get random value
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 20
bootrom.asm
                                             ;		move.l	d3,(a0)+			; move to z buffer
                                             ;		sub.l	#1,d2
                                             ;		bne.s	.0003
                                             ;		move.w	#0,$43E(a1)			; deselect z buffer
                                             		
                                             		; Setup sprite image
   1146 FFFC099C 41F9 FFFC 0AF0              		lea		BallImage,a0
   1147 FFFC09A2 721A                        		moveq	#26,d1					; set count number of long words to move
   1148 FFFC09A4 227C FF8B 7D00              		move.l	#$FF8B7D00,a1
   1149 FFFC09AA 45F9 0001 0500              		lea		ball_dx,a2
   1150 FFFC09B0 47F9 0001 0600              		lea		ball_dy,a3
   1151 FFFC09B6                             .0001:
   1152 FFFC09B6 22D8                        		move.l	(a0)+,(a1)+
   1153 FFFC09B8 51C9 FFFC                   		dbra	d1,.0001
   1154 FFFC09BC 41F9 FFFC 0B68              		lea		XImage,a0
   1155 FFFC09C2 721A                        		moveq	#26,d1					; set count number of long words to move
   1156 FFFC09C4 227C FF8B 7C00              		move.l	#$FF8B7C00,a1
   1157 FFFC09CA                             .0012:
   1158 FFFC09CA 22D8                        		move.l	(a0)+,(a1)+
   1159 FFFC09CC 51C9 FFFC                   		dbra	d1,.0012
   1160 FFFC09D0 343C 0210                   		move.w	#$210,d2
   1161 FFFC09D4 207C FFE0 0000              		move.l	#VDGREG,a0
   1162 FFFC09DA 217C FFFF FFFF 0108         		move.l	#$FFFFFFFF,$108(a0)		; enable sprites
   1163 FFFC09E2 2C7C FFDC 0000              		move.l	#$FFDC0000,a6
   1164 FFFC09E8                             .0002:
   1165 FFFC09E8 B47C 0300                   		cmp.w	#$300,d2
   1166 FFFC09EC 6408                        		bhs.s	.0014
   1167 FFFC09EE 21BC 0005 BE80 2000         		move.l	#$5BE80,(a0,d2.w)	; set image = 'O'
   1168 FFFC09F6                             .0014:
   1169 FFFC09F6 31BC 0350 2008              		move.w	#$0350,8(a0,d2.w)	; set cursor size 16hx13v
   1170 FFFC09FC 31BC 00D0 200C              		move.w	#208,12(a0,d2.w)	; set total pixel count (16*13)
   1171 FFFC0A02 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1172 FFFC0A06 262E 0C00                   		move.l	$0C00(a6),d3
   1173 FFFC0A0A 0243 00FF                   		and.w	#$FF,d3
   1174 FFFC0A0E 0643 0100                   		add.w	#256,d3
   1175 FFFC0A12 3183 2004                   		move.w	d3,4(a0,d2.w)		; set h pos
   1176 FFFC0A16 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1177 FFFC0A1A 262E 0C00                   		move.l	$0C00(a6),d3
   1178 FFFC0A1E 0243 00FF                   		and.w	#$FF,d3
   1179 FFFC0A22 0643 001C                   		add.w	#28,d3
   1180 FFFC0A26 3183 2006                   		move.w	d3,6(a0,d2.w)		; set v pos
   1181 FFFC0A2A 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1182 FFFC0A2E 262E 0C00                   		move.l	$0C00(a6),d3
   1183 FFFC0A32 0243 0000                   		and.w	#$0,d3
   1184 FFFC0A36 3183 200A                   		move.w	d3,10(a0,d2.w)		; set z pos
   1185 FFFC0A3A 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1186 FFFC0A3E 262E 0C00                   		move.l	$0C00(a6),d3
   1187 FFFC0A42 EC43                        		asr.w	#6,d3				; get dx -8 to +7
   1188 FFFC0A44 EC43                        		asr.w	#6,d3				; get dx -8 to +7
   1189 FFFC0A46 3583 2000                   		move.w	d3,(a2,d2.w)		; set dx
   1190 FFFC0A4A 426E 0C04                   		clr.w	$0C04(a6)			; gen next number
   1191 FFFC0A4E 262E 0C00                   		move.l	$0C00(a6),d3
   1192 FFFC0A52 EC43                        		asr.w	#6,d3				; get dx -8 to +7
   1193 FFFC0A54 EC43                        		asr.w	#6,d3				; get dx -8 to +7
   1194 FFFC0A56 3783 2000                   		move.w	d3,(a3,d2.w)		; set dy
   1195 FFFC0A5A 0642 0010                   		add.w	#$10,d2
   1196 FFFC0A5E B47C 0300                   		cmp.w	#$300,d2
   1197 FFFC0A62 6508                        		blo.s	.0011
   1198 FFFC0A64 21BC 0005 BE00 2000         		move.l	#$5BE00,(a0,d2.w)
   1199 FFFC0A6C                             .0011:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 21
bootrom.asm
   1200 FFFC0A6C B47C 0400                   		cmp.w	#$400,d2
   1201 FFFC0A70 6500 FF76                   		blo.s	.0002
                                             ;
                                             ; Move balls around	
                                             ; Moves sprites 1-31 around on the screen (sprite 0 is the BIOS cursor)
                                             ;
                                             ; a0 = pointer to AV controller's register set
                                             ; a2 = pointer to sprite movement dx table
                                             ; a3 = pointer to sprite movement dy table
                                             ;
   1210 FFFC0A74                             .0010:	
   1211 FFFC0A74 3428 0582                   		move.w	$582(a0),d2			; get irq status
   1212 FFFC0A78 0802 0000                   		btst	#0,d2				; check vertical blank
   1213 FFFC0A7C 67F6                        		beq.s	.0010				; not blank yet
   1214 FFFC0A7E 317C 0001 0582              		move.w	#1,$582(a0)			; reset vert blank indicator
                                             
   1216 FFFC0A84 42A8 0400                   		clr.l	$400(a0)			; reset bitmap base and
   1217 FFFC0A88 317C 0190 0406              		move.w	#BMP_WIDTH,$406(a0)	; bitmap width register
                                             
   1219 FFFC0A8E 343C 0210                   		move.w	#$210,d2			; offset of sprite #1 regsiter
   1220 FFFC0A92                             .0008:
   1221 FFFC0A92 3632 2000                   		move.w	(a2,d2.w),d3		; get dx
   1222 FFFC0A96 D770 2004                   		add.w	d3,4(a0,d2.w)		; add to hpos
   1223 FFFC0A9A 3633 2000                   		move.w	(a3,d2.w),d3		; get dy
   1224 FFFC0A9E D770 2006                   		add.w	d3,6(a0,d2.w)		; add to vpos
   1225 FFFC0AA2 0C70 0210 2004              		cmpi.w	#BMP_WIDTH+128,4(a0,d2.w)	; X hit limit ?
   1226 FFFC0AA8 6504                        		blo.s	.0004
   1227 FFFC0AAA 4472 2000                   		neg.w	(a2,d2.w)			; flip dx
   1228 FFFC0AAE                             .0004:
   1229 FFFC0AAE 0C70 0080 2004              		cmpi.w	#128,4(a0,d2.w)		; X hit limit ?
   1230 FFFC0AB4 6404                        		bhs.s	.0005
   1231 FFFC0AB6 4472 2000                   		neg.w	(a2,d2.w)			; flip dx
   1232 FFFC0ABA                             .0005:
   1233 FFFC0ABA 0C70 0148 2006              		cmpi.w	#BMP_HEIGHT+28,6(a0,d2.w)	; Y hit limit ?
   1234 FFFC0AC0 6504                        		blo.s	.0006
   1235 FFFC0AC2 4473 2000                   		neg.w	(a3,d2.w)			; flip dy
   1236 FFFC0AC6                             .0006:
   1237 FFFC0AC6 0C70 001C 2006              		cmpi.w	#28,6(a0,d2.w)		; Y hit limit ?
   1238 FFFC0ACC 6404                        		bhs.s	.0007
   1239 FFFC0ACE 4473 2000                   		neg.w	(a3,d2.w)			; flip dy
   1240 FFFC0AD2                             .0007:
   1241 FFFC0AD2 0642 0010                   		addi.w	#$10,d2				; advance to next sprite register set
   1242 FFFC0AD6 0C42 0400                   		cmpi.w	#$400,d2			; is end of register set hit ?
   1243 FFFC0ADA 65B6                        		blo.s	.0008	
                                             		; delay a bit to allow display to persist
   1245 FFFC0ADC 263C 0001 3880              		move.l	#80000,d3
   1246 FFFC0AE2                             .0009:
   1247 FFFC0AE2 5383                        		subi.l	#1,d3
   1248 FFFC0AE4 66FC                        		bne.s	.0009
                                             ;		bsr		CheckForKey			; look for keypress to end. zf=0 if key
                                             ;		tst.b	d1
   1251 FFFC0AE6 678C                        		beq.s	.0010
   1252 FFFC0AE8 4CDF 430E                   		movem.l	(a7)+,d1/d2/d3/a0/a1/a6	; restore regs
   1253 FFFC0AEC                             .0015:
   1254 FFFC0AEC 4E75                        		rts
                                             
                                             
   1257 FFFC0AEE FF FF                       		align	4
   1258 FFFC0AF0                             BallImage:
   1259 FFFC0AF0 01555540 00000000           	dc.l	%00000001010101010101010101000000,%00000000000000000000000000000000
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 22
bootrom.asm
   1260 FFFC0AF8 05555550 00000000           	dc.l	%00000101010101010101010101010000,%00000000000000000000000000000000
   1261 FFFC0B00 15555554 00000000           	dc.l	%00010101010101010101010101010100,%00000000000000000000000000000000
   1262 FFFC0B08 55000055 00000000           	dc.l	%01010101000000000000000001010101,%00000000000000000000000000000000
   1263 FFFC0B10 54000015 00000000           	dc.l	%01010100000000000000000000010101,%00000000000000000000000000000000
   1264 FFFC0B18 54000015 00000000           	dc.l	%01010100000000000000000000010101,%00000000000000000000000000000000
   1265 FFFC0B20 54000015 00000000           	dc.l	%01010100000000000000000000010101,%00000000000000000000000000000000
   1266 FFFC0B28 54000015 00000000           	dc.l	%01010100000000000000000000010101,%00000000000000000000000000000000
   1267 FFFC0B30 54000015 00000000           	dc.l	%01010100000000000000000000010101,%00000000000000000000000000000000
   1268 FFFC0B38 15000054 00000000           	dc.l	%00010101000000000000000001010100,%00000000000000000000000000000000
   1269 FFFC0B40 05555550 00000000           	dc.l	%00000101010101010101010101010000,%00000000000000000000000000000000
   1270 FFFC0B48 01555540 00000000           	dc.l	%00000001010101010101010101000000,%00000000000000000000000000000000
   1271 FFFC0B50 00555500 00000000           	dc.l	%00000000010101010101010100000000,%00000000000000000000000000000000
   1272 FFFC0B58 00000000 00000000           	dc.l	$00,$00
   1273 FFFC0B60 00000000 00000000           	dc.l	$00,$00
   1274 FFFC0B68                             XImage:
   1275 FFFC0B68 50000050 00000000           	dc.l	%01010000000000000000000001010000,%00000000000000000000000000000000
   1276 FFFC0B70 14000140 00000000           	dc.l	%00010100000000000000000101000000,%00000000000000000000000000000000
   1277 FFFC0B78 05000500 00000000           	dc.l	%00000101000000000000010100000000,%00000000000000000000000000000000
   1278 FFFC0B80 01401400 00000000           	dc.l	%00000001010000000001010000000000,%00000000000000000000000000000000
   1279 FFFC0B88 00505000 00000000           	dc.l	%00000000010100000101000000000000,%00000000000000000000000000000000
   1280 FFFC0B90 00154000 00000000           	dc.l	%00000000000101010100000000000000,%00000000000000000000000000000000
   1281 FFFC0B98 00050000 00000000           	dc.l	%00000000000001010000000000000000,%00000000000000000000000000000000
   1282 FFFC0BA0 00154000 00000000           	dc.l	%00000000000101010100000000000000,%00000000000000000000000000000000
   1283 FFFC0BA8 00505000 00000000           	dc.l	%00000000010100000101000000000000,%00000000000000000000000000000000
   1284 FFFC0BB0 01401400 00000000           	dc.l	%00000001010000000001010000000000,%00000000000000000000000000000000
   1285 FFFC0BB8 05000500 00000000           	dc.l	%00000101000000000000010100000000,%00000000000000000000000000000000
   1286 FFFC0BC0 14000140 00000000           	dc.l	%00010100000000000000000101000000,%00000000000000000000000000000000
   1287 FFFC0BC8 50000050 00000000           	dc.l	%01010000000000000000000001010000,%00000000000000000000000000000000
   1288 FFFC0BD0 00000000 00000000           	dc.l	$00,$00
   1289 FFFC0BD8 00000000 00000000           	dc.l	$00,$00
                                             	
                                             ;------------------------------------------------------------------------------
                                             ; Parameters:
                                             ;	a0			pointer to string
                                             ;	d1.w		x position
                                             ;	d2.w		y position
                                             ; Returns:
                                             ;	a0			points to byte after NULL character
                                             ;	d1.w		updated x position
                                             ; Trashes:
                                             ;	d0,a6
                                             ;------------------------------------------------------------------------------
                                             
   1303 FFFC0BE0                             DispStringAt:
   1304 FFFC0BE0                             .0003:
   1305 FFFC0BE0 7000                        		moveq	#0,d0					; zero out high order bits
   1306 FFFC0BE2 1018                        		move.b	(a0)+,d0				; get character from string into d0
   1307 FFFC0BE4 6708                        		beq.s	.0002					; end of string ?
   1308 FFFC0BE6 6100 FAEC                   		bsr		DispCharAt
   1309 FFFC0BEA 5041                        		add.w	#8,d1					; increment xpos
   1310 FFFC0BEC 60F2                        		bra.s	.0003
   1311 FFFC0BEE                             .0002:
   1312 FFFC0BEE 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display nybble in D1.B
                                             ;------------------------------------------------------------------------------
                                             ;
   1318 FFFC0BF0                             DisplayNybble:
   1319 FFFC0BF0 3F01                        		move.w	d1,-(a7)
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 23
bootrom.asm
   1320 FFFC0BF2 0201 000F                   		andi.b	#0xF,d1
   1321 FFFC0BF6 0601 0030                   		addi.b	#'0',d1
   1322 FFFC0BFA 0C01 0039                   		cmpi.b	#'9',d1
   1323 FFFC0BFE 6302                        		bls.s	dispnyb1
   1324 FFFC0C00 5E01                        		addi.b	#7,d1
   1325 FFFC0C02                             dispnyb1:
   1326 FFFC0C02 6100 F664                   		bsr		DisplayChar
   1327 FFFC0C06 321F                        		move.w	(a7)+,d1
   1328 FFFC0C08 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display the byte in D1.B
                                             ;------------------------------------------------------------------------------
                                             ;
   1334 FFFC0C0A                             DisplayByte:
   1335 FFFC0C0A 3F01                        		move.w	d1,-(a7)
   1336 FFFC0C0C E819                        		ror.b	#4,d1
   1337 FFFC0C0E 6100 FFE0                   		bsr		DisplayNybble
   1338 FFFC0C12 E919                        		rol.b	#4,d1
   1339 FFFC0C14 6100 FFDA                   		bsr		DisplayNybble
   1340 FFFC0C18 321F                        		move.w	(a7)+,d1
   1341 FFFC0C1A 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Display the 32 bit word in D1.L
                                             ;------------------------------------------------------------------------------
                                             ;
   1347 FFFC0C1C                             DisplayWord:
   1348 FFFC0C1C E199                        		rol.l	#8,d1
   1349 FFFC0C1E 6100 FFEA                   		bsr		DisplayByte
   1350 FFFC0C22 E199                        		rol.l	#8,d1
   1351 FFFC0C24 6100 FFE4                   		bsr		DisplayByte
   1352 FFFC0C28 E199                        		rol.l	#8,d1
   1353 FFFC0C2A 6100 FFDE                   		bsr		DisplayByte
   1354 FFFC0C2E E199                        		rol.l	#8,d1
   1355 FFFC0C30 6100 FFD8                   		bsr		DisplayByte
   1356 FFFC0C34 4E75                        		rts
                                             
   1358 FFFC0C36                             DisplayMem:
   1359 FFFC0C36 123C 003A                   		move.b	#':',d1
   1360 FFFC0C3A 4EB9 FFFC 0268              		jsr		DisplayChar
   1361 FFFC0C40 2208                        		move.l	a0,d1
   1362 FFFC0C42 4EB9 FFFC 0C1C              		jsr		DisplayWord
   1363 FFFC0C48 7407                        		moveq	#7,d2
   1364 FFFC0C4A                             dspmem1:
   1365 FFFC0C4A 123C 0020                   		move.b	#' ',d1
   1366 FFFC0C4E 4EB9 FFFC 0268              		jsr		DisplayChar
   1367 FFFC0C54 1218                        		move.b	(a0)+,d1
   1368 FFFC0C56 4EB9 FFFC 0C0A              		jsr		DisplayByte
   1369 FFFC0C5C 51CA FFEC                   		dbra	d2,dspmem1
   1370 FFFC0C60 4EF9 FFFC 0222              		jmp		CRLF
                                             
                                             ;==============================================================================
                                             ; Keyboard stuff
                                             ;
                                             ; KeyState2_
                                             ; 876543210
                                             ; ||||||||+ = shift
                                             ; |||||||+- = alt
                                             ; ||||||+-- = control
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 24
bootrom.asm
                                             ; |||||+--- = numlock
                                             ; ||||+---- = capslock
                                             ; |||+----- = scrolllock
                                             ; ||+------ =
                                             ; |+------- = 
                                             ; +-------- = extended
                                             ;
                                             ;==============================================================================
                                             
   1389 FFFC0C66                             _KeybdInit:
   1390 FFFC0C66 4239 0001 0426              		clr.b	_KeyState1
   1391 FFFC0C6C 4239 0001 0427              		clr.b	_KeyState2
   1392 FFFC0C72 4E75                        		rts
                                             
   1394 FFFC0C74                             _KeybdGetStatus:
   1395 FFFC0C74 1239 FFDC 0001              		move.b	KEYBD+1,d1
   1396 FFFC0C7A 4E75                        		rts
                                             
                                             ; Get the scancode from the keyboard port
                                             ;
   1400 FFFC0C7C                             _KeybdGetScancode:
   1401 FFFC0C7C 7200                        		moveq	#0,d1
   1402 FFFC0C7E 1239 FFDC 0000              		move.b	KEYBD,d1				; get the scan code
   1403 FFFC0C84 13FC 0000 FFDC 0001         		move.b	#0,KEYBD+1				; clear receive register
   1404 FFFC0C8C 4E75                        		rts
                                             
                                             ; Recieve a byte from the keyboard, used after a command is sent to the
                                             ; keyboard in order to wait for a response.
                                             ;
   1409 FFFC0C8E                             KeybdRecvByte:
   1410 FFFC0C8E 2F03                        		move.l	d3,-(a7)
   1411 FFFC0C90 363C 0064                   		move.w	#100,d3		; wait up to 1s
   1412 FFFC0C94                             .0003:
   1413 FFFC0C94 6100 FFDE                   		bsr		_KeybdGetStatus	; wait for response from keyboard
   1414 FFFC0C98 4A01                        		tst.b	d1
   1415 FFFC0C9A 6B0E                        		bmi		.0004		; is input buffer full ? yes, branch
   1416 FFFC0C9C 6100 02C4                   		bsr		Wait10ms		; wait a bit
   1417 FFFC0CA0 51CB FFF2                   		dbra	d3,.0003	; go back and try again
   1418 FFFC0CA4 261F                        		move.l	(a7)+,d3
   1419 FFFC0CA6 72FF                        		moveq	#-1,d1			; return -1
   1420 FFFC0CA8 4E75                        		rts
   1421 FFFC0CAA                             .0004:
   1422 FFFC0CAA 6100 FFD0                   		bsr		_KeybdGetScancode
   1423 FFFC0CAE 261F                        		move.l	(a7)+,d3
   1424 FFFC0CB0 4E75                        		rts
                                             
                                             
                                             ; Wait until the keyboard transmit is complete
                                             ; Returns .CF = 1 if successful, .CF=0 timeout
                                             ;
   1430 FFFC0CB2                             KeybdWaitTx:
   1431 FFFC0CB2 48E7 3000                   		movem.l	d2/d3,-(a7)
   1432 FFFC0CB6 7664                        		moveq	#100,d3		; wait a max of 1s
   1433 FFFC0CB8                             .0001:
   1434 FFFC0CB8 6100 FFBA                   		bsr		_KeybdGetStatus
   1435 FFFC0CBC 0801 0006                   		btst	#6,d1		; check for transmit complete bit
   1436 FFFC0CC0 6610                        		bne	    .0002		; branch if bit set
   1437 FFFC0CC2 6100 029E                   		bsr		Wait10ms		; delay a little bit
   1438 FFFC0CC6 51CB FFF0                   		dbra	d3,.0001	; go back and try again
   1439 FFFC0CCA 4CDF 000C                   		movem.l	(a7)+,d2/d3
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 25
bootrom.asm
   1440 FFFC0CCE 72FF                        		moveq	#-1,d1		; return -1
   1441 FFFC0CD0 4E75                        		rts
   1442 FFFC0CD2                             .0002:
   1443 FFFC0CD2 4CDF 000C                   		movem.l	(a7)+,d2/d3
   1444 FFFC0CD6 7200                        		moveq	#0,d1		; return 0
   1445 FFFC0CD8 4E75                        		rts
                                             
                                             
                                             ;------------------------------------------------------------------------------
                                             ; get key pending status into d1.b
                                             ;------------------------------------------------------------------------------
                                             ;
   1452 FFFC0CDA                             CheckForKey:
   1453 FFFC0CDA 1239 FFDC 0001              		move.b	KEYBD+1,d1
   1454 FFFC0CE0 6A06                        		bpl.s	cfk1
   1455 FFFC0CE2 123C 0001                   		move.b	#1,d1
   1456 FFFC0CE6 4E75                        		rts
   1457 FFFC0CE8                             cfk1:
   1458 FFFC0CE8 4201                        		clr.b	d1
   1459 FFFC0CEA 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             
   1464 FFFC0CEC                             GetKey:
   1465 FFFC0CEC 6100 0022                   		bsr		KeybdGetCharWait
   1466 FFFC0CF0 0C39 0000 0001 0424         		cmpi.b	#0,KeybdEcho	; is keyboard echo on ?
   1467 FFFC0CF8 670C                        		beq.s	gk1
   1468 FFFC0CFA 0C01 000D                   		cmpi.b	#'\r',d1		; convert CR keystroke into CRLF
   1469 FFFC0CFE 6700 F522                   		beq		CRLF
   1470 FFFC0D02 6100 F564                   		bsr		DisplayChar
   1471 FFFC0D06                             gk1:
   1472 FFFC0D06 4E75                        		rts
                                             
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             
   1478 FFFC0D08                             KeybdGetCharNoWait:
   1479 FFFC0D08 4239 0001 0425              		clr.b	KeybdWaitFlag
   1480 FFFC0D0E 6008                        		bra		KeybdGetChar
                                             
   1482 FFFC0D10                             KeybdGetCharWait:
   1483 FFFC0D10 13FC FFFF 0001 0425         		move.b	#-1,KeybdWaitFlag
                                             
   1485 FFFC0D18                             KeybdGetChar:
   1486 FFFC0D18 48E7 3080                   		movem.l	d2/d3/a0,-(a7)
   1487 FFFC0D1C                             .0003:
   1488 FFFC0D1C 6100 FF56                   		bsr		_KeybdGetStatus			; check keyboard status for key available
   1489 FFFC0D20 6B10                        		bmi		.0006					; yes, go process
   1490 FFFC0D22 4A39 0001 0425              		tst.b	KeybdWaitFlag			; are we willing to wait for a key ?
   1491 FFFC0D28 6BF2                        		bmi		.0003					; yes, branch back
   1492 FFFC0D2A 4CDF 010C                   		movem.l	(a7)+,d2/d3/a0
   1493 FFFC0D2E 72FF                        		moveq	#-1,d1					; flag no char available
   1494 FFFC0D30 4E75                        		rts
   1495 FFFC0D32                             .0006:
   1496 FFFC0D32 6100 FF48                   		bsr		_KeybdGetScancode
   1497 FFFC0D36                             .0001:
   1498 FFFC0D36 33FC 0001 FFDC 0600         		move.w	#1,leds
   1499 FFFC0D3E B23C 00F0                   		cmp.b	#SC_KEYUP,d1
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 26
bootrom.asm
   1500 FFFC0D42 6700 00CA                   		beq		.doKeyup
   1501 FFFC0D46 B23C 00E0                   		cmp.b	#SC_EXTEND,d1
   1502 FFFC0D4A 6700 00CE                   		beq		.doExtend
   1503 FFFC0D4E B23C 0014                   		cmp.b	#SC_CTRL,d1
   1504 FFFC0D52 6700 00D2                   		beq		.doCtrl
   1505 FFFC0D56 B23C 0012                   		cmp.b	#SC_LSHIFT,d1
   1506 FFFC0D5A 6700 0134                   		beq		.doShift
   1507 FFFC0D5E B23C 0059                   		cmp.b	#SC_RSHIFT,d1
   1508 FFFC0D62 6700 012C                   		beq		.doShift
   1509 FFFC0D66 B23C 0077                   		cmp.b	#SC_NUMLOCK,d1
   1510 FFFC0D6A 6700 014C                   		beq		.doNumLock
   1511 FFFC0D6E B23C 0058                   		cmp.b	#SC_CAPSLOCK,d1
   1512 FFFC0D72 6700 0154                   		beq		.doCapsLock
   1513 FFFC0D76 B23C 007E                   		cmp.b	#SC_SCROLLLOCK,d1
   1514 FFFC0D7A 6700 015C                   		beq		.doScrollLock
   1515 FFFC0D7E B23C 0011                   		cmp.b   #SC_ALT,d1
   1516 FFFC0D82 6700 00CA                   		beq     .doAlt
   1517 FFFC0D86 1439 0001 0426              		move.b	_KeyState1,d2			; check key up/down
   1518 FFFC0D8C 13FC 0000 0001 0426         		move.b	#0,_KeyState1			; clear keyup status
   1519 FFFC0D94 4A02                        		tst.b	d2
   1520 FFFC0D96 6684                        		bne	    .0003					; ignore key up
   1521 FFFC0D98 B23C 000D                   		cmp.b   #SC_TAB,d1
   1522 FFFC0D9C 6700 00D8                   		beq     .doTab
   1523 FFFC0DA0                             .0013:
   1524 FFFC0DA0 1439 0001 0427              		move.b	_KeyState2,d2
   1525 FFFC0DA6 6A1E                        		bpl		.0010					; is it extended code ?
   1526 FFFC0DA8 0202 007F                   		and.b	#$7F,d2					; clear extended bit
   1527 FFFC0DAC 13C2 0001 0427              		move.b	d2,_KeyState2
   1528 FFFC0DB2 13FC 0000 0001 0426         		move.b	#0,_KeyState1			; clear keyup
   1529 FFFC0DBA 41F9 FFFC 11F2              		lea		_keybdExtendedCodes,a0
   1530 FFFC0DC0 1230 1000                   		move.b	(a0,d1.w),d1
   1531 FFFC0DC4 603A                        		bra		.0008
   1532 FFFC0DC6                             .0010:
   1533 FFFC0DC6 0802 0002                   		btst	#2,d2					; is it CTRL code ?
   1534 FFFC0DCA 6710                        		beq		.0009
   1535 FFFC0DCC 0241 007F                   		and.w	#$7F,d1
   1536 FFFC0DD0 41F9 FFFC 1172              		lea		_keybdControlCodes,a0
   1537 FFFC0DD6 1230 1000                   		move.b	(a0,d1.w),d1
   1538 FFFC0DDA 6024                        		bra		.0008
   1539 FFFC0DDC                             .0009:
   1540 FFFC0DDC 0802 0000                   		btst	#0,d2					; is it shift down ?
   1541 FFFC0DE0 670C                        		beq  	.0007
   1542 FFFC0DE2 41F9 FFFC 1072              		lea		_shiftedScanCodes,a0
   1543 FFFC0DE8 1230 1000                   		move.b	(a0,d1.w),d1
   1544 FFFC0DEC 6012                        		bra		.0008
   1545 FFFC0DEE                             .0007:
   1546 FFFC0DEE 41F9 FFFC 0F72              		lea		_unshiftedScanCodes,a0
   1547 FFFC0DF4 1230 1000                   		move.b	(a0,d1.w),d1
   1548 FFFC0DF8 33FC 0202 FFDC 0600         		move.w	#$0202,leds
   1549 FFFC0E00                             .0008:
   1550 FFFC0E00 33FC 0303 FFDC 0600         		move.w	#$0303,leds
   1551 FFFC0E08 4CDF 010C                   		movem.l	(a7)+,d2/d3/a0
   1552 FFFC0E0C 4E75                        		rts
   1553 FFFC0E0E                             .doKeyup:
   1554 FFFC0E0E 13FC FFFF 0001 0426         		move.b	#-1,_KeyState1
   1555 FFFC0E16 6000 FF04                   		bra		.0003
   1556 FFFC0E1A                             .doExtend:
   1557 FFFC0E1A 0039 0080 0001 0427         		or.b	#$80,_KeyState2
   1558 FFFC0E22 6000 FEF8                   		bra		.0003
   1559 FFFC0E26                             .doCtrl:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 27
bootrom.asm
   1560 FFFC0E26 1239 0001 0426              		move.b	_KeyState1,d1
   1561 FFFC0E2C 4239 0001 0426              		clr.b	_KeyState1
   1562 FFFC0E32 4A01                        		tst.b	d1
   1563 FFFC0E34 6A0C                        		bpl.s	.0004
   1564 FFFC0E36 08B9 0002 0001 0427         		bclr	#2,_KeyState2
   1565 FFFC0E3E 6000 FEDC                   		bra		.0003
   1566 FFFC0E42                             .0004:
   1567 FFFC0E42 08F9 0002 0001 0427         		bset	#2,_KeyState2
   1568 FFFC0E4A 6000 FED0                   		bra		.0003
   1569 FFFC0E4E                             .doAlt:
   1570 FFFC0E4E 1239 0001 0426              		move.b	_KeyState1,d1
   1571 FFFC0E54 4239 0001 0426              		clr.b	_KeyState1
   1572 FFFC0E5A 4A01                        		tst.b	d1
   1573 FFFC0E5C 6A0C                        		bpl		.0011
   1574 FFFC0E5E 08B9 0001 0001 0427         		bclr	#1,_KeyState2
   1575 FFFC0E66 6000 FEB4                   		bra		.0003
   1576 FFFC0E6A                             .0011:
   1577 FFFC0E6A 08F9 0001 0001 0427         		bset	#1,_KeyState2
   1578 FFFC0E72 6000 FEA8                   		bra		.0003
   1579 FFFC0E76                             .doTab:
   1580 FFFC0E76 2F01                        		move.l	d1,-(a7)
   1581 FFFC0E78 1239 0001 0427              	    move.b  _KeyState2,d1
   1582 FFFC0E7E 0801 0000                   	    btst	#0,d1                 ; is ALT down ?
   1583 FFFC0E82 6706                        	    beq     .0012
                                             ;    	inc     _iof_switch
   1585 FFFC0E84 221F                        	    move.l	(a7)+,d1
   1586 FFFC0E86 6000 FE94                   	    bra     .0003
   1587 FFFC0E8A                             .0012:
   1588 FFFC0E8A 221F                        	    move.l	(a7)+,d1
   1589 FFFC0E8C 6000 FF12                   	    bra     .0013
   1590 FFFC0E90                             .doShift:
   1591 FFFC0E90 1239 0001 0426              		move.b	_KeyState1,d1
   1592 FFFC0E96 4239 0001 0426              		clr.b	_KeyState1
   1593 FFFC0E9C 4A01                        		tst.b	d1
   1594 FFFC0E9E 6A0C                        		bpl.s	.0005
   1595 FFFC0EA0 08B9 0000 0001 0427         		bclr	#0,_KeyState2
   1596 FFFC0EA8 6000 FE72                   		bra		.0003
   1597 FFFC0EAC                             .0005:
   1598 FFFC0EAC 08F9 0000 0001 0427         		bset	#0,_KeyState2
   1599 FFFC0EB4 6000 FE66                   		bra		.0003
   1600 FFFC0EB8                             .doNumLock:
   1601 FFFC0EB8 0879 0004 0001 0427         		bchg	#4,_KeyState2
   1602 FFFC0EC0 6100 0026                   		bsr		KeybdSetLEDStatus
   1603 FFFC0EC4 6000 FE56                   		bra		.0003
   1604 FFFC0EC8                             .doCapsLock:
   1605 FFFC0EC8 0879 0005 0001 0427         		bchg	#5,_KeyState2
   1606 FFFC0ED0 6100 0016                   		bsr		KeybdSetLEDStatus
   1607 FFFC0ED4 6000 FE46                   		bra		.0003
   1608 FFFC0ED8                             .doScrollLock:
   1609 FFFC0ED8 0879 0006 0001 0427         		bchg	#6,_KeyState2
   1610 FFFC0EE0 6100 0006                   		bsr		KeybdSetLEDStatus
   1611 FFFC0EE4 6000 FE36                   		bra		.0003
                                             
   1613 FFFC0EE8                             KeybdSetLEDStatus:
   1614 FFFC0EE8 48E7 3000                   		movem.l	d2/d3,-(a7)
   1615 FFFC0EEC 4239 0001 0428              		clr.b	KeybdLEDs
   1616 FFFC0EF2 0839 0004 0001 0427         		btst	#4,_KeyState2
   1617 FFFC0EFA 6708                        		beq.s	.0002
   1618 FFFC0EFC 13FC 0002 0001 0428         		move.b	#2,KeybdLEDs
   1619 FFFC0F04                             .0002:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 28
bootrom.asm
   1620 FFFC0F04 0839 0005 0001 0427         		btst	#5,_KeyState2
   1621 FFFC0F0C 6708                        		beq.s	.0003
   1622 FFFC0F0E 08F9 0002 0001 0428         		bset	#2,KeybdLEDs
   1623 FFFC0F16                             .0003:
   1624 FFFC0F16 0839 0006 0001 0427         		btst	#6,_KeyState2
   1625 FFFC0F1E 6708                        		beq.s	.0004
   1626 FFFC0F20 08F9 0000 0001 0428         		bset	#0,KeybdLEDs
   1627 FFFC0F28                             .0004:
   1628 FFFC0F28 123C 00ED                   		move.b	#$ED,d1
   1629 FFFC0F2C 6100 002C                   		bsr		KeybdSendByte
   1630 FFFC0F30 6100 FD80                   		bsr		KeybdWaitTx
   1631 FFFC0F34 6100 FD58                   		bsr		KeybdRecvByte
   1632 FFFC0F38 4A01                        		tst.b	d1
   1633 FFFC0F3A 6B18                        		bmi		.0001
   1634 FFFC0F3C B2BC 0000 00FA              		cmp		#$FA,d1
   1635 FFFC0F42 1239 0001 0428              		move.b	KeybdLEDs,d1
   1636 FFFC0F48 6100 0010                   		bsr		KeybdSendByte
   1637 FFFC0F4C 6100 FD64                   		bsr		KeybdWaitTx
   1638 FFFC0F50 6100 FD3C                   		bsr		KeybdRecvByte
   1639 FFFC0F54                             .0001:
   1640 FFFC0F54 4CDF 000C                   		movem.l	(a7)+,d2/d3
   1641 FFFC0F58 4E75                        		rts
                                             
   1643 FFFC0F5A                             KeybdSendByte:
   1644 FFFC0F5A 13C1 FFDC 0000              		move.b	d1,KEYBD
   1645 FFFC0F60 4E75                        		rts
                                             	
   1647 FFFC0F62                             Wait10ms:
   1648 FFFC0F62 2F03                        		move.l	d3,-(a7)
   1649 FFFC0F64 263C 0000 03E8              		move.l	#1000,d3
   1650 FFFC0F6A                             .0001:
   1651 FFFC0F6A 51CB FFFE                   		dbra	d3,.0001
   1652 FFFC0F6E 261F                        		move.l	(a7)+,d3
   1653 FFFC0F70 4E75                        		rts
                                             
                                             
                                             ;--------------------------------------------------------------------------
                                             ; PS2 scan codes to ascii conversion tables.
                                             ;--------------------------------------------------------------------------
                                             ;
   1660 FFFC0F72                             _unshiftedScanCodes:
   1661 FFFC0F72 2E A9 2E A5 A3 A1 A2 AC     	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
                                             
   1663 FFFC0F7A 2E AA A8 A6 A4 09 60 2E     	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
                                             
   1665 FFFC0F82 2E 2E 2E 2E 2E 71 31 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
                                             
   1667 FFFC0F8A 2E 2E 7A 73 61 77 32 2E     	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
                                             
   1669 FFFC0F92 2E 63 78 64 65 34 33 2E     	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
                                             
   1671 FFFC0F9A 2E 20 76 66 74 72 35 2E     	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
                                             
   1673 FFFC0FA2 2E 6E 62 68 67 79 36 2E     	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
                                             
   1675 FFFC0FAA 2E 2E 6D 6A 75 37 38 2E     	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
                                             
   1677 FFFC0FB2 2E 2C 6B 69 6F 30 39 2E     	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
                                             
   1679 FFFC0FBA 2E 2E 2F 6C 3B 70 2D 2E     	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 29
bootrom.asm
                                             
   1681 FFFC0FC2 2E 2E 27 2E 5B 3D 2E 2E     	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
                                             
   1683 FFFC0FCA AD 2E 0D 5D 2E 5C 2E 2E     	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
                                             
   1685 FFFC0FD2 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1687 FFFC0FDA 2E 95 2E 93 94 2E 2E 2E     	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                             
   1689 FFFC0FE2 98 7F 92 2E 91 90 1B AF     	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
                                             
   1691 FFFC0FEA AB 2E 97 2E 2E 96 AE 2E     	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
                                             
                                             
   1694 FFFC0FF2 2E 2E 2E A7 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
                                             
   1696 FFFC0FFA 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1698 FFFC1002 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1700 FFFC100A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1702 FFFC1012 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1704 FFFC101A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1706 FFFC1022 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1708 FFFC102A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1710 FFFC1032 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1712 FFFC103A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1714 FFFC1042 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1716 FFFC104A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1718 FFFC1052 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1720 FFFC105A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1722 FFFC1062 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1724 FFFC106A 2E 2E FA 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1727 FFFC1072                             _shiftedScanCodes:
   1728 FFFC1072 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1730 FFFC107A 2E 2E 2E 2E 2E 09 7E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                             
   1732 FFFC1082 2E 2E 2E 2E 2E 51 21 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
                                             
   1734 FFFC108A 2E 2E 5A 53 41 57 40 2E     	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
                                             
   1736 FFFC1092 2E 43 58 44 45 24 23 2E     	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
                                             
   1738 FFFC109A 2E 20 56 46 54 52 25 2E     	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
                                             
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 30
bootrom.asm
   1740 FFFC10A2 2E 4E 42 48 47 59 5E 2E     	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
                                             
   1742 FFFC10AA 2E 2E 4D 4A 55 26 2A 2E     	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
                                             
   1744 FFFC10B2 2E 3C 4B 49 4F 29 28 2E     	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
                                             
   1746 FFFC10BA 2E 3E 3F 4C 3A 50 5F 2E     	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
                                             
   1748 FFFC10C2 2E 2E 22 2E 7B 2B 2E 2E     	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                             
   1750 FFFC10CA 2E 2E 0D 7D 2E 7C 2E 2E     	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                             
   1752 FFFC10D2 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1754 FFFC10DA 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1756 FFFC10E2 2E 7F 2E 2E 2E 2E 1B 2E     	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                             
   1758 FFFC10EA 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1761 FFFC10F2 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1763 FFFC10FA 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1765 FFFC1102 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1767 FFFC110A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1769 FFFC1112 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1771 FFFC111A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1773 FFFC1122 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1775 FFFC112A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1777 FFFC1132 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1779 FFFC113A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1781 FFFC1142 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1783 FFFC114A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1785 FFFC1152 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1787 FFFC115A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1789 FFFC1162 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1791 FFFC116A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
                                             ; control
   1795 FFFC1172                             _keybdControlCodes:
   1796 FFFC1172 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1798 FFFC117A 2E 2E 2E 2E 2E 09 7E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
                                             
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 31
bootrom.asm
   1800 FFFC1182 2E 2E 2E 2E 2E 11 21 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
                                             
   1802 FFFC118A 2E 2E 1A 13 01 17 40 2E     	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
                                             
   1804 FFFC1192 2E 03 18 04 05 24 23 2E     	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
                                             
   1806 FFFC119A 2E 20 16 06 14 12 25 2E     	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
                                             
   1808 FFFC11A2 2E 0E 02 08 07 19 5E 2E     	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
                                             
   1810 FFFC11AA 2E 2E 0D 0A 15 26 2A 2E     	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
                                             
   1812 FFFC11B2 2E 3C 0B 09 0F 29 28 2E     	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
                                             
   1814 FFFC11BA 2E 3E 3F 0C 3A 10 5F 2E     	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
                                             
   1816 FFFC11C2 2E 2E 22 2E 7B 2B 2E 2E     	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
                                             
   1818 FFFC11CA 2E 2E 0D 7D 2E 7C 2E 2E     	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
                                             
   1820 FFFC11D2 2E 2E 2E 2E 2E 2E 08 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
                                             
   1822 FFFC11DA 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1824 FFFC11E2 2E 7F 2E 2E 2E 2E 1B 2E     	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
                                             
   1826 FFFC11EA 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
                                             
   1829 FFFC11F2                             _keybdExtendedCodes:
   1830 FFFC11F2 2E 2E 2E 2E A3 A1 A2 2E     	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
                                             
   1832 FFFC11FA 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1834 FFFC1202 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1836 FFFC120A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1838 FFFC1212 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1840 FFFC121A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1842 FFFC1222 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1844 FFFC122A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1846 FFFC1232 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1848 FFFC123A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1850 FFFC1242 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1852 FFFC124A 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1854 FFFC1252 2E 2E 2E 2E 2E 2E 2E 2E     	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
                                             
   1856 FFFC125A 2E 95 2E 93 94 2E 2E 2E     	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
                                             
   1858 FFFC1262 98 99 92 2E 91 90 2E 2E     	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
                                             
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 32
bootrom.asm
   1860 FFFC126A 2E 2E 97 2E 2E 96 2E 2E     	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
                                             
                                             
                                             
                                             ;==============================================================================
                                             ;==============================================================================
                                             ; Monitor
                                             ;==============================================================================
                                             ;==============================================================================
                                             ;
   1870 FFFC1272                             StartMon:
   1871 FFFC1272                             Monitor:
                                             ;	lea		STACK,a7		; reset the stack pointer
   1873 FFFC1272 4239 0001 0424              		clr.b	KeybdEcho		; turn off keyboard echo
   1874 FFFC1278                             PromptLn:
   1875 FFFC1278 6100 EFA8                   		bsr		CRLF
   1876 FFFC127C 123C 0024                   		move.b	#'$',d1
   1877 FFFC1280 6100 EFE6                   		bsr		DisplayChar
                                             
                                             ; Get characters until a CR is keyed
                                             ;
   1881 FFFC1284                             Prompt3:
   1882 FFFC1284 6100 FA66                   		bsr		GetKey
   1883 FFFC1288 0C01 000D                   		cmpi.b	#CR,d1
   1884 FFFC128C 6706                        		beq.s	Prompt1
   1885 FFFC128E 6100 EFD8                   		bsr		DisplayChar
   1886 FFFC1292 60F0                        		bra.s	Prompt3
                                             
                                             ; Process the screen line that the CR was keyed on
                                             ;
   1890 FFFC1294                             Prompt1:
   1891 FFFC1294 4239 0001 0419              		clr.b	CursorCol		; go back to the start of the line
   1892 FFFC129A 6100 EF9C                   		bsr		CalcScreenLoc	; a0 = screen memory location
   1893 FFFC129E 1218                        		move.b	(a0)+,d1
   1894 FFFC12A0 0C01 0024                   		cmpi.b	#'$',d1			; skip over '$' prompt character
   1895 FFFC12A4 6602                        		bne.s	Prompt2
   1896 FFFC12A6 1218                        		move.b	(a0)+,d1
                                             	
                                             ; Dispatch based on command character
                                             ;
   1900 FFFC12A8                             Prompt2:
   1901 FFFC12A8 0C01 0061                   		cmpi.b	#'a',d1
   1902 FFFC12AC 6700 0BE2                   		beq		AudioInputTest
   1903 FFFC12B0 0C01 0062                   		cmpi.b	#'b',d1
   1904 FFFC12B4 6700 F6CA                   		beq		BouncingBalls
   1905 FFFC12B8 0C01 0067                   		cmpi.b	#'g',d1
   1906 FFFC12BC 6700 07AE                   		beq		GraphicsDemo
   1907 FFFC12C0 0C01 003A                   		cmpi.b	#':',d1			; $: - edit memory
   1908 FFFC12C4 6700 0206                   		beq		EditMem
   1909 FFFC12C8 0C01 0044                   		cmpi.b	#'D',d1			; $D - dump memory
   1910 FFFC12CC 6700 026C                   		beq		DumpMem
   1911 FFFC12D0 0C01 0046                   		cmpi.b	#'F',d1
   1912 FFFC12D4 6700 019C                   		beq		FillMem
   1913 FFFC12D8 0C01 0042                   		cmpi.b	#'B',d1			; $B - start tiny basic
   1914 FFFC12DC 6606                        		bne.s	.0001
   1915 FFFC12DE 4EF9 FFFC C000              		jmp		$FFFCC000
   1916 FFFC12E4                             .0001:
   1917 FFFC12E4 0C01 004A                   		cmpi.b	#'J',d1			; $J - execute code
   1918 FFFC12E8 6700 0240                   		beq		ExecuteCode
   1919 FFFC12EC 0C01 004C                   		cmpi.b	#'L',d1			; $L - load S19 file
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 33
bootrom.asm
   1920 FFFC12F0 6700 0492                   		beq		LoadS19
   1921 FFFC12F4 0C01 003F                   		cmpi.b	#'?',d1			; $? - display help
   1922 FFFC12F8 672A                        		beq		DisplayHelp
   1923 FFFC12FA 0C01 0043                   		cmpi.b	#'C',d1			; $C - clear screen
   1924 FFFC12FE 6704                        		beq		TestCLS
   1925 FFFC1300 6000 FF70                   		bra		Monitor
                                             
   1927 FFFC1304                             TestCLS:
   1928 FFFC1304 1218                        		move.b	(a0)+,d1
   1929 FFFC1306 5282                        		addq	#1,d2
   1930 FFFC1308 0C01 004C                   		cmpi.b	#'L',d1
   1931 FFFC130C 6600 FF64                   		bne		Monitor
   1932 FFFC1310 1218                        		move.b	(a0)+,d1
   1933 FFFC1312 5282                        		addq	#1,d2
   1934 FFFC1314 0C01 0053                   		cmpi.b	#'S',d1
   1935 FFFC1318 6600 FF58                   		bne		Monitor
   1936 FFFC131C 6100 02DC                   		bsr		ClearScreen
   1937 FFFC1320 6000 FF50                   		bra		Monitor
                                             	
   1939 FFFC1324                             DisplayHelp:
   1940 FFFC1324 43F9 FFFC 1334              		lea		HelpMsg,a1
   1941 FFFC132A 4EB9 FFFC 043A              		jsr		DisplayString
   1942 FFFC1330 6000 FF40                   		bra		Monitor
                                             
   1944 FFFC1334                             HelpMsg:
   1945 FFFC1334 3F 20 3D 20 44 69 73 70     		dc.b	"? = Display help",CR,LF
   1946 FFFC133C 6C 61 79 20 68 65 6C 70     
   1947 FFFC1344 0D 0A                       
   1948 FFFC1346 43 4C 53 20 3D 20 63 6C     		dc.b	"CLS = clear screen",CR,LF
   1949 FFFC134E 65 61 72 20 73 63 72 65     
   1950 FFFC1356 65 6E 0D 0A                 
   1951 FFFC135A 3A 20 3D 20 45 64 69 74     		dc.b	": = Edit memory bytes",CR,LF
   1952 FFFC1362 20 6D 65 6D 6F 72 79 20     
   1953 FFFC136A 62 79 74 65 73 0D 0A        
   1954 FFFC1371 46 20 3D 20 46 69 6C 6C     		dc.b	"F = Fill memory",CR,LF
   1955 FFFC1379 20 6D 65 6D 6F 72 79 0D     
   1956 FFFC1381 0A                          
   1957 FFFC1382 4C 20 3D 20 4C 6F 61 64     		dc.b	"L = Load S19 file",CR,LF
   1958 FFFC138A 20 53 31 39 20 66 69 6C     
   1959 FFFC1392 65 0D 0A                    
   1960 FFFC1395 44 20 3D 20 44 75 6D 70     		dc.b	"D = Dump memory",CR,LF
   1961 FFFC139D 20 6D 65 6D 6F 72 79 0D     
   1962 FFFC13A5 0A                          
   1963 FFFC13A6 42 20 3D 20 73 74 61 72     		dc.b	"B = start tiny basic",CR,LF
   1964 FFFC13AE 74 20 74 69 6E 79 20 62     
   1965 FFFC13B6 61 73 69 63 0D 0A           
   1966 FFFC13BC 4A 20 3D 20 4A 75 6D 70     		dc.b	"J = Jump to code",CR,LF,0
   1967 FFFC13C4 20 74 6F 20 63 6F 64 65     
   1968 FFFC13CC 0D 0A 00                    
   1969 FFFC13CF FF                         		even
                                             
                                             ;------------------------------------------------------------------------------
                                             ; This routine borrowed from Gordo's Tiny Basic interpreter.
                                             ; Used to fetch a command line. (Not currently used).
                                             ;
                                             ; d0.b	- command prompt
                                             ;------------------------------------------------------------------------------
                                             
   1978 FFFC13D0                             GetCmdLine:
   1979 FFFC13D0 6100 EE96                   		bsr		DisplayChar		; display prompt
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 34
bootrom.asm
   1980 FFFC13D4 103C 0020                   		move.b	#' ',d0
   1981 FFFC13D8 6100 EE8E                   		bsr		DisplayChar
   1982 FFFC13DC 41F9 0001 0800              		lea		CmdBuf,a0
   1983 FFFC13E2                             .0001:
   1984 FFFC13E2 6100 F908                   		bsr		GetKey
   1985 FFFC13E6 B03C 0008                   		cmp.b	#CTRLH,d0
   1986 FFFC13EA 6726                        		beq.s	.0003
   1987 FFFC13EC B03C 0018                   		cmp.b	#CTRLX,d0
   1988 FFFC13F0 6744                        		beq.s	.0004
   1989 FFFC13F2 B03C 000D                   		cmp.b	#CR,d0
   1990 FFFC13F6 6706                        		beq.s	.0002
   1991 FFFC13F8 B03C 0020                   		cmp.b	#' ',d0
   1992 FFFC13FC 65E4                        		bcs.s	.0001
   1993 FFFC13FE                             .0002:
   1994 FFFC13FE 10C0                        		move.b	d0,(a0)+
   1995 FFFC1400 6100 EE66                   		bsr		DisplayChar
   1996 FFFC1404 B03C 000D                   		cmp.b	#CR,d0
   1997 FFFC1408 675E                        		beq		.0007
   1998 FFFC140A B1FC 0001 084F              		cmp.l	#CmdBufEnd-1,a0
   1999 FFFC1410 65D0                        		bcs.s	.0001
   2000 FFFC1412                             .0003:
   2001 FFFC1412 103C 0008                   		move.b	#CTRLH,d0
   2002 FFFC1416 6100 EE50                   		bsr		DisplayChar
   2003 FFFC141A 103C 0020                   		move.b	#' ',d0
   2004 FFFC141E 6100 EE48                   		bsr		DisplayChar
   2005 FFFC1422 B1FC 0001 0800              		cmp.l	#CmdBuf,a0
   2006 FFFC1428 63B8                        		bls.s	.0001
   2007 FFFC142A 103C 0008                   		move.b	#CTRLH,d0
   2008 FFFC142E 6100 EE38                   		bsr		DisplayChar
   2009 FFFC1432 5388                        		subq.l	#1,a0
   2010 FFFC1434 60AC                        		bra.s	.0001
   2011 FFFC1436                             .0004:
   2012 FFFC1436 2208                        		move.l	a0,d1
   2013 FFFC1438 0481 0001 0800              		sub.l	#CmdBuf,d1
   2014 FFFC143E 671E                        		beq.s	.0006
   2015 FFFC1440 5381                        		subq	#1,d1
   2016 FFFC1442                             .0005:
   2017 FFFC1442 103C 0008                   		move.b	#CTRLH,d0
   2018 FFFC1446 6100 EE20                   		bsr		DisplayChar
   2019 FFFC144A 103C 0020                   		move.b	#' ',d0
   2020 FFFC144E 6100 EE18                   		bsr		DisplayChar
   2021 FFFC1452 103C 0008                   		move.b	#CTRLH,d0
   2022 FFFC1456 6100 EE10                   		bsr		DisplayChar
   2023 FFFC145A 51C9 FFE6                   		dbra	d1,.0005
   2024 FFFC145E                             .0006:
   2025 FFFC145E 41F9 0001 0800              		lea		CmdBuf,a0
   2026 FFFC1464 6000 FF7C                   		bra		.0001
   2027 FFFC1468                             .0007:
   2028 FFFC1468 103C 000A                   		move.b	#LF,d0
   2029 FFFC146C 6100 EDFA                   		bsr		DisplayChar
   2030 FFFC1470 4E75                        		rts
                                             
                                             		
                                             ;------------------------------------------------------------------------------
                                             ; Fill memory
                                             ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                                             ; FW = fill words
                                             ; FL = fill longs
                                             ; F = fill bytes
                                             ;------------------------------------------------------------------------------
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 35
bootrom.asm
                                             ;
   2041 FFFC1472                             FillMem:
   2042 FFFC1472 1218                        		move.b	(a0)+,d1
                                             		;bsr		ScreenToAscii
   2044 FFFC1474 1801                        		move.b	d1,d4			; d4 = fill size
   2045 FFFC1476 6100 0044                   		bsr		ignBlanks
   2046 FFFC147A 6100 00F8                   		bsr		GetHexNumber
   2047 FFFC147E 2241                        		move.l	d1,a1			; a1 = start
   2048 FFFC1480 6100 003A                   		bsr		ignBlanks
   2049 FFFC1484 6100 00EE                   		bsr		GetHexNumber
   2050 FFFC1488 2601                        		move.l	d1,d3			; d3 = count
   2051 FFFC148A 6100 0030                   		bsr		ignBlanks
   2052 FFFC148E 6100 00E4                   		bsr		GetHexNumber	; fill value
   2053 FFFC1492 0C04 004C                   		cmpi.b	#'L',d4
   2054 FFFC1496 660A                        		bne		fmem1
   2055 FFFC1498                             fmemL:
   2056 FFFC1498 22C1                        		move.l	d1,(a1)+
   2057 FFFC149A 5383                        		sub.l	#1,d3
   2058 FFFC149C 66FA                        		bne.s	fmemL
   2059 FFFC149E 6000 FDD2                   		bra		Monitor
   2060 FFFC14A2                             fmem1
   2061 FFFC14A2 0C04 0057                   		cmpi.b	#'W',d4
   2062 FFFC14A6 660A                        		bne		fmemB
   2063 FFFC14A8                             fmemW:
   2064 FFFC14A8 32C1                        		move.w	d1,(a1)+
   2065 FFFC14AA 5383                        		sub.l	#1,d3
   2066 FFFC14AC 66FA                        		bne.s	fmemW
   2067 FFFC14AE 6000 FDC2                   		bra		Monitor
   2068 FFFC14B2                             fmemB:
   2069 FFFC14B2 12C1                        		move.b	d1,(a1)+
   2070 FFFC14B4 5383                        		sub.l	#1,d3
   2071 FFFC14B6 66FA                        		bne.s	fmemB
   2072 FFFC14B8 6000 FDB8                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Modifies:
                                             ;	a0	- text pointer
                                             ;------------------------------------------------------------------------------
                                             ;
   2079 FFFC14BC                             ignBlanks:
   2080 FFFC14BC 3F01                        		move.w	d1,-(a7)
   2081 FFFC14BE 1218                        		move.b	(a0)+,d1
   2082 FFFC14C0 0C01 0020                   		cmpi.b	#' ',d1
   2083 FFFC14C4 67F6                        		beq.s	ignBlanks
   2084 FFFC14C6 5388                        		subq	#1,a0
   2085 FFFC14C8 321F                        		move.w	(a7)+,d1
   2086 FFFC14CA 4E75                        		rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Edit memory byte.
                                             ;------------------------------------------------------------------------------
                                             ;
   2092 FFFC14CC                             EditMem:
   2093 FFFC14CC 6100 FFEE                   		bsr		ignBlanks
   2094 FFFC14D0 6100 00A2                   		bsr		GetHexNumber
   2095 FFFC14D4 2241                        		move.l	d1,a1
   2096 FFFC14D6                             edtmem1:
   2097 FFFC14D6 6100 FFE4                   		bsr		ignBlanks
   2098 FFFC14DA 6100 0098                   		bsr		GetHexNumber
   2099 FFFC14DE 12C1                        		move.b	d1,(a1)+
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 36
bootrom.asm
   2100 FFFC14E0 6100 FFDA                   		bsr		ignBlanks
   2101 FFFC14E4 6100 008E                   		bsr		GetHexNumber
   2102 FFFC14E8 12C1                        		move.b	d1,(a1)+
   2103 FFFC14EA 6100 FFD0                   		bsr		ignBlanks
   2104 FFFC14EE 6100 0084                   		bsr		GetHexNumber
   2105 FFFC14F2 12C1                        		move.b	d1,(a1)+
   2106 FFFC14F4 6100 FFC6                   		bsr		ignBlanks
   2107 FFFC14F8 6100 007A                   		bsr		GetHexNumber
   2108 FFFC14FC 12C1                        		move.b	d1,(a1)+
   2109 FFFC14FE 6100 FFBC                   		bsr		ignBlanks
   2110 FFFC1502 6100 0070                   		bsr		GetHexNumber
   2111 FFFC1506 12C1                        		move.b	d1,(a1)+
   2112 FFFC1508 6100 FFB2                   		bsr		ignBlanks
   2113 FFFC150C 6100 0066                   		bsr		GetHexNumber
   2114 FFFC1510 12C1                        		move.b	d1,(a1)+
   2115 FFFC1512 6100 FFA8                   		bsr		ignBlanks
   2116 FFFC1516 6100 005C                   		bsr		GetHexNumber
   2117 FFFC151A 12C1                        		move.b	d1,(a1)+
   2118 FFFC151C 6100 FF9E                   		bsr		ignBlanks
   2119 FFFC1520 6100 0052                   		bsr		GetHexNumber
   2120 FFFC1524 12C1                        		move.b	d1,(a1)+
   2121 FFFC1526 6000 FD4A                   		bra		Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Execute code at the specified address.
                                             ;------------------------------------------------------------------------------
                                             ;
   2127 FFFC152A                             ExecuteCode:
   2128 FFFC152A 6100 FF90                   		bsr		ignBlanks
   2129 FFFC152E 6100 0044                   		bsr		GetHexNumber
   2130 FFFC1532 2041                        		move.l	d1,a0
   2131 FFFC1534 4E90                        		jsr		(a0)
   2132 FFFC1536 6000 FD3A                   		bra     Monitor
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Do a memory dump of the requested location.
                                             ;------------------------------------------------------------------------------
                                             ;
   2138 FFFC153A                             DumpMem:
   2139 FFFC153A 6100 FF80                   		bsr		ignBlanks
   2140 FFFC153E 6100 0034                   		bsr		GetHexNumber
   2141 FFFC1542 4A00                        		tst.b	d0				; was there a number ?
   2142 FFFC1544 6700 FD2C                   		beq		Monitor			; no, other garbage, just ignore
   2143 FFFC1548 2601                        		move.l	d1,d3			; save off start of range
   2144 FFFC154A 6100 FF70                   		bsr		ignBlanks
   2145 FFFC154E 6100 0024                   		bsr		GetHexNumber
   2146 FFFC1552 4A00                        		tst.b	d0
   2147 FFFC1554 6608                        		bne.s	DumpMem1
   2148 FFFC1556 2203                        		move	d3,d1
   2149 FFFC1558 0681 0000 0040              		addi.l	#64,d1			; no end specified, just dump 64 bytes
   2150 FFFC155E                             DumpMem1:
   2151 FFFC155E 2043                        		move.l	d3,a0
   2152 FFFC1560 2241                        		move.l	d1,a1
   2153 FFFC1562 4EB9 FFFC 0222              		jsr		CRLF
   2154 FFFC1568                             .0001:
   2155 FFFC1568 B3C8                        		cmpa.l	a0,a1
   2156 FFFC156A 6200 FD06                   		bhi		Monitor
   2157 FFFC156E 6100 F6C6                   		bsr		DisplayMem
   2158 FFFC1572 60F4                        		bra.s	.0001
                                             
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 37
bootrom.asm
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get a hexidecimal number. Maximum of eight digits.
                                             ;
                                             ; Returns:
                                             ;	d0 = number of digits
                                             ;	d1 = value of number
                                             ;------------------------------------------------------------------------------
                                             ;
   2169 FFFC1574                             GetHexNumber:
   2170 FFFC1574 2F02                        		move.l	d2,-(a7)
   2171 FFFC1576 4282                        		clr.l	d2
   2172 FFFC1578 7000                        		moveq	#0,d0
   2173 FFFC157A                             .0002:
   2174 FFFC157A 1218                        		move.b	(a0)+,d1
   2175 FFFC157C 6100 0020                   		bsr		AsciiToHexNybble
   2176 FFFC1580 B23C 00FF                   		cmp.b	#0xff,d1
   2177 FFFC1584 6712                        		beq.s	.0001
   2178 FFFC1586 E98A                        		lsl.l	#4,d2
   2179 FFFC1588 0281 0000 000F              		andi.l	#0x0f,d1
   2180 FFFC158E 8481                        		or.l	d1,d2
   2181 FFFC1590 5280                        		addq	#1,d0
   2182 FFFC1592 0C00 0008                   		cmpi.b	#8,d0
   2183 FFFC1596 65E2                        		blo.s	.0002
   2184 FFFC1598                             .0001:
   2185 FFFC1598 2202                        		move.l	d2,d1
   2186 FFFC159A 241F                        		move.l	(a7)+,d2
   2187 FFFC159C 4E75                        		rts	
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                                             ; to a hex nybble.
                                             ;------------------------------------------------------------------------------
                                             ;
   2194 FFFC159E                             AsciiToHexNybble:
   2195 FFFC159E 0C01 0030                   		cmpi.b	#'0',d1
   2196 FFFC15A2 6538                        		blo.s	gthx3
   2197 FFFC15A4 0C01 0039                   		cmpi.b	#'9',d1
   2198 FFFC15A8 6206                        		bhi.s	gthx5
   2199 FFFC15AA 0401 0030                   		subi.b	#'0',d1
   2200 FFFC15AE 4E75                        		rts
   2201 FFFC15B0                             gthx5:
   2202 FFFC15B0 0C01 0041                   		cmpi.b	#'A',d1
   2203 FFFC15B4 6526                        		blo.s	gthx3
   2204 FFFC15B6 0C01 0046                   		cmpi.b	#'F',d1
   2205 FFFC15BA 620A                        		bhi.s	gthx6
   2206 FFFC15BC 0401 0041                   		subi.b	#'A',d1
   2207 FFFC15C0 0601 000A                   		addi.b	#10,d1
   2208 FFFC15C4 4E75                        		rts
   2209 FFFC15C6                             gthx6:
   2210 FFFC15C6 0C01 0061                   		cmpi.b	#'a',d1
   2211 FFFC15CA 6510                        		blo.s	gthx3
   2212 FFFC15CC 0C01 0066                   		cmpi.b	#'f',d1
   2213 FFFC15D0 620A                        		bhi.s	gthx3
   2214 FFFC15D2 0401 0061                   		subi.b	#'a',d1
   2215 FFFC15D6 0601 000A                   		addi.b	#10,d1
   2216 FFFC15DA 4E75                        		rts
   2217 FFFC15DC                             gthx3:
   2218 FFFC15DC 72FF                        		moveq	#-1,d1		; not a hex number
   2219 FFFC15DE 4E75                        		rts
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 38
bootrom.asm
                                             
                                             ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                             ; The fast way to clear the screen. Uses the blitter.
                                             ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                             
   2225 FFFC15E0                             WaitBlit:
   2226 FFFC15E0 48E7 8004                   		movem.l	d0/a5,-(a7)
   2227 FFFC15E4 4BF9 FFE0 0000              		lea		VDGREG,a5
   2228 FFFC15EA                             .0003:
   2229 FFFC15EA 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2230 FFFC15EE 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2231 FFFC15F2 67F6                        		beq.s	.0003				; branch if not done
   2232 FFFC15F4 4CDF 2001                   		movem.l	(a7)+,d0/a5
   2233 FFFC15F8 4E75                        		rts
                                             
   2235 FFFC15FA                             ClearScreen:
   2236 FFFC15FA 4BF9 FFE0 0000              		lea		VDGREG,a5
   2237 FFFC1600 6100 FFDE                   		bsr		WaitBlit
   2238 FFFC1604 2B7C 0001 D4C0 04BC         		move.l	#BMP_WIDTH*BMP_HEIGHT,$4BC(a5)		; set transfer count  pixels
   2239 FFFC160C 3B79 0001 0004 0442         		move.w	bkcolor,$442(a5)	; set color dark blue
   2240 FFFC1614 3B7C 000D 0446              		move.w	#13,$446(a5)
   2241 FFFC161A 422D 0448                   		clr.b	$448(a5)			; queue
   2242 FFFC161E                             .0001:
   2243 FFFC161E 302D 042C                   		move.w	$42c(a5),d0			; get queue index
   2244 FFFC1622 66FA                        		bne.s	.0001				; wait for queue to empty
   2245 FFFC1624 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   2246 FFFC162C 2B7C 0000 0190 04A4         		move.l	#BMP_WIDTH,$4A4(a5)		; set destination width
   2247 FFFC1634 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   2248 FFFC163C 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   2249 FFFC1642 6100 FF9C                   		bsr		WaitBlit
   2250 FFFC1646 3B7C 0001 043E              		move.w	#1,$43E(a5)			; access z buffer
   2251 FFFC164C 2B7C 0000 1D4C 04BC         		move.l	#BMP_WIDTH*BMP_HEIGHT/16,$4BC(a5)		; set transfer count  pixels
   2252 FFFC1654 3B7C FFFF 04A8              		move.w	#$FFFF,$4A8(a5)		; set lowest priority
   2253 FFFC165A 3B7C FFFF 043C              		move.w	#$FFFF,$43C(a5)		; z layer = 3
   2254 FFFC1660 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   2255 FFFC1668 2B7C 0000 0190 04A4         		move.l	#BMP_WIDTH,$4A4(a5)		; set destination width
   2256 FFFC1670 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   2257 FFFC1678 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   2258 FFFC167E 6100 FF60                   		bsr		WaitBlit
   2259 FFFC1682 3B7C 0000 043E              		move.w	#0,$43E(a5)			; access normal buffer again
                                             
                                             		; clear virtual screen too
   2262 FFFC1688                             ClearVirtScreen:
   2263 FFFC1688 7020                        		moveq	#$20,d0				; d0 = space character
   2264 FFFC168A 323C 073A                   		move.w	#50*37,d1
   2265 FFFC168E 4BF9 1FFF 0000              		lea		VirtScreen,a5
   2266 FFFC1694                             .0001:
   2267 FFFC1694 1AC0                        		move.b	d0,(a5)+
   2268 FFFC1696 51C9 FFFC                   		dbra	d1,.0001
   2269 FFFC169A 4E75                        		rts
                                             
   2271 FFFC169C                             ScrollUp:
   2272 FFFC169C 48E7 8084                   		movem.l	d0/a0/a5,-(a7)
   2273 FFFC16A0 4BF9 FFE0 0000              		lea		VDGREG,a5
   2274 FFFC16A6                             .0003:								
   2275 FFFC16A6 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2276 FFFC16AA 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2277 FFFC16AE 67F6                        		beq.s	.0003				; branch if not done
                                             		; Channel A
   2279 FFFC16B0 2B7C 0001 C840 04B0         		move.l	#BMP_WIDTH*(BMP_HEIGHT-8),$4B0(a5)	; set source transfer count pixels
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 39
bootrom.asm
   2280 FFFC16B8 2B7C 0000 0C80 0480         		move.l	#BMP_WIDTH*8,$480(a5)		; set source bitmap address (address in graphics mem)
   2281 FFFC16C0 2B7C 0000 0000 0484         		move.l	#0,$484(a5)			; set src modulo
                                             		; Channel D
   2283 FFFC16C8 2B7C 0001 C840 04BC         		move.l	#BMP_WIDTH*(BMP_HEIGHT-8),$4BC(a5)	; set destination transfer count pixels
   2284 FFFC16D0 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   2285 FFFC16D8 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
                                             
   2287 FFFC16E0 2B7C FFFF FFFF 04A0         		move.l	#-1,$4A0(a5)		; set source width
   2288 FFFC16E8 2B7C FFFF FFFF 04A4         		move.l	#-1,$4A4(a5)		; set destination width
   2289 FFFC16F0 3B7C 0011 04AE              		move.w	#$11,$4AE(a5)		; set op A ($11 = copy A)
   2290 FFFC16F6 3B7C 8082 04AC              		move.w	#%1000000010000010,$4AC(a5)		; enable channel A,D, start transfer
                                             
                                             		; Scroll virtual screen
   2293 FFFC16FC 4BF9 1FFF 0000              		lea		VirtScreen,a5
   2294 FFFC1702 204D                        		movea.l	a5,a0
   2295 FFFC1704 1039 0001 041B              		move.b	TextCols,d0
   2296 FFFC170A 4880                        		ext.w	d0
   2297 FFFC170C D1C0                        		add.l	d0,a0
   2298 FFFC170E C0FC 0025                   		mulu	#37,d0
   2299 FFFC1712                             .0001:
   2300 FFFC1712 1AD8                        		move.b	(a0)+,(a5)+
   2301 FFFC1714 51C8 FFFC                   		dbra	d0,.0001
   2302 FFFC1718 4CDF 2101                   		movem.l	(a7)+,d0/a0/a5
                                             
   2304 FFFC171C                             BlankLastLine:
   2305 FFFC171C 48E7 8004                   		movem.l	d0/a5,-(a7)
                                             		; Channel D
   2307 FFFC1720 4BF9 FFE0 0000              		lea		VDGREG,a5
   2308 FFFC1726                             .0003:								
   2309 FFFC1726 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2310 FFFC172A 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2311 FFFC172E 67F6                        		beq.s	.0003				; branch if not done
   2312 FFFC1730 2B7C 0000 0C80 04BC         		move.l	#BMP_WIDTH*8,$4BC(a5)		; set destination transfer count pixels
   2313 FFFC1738 2B7C 0001 C840 0498         		move.l	#BMP_WIDTH*(BMP_HEIGHT-8),$498(a5)	; set destination address
   2314 FFFC1740 2B7C 0000 0000 049C         		move.l	#0,$49C(a5)			; set dst modulo
   2315 FFFC1748 2B7C FFFF FFFF 04A4         		move.l	#-1,$4A4(a5)		; set destination width
   2316 FFFC1750 3B79 0001 0004 0442         		move.w	bkcolor,$442(a5)	; set color dark blue
   2317 FFFC1758 3B7C 000D 0446              		move.w	#13,$446(a5)
   2318 FFFC175E 422D 0448                   		clr.b	$448(a5)			; queue
   2319 FFFC1762                             .0002:
   2320 FFFC1762 302D 042C                   		move.w	$42c(a5),d0
   2321 FFFC1766 66FA                        		bne.s	.0002
   2322 FFFC1768 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
   2323 FFFC176E 4BF9 1FFF 073A              		lea		VirtScreen+50*37,a5
   2324 FFFC1774 7028                        		moveq	#40,d0
   2325 FFFC1776                             .0001:
   2326 FFFC1776 1AFC 0020                   		move.b	#$20,(a5)+
   2327 FFFC177A 51C8 FFFA                   		dbra	d0,.0001
   2328 FFFC177E 4CDF 2001                   		movem.l	(a7)+,d0/a5
   2329 FFFC1782 4E75                        		rts
                                             
                                             ;==============================================================================
                                             ; Load an S19 format file
                                             ;==============================================================================
                                             ;
   2335 FFFC1784                             LoadS19:
   2336 FFFC1784 600A                        	bra		ProcessRec
   2337 FFFC1786                             NextRec:
   2338 FFFC1786 6100 017A                   	bsr		sGetChar
   2339 FFFC178A 0C00 000A                   	cmpi.b	#LF,d0
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 40
bootrom.asm
   2340 FFFC178E 66F6                        	bne		NextRec
   2341 FFFC1790                             ProcessRec
   2342 FFFC1790 6100 0170                   	bsr		sGetChar
   2343 FFFC1794 1800                        	move.b	d0,d4
   2344 FFFC1796 0C04 001A                   	cmpi.b	#26,d4		; CTRL-Z ?
   2345 FFFC179A 6700 FAD6                   	beq		Monitor
   2346 FFFC179E 0C04 0053                   	cmpi.b	#'S',d4
   2347 FFFC17A2 66E2                        	bne		NextRec
   2348 FFFC17A4 6100 015C                   	bsr		sGetChar
   2349 FFFC17A8 1800                        	move.b	d0,d4
   2350 FFFC17AA 0C04 0030                   	cmpi.b	#'0',d4
   2351 FFFC17AE 65D6                        	blo		NextRec
   2352 FFFC17B0 0C04 0039                   	cmpi.b	#'9',d4		; d4 = record type
   2353 FFFC17B4 62D0                        	bhi		NextRec
   2354 FFFC17B6 6100 014A                   	bsr		sGetChar
   2355 FFFC17BA 6100 FDE2                   	bsr		AsciiToHexNybble
   2356 FFFC17BE 1401                        	move.b	d1,d2
   2357 FFFC17C0 6100 0140                   	bsr		sGetChar
   2358 FFFC17C4 6100 FDD8                   	bsr		AsciiToHexNybble
   2359 FFFC17C8 E90A                        	lsl.b	#4,d2
   2360 FFFC17CA 8202                        	or.b	d2,d1		; d1 = byte count
   2361 FFFC17CC 1601                        	move.b	d1,d3		; d3 = byte count
   2362 FFFC17CE 0C04 0030                   	cmpi.b	#'0',d4		; manufacturer ID record, ignore
   2363 FFFC17D2 67B2                        	beq		NextRec
   2364 FFFC17D4 0C04 0031                   	cmpi.b	#'1',d4
   2365 FFFC17D8 676A                        	beq		ProcessS1
   2366 FFFC17DA 0C04 0032                   	cmpi.b	#'2',d4
   2367 FFFC17DE 676A                        	beq		ProcessS2
   2368 FFFC17E0 0C04 0033                   	cmpi.b	#'3',d4
   2369 FFFC17E4 676A                        	beq		ProcessS3
   2370 FFFC17E6 0C04 0035                   	cmpi.b	#'5',d4		; record count record, ignore
   2371 FFFC17EA 679A                        	beq		NextRec
   2372 FFFC17EC 0C04 0037                   	cmpi.b	#'7',d4
   2373 FFFC17F0 6764                        	beq		ProcessS7
   2374 FFFC17F2 0C04 0038                   	cmpi.b	#'8',d4
   2375 FFFC17F6 676C                        	beq		ProcessS8
   2376 FFFC17F8 0C04 0039                   	cmpi.b	#'9',d4
   2377 FFFC17FC 6774                        	beq		ProcessS9
   2378 FFFC17FE 6086                        	bra		NextRec
                                             
   2380 FFFC1800                             pcssxa
   2381 FFFC1800 0243 00FF                   	andi.w	#0xff,d3
   2382 FFFC1804 5343                        	subi.w	#1,d3			; one less for dbra
   2383 FFFC1806                             pcss1a
   2384 FFFC1806 4282                        	clr.l	d2
   2385 FFFC1808 6100 00F8                   	bsr		sGetChar
   2386 FFFC180C 6100 FD90                   	bsr		AsciiToHexNybble
   2387 FFFC1810 E98A                        	lsl.l	#4,d2
   2388 FFFC1812 8401                        	or.b	d1,d2
   2389 FFFC1814 6100 00EC                   	bsr		sGetChar
   2390 FFFC1818 6100 FD84                   	bsr		AsciiToHexNybble
   2391 FFFC181C E98A                        	lsl.l	#4,d2
   2392 FFFC181E 8401                        	or.b	d1,d2
   2393 FFFC1820 12C2                        	move.b	d2,(a1)+
   2394 FFFC1822 51CB FFE2                   	dbra	d3,pcss1a
                                             ; Get the checksum byte
   2396 FFFC1826 4282                        	clr.l	d2
   2397 FFFC1828 6100 00D8                   	bsr		sGetChar
   2398 FFFC182C 6100 FD70                   	bsr		AsciiToHexNybble
   2399 FFFC1830 E98A                        	lsl.l	#4,d2
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 41
bootrom.asm
   2400 FFFC1832 8401                        	or.b	d1,d2
   2401 FFFC1834 6100 00CC                   	bsr		sGetChar
   2402 FFFC1838 6100 FD64                   	bsr		AsciiToHexNybble
   2403 FFFC183C E98A                        	lsl.l	#4,d2
   2404 FFFC183E 8401                        	or.b	d1,d2
   2405 FFFC1840 6000 FF44                   	bra		NextRec
                                             
   2407 FFFC1844                             ProcessS1:
   2408 FFFC1844 6100 003A                   	bsr		S19Get16BitAddress
   2409 FFFC1848 60B6                        	bra		pcssxa
   2410 FFFC184A                             ProcessS2:
   2411 FFFC184A 6100 0042                   	bsr		S19Get24BitAddress
   2412 FFFC184E 60B0                        	bra		pcssxa
   2413 FFFC1850                             ProcessS3:
   2414 FFFC1850 6100 004A                   	bsr		S19Get32BitAddress
   2415 FFFC1854 60AA                        	bra		pcssxa
   2416 FFFC1856                             ProcessS7:
   2417 FFFC1856 6100 0044                   	bsr		S19Get32BitAddress
   2418 FFFC185A 23C9 0001 0438              	move.l	a1,S19StartAddress
   2419 FFFC1860 6000 FA10                   	bra		Monitor
   2420 FFFC1864                             ProcessS8:
   2421 FFFC1864 6100 0028                   	bsr		S19Get24BitAddress
   2422 FFFC1868 23C9 0001 0438              	move.l	a1,S19StartAddress
   2423 FFFC186E 6000 FA02                   	bra		Monitor
   2424 FFFC1872                             ProcessS9:
   2425 FFFC1872 6100 000C                   	bsr		S19Get16BitAddress
   2426 FFFC1876 23C9 0001 0438              	move.l	a1,S19StartAddress
   2427 FFFC187C 6000 F9F4                   	bra		Monitor
                                             
   2429 FFFC1880                             S19Get16BitAddress:
   2430 FFFC1880 4282                        	clr.l	d2
   2431 FFFC1882 6100 007E                   	bsr		sGetChar
   2432 FFFC1886 6100 FD16                   	bsr		AsciiToHexNybble
   2433 FFFC188A 1401                        	move.b	d1,d2
   2434 FFFC188C 604A                        	bra		S1932b
                                             
   2436 FFFC188E                             S19Get24BitAddress:
   2437 FFFC188E 4282                        	clr.l	d2
   2438 FFFC1890 6100 0070                   	bsr		sGetChar
   2439 FFFC1894 6100 FD08                   	bsr		AsciiToHexNybble
   2440 FFFC1898 1401                        	move.b	d1,d2
   2441 FFFC189A 6024                        	bra		S1932a
                                             
   2443 FFFC189C                             S19Get32BitAddress:
   2444 FFFC189C 4282                        	clr.l	d2
   2445 FFFC189E 6100 0062                   	bsr		sGetChar
   2446 FFFC18A2 6100 FCFA                   	bsr		AsciiToHexNybble
   2447 FFFC18A6 1401                        	move.b	d1,d2
   2448 FFFC18A8 6100 0058                   	bsr		sGetChar
   2449 FFFC18AC 6100 FCF0                   	bsr		AsciiToHexNybble
   2450 FFFC18B0 E98A                        	lsl.l	#4,d2
   2451 FFFC18B2 8401                        	or.b	d1,d2
   2452 FFFC18B4 6100 004C                   	bsr		sGetChar
   2453 FFFC18B8 6100 FCE4                   	bsr		AsciiToHexNybble
   2454 FFFC18BC E98A                        	lsl.l	#4,d2
   2455 FFFC18BE 8401                        	or.b	d1,d2
   2456 FFFC18C0                             S1932a:
   2457 FFFC18C0 6100 0040                   	bsr		sGetChar
   2458 FFFC18C4 6100 FCD8                   	bsr		AsciiToHexNybble
   2459 FFFC18C8 E98A                        	lsl.l	#4,d2
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 42
bootrom.asm
   2460 FFFC18CA 8401                        	or.b	d1,d2
   2461 FFFC18CC 6100 0034                   	bsr		sGetChar
   2462 FFFC18D0 6100 FCCC                   	bsr		AsciiToHexNybble
   2463 FFFC18D4 E98A                        	lsl.l	#4,d2
   2464 FFFC18D6 8401                        	or.b	d1,d2
   2465 FFFC18D8                             S1932b:
   2466 FFFC18D8 6100 0028                   	bsr		sGetChar
   2467 FFFC18DC 6100 FCC0                   	bsr		AsciiToHexNybble
   2468 FFFC18E0 E98A                        	lsl.l	#4,d2
   2469 FFFC18E2 8401                        	or.b	d1,d2
   2470 FFFC18E4 6100 001C                   	bsr		sGetChar
   2471 FFFC18E8 6100 FCB4                   	bsr		AsciiToHexNybble
   2472 FFFC18EC E98A                        	lsl.l	#4,d2
   2473 FFFC18EE 8401                        	or.b	d1,d2
   2474 FFFC18F0 6100 0010                   	bsr		sGetChar
   2475 FFFC18F4 6100 FCA8                   	bsr		AsciiToHexNybble
   2476 FFFC18F8 E98A                        	lsl.l	#4,d2
   2477 FFFC18FA 8401                        	or.b	d1,d2
   2478 FFFC18FC 4284                        	clr.l	d4
   2479 FFFC18FE 2242                        	move.l	d2,a1
   2480 FFFC1900 4E75                        	rts
                                             
                                             ;------------------------------------------------------------------------------
                                             ; Get a character from auxillary input, checking the keyboard status for a
                                             ; CTRL-C
                                             ;------------------------------------------------------------------------------
                                             ;
   2487 FFFC1902                             sGetChar:
   2488 FFFC1902 6100 F3D6                   	bsr		CheckForKey
   2489 FFFC1906 670C                        	beq		sgc1
   2490 FFFC1908 6100 F3E2                   	bsr		GetKey
   2491 FFFC190C 0C01 0003                   	cmpi.b	#CTRLC,d1
   2492 FFFC1910 6700 F960                   	beq		Monitor
   2493 FFFC1914                             sgc1:
   2494 FFFC1914 6100 FFFF                   	bsr		AUXIN
   2495 FFFC1918 67E8                        	beq		sGetChar
   2496 FFFC191A 1200                        	move.b	d0,d1
   2497 FFFC191C 4E75                        	rts
                                             
                                             ;==============================================================================
                                             ;==============================================================================
                                             
                                             ;------------------------------------------------------------------------------
                                             ;------------------------------------------------------------------------------
                                             ;
   2505 FFFC191E                             DisplayHexNumber:
   2506 FFFC191E 33FC A6A6 FFDC 0600         		move.w	#$A6A6,leds		; diagnostics
   2507 FFFC1926 2C7C FFE0 0000              		move.l	#VDGREG,a6
   2508 FFFC192C 343C 0007                   		move.w	#7,d2		; number-1 of digits to display
   2509 FFFC1930                             disphnum1:
   2510 FFFC1930 1001                        		move.b	d1,d0		; get digit into d0.b
   2511 FFFC1932 0240 000F                   		andi.w	#$0f,d0
   2512 FFFC1936 0C40 0009                   		cmpi.w	#$09,d0
   2513 FFFC193A 6302                        		bls.s	disphnum2
   2514 FFFC193C 5E40                        		addi.w	#7,d0
   2515 FFFC193E                             disphnum2:
   2516 FFFC193E 0640 0030                   		addi.w	#$30,d0	; convert to display char
   2517 FFFC1942 3602                        		move.w	d2,d3		; char count into d3
   2518 FFFC1944 E743                        		asl.w	#3,d3		; scale * 8
   2519 FFFC1946                             disphnum3:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 43
bootrom.asm
   2520 FFFC1946 382E 042C                   		move.w	$42C(a6),d4			; read character queue index into d4
   2521 FFFC194A B87C 001C                   		cmp.w	#28,d4					; allow up 28 entries to be in progress
   2522 FFFC194E 64F6                        		bhs.s	disphnum3				; branch if too many chars queued
   2523 FFFC1950 4880                        		ext.w	d0						; zero out high order bits
   2524 FFFC1952 3D40 0420                   		move.w	d0,$420(a6)			; set char code
   2525 FFFC1956 3D7C 7FFF 0422              		move.w	#WHITE,$422(a6)		; set fg color
   2526 FFFC195C 3D7C 000F 0424              		move.w	#DARK_BLUE,$424(a6)	; set bk color
   2527 FFFC1962 3D43 0426                   		move.w	d3,$426(a6)			; set x pos
   2528 FFFC1966 3D7C 0008 0428              		move.w	#8,$428(a6)			; set y pos
   2529 FFFC196C 3D7C 0707 042A              		move.w	#$0707,$42A(a6)		; set font x,y extent
   2530 FFFC1972 3D7C 0000 042E              		move.w	#0,$42E(a6)			; pulse character queue write signal
   2531 FFFC1978 E899                        		ror.l	#4,d1					; rot to next digit
   2532 FFFC197A 57CA FFB4                   		dbeq	d2,disphnum1
   2533 FFFC197E 4ED5                        		jmp		(a5)
                                             
                                             ;===============================================================================
                                             ;    Perform ram test. (Uses checkerboard testing).
                                             ; 
                                             ;    Return address must be stored in a3 since the stack cannot be used (it
                                             ; would get overwritten in test). Note this routine uses no ram at all.
                                             ;===============================================================================
   2541 FFFC1980                             ramtest:
   2542 FFFC1980 33FC A5A5 FFDC 0600         		move.w	#$A5A5,leds		; diagnostics
   2543 FFFC1988 207C 0003 0000                      movea.l #$30000,a0
   2544 FFFC198E 203C AAAA 5555                      move.l #$aaaa5555,d0
                                             ;-----------------------------------------------------------
                                             ;   Write checkerboard pattern to ram then read it back to
                                             ; find the highest usable ram address (maybe). This address
                                             ; must be lower than the start of the rom (0xe00000).
                                             ;-----------------------------------------------------------
   2550 FFFC1994                             ramtest1:
   2551 FFFC1994 20C0                                move.l 	d0,(a0)+
   2552 FFFC1996 2208                                move.l	a0,d1
   2553 FFFC1998 4A41                                tst.w	d1
   2554 FFFC199A 660A                                bne.s	rmtst1
   2555 FFFC199C 4BF9 FFFC 19A6                      lea		rmtst1,a5
   2556 FFFC19A2 6000 FF7A                           bra		DisplayHexNumber
   2557 FFFC19A6                             rmtst1:
   2558 FFFC19A6 33FC A9A9 FFDC 0600         		move.w	#$A9A9,leds		; diagnostics
   2559 FFFC19AE B1FC 0005 FFFC                      cmpa.l 	#$5FFFC,a0
   2560 FFFC19B4 66DE                                bne.s 	ramtest1
   2561 FFFC19B6 7200                                move.l	#0,d1
   2562 FFFC19B8 6100 E87E                           bsr		CalcScreenLoc
   2563 FFFC19BC 6000 FBA0                           bra		DumpMem1
                                             
                                             ;------------------------------------------------------
                                             ;   Save maximum useable address for later comparison.
                                             ;------------------------------------------------------
   2568 FFFC19C0                             ramtest6:
   2569 FFFC19C0 33FC A7A7 FFDC 0600         		move.w	#$A7A7,leds		; diagnostics
   2570 FFFC19C8 2448                                movea.l a0,a2
   2571 FFFC19CA 207C 0003 0000                      movea.l #$30000,a0
                                             ;--------------------------------------------
                                             ;   Read back checkerboard pattern from ram.
                                             ;--------------------------------------------
   2575 FFFC19D0                             ramtest2:
   2576 FFFC19D0 2A18                                move.l  (a0)+,d5
   2577 FFFC19D2 B5C8                                cmpa.l	a0,a2
   2578 FFFC19D4 671A                                beq.s	ramtest3
   2579 FFFC19D6 2208                                move.l	a0,d1
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 44
bootrom.asm
   2580 FFFC19D8 4A41                                tst.w	d1
   2581 FFFC19DA 660A                                bne.s	rmtst2
   2582 FFFC19DC 4BF9 FFFC 19E6                      lea		rmtst2,a5
   2583 FFFC19E2 6000 FF3A                           bra		DisplayHexNumber
   2584 FFFC19E6                             rmtst2:
   2585 FFFC19E6 0C85 AAAA 5555                      cmpi.l 	#$aaaa5555,d5
   2586 FFFC19EC 67E2                                beq.s 	ramtest2
   2587 FFFC19EE 6678                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   The following section does the same test except
                                             ; with the checkerboard order switched around.
                                             ;---------------------------------------------------
   2592 FFFC19F0                             ramtest3:                
   2593 FFFC19F0 33FC A8A8 FFDC 0600         		move.w	#$A8A8,leds		; diagnostics
   2594 FFFC19F8 207C 0003 0000                      movea.l #$30000,a0
   2595 FFFC19FE 203C 5555 AAAA                      move.l 	#$5555aaaa,d0
   2596 FFFC1A04                             ramtest4:
   2597 FFFC1A04 20C0                                move.l 	d0,(a0)+
   2598 FFFC1A06 2208                                move.l 	a0,d1
   2599 FFFC1A08 4A41                                tst.w	d1
   2600 FFFC1A0A 660A                                bne.s   rmtst3
   2601 FFFC1A0C 4BF9 FFFC 1A16                      lea		rmtst3,a5
   2602 FFFC1A12 6000 FF0A                           bra		DisplayHexNumber
   2603 FFFC1A16                             rmtst3:
   2604 FFFC1A16 B1FC 1FFF FFFC                      cmpa.l 	#$1FFFFFFC,a0
   2605 FFFC1A1C 66E6                                bne.s 	ramtest4
   2606 FFFC1A1E                             ramtest8:
   2607 FFFC1A1E 2448                                movea.l a0,a2
   2608 FFFC1A20 207C 0003 0000                      movea.l #$30000,a0
   2609 FFFC1A26                             ramtest5:
   2610 FFFC1A26 2018                                move.l 	(a0)+,d0
   2611 FFFC1A28 B5C8                                cmpa.l	a0,a2
   2612 FFFC1A2A 671A                                beq.s	rmtst5
   2613 FFFC1A2C 2208                                move.l 	a0,d1
   2614 FFFC1A2E 4A41                                tst.w	d1
   2615 FFFC1A30 660A                                bne.s	rmtst4
   2616 FFFC1A32 4BF9 FFFC 1A3C                      lea		rmtst4,a5
   2617 FFFC1A38 6000 FEE4                           bra		DisplayHexNumber
   2618 FFFC1A3C                             rmtst4:
   2619 FFFC1A3C 0C80 5555 AAAA                      cmpi.l 	#$5555aaaa,d0
   2620 FFFC1A42 67E2                                beq.s 	ramtest5
   2621 FFFC1A44 6622                                bne.s 	ramtest7
                                             ;---------------------------------------------------
                                             ;   Save last ram address in end of memory pointer.
                                             ;---------------------------------------------------
   2625 FFFC1A46                             rmtst5:
   2626 FFFC1A46 23C8 0001 0008                      move.l a0,memend
                                             ;-----------------------------------
                                             ;   Create very first memory block.
                                             ;-----------------------------------
   2630 FFFC1A4C 91FC 0000 000C                      suba.l 	#12,a0
   2631 FFFC1A52 21C8 0404                           move.l 	a0,$0404
   2632 FFFC1A56 21FC 4652 4545 0400                 move.l 	#$46524545,$0400
   2633 FFFC1A5E 21FC 0000 0408 0408                 move.l 	#$408,$408			; point back-link to self
   2634 FFFC1A66 4ED3                                jmp 	(a3)
                                             ;----------------------------------
                                             ; Error in ram - go no farther.
                                             ;----------------------------------
   2638 FFFC1A68                             ramtest7:
   2639 FFFC1A68 4ED3                        		jmp 	(a3)
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 45
bootrom.asm
   2640 FFFC1A6A 60FC                                bra.s 	ramtest7
                                             
                                             
                                             ;===============================================================================
                                             ;===============================================================================
                                             ;===============================================================================
                                             ;===============================================================================
                                             
   2648 FFFC1A6C                             GraphicsDemo:
   2649 FFFC1A6C 6100 00D4                   		bsr		DrawLines
   2650 FFFC1A70 6100 0012                   		bsr		DrawRects
   2651 FFFC1A74 7606                        		moveq	#6,d3
   2652 FFFC1A76 6100 01B6                   		bsr		DrawTrianglesOrCurves
   2653 FFFC1A7A 7608                        		moveq	#8,d3
   2654 FFFC1A7C 6100 01B0                   		bsr		DrawTrianglesOrCurves
   2655 FFFC1A80 6000 F7F0                   		bra		Monitor
                                             
   2657 FFFC1A84                             DrawRects:
   2658 FFFC1A84 4DF9 FFDC 0000              		lea		$FFDC0000,A6	; I/O base
   2659 FFFC1A8A 4BF9 FFE0 0000              		lea		VDGREG,a5
   2660 FFFC1A90 2C3C 0000 4E20              		move.l	#20000,d6		; repeat a few times
   2661 FFFC1A96                             .0001:
   2662 FFFC1A96 202E 0C00                   		move.l	$0C00(a6),d0	; get 32 bit number
   2663 FFFC1A9A 3200                        		move.w	d0,d1			; use bits 0 to 8 for y0
   2664 FFFC1A9C 4840                        		swap	d0				; and bits 16 to 24 for x0
   2665 FFFC1A9E 0240 00FF                   		and.w	#$FF,d0		; 0 to 511
   2666 FFFC1AA2 0241 00FF                   		and.w	#$FF,d1		; 0 to 511
   2667 FFFC1AA6 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2668 FFFC1AAA 242E 0C00                   		move.l	$0C00(a6),d2
   2669 FFFC1AAE 3602                        		move.w	d2,d3
   2670 FFFC1AB0 4842                        		swap	d2
   2671 FFFC1AB2 0242 00FF                   		and.w	#$FF,d2		; 0 to 511
   2672 FFFC1AB6 0243 00FF                   		and.w	#$FF,d3		; 0 to 511
   2673 FFFC1ABA 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2674 FFFC1ABE 282E 0C00                   		move.l	$0C00(a6),d4
   2675 FFFC1AC2 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   2676 FFFC1AC6 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2677 FFFC1ACA                             .0002:
   2678 FFFC1ACA 3E2D 042C                   		move.w	$42C(a5),d7		; check # queued
   2679 FFFC1ACE BE7C 0010                   		cmp.w	#16,d7			; more than 28 queued ?
   2680 FFFC1AD2 64F6                        		bhs.s	.0002			; too many, wait for queue to empty
   2681 FFFC1AD4 E180                        		asl.l	#8,d0
   2682 FFFC1AD6 E180                        		asl.l	#8,d0
   2683 FFFC1AD8 E181                        		asl.l	#8,d1
   2684 FFFC1ADA E181                        		asl.l	#8,d1
   2685 FFFC1ADC E182                        		asl.l	#8,d2
   2686 FFFC1ADE E182                        		asl.l	#8,d2
   2687 FFFC1AE0 E183                        		asl.l	#8,d3
   2688 FFFC1AE2 E183                        		asl.l	#8,d3
   2689 FFFC1AE4 3B44 0442                   		move.w	d4,$442(a5)		; set fill color
   2690 FFFC1AE8 3B7C 000D 0446              		move.w	#13,$446(a5)
   2691 FFFC1AEE 422D 0448                   		clr.b	$448(a5)			; queue
   2692 FFFC1AF2 2B40 0440                   		move.l	d0,$440(a5)
   2693 FFFC1AF6 3B7C 0010 0446              		move.w	#16,$446(a5)	; set x0
   2694 FFFC1AFC 422D 0448                   		clr.b	$448(a5)			; queue
   2695 FFFC1B00 2B41 0440                   		move.l	d1,$440(a5)
   2696 FFFC1B04 3B7C 0011 0446              		move.w	#17,$446(a5)	; set y0
   2697 FFFC1B0A 422D 0448                   		clr.b	$448(a5)			; queue
                                             		;move.w	#1,$422(a5)		; raster op = COPY
   2699 FFFC1B0E 2B42 0440                   		move.l	d2,$440(a5)
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 46
bootrom.asm
   2700 FFFC1B12 3B7C 0013 0446              		move.w	#19,$446(a5)	; set x1
   2701 FFFC1B18 422D 0448                   		clr.b	$448(a5)			; queue
   2702 FFFC1B1C 2B43 0440                   		move.l	d3,$440(a5)
   2703 FFFC1B20 3B7C 0014 0446              		move.w	#20,$446(a5)	; set y1
   2704 FFFC1B26 422D 0448                   		clr.b	$448(a5)			; queue
   2705 FFFC1B2A 3B7C 0010 0442              		move.w	#$10,$442(a5)	; raster op = COPY
   2706 FFFC1B30 3B7C 0003 0446              		move.w	#3,$446(a5)		; pulse command queue (3 = draw rect)
   2707 FFFC1B36 422D 0448                   		clr.b	$448(a5)			; queue
   2708 FFFC1B3A 5386                        		sub.l	#1,d6
   2709 FFFC1B3C 6600 FF58                   		bne		.0001			; go back and do more rects
   2710 FFFC1B40 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Draw lines randomly on the screen.
                                             ;===============================================================================
                                             
   2716 FFFC1B42                             DrawLines:
   2717 FFFC1B42 4DF9 FFDC 0000              		lea		$FFDC0000,A6	; I/O base
   2718 FFFC1B48 4BF9 FFE0 0000              		lea		VDGREG,a5
   2719 FFFC1B4E 2C3C 0003 0D40              		move.l	#200000,d6		; repeat a few times
   2720 FFFC1B54                             .0001:
                                             		; Wait for blitter to be done
   2722 FFFC1B54                             .0003:								
   2723 FFFC1B54 33FC 000A FFDC 0600         		move.w	#10,leds
   2724 FFFC1B5C 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2725 FFFC1B60 0800 000E                   		btst	#14,d0
   2726 FFFC1B64 6706                        		beq.s	.0004
   2727 FFFC1B66 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2728 FFFC1B6A 67E8                        		beq.s	.0003				; branch if not done
   2729 FFFC1B6C                             .0004:
   2730 FFFC1B6C 33FC 000B FFDC 0600         		move.w	#11,leds
   2731 FFFC1B74 426E 0C04                   		clr.w	$0C04(a6)
   2732 FFFC1B78 202E 0C00                   		move.l	$0C00(a6),d0
                                             
   2734 FFFC1B7C 3200                        		move.w	d0,d1			; use bits 0 to 8 for y0
   2735 FFFC1B7E 4840                        		swap	d0				; and bits 16 to 24 for x0
   2736 FFFC1B80 0240 00FF                   		and.w	#$FF,d0		; 0 to 511
   2737 FFFC1B84 0241 00FF                   		and.w	#$FF,d1		; 0 to 511
   2738 FFFC1B88 426E 0C04                   		clr.w	$0C04(a6)
   2739 FFFC1B8C 242E 0C00                   		move.l	$0C00(a6),d2
                                             
   2741 FFFC1B90 3602                        		move.w	d2,d3
   2742 FFFC1B92 4842                        		swap	d2
   2743 FFFC1B94 0242 00FF                   		and.w	#$FF,d2		; 0 to 511
   2744 FFFC1B98 0243 00FF                   		and.w	#$FF,d3		; 0 to 511
   2745 FFFC1B9C 426E 0C04                   		clr.w	$0C04(a6)
   2746 FFFC1BA0 282E 0C00                   		move.l	$0C00(a6),d4
                                             
   2748 FFFC1BA4 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   2749 FFFC1BA8 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2750 FFFC1BAC                             .0002:
   2751 FFFC1BAC 3E2D 042C                   		move.w	$42C(a5),d7		; check # queued
   2752 FFFC1BB0 BE7C 0010                   		cmp.w	#16,d7			; more than 28 queued ?
   2753 FFFC1BB4 64F6                        		bhs.s	.0002			; too many, wait for queue to empty
   2754 FFFC1BB6 33FC 000C FFDC 0600         		move.w	#12,leds
   2755 FFFC1BBE E180                        		asl.l	#8,d0
   2756 FFFC1BC0 E180                        		asl.l	#8,d0
   2757 FFFC1BC2 E181                        		asl.l	#8,d1
   2758 FFFC1BC4 E181                        		asl.l	#8,d1
   2759 FFFC1BC6 E182                        		asl.l	#8,d2
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 47
bootrom.asm
   2760 FFFC1BC8 E182                        		asl.l	#8,d2
   2761 FFFC1BCA E183                        		asl.l	#8,d3
   2762 FFFC1BCC E183                        		asl.l	#8,d3
   2763 FFFC1BCE 2B44 0440                   		move.l	d4,$440(a5)
   2764 FFFC1BD2 3B7C 000C 0446              		move.w	#12,$446(a5)
   2765 FFFC1BD8 422D 0448                   		clr.b	$448(a5)
                                             ; set pen color
   2767 FFFC1BDC 2B40 0440                   		move.l	d0,$440(a5)
   2768 FFFC1BE0 3B7C 0010 0446              		move.w	#16,$446(a5)
   2769 FFFC1BE6 422D 0448                   		clr.b	$448(a5)
                                             ; set x0
   2771 FFFC1BEA 2B41 0440                   		move.l	d1,$440(a5)
   2772 FFFC1BEE 3B7C 0011 0446              		move.w	#17,$446(a5)
   2773 FFFC1BF4 422D 0448                   		clr.b	$448(a5)
                                             ; set y0
   2775 FFFC1BF8 2B42 0440                   		move.l	d2,$440(a5)
   2776 FFFC1BFC 3B7C 0013 0446              		move.w	#19,$446(a5)
   2777 FFFC1C02 422D 0448                   		clr.b	$448(a5)
                                             ; set x1
   2779 FFFC1C06 2B43 0440                   		move.l	d3,$440(a5)
   2780 FFFC1C0A 3B7C 0014 0446              		move.w	#20,$446(a5)
   2781 FFFC1C10 422D 0448                   		clr.b	$448(a5)
                                             ; set y1
   2783 FFFC1C14 2B7C 0000 0010 0440         		move.l	#$10,$440(a5)
   2784 FFFC1C1C 3B7C 0002 0446              		move.w	#2,$446(a5)
   2785 FFFC1C22 422D 0448                   		clr.b	$448(a5)
                                             ; raster op = COPY
   2787 FFFC1C26 5386                        		sub.l	#1,d6
   2788 FFFC1C28 6600 FF2A                   		bne		.0001			; go back and do more lines
   2789 FFFC1C2C 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Draw triangles or curves randomly on the screen.
                                             ;===============================================================================
                                             
   2795 FFFC1C2E                             DrawTrianglesOrCurves:
   2796 FFFC1C2E 4DF9 FFDC 0000              		lea		$FFDC0000,A6	; I/O base
   2797 FFFC1C34 4BF9 FFE0 0000              		lea		VDGREG,a5
   2798 FFFC1C3A 2C3C 0000 2710              		move.l	#10000,d6		; repeat a few times
   2799 FFFC1C40                             .0001:
                                             		; Wait for blitter to be done
   2801 FFFC1C40                             .0003:								
   2802 FFFC1C40 33FC 000A FFDC 0600         		move.w	#10,leds
   2803 FFFC1C48 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2804 FFFC1C4C 0800 000E                   		btst	#14,d0
   2805 FFFC1C50 6706                        		beq.s	.0004
   2806 FFFC1C52 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2807 FFFC1C56 67E8                        		beq.s	.0003				; branch if not done
   2808 FFFC1C58                             .0004:
   2809 FFFC1C58 33FC 000B FFDC 0600         		move.w	#11,leds
   2810 FFFC1C60 426E 0C04                   		clr.w	$0C04(a6)
   2811 FFFC1C64 202E 0C00                   		move.l	$0C00(a6),d0
                                             
   2813 FFFC1C68 0280 00FF 00FF              		and.l	#$FF00FF,d0		; 0 to 255
   2814 FFFC1C6E 426E 0C04                   		clr.w	$0C04(a6)
   2815 FFFC1C72 222E 0C00                   		move.l	$0C00(a6),d1
                                             
   2817 FFFC1C76 0281 00FF 00FF              		and.l	#$FF00FF,d1		; 0 to 255
   2818 FFFC1C7C 426E 0C04                   		clr.w	$0C04(a6)
   2819 FFFC1C80 242E 0C00                   		move.l	$0C00(a6),d2
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 48
bootrom.asm
                                             
   2821 FFFC1C84 0282 00FF 00FF              		and.l	#$FF00FF,d2		; 0 to 255
   2822 FFFC1C8A 426E 0C04                   		clr.w	$0C04(a6)
   2823 FFFC1C8E 282E 0C00                   		move.l	$0C00(a6),d4
                                             
   2825 FFFC1C92 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   2826 FFFC1C96 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   2827 FFFC1C9A                             .0002:
   2828 FFFC1C9A 3E2D 042C                   		move.w	$42C(a5),d7		; check # queued
   2829 FFFC1C9E BE7C 0010                   		cmp.w	#16,d7			; more than 16 queued ?
   2830 FFFC1CA2 64F6                        		bhs.s	.0002			; too many, wait for queue to empty
   2831 FFFC1CA4 33FC 000C FFDC 0600         		move.w	#12,leds
   2832 FFFC1CAC 3B44 0420                   		move.w	d4,$420(a5)		; fill curve
   2833 FFFC1CB0 4844                        		swap	d4
   2834 FFFC1CB2 3B7C 0001 0422              		move.w	#1,$422(a5)		; raster op = COPY
                                             		
   2836 FFFC1CB8 3B44 0442                   		move.w	d4,$442(a5)		; set color
   2837 FFFC1CBC 3B7C 000D 0446              		move.w	#13,$446(a5)	; 13 = fill color
   2838 FFFC1CC2 422D 0448                   		clr.b	$448(a5)		; queue
                                             
   2840 FFFC1CC6 3E00                        		move.w	d0,d7
   2841 FFFC1CC8 E187                        		asl.l	#8,d7
   2842 FFFC1CCA E187                        		asl.l	#8,d7
   2843 FFFC1CCC 2B47 0440                   		move.l	d7,$440(a5)
   2844 FFFC1CD0 3B7C 0010 0446              		move.w	#16,$446(a5)
   2845 FFFC1CD6 422D 0448                   		clr.b	$448(a5)
                                             ; set x0
   2847 FFFC1CDA 4840                        		swap	d0
   2848 FFFC1CDC 3E00                        		move.w	d0,d7
   2849 FFFC1CDE E187                        		asl.l	#8,d7
   2850 FFFC1CE0 E187                        		asl.l	#8,d7
   2851 FFFC1CE2 2B47 0440                   		move.l	d7,$440(a5)
   2852 FFFC1CE6 3B7C 0011 0446              		move.w	#17,$446(a5)
   2853 FFFC1CEC 422D 0448                   		clr.b	$448(a5)
                                             ; set y0
                                             
   2856 FFFC1CF0 2E01                        		move.l	d1,d7
   2857 FFFC1CF2 E187                        		asl.l	#8,d7
   2858 FFFC1CF4 E187                        		asl.l	#8,d7
   2859 FFFC1CF6 2B47 0440                   		move.l	d7,$440(a5)
   2860 FFFC1CFA 3B7C 0013 0446              		move.w	#19,$446(a5)
   2861 FFFC1D00 422D 0448                   		clr.b	$448(a5)
                                             ; set x1
   2863 FFFC1D04 4841                        		swap	d1
   2864 FFFC1D06 2E01                        		move.l	d1,d7
   2865 FFFC1D08 E187                        		asl.l	#8,d7
   2866 FFFC1D0A E187                        		asl.l	#8,d7
   2867 FFFC1D0C 2B47 0440                   		move.l	d7,$440(a5)
   2868 FFFC1D10 3B7C 0014 0446              		move.w	#20,$446(a5)
   2869 FFFC1D16 422D 0448                   		clr.b	$448(a5)
                                             ; set y1
                                             		
   2872 FFFC1D1A 2E02                        		move.l	d2,d7
   2873 FFFC1D1C E187                        		asl.l	#8,d7
   2874 FFFC1D1E E187                        		asl.l	#8,d7
   2875 FFFC1D20 2B47 0440                   		move.l	d7,$440(a5)
   2876 FFFC1D24 3B7C 0016 0446              		move.w	#22,$446(a5)
   2877 FFFC1D2A 422D 0448                   		clr.b	$448(a5)
                                             ; set x2
   2879 FFFC1D2E 4842                        		swap	d2
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 49
bootrom.asm
   2880 FFFC1D30 2E02                        		move.l	d2,d7
   2881 FFFC1D32 E187                        		asl.l	#8,d7
   2882 FFFC1D34 E187                        		asl.l	#8,d7
   2883 FFFC1D36 2B47 0440                   		move.l	d7,$440(a5)
   2884 FFFC1D3A 3B7C 0017 0446              		move.w	#23,$446(a5)
   2885 FFFC1D40 422D 0448                   		clr.b	$448(a5)
                                             ; set y2
                                             
   2888 FFFC1D44 4844                        		swap	d4
   2889 FFFC1D46 0244 0003                   		and.w	#3,d4
   2890 FFFC1D4A 0044 0010                   		or.w	#$10,d4
   2891 FFFC1D4E 3B44 0442                   		move.w	d4,$442(a5)		; raster op = copy, 
   2892 FFFC1D52 3B43 0446                   		move.w	d3,$446(a5)		; set command (6 = fill triangle, 8 = curve)
   2893 FFFC1D56 422D 0448                   		clr.b	$448(a5)		; queue command
   2894 FFFC1D5A 5386                        		sub.l	#1,d6
   2895 FFFC1D5C 6600 FEE2                   		bne		.0001			; go back and do more triangles
   2896 FFFC1D60 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Test Blitter
                                             ;===============================================================================
                                             
   2902 FFFC1D62                             TestBlitter:
                                             		; puts a red rectangle on screen
   2904 FFFC1D62 4BF9 FFE0 0000              		lea		VDGREG,a5
   2905 FFFC1D68                             .0003:								
   2906 FFFC1D68 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   2907 FFFC1D6C 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2908 FFFC1D70 67F6                        		beq.s	.0003				; branch if not done
   2909 FFFC1D72 2B7C 0000 1F40 04BC         		move.l	#8000,$4BC(a5)		; set transfer count 8000 pixels
   2910 FFFC1D7A 3B7C 7C00 04A8              		move.w	#RED,$4A8(a5)		; set color red
   2911 FFFC1D80 2B7C 0000 0168 0498         		move.l	#360,$498(a5)		; set destination address
   2912 FFFC1D88 2B7C 0000 0028 04A4         		move.l	#40,$4A4(a5)		; set destination width
   2913 FFFC1D90 2B7C 0000 0168 049C         		move.l	#360,$49C(a5)		; set dst modulo
   2914 FFFC1D98 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
                                             
                                             		; makes a copy of the upper left corner of the screen
   2917 FFFC1D9E                             .0001:								
   2918 FFFC1D9E 302D 04AC                   		move.w	$4AC(a5),d0			; get blit status
   2919 FFFC1DA2 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2920 FFFC1DA6 67F6                        		beq.s	.0001				; branch if not done
                                             		; Channel A
   2922 FFFC1DA8 2B7C 0000 03E8 04B0         		move.l	#1000,$4B0(a5)		; set source transfer count 8000 pixels
   2923 FFFC1DB0 2B7C 0000 0000 0480         		move.l	#0,$480(a5)			; set source bitmap address (address in graphics mem)
   2924 FFFC1DB8 2B7C 0000 0168 0484         		move.l	#360,$484(a5)		; set src modulo
                                             		; Channel C
   2926 FFFC1DC0 2B7C 0000 03E8 04B8         		move.l	#1000,$4B8(a5)		; set source transfer count 8000 pixels
   2927 FFFC1DC8 2B7C 0000 0000 0490         		move.l	#0,$490(a5)			; set source bitmap address (address in graphics mem)
   2928 FFFC1DD0 2B7C 0000 0168 0494         		move.l	#360,$494(a5)		; set src modulo
                                             		; Channel D
   2930 FFFC1DD8 2B7C 0000 1F40 04BC         		move.l	#8000,$4BC(a5)		; set destination transfer count 8000 pixels
   2931 FFFC1DE0 2B7C 0000 0140 0498         		move.l	#320,$498(a5)		; set destination address
   2932 FFFC1DE8 2B7C 0000 0168 049C         		move.l	#360,$49C(a5)		; set dst modulo
                                             		
   2934 FFFC1DF0 2B7C 0000 0028 04A0         		move.l	#40,$4A0(a5)		; set source width
   2935 FFFC1DF8 2B7C 0000 0028 04A4         		move.l	#40,$4A4(a5)		; set destination width
   2936 FFFC1E00 3B7C 0091 04AE              		move.w	#$91,$4AE(a5)		; set op A|C	($11 = copy A)
   2937 FFFC1E06 3B7C 80A2 04AC              		move.w	#%1000000010100010,$4AC(a5)		; enable channel A,C,D, start transfer
   2938 FFFC1E0C                             .0002:								
   2939 FFFC1E0C 302D 04AC                   		move.w	$4AC(a5),d0			; get blit status
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 50
bootrom.asm
   2940 FFFC1E10 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   2941 FFFC1E14 67F6                        		beq.s	.0002				; branch if not done
   2942 FFFC1E16 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Generic I2C routines
                                             ;===============================================================================
                                             
                                             I2C_PREL	EQU		$0
                                             I2C_PREH	EQU		$2
                                             I2C_CTRL	EQU		$4
                                             I2C_RXR		EQU		$6
                                             I2C_TXR		EQU		$6
                                             I2C_CMD		EQU		$8
                                             I2C_STAT	EQU		$A
                                             
                                             ; i2c
   2957 FFFC1E18                             i2c_setup:
   2958 FFFC1E18 4DF9 FFDC 0E00              		lea		I2C,a6				
   2959 FFFC1E1E 3CBC 0013                   		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
   2960 FFFC1E22 3D7C 0000 0002              		move.w	#0,I2C_PREH(a6)
   2961 FFFC1E28 4DF9 FFDC 0E10              		lea		I2C2,a6				
   2962 FFFC1E2E 3CBC 0013                   		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
   2963 FFFC1E32 3D7C 0000 0002              		move.w	#0,I2C_PREH(a6)
   2964 FFFC1E38 4E75                        		rts
                                             
                                             ; Wait for I2C transfer to complete
                                             ;
                                             ; Parameters
                                             ; 	a6 - I2C controller base address
                                             
   2971 FFFC1E3A                             i2c_wait_tip:
   2972 FFFC1E3A 3F00                        		move.w	d0,-(a7)
   2973 FFFC1E3C                             .0001:					
   2974 FFFC1E3C 302E 000A                   		move.w	I2C_STAT(a6),d0		; wait for tip to clear
   2975 FFFC1E40 0800 0001                   		btst	#1,d0
   2976 FFFC1E44 66F6                        		bne.s	.0001
   2977 FFFC1E46 301F                        		move.w	(a7)+,d0
   2978 FFFC1E48 4E75                        		rts
                                             
                                             ; Parameters
                                             ;	d0.w - data to transmit
                                             ;	d1.w - command value
                                             ;	a6	 - I2C controller base address
                                             ;
   2985 FFFC1E4A                             i2c_wr_cmd:
   2986 FFFC1E4A 3D40 0006                   		move.w	d0,I2C_TXR(a6)
   2987 FFFC1E4E 3D41 0008                   		move.w	d1,I2C_CMD(a6)
   2988 FFFC1E52 6100 FFE6                   		bsr		i2c_wait_tip
   2989 FFFC1E56 302E 000A                   		move.w	I2C_STAT(a6),d0
   2990 FFFC1E5A 4E75                        		rts
                                             
   2992 FFFC1E5C                             i2c_xmit1:
   2993 FFFC1E5C 3F00                        		move.w	d0,-(a7)
   2994 FFFC1E5E 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   2995 FFFC1E64 7076                        		moveq	#$76,d0				; set slave address = %0111011
   2996 FFFC1E66 323C 0090                   		move.w	#$90,d1				; set STA, WR
   2997 FFFC1E6A 6100 FFDE                   		bsr		i2c_wr_cmd
   2998 FFFC1E6E 6100 0010                   		bsr		i2c_wait_rx_nack
   2999 FFFC1E72 301F                        		move.w	(a7)+,d0
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 51
bootrom.asm
   3000 FFFC1E74 323C 0050                   		move.w	#$50,d1				; set STO, WR
   3001 FFFC1E78 6100 FFD0                   		bsr		i2c_wr_cmd
   3002 FFFC1E7C 6100 0002                   		bsr		i2c_wait_rx_nack
                                             
   3004 FFFC1E80                             i2c_wait_rx_nack:
   3005 FFFC1E80 3F00                        		move.w	d0,-(a7)
   3006 FFFC1E82                             .0001:							
   3007 FFFC1E82 302E 000A                   		move.w	I2C_STAT(a6),d0		; wait for RXack = 0
   3008 FFFC1E86 0800 0007                   		btst	#7,d0
   3009 FFFC1E8A 66F6                        		bne.s	.0001
   3010 FFFC1E8C 301F                        		move.w	(a7)+,d0
   3011 FFFC1E8E 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Audio
                                             ;===============================================================================
                                             
   3017 FFFC1E90                             AudioInputTest:
   3018 FFFC1E90 4BF9 FFE0 0000              		lea		VDGREG,a5
   3019 FFFC1E96 2B7C 0005 8000 0640         		move.l	#$58000,$640(a5)	; set buffer address ($FF8B0000)
   3020 FFFC1E9E 3B7C 4000 0644              		move.w	#$4000,$644(a5)		; set buffer length
   3021 FFFC1EA4 3B7C 0716 0646              		move.w	#1814,$646(a5)		; set period = 22.05kHz
   3022 FFFC1EAA 3B7C 1090 0650              		move.w	#$1090,$650(a5)		; enable input channel, plot mode
   3023 FFFC1EB0 3B7C 0090 0650              		move.w	#$0090,$650(a5)		; turn off reset
                                             		; should have input now
                                             
                                             		; puts a dark blue rectangle on screen
   3027 FFFC1EB6                             .0003:								
   3028 FFFC1EB6 302D 04AC                   		move.w	$4AC(a5),d0			; get done status
   3029 FFFC1EBA 0800 000D                   		btst	#13,d0				; bit 13 = done bit
   3030 FFFC1EBE 67F6                        		beq.s	.0003				; branch if not done
   3031 FFFC1EC0 2B7C 0001 0000 04BC         		move.l	#256*256,$4BC(a5)		; set transfer count pixels
   3032 FFFC1EC8 3B7C 000F 04A8              		move.w	#DARK_BLUE,$4A8(a5)		; set color 
   3033 FFFC1ECE 2B7C 0000 0000 0498         		move.l	#0,$498(a5)			; set destination address
   3034 FFFC1ED6 2B7C 0000 0100 04A4         		move.l	#256,$4A4(a5)		; set destination width
   3035 FFFC1EDE 2B7C 0000 0090 049C         		move.l	#BMP_WIDTH-256,$49C(a5)		; set dst modulo
   3036 FFFC1EE6 3B7C 8080 04AC              		move.w	#%1000000010000000,$4AC(a5)		; enable channel D, start transfer
                                             
                                             		; delay a bit
   3039 FFFC1EEC 203C 0003 D090              		move.l	#250000,d0
   3040 FFFC1EF2                             .0004:
   3041 FFFC1EF2 5380                        		sub.l	#1,d0
   3042 FFFC1EF4 66FC                        		bne.s	.0004
   3043 FFFC1EF6 60BE                        		bra.s	.0003
                                             		
                                             
   3046 FFFC1EF8                             audio_pll_config:
   3047 FFFC1EF8 7000                        		moveq	#0,d0
   3048 FFFC1EFA 720E                        		moveq	#$0E,d1
   3049 FFFC1EFC 6100 001C                   		bsr		audio_write_reg
   3050 FFFC1F00 7002                        		moveq	#2,d0
   3051 FFFC1F02 41F9 FFFC 1F74              		lea		audio_tbl1,a0
   3052 FFFC1F08 6100 0076                   		bsr		audio_write_reg6
   3053 FFFC1F0C 4E75                        		rts
                                             
   3055 FFFC1F0E                             audio_startup_config:
   3056 FFFC1F0E 4E75                        		rts
                                             
   3058 FFFC1F10                             audio_init:
   3059 FFFC1F10 6100 FFE6                   		bsr		audio_pll_config
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 52
bootrom.asm
   3060 FFFC1F14 6100 FFF8                   		bsr		audio_startup_config
   3061 FFFC1F18 4E75                        		rts
                                             
                                             ; d0.w = register number
                                             ; d1.w = data to write
                                             		
   3066 FFFC1F1A                             audio_write_reg:
   3067 FFFC1F1A 4DF9 FFDC 0E00              		lea		I2C,a6				
   3068 FFFC1F20 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   3069 FFFC1F26 3D7C 0076 0006              		move.w	#$76,I2C_TXR(a6)	; set slave address = %0111011
   3070 FFFC1F2C 3D7C 0090 0008              		move.w	#$90,I2C_CMD(a6)	; set STA, WR
   3071 FFFC1F32 6100 FF06                   		bsr		i2c_wait_tip	; wait for tip to clear
   3072 FFFC1F36 6100 FF48                   		bsr		i2c_wait_rx_nack
   3073 FFFC1F3A 3D7C 0040 0006              		move.w	#$40,I2C_TXR(a6)	; all regsister are $40xx
   3074 FFFC1F40 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   3075 FFFC1F46 6100 FEF2                   		bsr		i2c_wait_tip	; wait for tip to clear
   3076 FFFC1F4A 6100 FF34                   		bsr		i2c_wait_rx_nack
   3077 FFFC1F4E 3D40 0006                   		move.w	d0,I2C_TXR(a6)		; send register address
   3078 FFFC1F52 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   3079 FFFC1F58 6100 FEE0                   		bsr		i2c_wait_tip	; wait for tip to clear
   3080 FFFC1F5C 6100 FF22                   		bsr		i2c_wait_rx_nack
   3081 FFFC1F60 3D41 0006                   		move.w	d1,I2C_TXR(a6)		; send data
   3082 FFFC1F64 3D7C 0050 0008              		move.w	#$50,I2C_CMD(a6)	; set STO, WR
   3083 FFFC1F6A 6100 FECE                   		bsr		i2c_wait_tip	; wait for tip to clear
   3084 FFFC1F6E 6100 FF10                   		bsr		i2c_wait_rx_nack
   3085 FFFC1F72 4E75                        		rts
                                             
   3087 FFFC1F74                             audio_tbl1:
   3088 FFFC1F74 0000 007D 0000 000C         		dc.w	$00,$7D,$00,$0C,$20,$01
   3089 FFFC1F7C 0020 0001                   
                                             ; a0
                                             ;
   3092 FFFC1F80                             audio_write_reg6:
   3093 FFFC1F80 41F9 FFFC 1F74              		lea		audio_tbl1,a0
   3094 FFFC1F86 4DF9 FFDC 0E00              		lea		I2C,a6				
   3095 FFFC1F8C 3D7C 0001 0004              		move.w	#1,I2C_CTRL(a6)		; enable the core
   3096 FFFC1F92 3D7C 0076 0006              		move.w	#$76,I2C_TXR(a6)	; set slave address = %0111011
   3097 FFFC1F98 3D7C 0090 0008              		move.w	#$90,I2C_CMD(a6)	; set STA, WR
   3098 FFFC1F9E 6100 FE9A                   		bsr		i2c_wait_tip	; wait for tip to clear
   3099 FFFC1FA2 6100 FEDC                   		bsr		i2c_wait_rx_nack
   3100 FFFC1FA6 3D7C 0040 0006              		move.w	#$40,I2C_TXR(a6)	; all regsister are $40xx
   3101 FFFC1FAC 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   3102 FFFC1FB2 6100 FE86                   		bsr		i2c_wait_tip	; wait for tip to clear
   3103 FFFC1FB6 6100 FEC8                   		bsr		i2c_wait_rx_nack
                                             
   3105 FFFC1FBA 3D40 0006                   		move.w	d0,I2C_TXR(a6)		; send register address
   3106 FFFC1FBE 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   3107 FFFC1FC4 6100 FE74                   		bsr		i2c_wait_tip	; wait for tip to clear
   3108 FFFC1FC8 6100 FEB6                   		bsr		i2c_wait_rx_nack
                                             		
   3110 FFFC1FCC 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #0
   3111 FFFC1FD0 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   3112 FFFC1FD6 6100 FE62                   		bsr		i2c_wait_tip	; wait for tip to clear
   3113 FFFC1FDA 6100 FEA4                   		bsr		i2c_wait_rx_nack
                                             
   3115 FFFC1FDE 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #1
   3116 FFFC1FE2 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   3117 FFFC1FE8 6100 FE50                   		bsr		i2c_wait_tip	; wait for tip to clear
   3118 FFFC1FEC 6100 FE92                   		bsr		i2c_wait_rx_nack
                                             
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 53
bootrom.asm
   3120 FFFC1FF0 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #2
   3121 FFFC1FF4 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   3122 FFFC1FFA 6100 FE3E                   		bsr		i2c_wait_tip	; wait for tip to clear
   3123 FFFC1FFE 6100 FE80                   		bsr		i2c_wait_rx_nack
                                             
   3125 FFFC2002 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #3
   3126 FFFC2006 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   3127 FFFC200C 6100 FE2C                   		bsr		i2c_wait_tip	; wait for tip to clear
   3128 FFFC2010 6100 FE6E                   		bsr		i2c_wait_rx_nack
                                             
   3130 FFFC2014 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #4
   3131 FFFC2018 3D7C 0010 0008              		move.w	#$10,I2C_CMD(a6)	; set WR
   3132 FFFC201E 6100 FE1A                   		bsr		i2c_wait_tip	; wait for tip to clear
   3133 FFFC2022 6100 FE5C                   		bsr		i2c_wait_rx_nack
                                             
   3135 FFFC2026 3D58 0006                   		move.w	(a0)+,I2C_TXR(a6)	; send data #5
   3136 FFFC202A 3D7C 0050 0008              		move.w	#$50,I2C_CMD(a6)	; set WR, STO
   3137 FFFC2030 6100 FE08                   		bsr		i2c_wait_tip		; wait for tip to clear
   3138 FFFC2034 6100 FE4A                   		bsr		i2c_wait_rx_nack
   3139 FFFC2038 4E75                        		rts
                                             
   3141 FFFC203A                             set_hp_output:
   3142 FFFC203A 7021                        		moveq	#$21,d0				;
   3143 FFFC203C 7200                        		moveq	#0,d1
   3144 FFFC203E 6100 FEDA                   		bsr		audio_write_reg
   3145 FFFC2042 7020                        		moveq	#$20,d0				;
   3146 FFFC2044 6100 FED4                   		bsr		audio_write_reg
   3147 FFFC2048 7023                        		moveq	#$23,d0
   3148 FFFC204A 323C 00E7                   		move.w	#$E7,d1		
   3149 FFFC204E 6100 FECA                   		bsr		audio_write_reg
   3150 FFFC2052 7024                        		moveq	#$24,d0
   3151 FFFC2054 323C 00E7                   		move.w	#$E7,d1		
   3152 FFFC2058 6100 FEC0                   		bsr		audio_write_reg
   3153 FFFC205C 4E75                        		rts
                                             
                                             ;===============================================================================
                                             ; Realtime clock routines
                                             ;===============================================================================
                                             
   3159 FFFC205E                             rtc_read:
   3160 FFFC205E 2C7C FFDC 0E10              		movea.l	#I2C2,a6
   3161 FFFC2064 4BF9 0001 0600              		lea		RTCBuf,a5
   3162 FFFC206A 3D7C 0080 0004              		move.w	#$80,I2C_CTRL(a6)	; enable I2C
   3163 FFFC2070 303C 00DE                   		move.w	#$DE,d0				; read address, write op
   3164 FFFC2074 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   3165 FFFC2078 6100 FDD0                   		bsr		i2c_wr_cmd
   3166 FFFC207C 4A00                        		tst.b	d0
   3167 FFFC207E 6B72                        		bmi		.rxerr
   3168 FFFC2080 303C 0000                   		move.w	#$00,d0				; address zero
   3169 FFFC2084 323C 0010                   		move.w	#$10,d1				; wr bit
   3170 FFFC2088 6100 FDC0                   		bsr		i2c_wr_cmd
   3171 FFFC208C 4A00                        		tst.b	d0
   3172 FFFC208E 6B62                        		bmi		.rxerr
   3173 FFFC2090 303C 00DF                   		move.w	#$DF,d0				; read address, read op
   3174 FFFC2094 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   3175 FFFC2098 6100 FDB0                   		bsr		i2c_wr_cmd
   3176 FFFC209C 4A00                        		tst.b	d0
   3177 FFFC209E 6B52                        		bmi		.rxerr
                                             		
   3179 FFFC20A0 343C 0020                   		move.w	#$20,d2
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 54
bootrom.asm
   3180 FFFC20A4                             .0001:
   3181 FFFC20A4 3D7C 0020 0008              		move.w	#$20,I2C_CMD(a6)	; rd bit
   3182 FFFC20AA 6100 FD8E                   		bsr		i2c_wait_tip
   3183 FFFC20AE 6100 FDD0                   		bsr		i2c_wait_rx_nack
   3184 FFFC20B2 302E 000A                   		move.w	I2C_STAT(a6),d0
   3185 FFFC20B6 4A00                        		tst.b	d0
   3186 FFFC20B8 6B38                        		bmi		.rxerr
   3187 FFFC20BA 302E 0006                   		move.w	I2C_RXR(a6),d0
   3188 FFFC20BE 1B80 2000                   		move.b	d0,(a5,d2.w)
   3189 FFFC20C2 5242                        		add.w	#1,d2
   3190 FFFC20C4 B47C 005F                   		cmp.w	#$5F,d2
   3191 FFFC20C8 66DA                        		bne		.0001
   3192 FFFC20CA 3D7C 0068 0008              		move.w	#$68,I2C_CMD(a6)	; STO, rd bit + nack
   3193 FFFC20D0 6100 FD68                   		bsr		i2c_wait_tip
   3194 FFFC20D4 6100 FDAA                   		bsr		i2c_wait_rx_nack
   3195 FFFC20D8 302E 000A                   		move.w	I2C_STAT(a6),d0
   3196 FFFC20DC 4A00                        		tst.b	d0
   3197 FFFC20DE 6B12                        		bmi		.rxerr
   3198 FFFC20E0 302E 0006                   		move.w	I2C_RXR(a6),d0
   3199 FFFC20E4 1B80 2000                   		move.b	d0,(a5,d2.w)
   3200 FFFC20E8 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return 0
   3201 FFFC20EE 7000                        		moveq	#0,d0
   3202 FFFC20F0 4E75                        		rts
   3203 FFFC20F2                             .rxerr:
   3204 FFFC20F2 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return status
   3205 FFFC20F8 4E75                        		rts
                                             
   3207 FFFC20FA                             rtc_write:
   3208 FFFC20FA 2C7C FFDC 0E10              		movea.l	#I2C2,a6
   3209 FFFC2100 4BF9 0001 0600              		lea		RTCBuf,a5
   3210 FFFC2106 3D7C 0080 0004              		move.w	#$80,I2C_CTRL(a6)	; enable I2C
   3211 FFFC210C 303C 00DE                   		move.w	#$DE,d0				; read address, write op
   3212 FFFC2110 323C 0090                   		move.w	#$90,d1				; STA + wr bit
   3213 FFFC2114 6100 FD34                   		bsr		i2c_wr_cmd
   3214 FFFC2118 4A00                        		tst.b	d0
   3215 FFFC211A 6B46                        		bmi		.rxerr
   3216 FFFC211C 303C 0000                   		move.w	#$00,d0				; address zero
   3217 FFFC2120 323C 0010                   		move.w	#$10,d1				; wr bit
   3218 FFFC2124 6100 FD24                   		bsr		i2c_wr_cmd
   3219 FFFC2128 4A00                        		tst.b	d0
   3220 FFFC212A 6B36                        		bmi		.rxerr
   3221 FFFC212C 343C 0020                   		move.w	#$20,d2
   3222 FFFC2130                             .0001:
   3223 FFFC2130 1035 2000                   		move.b	(a5,d2.w),d0
   3224 FFFC2134 323C 0010                   		move.w	#$10,d1
   3225 FFFC2138 6100 FD10                   		bsr		i2c_wr_cmd
   3226 FFFC213C 4A00                        		tst.b	d0
   3227 FFFC213E 6B22                        		bmi		.rxerr
   3228 FFFC2140 5242                        		add.w	#1,d2
   3229 FFFC2142 B47C 005F                   		cmp.w	#$5F,d2
   3230 FFFC2146 66E8                        		bne.s	.0001
   3231 FFFC2148 1035 2000                   		move.b	(a5,d2.w),d0
   3232 FFFC214C 323C 0050                   		move.w	#$50,d1				; STO, wr bit
   3233 FFFC2150 6100 FCF8                   		bsr		i2c_wr_cmd
   3234 FFFC2154 4A00                        		tst.b	d0
   3235 FFFC2156 6B0A                        		bmi		.rxerr
   3236 FFFC2158 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return 0
   3237 FFFC215E 7000                        		moveq	#0,d0
   3238 FFFC2160 4E75                        		rts
   3239 FFFC2162                             .rxerr:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 55
bootrom.asm
   3240 FFFC2162 3D7C 0000 0004              		move.w	#0,I2C_CTRL(a6)		; disable I2C and return status
   3241 FFFC2168 4E75                        		rts
                                             
   3243 FFFC216A                             msgRtcReadFail:
   3244 FFFC216A 52 54 43 20 72 65 61 64     		dc.b	"RTC read/write failed.",$0D,$0A,$00
   3245 FFFC2172 2F 77 72 69 74 65 20 66     
   3246 FFFC217A 61 69 6C 65 64 2E 0D 0A     
   3247 FFFC2182 00                          
                                             
                                             
                                             ;===============================================================================
                                             ; ORGFX routines
                                             ;===============================================================================
                                             
   3254 FFFC2183 FF                          		align	2
   3255 FFFC2184                             gfx_wait:
   3256 FFFC2184 48E7 8004                   		movem.l	d0/a5,-(a7)
   3257 FFFC2188 4BF9 FFE0 0000              		lea		VDGREG,a5
   3258 FFFC218E 2B7C 0000 0004 0700         		move.l	#GFX_STATUS,$700(a5)	; address status register
   3259 FFFC2196                             .0001:
   3260 FFFC2196 3B7C 00F3 0708              		move.w	#$F3,$708(a5)		; set control (generate bus access to gfx)
   3261 FFFC219C 202D 0704                   		move.l	$704(a5),d0			; get status value
   3262 FFFC21A0 0800 0000                   		btst	#0,d0				; test bit 0
   3263 FFFC21A4 66F0                        		bne.s	.0001
   3264 FFFC21A6 4CDF 2001                   		movem.l	(a7)+,d0/a5
   3265 FFFC21AA 4E75                        		rts
                                             
   3267 FFFC21AC                             gfx_set_400x300:
   3268 FFFC21AC 6100 FFD6                   		bsr		gfx_wait
   3269 FFFC21B0 4BF9 FFE0 0000              		lea		VDGREG,a5
   3270 FFFC21B6 2B7C 0000 0014 0700         		move.l	#GFX_TARGET_SIZE_X,$700(a5)	; address register
   3271 FFFC21BE 2B7C 0000 0190 0704         		move.l	#400,$704(a5)				; set data
   3272 FFFC21C6 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3273 FFFC21CC 2B7C 0000 0018 0700         		move.l	#GFX_TARGET_SIZE_Y,$700(a5)	; address register
   3274 FFFC21D4 2B7C 0000 012C 0704         		move.l	#300,$704(a5)				; set data
   3275 FFFC21DC 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3276 FFFC21E2 4E75                        		rts
                                             
   3278 FFFC21E4                             gfx_init:
   3279 FFFC21E4 6100 FF9E                   		bsr		gfx_wait
   3280 FFFC21E8 4BF9 FFE0 0000              		lea		VDGREG,a5
   3281 FFFC21EE 2B7C 0000 0000 0700         		move.l	#GFX_CONTROL,$700(a5)		; address register
   3282 FFFC21F6 23FC 0000 0000 0001 042C    		move.l	#0,gfx_control_reg_mem
                                             
   3284 FFFC2200 2B7C 0000 0000 0704         		move.l	#0,$704(a5)
   3285 FFFC2208 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3286 FFFC220E 2B7C 0000 0010 0700         		move.l	#GFX_TARGET_BASE,$700(a5)	; address register
   3287 FFFC2216 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3288 FFFC221C 4E75                        		rts
                                             
   3290 FFFC221E                             gfx_set_color_depth:
   3291 FFFC221E 4BF9 FFE0 0000              		lea		VDGREG,a5
   3292 FFFC2224 02B9 FFFF FFFD 0001 042C    		and.l	#-3,gfx_control_reg_mem		; mask off 2 LSB (color depth field)
                                             
   3294 FFFC222E 00B9 0000 0001 0001 042C    		or.l	#1,gfx_control_reg_mem		; select 16 bpp
                                             
   3296 FFFC2238 6100 FF4A                   		bsr		gfx_wait
   3297 FFFC223C 2B7C 0000 0000 0700         		move.l	#GFX_CONTROL,$700(a5)		; address register
   3298 FFFC2244 2B79 0001 042C 0704         		move.l	gfx_control_reg_mem,$704(a5)
   3299 FFFC224C 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 56
bootrom.asm
   3300 FFFC2252 4E75                        		rts
                                             
   3302 FFFC2254                             gfx_set_color:
   3303 FFFC2254 6100 FF2E                   		bsr		gfx_wait
   3304 FFFC2258 4BF9 FFE0 0000              		lea		VDGREG,a5
   3305 FFFC225E 2B7C 0000 0084 0700         		move.l	#GFX_COLOR0,$700(a5)
   3306 FFFC2266 2B40 0704                   		move.l	d0,$704(a5)
   3307 FFFC226A 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3308 FFFC2270 4E75                        		rts
                                             
   3310 FFFC2272                             gfx_line:
   3311 FFFC2272 6100 FF10                   		bsr		gfx_wait
   3312 FFFC2276 4BF9 FFE0 0000              		lea		VDGREG,a5
   3313 FFFC227C 2B7C 0000 0038 0700         		move.l	#GFX_DEST_PIXEL_X,$700(a5)
   3314 FFFC2284 2B40 0704                   		move.l	d0,$704(a5)
   3315 FFFC2288 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3316 FFFC228E 2B7C 0000 003C 0700         		move.l	#GFX_DEST_PIXEL_Y,$700(a5)
   3317 FFFC2296 2B41 0704                   		move.l	d1,$704(a5)
   3318 FFFC229A 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3319 FFFC22A0 2B7C 0000 0040 0700         		move.l	#GFX_DEST_PIXEL_Z,$700(a5)
   3320 FFFC22A8 2B7C 0000 0000 0704         		move.l	#0,$704(a5)
   3321 FFFC22B0 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3322 FFFC22B6 2C39 0001 042C              		move.l	gfx_control_reg_mem,d6
   3323 FFFC22BC 0086 0000 0000              		or.l	#GFX_ACTIVE_POINT0,d6
   3324 FFFC22C2 2A86                        		move.l	d6,GFX_CONTROL(a5)
   3325 FFFC22C4 2B46 0704                   		move.l	d6,$704(a5)
   3326 FFFC22C8 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3327 FFFC22CE 2B7C 0000 0038 0700         		move.l	#GFX_DEST_PIXEL_X,$700(a5)
   3328 FFFC22D6 2B42 0704                   		move.l	d2,$704(a5)
   3329 FFFC22DA 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3330 FFFC22E0 2B7C 0000 003C 0700         		move.l	#GFX_DEST_PIXEL_Y,$700(a5)
   3331 FFFC22E8 2B43 0704                   		move.l	d3,$704(a5)
   3332 FFFC22EC 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3333 FFFC22F2 2B7C 0000 0040 0700         		move.l	#GFX_DEST_PIXEL_Z,$700(a5)
   3334 FFFC22FA 2B7C 0000 0000 0704         		move.l	#0,$704(a5)
   3335 FFFC2302 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3336 FFFC2308 2C39 0001 042C              		move.l	gfx_control_reg_mem,d6
   3337 FFFC230E 0086 0001 0000              		or.l	#GFX_ACTIVE_POINT1,d6
   3338 FFFC2314 2A86                        		move.l	d6,GFX_CONTROL(a5)
   3339 FFFC2316 2B46 0704                   		move.l	d6,$704(a5)
   3340 FFFC231A 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3341 FFFC2320 2C39 0001 042C              		move.l	gfx_control_reg_mem,d6
   3342 FFFC2326 0086 0000 0200              		or.l	#GFX_LINE,d6
   3343 FFFC232C 2A86                        		move.l	d6,GFX_CONTROL(a5)
   3344 FFFC232E 2B46 0704                   		move.l	d6,$704(a5)
   3345 FFFC2332 3B7C 00F7 0708              		move.w	#$F7,$708(a5)				; set control (generate write bus access to gfx)
   3346 FFFC2338 4E75                        		rts
                                             
   3348 FFFC233A                             gfx_demo:
   3349 FFFC233A 6100 FEA8                   		bsr		gfx_init
   3350 FFFC233E 6100 FE6C                   		bsr		gfx_set_400x300
   3351 FFFC2342                             .0001:
   3352 FFFC2342 4DF9 FFDC 0000              		lea		$FFDC0000,a6	; set I/O base
   3353 FFFC2348 202E 0C00                   		move.l	$0C00(a6),d0	; get 32 bit number
   3354 FFFC234C 3200                        		move.w	d0,d1			; use bits 0 to 8 for y0
   3355 FFFC234E 4840                        		swap	d0				; and bits 16 to 24 for x0
   3356 FFFC2350 0240 00FF                   		and.w	#$FF,d0		; 0 to 511
   3357 FFFC2354 0241 00FF                   		and.w	#$FF,d1		; 0 to 511
   3358 FFFC2358 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   3359 FFFC235C 242E 0C00                   		move.l	$0C00(a6),d2
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 57
bootrom.asm
   3360 FFFC2360 3602                        		move.w	d2,d3
   3361 FFFC2362 4842                        		swap	d2
   3362 FFFC2364 0242 00FF                   		and.w	#$FF,d2		; 0 to 511
   3363 FFFC2368 0243 00FF                   		and.w	#$FF,d3		; 0 to 511
   3364 FFFC236C 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   3365 FFFC2370 282E 0C00                   		move.l	$0C00(a6),d4
   3366 FFFC2374 0244 7FFF                   		and.w	#RGBMASK,d4		; 9/15 bits color
   3367 FFFC2378 426E 0C04                   		clr.w	$0C04(a6)		; gen next number
   3368 FFFC237C 2C00                        		move.l	d0,d6
   3369 FFFC237E 2004                        		move.l	d4,d0
   3370 FFFC2380 6100 FED2                   		bsr		gfx_set_color
   3371 FFFC2384 2006                        		move.l	d6,d0
   3372 FFFC2386 6100 FEEA                   		bsr		gfx_line
   3373 FFFC238A 60B6                        		bra		.0001
                                             
                                             		
                                             ; Randomize the screen	
                                             ;		move.l	#VDGBUF,A0
                                             ;		move.l	#%011011111,D0		; light blue
                                             ;		move.l	#640*512,D1
                                             ;clrscr_loop1:
                                             ;		move.l	$0C00(a6),d0			; get a random number
                                             ;		clr.w	$0C04(a6)				; generate next number
                                             ;		move.w	d0,(a0)+				; store it to the screen
                                             ;		sub.l	#1,d1
                                             ;		bne		clrscr_loop1
                                             
   3387 FFFC238C                             msg_start:
   3388 FFFC238C 4E 34 56 20 36 38 6B 20     	dc.b	"N4V 68k System Starting",CR,LF,0
   3389 FFFC2394 53 79 73 74 65 6D 20 53     
   3390 FFFC239C 74 61 72 74 69 6E 67 0D     
   3391 FFFC23A4 0A 00                       
                                             
                                             ;===============================================================================
                                             ; MMU
                                             ;===============================================================================
                                             		align	2
   3397 FFFC23A6                             mmu_init:
   3398 FFFC23A6 33FC 1010 FFDC 0600         		move.w	#$1010,leds
   3399 FFFC23AE 223C 0002 0000              		move.l	#131072,d1					; count of addresses to set map
   3400 FFFC23B4 207C 1FF4 0000              		movea.l	#$1FF40000,a0				; base of page tables
   3401 FFFC23BA 7007                        		moveq	#7,d0						; start at page zero, read,write,execute
   3402 FFFC23BC                             .0001:
   3403 FFFC23BC 20C0                        		move.l	d0,(a0)+					; update page table entry
   3404 FFFC23BE 0680 0000 1000              		add.l	#$1000,d0
   3405 FFFC23C4 5381                        		sub.l	#1,d1
   3406 FFFC23C6 66F4                        		bne.s	.0001
                                             	
                                             		; Setup the page directory
                                             		; There are only 128 entries to be set, but all entries must be
                                             		; setup because there's no page faulting on not present. All the
                                             		; entries must point to present pages. So the part of the address
                                             		; space that isn't present is setup to point to a dummy page
                                             		; table.
                                             
   3415 FFFC23C8 33FC 1111 FFDC 0600         		move.w	#$1111,leds
   3416 FFFC23D0 323C 0400                   		move.w	#1024,d1			; 1024 entries to setup
   3417 FFFC23D4 207C 1FFF E000              		move.l	#$1FFFE000,a0		; page table for not present entries
   3418 FFFC23DA 203C 1FFF D006              		move.l	#$1FFFD006,d0		; point all entries for not present pages to $1FFFD000
   3419 FFFC23E0                             .0003:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 58
bootrom.asm
   3420 FFFC23E0 20C0                        		move.l	d0,(a0)+
   3421 FFFC23E2 51C9 FFFC                   		dbra	d1,.0003
                                             
   3423 FFFC23E6 33FC 1212 FFDC 0600         		move.w	#$1212,leds
   3424 FFFC23EE 747F                        		move.l	#127,d2
   3425 FFFC23F0 207C 1FFF F000              		movea.l	#$1FFFF000,a0		; a0 = page directory address
   3426 FFFC23F6 223C 1FFF E000              		move.l	#$1FFFE000,d1		; point to not present page table
   3427 FFFC23FC 203C 1FF4 0007              		move.l	#$1FF40007,d0
   3428 FFFC2402                             .0002:
   3429 FFFC2402 2141 0200                   		move.l	d1,$0200(a0)		; 7/8 of memory isn't available
   3430 FFFC2406 2141 0400                   		move.l	d1,$0400(a0)
   3431 FFFC240A 2141 0600                   		move.l	d1,$0600(a0)
   3432 FFFC240E 2141 0800                   		move.l	d1,$0800(a0)
   3433 FFFC2412 2141 0A00                   		move.l	d1,$0A00(a0)
   3434 FFFC2416 2141 0C00                   		move.l	d1,$0C00(a0)
   3435 FFFC241A 2141 0E00                   		move.l	d1,$0E00(a0)
   3436 FFFC241E 20C0                        		move.l	d0,(a0)+
   3437 FFFC2420 0680 0000 1000              		add.l	#$1000,d0
   3438 FFFC2426 51CA FFDA                   		dbra	d2,.0002
   3439 FFFC242A 33FC 1919 FFDC 0600         		move.w	#$1919,leds
   3440 FFFC2432 33FC 0000 FFFF FFF6         		move.w	#$00,$FFFFFFF6				; set asid
   3441 FFFC243A 23F9 1FFF F000 FFFF FFF0    		move.l	$1FFFF000,$FFFFFFF0			; set page directory address, enable
                                             
   3443 FFFC2444 4E75                        		rts
                                             		
                                             ;===============================================================================
                                             ;===============================================================================
                                             ;===============================================================================
                                             ;===============================================================================
                                             
   3450 FFFC2446                             font8:
   3451 FFFC2446 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $00
                                             
   3453 FFFC244E 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3455 FFFC2456 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3457 FFFC245E 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3459 FFFC2466 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $04
                                             
   3461 FFFC246E 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3463 FFFC2476 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3465 FFFC247E 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3467 FFFC2486 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $08
                                             
   3469 FFFC248E 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3471 FFFC2496 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3473 FFFC249E 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3475 FFFC24A6 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $0C
                                             
   3477 FFFC24AE 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3479 FFFC24B6 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 59
bootrom.asm
                                             
   3481 FFFC24BE 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3483 FFFC24C6 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $10
                                             
   3485 FFFC24CE 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3487 FFFC24D6 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3489 FFFC24DE 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3491 FFFC24E6 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $14
                                             
   3493 FFFC24EE 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3495 FFFC24F6 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3497 FFFC24FE 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3499 FFFC2506 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $18
                                             
   3501 FFFC250E 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3503 FFFC2516 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3505 FFFC251E 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3507 FFFC2526 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; $1C
                                             
   3509 FFFC252E 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3511 FFFC2536 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3513 FFFC253E 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 
                                             
   3515 FFFC2546 00 00 00 00 00 00 00 00     	dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; SPACE
                                             
   3517 FFFC254E 18 18 18 18 18 00 18 00     	dc.b	$18,$18,$18,$18,$18,$00,$18,$00	; !
                                             
   3519 FFFC2556 6C 6C 00 00 00 00 00 00     	dc.b	$6C,$6C,$00,$00,$00,$00,$00,$00	; "
                                             
   3521 FFFC255E 6C 6C FE 6C FE 6C 6C 00     	dc.b	$6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	; #
                                             
   3523 FFFC2566 18 3E 60 3C 06 7C 18 00     	dc.b	$18,$3E,$60,$3C,$06,$7C,$18,$00	; $
                                             
   3525 FFFC256E 00 66 AC D8 36 6A CC 00     	dc.b	$00,$66,$AC,$D8,$36,$6A,$CC,$00	; %
                                             
   3527 FFFC2576 38 6C 68 76 DC CE 7B 00     	dc.b	$38,$6C,$68,$76,$DC,$CE,$7B,$00	; &
                                             
   3529 FFFC257E 18 18 30 00 00 00 00 00     	dc.b	$18,$18,$30,$00,$00,$00,$00,$00	; '
                                             
   3531 FFFC2586 0C 18 30 30 30 18 0C 00     	dc.b	$0C,$18,$30,$30,$30,$18,$0C,$00	; (
                                             
   3533 FFFC258E 30 18 0C 0C 0C 18 30 00     	dc.b	$30,$18,$0C,$0C,$0C,$18,$30,$00	; )
                                             
   3535 FFFC2596 00 66 3C FF 3C 66 00 00     	dc.b	$00,$66,$3C,$FF,$3C,$66,$00,$00	; *
                                             
   3537 FFFC259E 00 18 18 7E 18 18 00 00     	dc.b	$00,$18,$18,$7E,$18,$18,$00,$00	; +
                                             
   3539 FFFC25A6 00 00 00 00 00 18 18 30     	dc.b	$00,$00,$00,$00,$00,$18,$18,$30	; ,
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 60
bootrom.asm
                                             
   3541 FFFC25AE 00 00 00 7E 00 00 00 00     	dc.b	$00,$00,$00,$7E,$00,$00,$00,$00	; -
                                             
   3543 FFFC25B6 00 00 00 00 00 18 18 00     	dc.b	$00,$00,$00,$00,$00,$18,$18,$00	; .
                                             
   3545 FFFC25BE 03 06 0C 18 30 60 C0 00     	dc.b	$03,$06,$0C,$18,$30,$60,$C0,$00	; /
                                             
   3547 FFFC25C6 3C 66 6E 7E 76 66 3C 00     	dc.b	$3C,$66,$6E,$7E,$76,$66,$3C,$00	; 0
                                             
   3549 FFFC25CE 18 38 78 18 18 18 18 00     	dc.b	$18,$38,$78,$18,$18,$18,$18,$00	; 1
                                             
   3551 FFFC25D6 3C 66 06 0C 18 30 7E 00     	dc.b	$3C,$66,$06,$0C,$18,$30,$7E,$00	; 2
                                             
   3553 FFFC25DE 3C 66 06 1C 06 66 3C 00     	dc.b	$3C,$66,$06,$1C,$06,$66,$3C,$00	; 3
                                             
   3555 FFFC25E6 1C 3C 6C CC FE 0C 0C 00     	dc.b	$1C,$3C,$6C,$CC,$FE,$0C,$0C,$00	; 4
                                             
   3557 FFFC25EE 7E 60 7C 06 06 66 3C 00     	dc.b	$7E,$60,$7C,$06,$06,$66,$3C,$00	; 5
                                             
   3559 FFFC25F6 1C 30 60 7C 66 66 3C 00     	dc.b	$1C,$30,$60,$7C,$66,$66,$3C,$00	; 6
                                             
   3561 FFFC25FE 7E 06 06 0C 18 18 18 00     	dc.b	$7E,$06,$06,$0C,$18,$18,$18,$00	; 7
                                             
   3563 FFFC2606 3C 66 66 3C 66 66 3C 00     	dc.b	$3C,$66,$66,$3C,$66,$66,$3C,$00	; 8
                                             
   3565 FFFC260E 3C 66 66 3E 06 0C 38 00     	dc.b	$3C,$66,$66,$3E,$06,$0C,$38,$00	; 9
                                             
   3567 FFFC2616 00 18 18 00 00 18 18 00     	dc.b	$00,$18,$18,$00,$00,$18,$18,$00	; :
                                             
   3569 FFFC261E 00 18 18 00 00 18 18 30     	dc.b	$00,$18,$18,$00,$00,$18,$18,$30	; ;
                                             
   3571 FFFC2626 00 06 18 60 18 06 00 00     	dc.b	$00,$06,$18,$60,$18,$06,$00,$00	; <
                                             
   3573 FFFC262E 00 00 7E 00 7E 00 00 00     	dc.b	$00,$00,$7E,$00,$7E,$00,$00,$00	; =
                                             
   3575 FFFC2636 00 60 18 06 18 60 00 00     	dc.b	$00,$60,$18,$06,$18,$60,$00,$00	; >
                                             
   3577 FFFC263E 3C 66 06 0C 18 00 18 00     	dc.b	$3C,$66,$06,$0C,$18,$00,$18,$00	; ?
                                             
   3579 FFFC2646 7C C6 DE D6 DE C0 78 00     	dc.b	$7C,$C6,$DE,$D6,$DE,$C0,$78,$00	; @
                                             
   3581 FFFC264E 3C 66 66 7E 66 66 66 00     	dc.b	$3C,$66,$66,$7E,$66,$66,$66,$00	; A
                                             
   3583 FFFC2656 7C 66 66 7C 66 66 7C 00     	dc.b	$7C,$66,$66,$7C,$66,$66,$7C,$00	; B
                                             
   3585 FFFC265E 1E 30 60 60 60 30 1E 00     	dc.b	$1E,$30,$60,$60,$60,$30,$1E,$00	; C
                                             
   3587 FFFC2666 78 6C 66 66 66 6C 78 00     	dc.b	$78,$6C,$66,$66,$66,$6C,$78,$00	; D
                                             
   3589 FFFC266E 7E 60 60 78 60 60 7E 00     	dc.b	$7E,$60,$60,$78,$60,$60,$7E,$00	; E
                                             
   3591 FFFC2676 7E 60 60 78 60 60 60 00     	dc.b	$7E,$60,$60,$78,$60,$60,$60,$00	; F
                                             
   3593 FFFC267E 3C 66 60 6E 66 66 3E 00     	dc.b	$3C,$66,$60,$6E,$66,$66,$3E,$00	; G
                                             
   3595 FFFC2686 66 66 66 7E 66 66 66 00     	dc.b	$66,$66,$66,$7E,$66,$66,$66,$00	; H
                                             
   3597 FFFC268E 3C 18 18 18 18 18 3C 00     	dc.b	$3C,$18,$18,$18,$18,$18,$3C,$00	; I
                                             
   3599 FFFC2696 06 06 06 06 06 66 3C 00     	dc.b	$06,$06,$06,$06,$06,$66,$3C,$00	; J
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 61
bootrom.asm
                                             
   3601 FFFC269E C6 CC D8 F0 D8 CC C6 00     	dc.b	$C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	; K
                                             
   3603 FFFC26A6 60 60 60 60 60 60 7E 00     	dc.b	$60,$60,$60,$60,$60,$60,$7E,$00	; L
                                             
   3605 FFFC26AE C6 EE FE D6 C6 C6 C6 00     	dc.b	$C6,$EE,$FE,$D6,$C6,$C6,$C6,$00	; M
                                             
   3607 FFFC26B6 C6 E6 F6 DE CE C6 C6 00     	dc.b	$C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	; N
                                             
   3609 FFFC26BE 3C 66 66 66 66 66 3C 00     	dc.b	$3C,$66,$66,$66,$66,$66,$3C,$00	; O
                                             
   3611 FFFC26C6 7C 66 66 7C 60 60 60 00     	dc.b	$7C,$66,$66,$7C,$60,$60,$60,$00	; P
                                             
   3613 FFFC26CE 78 CC CC CC CC DC 7E 00     	dc.b	$78,$CC,$CC,$CC,$CC,$DC,$7E,$00	; Q
                                             
   3615 FFFC26D6 7C 66 66 7C 6C 66 66 00     	dc.b	$7C,$66,$66,$7C,$6C,$66,$66,$00	; R
                                             
   3617 FFFC26DE 3C 66 70 3C 0E 66 3C 00     	dc.b	$3C,$66,$70,$3C,$0E,$66,$3C,$00	; S
                                             
   3619 FFFC26E6 7E 18 18 18 18 18 18 00     	dc.b	$7E,$18,$18,$18,$18,$18,$18,$00	; T
                                             
   3621 FFFC26EE 66 66 66 66 66 66 3C 00     	dc.b	$66,$66,$66,$66,$66,$66,$3C,$00	; U
                                             
   3623 FFFC26F6 66 66 66 66 3C 3C 18 00     	dc.b	$66,$66,$66,$66,$3C,$3C,$18,$00	; V
                                             
   3625 FFFC26FE C6 C6 C6 D6 FE EE C6 00     	dc.b	$C6,$C6,$C6,$D6,$FE,$EE,$C6,$00	; W
                                             
   3627 FFFC2706 C3 66 3C 18 3C 66 C3 00     	dc.b	$C3,$66,$3C,$18,$3C,$66,$C3,$00	; X
                                             
   3629 FFFC270E C3 66 3C 18 18 18 18 00     	dc.b	$C3,$66,$3C,$18,$18,$18,$18,$00	; Y
                                             
   3631 FFFC2716 FE 0C 18 30 60 C0 FE 00     	dc.b	$FE,$0C,$18,$30,$60,$C0,$FE,$00	; Z
                                             
   3633 FFFC271E 3C 30 30 30 30 30 3C 00     	dc.b	$3C,$30,$30,$30,$30,$30,$3C,$00	; [
                                             
   3635 FFFC2726 C0 60 30 18 0C 06 03 00     	dc.b	$C0,$60,$30,$18,$0C,$06,$03,$00	; \
                                             
   3637 FFFC272E 3C 0C 0C 0C 0C 0C 3C 00     	dc.b	$3C,$0C,$0C,$0C,$0C,$0C,$3C,$00	; ]
                                             
   3639 FFFC2736 10 38 6C C6 00 00 00 00     	dc.b	$10,$38,$6C,$C6,$00,$00,$00,$00	; ^
                                             
   3641 FFFC273E 00 00 00 00 00 00 00 FE     	dc.b	$00,$00,$00,$00,$00,$00,$00,$FE	; _
                                             
   3643 FFFC2746 18 18 0C 00 00 00 00 00     	dc.b	$18,$18,$0C,$00,$00,$00,$00,$00	; `
                                             
   3645 FFFC274E 00 00 3C 06 3E 66 3E 00     	dc.b	$00,$00,$3C,$06,$3E,$66,$3E,$00	; a
                                             
   3647 FFFC2756 60 60 7C 66 66 66 7C 00     	dc.b	$60,$60,$7C,$66,$66,$66,$7C,$00	; b
                                             
   3649 FFFC275E 00 00 3C 60 60 60 3C 00     	dc.b	$00,$00,$3C,$60,$60,$60,$3C,$00	; c
                                             
   3651 FFFC2766 06 06 3E 66 66 66 3E 00     	dc.b	$06,$06,$3E,$66,$66,$66,$3E,$00	; d
                                             
   3653 FFFC276E 00 00 3C 66 7E 60 3C 00     	dc.b	$00,$00,$3C,$66,$7E,$60,$3C,$00	; e
                                             
   3655 FFFC2776 1C 30 7C 30 30 30 30 00     	dc.b	$1C,$30,$7C,$30,$30,$30,$30,$00	; f
                                             
   3657 FFFC277E 00 00 3E 66 66 3E 06 3C     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$3C	; g
                                             
   3659 FFFC2786 60 60 7C 66 66 66 66 00     	dc.b	$60,$60,$7C,$66,$66,$66,$66,$00	; h
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 62
bootrom.asm
                                             
   3661 FFFC278E 18 00 18 18 18 18 0C 00     	dc.b	$18,$00,$18,$18,$18,$18,$0C,$00	; i
                                             
   3663 FFFC2796 0C 00 0C 0C 0C 0C 0C 78     	dc.b	$0C,$00,$0C,$0C,$0C,$0C,$0C,$78	; j
                                             
   3665 FFFC279E 60 60 66 6C 78 6C 66 00     	dc.b	$60,$60,$66,$6C,$78,$6C,$66,$00	; k
                                             
   3667 FFFC27A6 18 18 18 18 18 18 0C 00     	dc.b	$18,$18,$18,$18,$18,$18,$0C,$00	; l
                                             
   3669 FFFC27AE 00 00 EC FE D6 C6 C6 00     	dc.b	$00,$00,$EC,$FE,$D6,$C6,$C6,$00	; m
                                             
   3671 FFFC27B6 00 00 7C 66 66 66 66 00     	dc.b	$00,$00,$7C,$66,$66,$66,$66,$00	; n
                                             
   3673 FFFC27BE 00 00 3C 66 66 66 3C 00     	dc.b	$00,$00,$3C,$66,$66,$66,$3C,$00	; o
                                             
   3675 FFFC27C6 00 00 7C 66 66 7C 60 60     	dc.b	$00,$00,$7C,$66,$66,$7C,$60,$60	; p
                                             
   3677 FFFC27CE 00 00 3E 66 66 3E 06 06     	dc.b	$00,$00,$3E,$66,$66,$3E,$06,$06	; q
                                             
   3679 FFFC27D6 00 00 7C 66 60 60 60 00     	dc.b	$00,$00,$7C,$66,$60,$60,$60,$00	; r
                                             
   3681 FFFC27DE 00 00 3C 60 3C 06 7C 00     	dc.b	$00,$00,$3C,$60,$3C,$06,$7C,$00	; s
                                             
   3683 FFFC27E6 30 30 7C 30 30 30 1C 00     	dc.b	$30,$30,$7C,$30,$30,$30,$1C,$00	; t
                                             
   3685 FFFC27EE 00 00 66 66 66 66 3E 00     	dc.b	$00,$00,$66,$66,$66,$66,$3E,$00	; u
                                             
   3687 FFFC27F6 00 00 66 66 66 3C 18 00     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$00	; v
                                             
   3689 FFFC27FE 00 00 C6 C6 D6 FE 6C 00     	dc.b	$00,$00,$C6,$C6,$D6,$FE,$6C,$00	; w
                                             
   3691 FFFC2806 00 00 C6 6C 38 6C C6 00     	dc.b	$00,$00,$C6,$6C,$38,$6C,$C6,$00	; x
                                             
   3693 FFFC280E 00 00 66 66 66 3C 18 30     	dc.b	$00,$00,$66,$66,$66,$3C,$18,$30	; y
                                             
   3695 FFFC2816 00 00 7E 0C 18 30 7E 00     	dc.b	$00,$00,$7E,$0C,$18,$30,$7E,$00	; z
                                             
   3697 FFFC281E 0E 18 18 70 18 18 0E 00     	dc.b	$0E,$18,$18,$70,$18,$18,$0E,$00	; {
                                             
   3699 FFFC2826 18 18 18 18 18 18 18 00     	dc.b	$18,$18,$18,$18,$18,$18,$18,$00	; |
                                             
   3701 FFFC282E 70 18 18 0E 18 18 70 00     	dc.b	$70,$18,$18,$0E,$18,$18,$70,$00	; }
                                             
   3703 FFFC2836 72 9C 00 00 00 00 00 00     	dc.b	$72,$9C,$00,$00,$00,$00,$00,$00	; ~
                                             
   3705 FFFC283E FE FE FE FE FE FE FE 00     	dc.b	$FE,$FE,$FE,$FE,$FE,$FE,$FE,$00	; 
                                             
                                             
                                             
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 1
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm

                                             ;*****************************************************************
                                             ;								 *
                                             ;		Tiny BASIC for the Motorola MC68000		 *
                                             ;								 *
                                             ; Derived from Palo Alto Tiny BASIC as published in the May 1976 *
                                             ; issue of Dr. Dobb's Journal.  Adapted to the 68000 by:         *
                                             ;	Gordon Brandly						 *
                                             ;	12147 - 51 Street					 *
                                             ;	Edmonton AB  T5W 3G8					 *
                                             ;	Canada							 *
                                             ;	(updated mailing address for 1996)			 *
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 2
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;								 *
                                             ; This version is for MEX68KECB Educational Computer Board I/O.  *
                                             ;								 *
                                             ;*****************************************************************
                                             ;    Copyright (C) 1984 by Gordon Brandly. This program may be	 *
                                             ;    freely distributed for personal use only. All commercial	 *
                                             ;		       rights are reserved.			 *
                                             ;*****************************************************************
                                             
                                             ; Vers. 1.0  1984/7/17	- Original version by Gordon Brandly
                                             ;	1.1  1984/12/9	- Addition of '$' print term by Marvin Lipford
                                             ;	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                                             
                                             ;	OPT	FRS,BRS 	forward ref.'s & branches default to short
                                             
                                             CR	EQU	0x0D		;ASCII equates
                                             LF	EQU	0x0A
                                             TAB	EQU	0x09
                                             CTRLC	EQU	0x03
                                             CTRLH	EQU	0x08
                                             CTRLS	EQU	0x13
                                             CTRLX	EQU	0x18
                                             
                                             BUFLEN	EQU	80	;	length of keyboard input buffer
                                             
                                             ;*
                                             ;* Internal variables follow:
                                             ;*
                                             	BSS
                                             	ORG		0x600
   3750 00000600                             RANPNT:
   3751 00000600                             	DC.L	START	;	random number pointer
   3752 00000604                             CURRNT:
   3753 00000604                             	DC.L	1		;Current line pointer
   3754 00000608                             STKGOS:
   3755 00000608                             	DC.L	1		;Saves stack pointer in 'GOSUB'
   3756 0000060C                             STKINP:
   3757 0000060C                             	DC.L	1		;Saves stack pointer during 'INPUT'
   3758 00000610                             LOPVAR:
   3759 00000610                             	DC.L	1		;'FOR' loop save area
   3760 00000614                             LOPINC:
   3761 00000614                             	DC.L	1		;increment
   3762 00000618                             LOPLMT:
   3763 00000618                             	DC.L	1		;limit
   3764 0000061C                             LOPLN:
   3765 0000061C                             	DC.L	1		;line number
   3766 00000620                             LOPPT:
   3767 00000620                             	DC.L	1		;text pointer
   3768 00000624                             TXTUNF:
   3769 00000624                             	DC.L	1		;points to unfilled text area
   3770 00000628                             VARBGN:
   3771 00000628                             	DC.L	1		;points to variable area
   3772 0000062C                             STKLMT:
   3773 0000062C                             	DC.L	1		;holds lower limit for stack growth
   3774 00000630                             BUFFER:
   3775 00000630                             	FILL.B	BUFLEN,0x00	;	Keyboard input buffer
                                             
                                             TXT	EQU	$		;Beginning of program area
                                             
                                             	CODE
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 3
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   3780 FFFC2846 FF FF FF FF FF FF FF FF     	ORG	0xFFFCC000	;
   3781 FFFC284E FF FF FF FF FF FF FF FF     
   3782 FFFC2856 FF FF FF FF FF FF FF FF     
   3783 FFFC285E FF FF FF FF FF FF FF FF     
   3784 FFFC2866 FF FF FF FF FF FF FF FF     
   3785 FFFC286E FF FF FF FF FF FF FF FF     
   3786 FFFC2876 FF FF FF FF FF FF FF FF     
   3787 FFFC287E FF FF FF FF FF FF FF FF     
   3788 FFFC2886 FF FF FF FF FF FF FF FF     
   3789 FFFC288E FF FF FF FF FF FF FF FF     
   3790 FFFC2896 FF FF FF FF FF FF FF FF     
   3791 FFFC289E FF FF FF FF FF FF FF FF     
   3792 FFFC28A6 FF FF FF FF FF FF FF FF     
   3793 FFFC28AE FF FF FF FF FF FF FF FF     
   3794 FFFC28B6 FF FF FF FF FF FF FF FF     
   3795 FFFC28BE FF FF FF FF FF FF FF FF     
   3796 FFFC28C6 FF FF FF FF FF FF FF FF     
   3797 FFFC28CE FF FF FF FF FF FF FF FF     
   3798 FFFC28D6 FF FF FF FF FF FF FF FF     
   3799 FFFC28DE FF FF FF FF FF FF FF FF     
   3800 FFFC28E6 FF FF FF FF FF FF FF FF     
   3801 FFFC28EE FF FF FF FF FF FF FF FF     
   3802 FFFC28F6 FF FF FF FF FF FF FF FF     
   3803 FFFC28FE FF FF FF FF FF FF FF FF     
   3804 FFFC2906 FF FF FF FF FF FF FF FF     
   3805 FFFC290E FF FF FF FF FF FF FF FF     
   3806 FFFC2916 FF FF FF FF FF FF FF FF     
   3807 FFFC291E FF FF FF FF FF FF FF FF     
   3808 FFFC2926 FF FF FF FF FF FF FF FF     
   3809 FFFC292E FF FF FF FF FF FF FF FF     
   3810 FFFC2936 FF FF FF FF FF FF FF FF     
   3811 FFFC293E FF FF FF FF FF FF FF FF     
   3812 FFFC2946 FF FF FF FF FF FF FF FF     
   3813 FFFC294E FF FF FF FF FF FF FF FF     
   3814 FFFC2956 FF FF FF FF FF FF FF FF     
   3815 FFFC295E FF FF FF FF FF FF FF FF     
   3816 FFFC2966 FF FF FF FF FF FF FF FF     
   3817 FFFC296E FF FF FF FF FF FF FF FF     
   3818 FFFC2976 FF FF FF FF FF FF FF FF     
   3819 FFFC297E FF FF FF FF FF FF FF FF     
   3820 FFFC2986 FF FF FF FF FF FF FF FF     
   3821 FFFC298E FF FF FF FF FF FF FF FF     
   3822 FFFC2996 FF FF FF FF FF FF FF FF     
   3823 FFFC299E FF FF FF FF FF FF FF FF     
   3824 FFFC29A6 FF FF FF FF FF FF FF FF     
   3825 FFFC29AE FF FF FF FF FF FF FF FF     
   3826 FFFC29B6 FF FF FF FF FF FF FF FF     
   3827 FFFC29BE FF FF FF FF FF FF FF FF     
   3828 FFFC29C6 FF FF FF FF FF FF FF FF     
   3829 FFFC29CE FF FF FF FF FF FF FF FF     
   3830 FFFC29D6 FF FF FF FF FF FF FF FF     
   3831 FFFC29DE FF FF FF FF FF FF FF FF     
   3832 FFFC29E6 FF FF FF FF FF FF FF FF     
   3833 FFFC29EE FF FF FF FF FF FF FF FF     
   3834 FFFC29F6 FF FF FF FF FF FF FF FF     
   3835 FFFC29FE FF FF FF FF FF FF FF FF     
   3836 FFFC2A06 FF FF FF FF FF FF FF FF     
   3837 FFFC2A0E FF FF FF FF FF FF FF FF     
   3838 FFFC2A16 FF FF FF FF FF FF FF FF     
   3839 FFFC2A1E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 4
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   3840 FFFC2A26 FF FF FF FF FF FF FF FF     
   3841 FFFC2A2E FF FF FF FF FF FF FF FF     
   3842 FFFC2A36 FF FF FF FF FF FF FF FF     
   3843 FFFC2A3E FF FF FF FF FF FF FF FF     
   3844 FFFC2A46 FF FF FF FF FF FF FF FF     
   3845 FFFC2A4E FF FF FF FF FF FF FF FF     
   3846 FFFC2A56 FF FF FF FF FF FF FF FF     
   3847 FFFC2A5E FF FF FF FF FF FF FF FF     
   3848 FFFC2A66 FF FF FF FF FF FF FF FF     
   3849 FFFC2A6E FF FF FF FF FF FF FF FF     
   3850 FFFC2A76 FF FF FF FF FF FF FF FF     
   3851 FFFC2A7E FF FF FF FF FF FF FF FF     
   3852 FFFC2A86 FF FF FF FF FF FF FF FF     
   3853 FFFC2A8E FF FF FF FF FF FF FF FF     
   3854 FFFC2A96 FF FF FF FF FF FF FF FF     
   3855 FFFC2A9E FF FF FF FF FF FF FF FF     
   3856 FFFC2AA6 FF FF FF FF FF FF FF FF     
   3857 FFFC2AAE FF FF FF FF FF FF FF FF     
   3858 FFFC2AB6 FF FF FF FF FF FF FF FF     
   3859 FFFC2ABE FF FF FF FF FF FF FF FF     
   3860 FFFC2AC6 FF FF FF FF FF FF FF FF     
   3861 FFFC2ACE FF FF FF FF FF FF FF FF     
   3862 FFFC2AD6 FF FF FF FF FF FF FF FF     
   3863 FFFC2ADE FF FF FF FF FF FF FF FF     
   3864 FFFC2AE6 FF FF FF FF FF FF FF FF     
   3865 FFFC2AEE FF FF FF FF FF FF FF FF     
   3866 FFFC2AF6 FF FF FF FF FF FF FF FF     
   3867 FFFC2AFE FF FF FF FF FF FF FF FF     
   3868 FFFC2B06 FF FF FF FF FF FF FF FF     
   3869 FFFC2B0E FF FF FF FF FF FF FF FF     
   3870 FFFC2B16 FF FF FF FF FF FF FF FF     
   3871 FFFC2B1E FF FF FF FF FF FF FF FF     
   3872 FFFC2B26 FF FF FF FF FF FF FF FF     
   3873 FFFC2B2E FF FF FF FF FF FF FF FF     
   3874 FFFC2B36 FF FF FF FF FF FF FF FF     
   3875 FFFC2B3E FF FF FF FF FF FF FF FF     
   3876 FFFC2B46 FF FF FF FF FF FF FF FF     
   3877 FFFC2B4E FF FF FF FF FF FF FF FF     
   3878 FFFC2B56 FF FF FF FF FF FF FF FF     
   3879 FFFC2B5E FF FF FF FF FF FF FF FF     
   3880 FFFC2B66 FF FF FF FF FF FF FF FF     
   3881 FFFC2B6E FF FF FF FF FF FF FF FF     
   3882 FFFC2B76 FF FF FF FF FF FF FF FF     
   3883 FFFC2B7E FF FF FF FF FF FF FF FF     
   3884 FFFC2B86 FF FF FF FF FF FF FF FF     
   3885 FFFC2B8E FF FF FF FF FF FF FF FF     
   3886 FFFC2B96 FF FF FF FF FF FF FF FF     
   3887 FFFC2B9E FF FF FF FF FF FF FF FF     
   3888 FFFC2BA6 FF FF FF FF FF FF FF FF     
   3889 FFFC2BAE FF FF FF FF FF FF FF FF     
   3890 FFFC2BB6 FF FF FF FF FF FF FF FF     
   3891 FFFC2BBE FF FF FF FF FF FF FF FF     
   3892 FFFC2BC6 FF FF FF FF FF FF FF FF     
   3893 FFFC2BCE FF FF FF FF FF FF FF FF     
   3894 FFFC2BD6 FF FF FF FF FF FF FF FF     
   3895 FFFC2BDE FF FF FF FF FF FF FF FF     
   3896 FFFC2BE6 FF FF FF FF FF FF FF FF     
   3897 FFFC2BEE FF FF FF FF FF FF FF FF     
   3898 FFFC2BF6 FF FF FF FF FF FF FF FF     
   3899 FFFC2BFE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 5
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   3900 FFFC2C06 FF FF FF FF FF FF FF FF     
   3901 FFFC2C0E FF FF FF FF FF FF FF FF     
   3902 FFFC2C16 FF FF FF FF FF FF FF FF     
   3903 FFFC2C1E FF FF FF FF FF FF FF FF     
   3904 FFFC2C26 FF FF FF FF FF FF FF FF     
   3905 FFFC2C2E FF FF FF FF FF FF FF FF     
   3906 FFFC2C36 FF FF FF FF FF FF FF FF     
   3907 FFFC2C3E FF FF FF FF FF FF FF FF     
   3908 FFFC2C46 FF FF FF FF FF FF FF FF     
   3909 FFFC2C4E FF FF FF FF FF FF FF FF     
   3910 FFFC2C56 FF FF FF FF FF FF FF FF     
   3911 FFFC2C5E FF FF FF FF FF FF FF FF     
   3912 FFFC2C66 FF FF FF FF FF FF FF FF     
   3913 FFFC2C6E FF FF FF FF FF FF FF FF     
   3914 FFFC2C76 FF FF FF FF FF FF FF FF     
   3915 FFFC2C7E FF FF FF FF FF FF FF FF     
   3916 FFFC2C86 FF FF FF FF FF FF FF FF     
   3917 FFFC2C8E FF FF FF FF FF FF FF FF     
   3918 FFFC2C96 FF FF FF FF FF FF FF FF     
   3919 FFFC2C9E FF FF FF FF FF FF FF FF     
   3920 FFFC2CA6 FF FF FF FF FF FF FF FF     
   3921 FFFC2CAE FF FF FF FF FF FF FF FF     
   3922 FFFC2CB6 FF FF FF FF FF FF FF FF     
   3923 FFFC2CBE FF FF FF FF FF FF FF FF     
   3924 FFFC2CC6 FF FF FF FF FF FF FF FF     
   3925 FFFC2CCE FF FF FF FF FF FF FF FF     
   3926 FFFC2CD6 FF FF FF FF FF FF FF FF     
   3927 FFFC2CDE FF FF FF FF FF FF FF FF     
   3928 FFFC2CE6 FF FF FF FF FF FF FF FF     
   3929 FFFC2CEE FF FF FF FF FF FF FF FF     
   3930 FFFC2CF6 FF FF FF FF FF FF FF FF     
   3931 FFFC2CFE FF FF FF FF FF FF FF FF     
   3932 FFFC2D06 FF FF FF FF FF FF FF FF     
   3933 FFFC2D0E FF FF FF FF FF FF FF FF     
   3934 FFFC2D16 FF FF FF FF FF FF FF FF     
   3935 FFFC2D1E FF FF FF FF FF FF FF FF     
   3936 FFFC2D26 FF FF FF FF FF FF FF FF     
   3937 FFFC2D2E FF FF FF FF FF FF FF FF     
   3938 FFFC2D36 FF FF FF FF FF FF FF FF     
   3939 FFFC2D3E FF FF FF FF FF FF FF FF     
   3940 FFFC2D46 FF FF FF FF FF FF FF FF     
   3941 FFFC2D4E FF FF FF FF FF FF FF FF     
   3942 FFFC2D56 FF FF FF FF FF FF FF FF     
   3943 FFFC2D5E FF FF FF FF FF FF FF FF     
   3944 FFFC2D66 FF FF FF FF FF FF FF FF     
   3945 FFFC2D6E FF FF FF FF FF FF FF FF     
   3946 FFFC2D76 FF FF FF FF FF FF FF FF     
   3947 FFFC2D7E FF FF FF FF FF FF FF FF     
   3948 FFFC2D86 FF FF FF FF FF FF FF FF     
   3949 FFFC2D8E FF FF FF FF FF FF FF FF     
   3950 FFFC2D96 FF FF FF FF FF FF FF FF     
   3951 FFFC2D9E FF FF FF FF FF FF FF FF     
   3952 FFFC2DA6 FF FF FF FF FF FF FF FF     
   3953 FFFC2DAE FF FF FF FF FF FF FF FF     
   3954 FFFC2DB6 FF FF FF FF FF FF FF FF     
   3955 FFFC2DBE FF FF FF FF FF FF FF FF     
   3956 FFFC2DC6 FF FF FF FF FF FF FF FF     
   3957 FFFC2DCE FF FF FF FF FF FF FF FF     
   3958 FFFC2DD6 FF FF FF FF FF FF FF FF     
   3959 FFFC2DDE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 6
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   3960 FFFC2DE6 FF FF FF FF FF FF FF FF     
   3961 FFFC2DEE FF FF FF FF FF FF FF FF     
   3962 FFFC2DF6 FF FF FF FF FF FF FF FF     
   3963 FFFC2DFE FF FF FF FF FF FF FF FF     
   3964 FFFC2E06 FF FF FF FF FF FF FF FF     
   3965 FFFC2E0E FF FF FF FF FF FF FF FF     
   3966 FFFC2E16 FF FF FF FF FF FF FF FF     
   3967 FFFC2E1E FF FF FF FF FF FF FF FF     
   3968 FFFC2E26 FF FF FF FF FF FF FF FF     
   3969 FFFC2E2E FF FF FF FF FF FF FF FF     
   3970 FFFC2E36 FF FF FF FF FF FF FF FF     
   3971 FFFC2E3E FF FF FF FF FF FF FF FF     
   3972 FFFC2E46 FF FF FF FF FF FF FF FF     
   3973 FFFC2E4E FF FF FF FF FF FF FF FF     
   3974 FFFC2E56 FF FF FF FF FF FF FF FF     
   3975 FFFC2E5E FF FF FF FF FF FF FF FF     
   3976 FFFC2E66 FF FF FF FF FF FF FF FF     
   3977 FFFC2E6E FF FF FF FF FF FF FF FF     
   3978 FFFC2E76 FF FF FF FF FF FF FF FF     
   3979 FFFC2E7E FF FF FF FF FF FF FF FF     
   3980 FFFC2E86 FF FF FF FF FF FF FF FF     
   3981 FFFC2E8E FF FF FF FF FF FF FF FF     
   3982 FFFC2E96 FF FF FF FF FF FF FF FF     
   3983 FFFC2E9E FF FF FF FF FF FF FF FF     
   3984 FFFC2EA6 FF FF FF FF FF FF FF FF     
   3985 FFFC2EAE FF FF FF FF FF FF FF FF     
   3986 FFFC2EB6 FF FF FF FF FF FF FF FF     
   3987 FFFC2EBE FF FF FF FF FF FF FF FF     
   3988 FFFC2EC6 FF FF FF FF FF FF FF FF     
   3989 FFFC2ECE FF FF FF FF FF FF FF FF     
   3990 FFFC2ED6 FF FF FF FF FF FF FF FF     
   3991 FFFC2EDE FF FF FF FF FF FF FF FF     
   3992 FFFC2EE6 FF FF FF FF FF FF FF FF     
   3993 FFFC2EEE FF FF FF FF FF FF FF FF     
   3994 FFFC2EF6 FF FF FF FF FF FF FF FF     
   3995 FFFC2EFE FF FF FF FF FF FF FF FF     
   3996 FFFC2F06 FF FF FF FF FF FF FF FF     
   3997 FFFC2F0E FF FF FF FF FF FF FF FF     
   3998 FFFC2F16 FF FF FF FF FF FF FF FF     
   3999 FFFC2F1E FF FF FF FF FF FF FF FF     
   4000 FFFC2F26 FF FF FF FF FF FF FF FF     
   4001 FFFC2F2E FF FF FF FF FF FF FF FF     
   4002 FFFC2F36 FF FF FF FF FF FF FF FF     
   4003 FFFC2F3E FF FF FF FF FF FF FF FF     
   4004 FFFC2F46 FF FF FF FF FF FF FF FF     
   4005 FFFC2F4E FF FF FF FF FF FF FF FF     
   4006 FFFC2F56 FF FF FF FF FF FF FF FF     
   4007 FFFC2F5E FF FF FF FF FF FF FF FF     
   4008 FFFC2F66 FF FF FF FF FF FF FF FF     
   4009 FFFC2F6E FF FF FF FF FF FF FF FF     
   4010 FFFC2F76 FF FF FF FF FF FF FF FF     
   4011 FFFC2F7E FF FF FF FF FF FF FF FF     
   4012 FFFC2F86 FF FF FF FF FF FF FF FF     
   4013 FFFC2F8E FF FF FF FF FF FF FF FF     
   4014 FFFC2F96 FF FF FF FF FF FF FF FF     
   4015 FFFC2F9E FF FF FF FF FF FF FF FF     
   4016 FFFC2FA6 FF FF FF FF FF FF FF FF     
   4017 FFFC2FAE FF FF FF FF FF FF FF FF     
   4018 FFFC2FB6 FF FF FF FF FF FF FF FF     
   4019 FFFC2FBE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 7
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4020 FFFC2FC6 FF FF FF FF FF FF FF FF     
   4021 FFFC2FCE FF FF FF FF FF FF FF FF     
   4022 FFFC2FD6 FF FF FF FF FF FF FF FF     
   4023 FFFC2FDE FF FF FF FF FF FF FF FF     
   4024 FFFC2FE6 FF FF FF FF FF FF FF FF     
   4025 FFFC2FEE FF FF FF FF FF FF FF FF     
   4026 FFFC2FF6 FF FF FF FF FF FF FF FF     
   4027 FFFC2FFE FF FF FF FF FF FF FF FF     
   4028 FFFC3006 FF FF FF FF FF FF FF FF     
   4029 FFFC300E FF FF FF FF FF FF FF FF     
   4030 FFFC3016 FF FF FF FF FF FF FF FF     
   4031 FFFC301E FF FF FF FF FF FF FF FF     
   4032 FFFC3026 FF FF FF FF FF FF FF FF     
   4033 FFFC302E FF FF FF FF FF FF FF FF     
   4034 FFFC3036 FF FF FF FF FF FF FF FF     
   4035 FFFC303E FF FF FF FF FF FF FF FF     
   4036 FFFC3046 FF FF FF FF FF FF FF FF     
   4037 FFFC304E FF FF FF FF FF FF FF FF     
   4038 FFFC3056 FF FF FF FF FF FF FF FF     
   4039 FFFC305E FF FF FF FF FF FF FF FF     
   4040 FFFC3066 FF FF FF FF FF FF FF FF     
   4041 FFFC306E FF FF FF FF FF FF FF FF     
   4042 FFFC3076 FF FF FF FF FF FF FF FF     
   4043 FFFC307E FF FF FF FF FF FF FF FF     
   4044 FFFC3086 FF FF FF FF FF FF FF FF     
   4045 FFFC308E FF FF FF FF FF FF FF FF     
   4046 FFFC3096 FF FF FF FF FF FF FF FF     
   4047 FFFC309E FF FF FF FF FF FF FF FF     
   4048 FFFC30A6 FF FF FF FF FF FF FF FF     
   4049 FFFC30AE FF FF FF FF FF FF FF FF     
   4050 FFFC30B6 FF FF FF FF FF FF FF FF     
   4051 FFFC30BE FF FF FF FF FF FF FF FF     
   4052 FFFC30C6 FF FF FF FF FF FF FF FF     
   4053 FFFC30CE FF FF FF FF FF FF FF FF     
   4054 FFFC30D6 FF FF FF FF FF FF FF FF     
   4055 FFFC30DE FF FF FF FF FF FF FF FF     
   4056 FFFC30E6 FF FF FF FF FF FF FF FF     
   4057 FFFC30EE FF FF FF FF FF FF FF FF     
   4058 FFFC30F6 FF FF FF FF FF FF FF FF     
   4059 FFFC30FE FF FF FF FF FF FF FF FF     
   4060 FFFC3106 FF FF FF FF FF FF FF FF     
   4061 FFFC310E FF FF FF FF FF FF FF FF     
   4062 FFFC3116 FF FF FF FF FF FF FF FF     
   4063 FFFC311E FF FF FF FF FF FF FF FF     
   4064 FFFC3126 FF FF FF FF FF FF FF FF     
   4065 FFFC312E FF FF FF FF FF FF FF FF     
   4066 FFFC3136 FF FF FF FF FF FF FF FF     
   4067 FFFC313E FF FF FF FF FF FF FF FF     
   4068 FFFC3146 FF FF FF FF FF FF FF FF     
   4069 FFFC314E FF FF FF FF FF FF FF FF     
   4070 FFFC3156 FF FF FF FF FF FF FF FF     
   4071 FFFC315E FF FF FF FF FF FF FF FF     
   4072 FFFC3166 FF FF FF FF FF FF FF FF     
   4073 FFFC316E FF FF FF FF FF FF FF FF     
   4074 FFFC3176 FF FF FF FF FF FF FF FF     
   4075 FFFC317E FF FF FF FF FF FF FF FF     
   4076 FFFC3186 FF FF FF FF FF FF FF FF     
   4077 FFFC318E FF FF FF FF FF FF FF FF     
   4078 FFFC3196 FF FF FF FF FF FF FF FF     
   4079 FFFC319E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 8
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4080 FFFC31A6 FF FF FF FF FF FF FF FF     
   4081 FFFC31AE FF FF FF FF FF FF FF FF     
   4082 FFFC31B6 FF FF FF FF FF FF FF FF     
   4083 FFFC31BE FF FF FF FF FF FF FF FF     
   4084 FFFC31C6 FF FF FF FF FF FF FF FF     
   4085 FFFC31CE FF FF FF FF FF FF FF FF     
   4086 FFFC31D6 FF FF FF FF FF FF FF FF     
   4087 FFFC31DE FF FF FF FF FF FF FF FF     
   4088 FFFC31E6 FF FF FF FF FF FF FF FF     
   4089 FFFC31EE FF FF FF FF FF FF FF FF     
   4090 FFFC31F6 FF FF FF FF FF FF FF FF     
   4091 FFFC31FE FF FF FF FF FF FF FF FF     
   4092 FFFC3206 FF FF FF FF FF FF FF FF     
   4093 FFFC320E FF FF FF FF FF FF FF FF     
   4094 FFFC3216 FF FF FF FF FF FF FF FF     
   4095 FFFC321E FF FF FF FF FF FF FF FF     
   4096 FFFC3226 FF FF FF FF FF FF FF FF     
   4097 FFFC322E FF FF FF FF FF FF FF FF     
   4098 FFFC3236 FF FF FF FF FF FF FF FF     
   4099 FFFC323E FF FF FF FF FF FF FF FF     
   4100 FFFC3246 FF FF FF FF FF FF FF FF     
   4101 FFFC324E FF FF FF FF FF FF FF FF     
   4102 FFFC3256 FF FF FF FF FF FF FF FF     
   4103 FFFC325E FF FF FF FF FF FF FF FF     
   4104 FFFC3266 FF FF FF FF FF FF FF FF     
   4105 FFFC326E FF FF FF FF FF FF FF FF     
   4106 FFFC3276 FF FF FF FF FF FF FF FF     
   4107 FFFC327E FF FF FF FF FF FF FF FF     
   4108 FFFC3286 FF FF FF FF FF FF FF FF     
   4109 FFFC328E FF FF FF FF FF FF FF FF     
   4110 FFFC3296 FF FF FF FF FF FF FF FF     
   4111 FFFC329E FF FF FF FF FF FF FF FF     
   4112 FFFC32A6 FF FF FF FF FF FF FF FF     
   4113 FFFC32AE FF FF FF FF FF FF FF FF     
   4114 FFFC32B6 FF FF FF FF FF FF FF FF     
   4115 FFFC32BE FF FF FF FF FF FF FF FF     
   4116 FFFC32C6 FF FF FF FF FF FF FF FF     
   4117 FFFC32CE FF FF FF FF FF FF FF FF     
   4118 FFFC32D6 FF FF FF FF FF FF FF FF     
   4119 FFFC32DE FF FF FF FF FF FF FF FF     
   4120 FFFC32E6 FF FF FF FF FF FF FF FF     
   4121 FFFC32EE FF FF FF FF FF FF FF FF     
   4122 FFFC32F6 FF FF FF FF FF FF FF FF     
   4123 FFFC32FE FF FF FF FF FF FF FF FF     
   4124 FFFC3306 FF FF FF FF FF FF FF FF     
   4125 FFFC330E FF FF FF FF FF FF FF FF     
   4126 FFFC3316 FF FF FF FF FF FF FF FF     
   4127 FFFC331E FF FF FF FF FF FF FF FF     
   4128 FFFC3326 FF FF FF FF FF FF FF FF     
   4129 FFFC332E FF FF FF FF FF FF FF FF     
   4130 FFFC3336 FF FF FF FF FF FF FF FF     
   4131 FFFC333E FF FF FF FF FF FF FF FF     
   4132 FFFC3346 FF FF FF FF FF FF FF FF     
   4133 FFFC334E FF FF FF FF FF FF FF FF     
   4134 FFFC3356 FF FF FF FF FF FF FF FF     
   4135 FFFC335E FF FF FF FF FF FF FF FF     
   4136 FFFC3366 FF FF FF FF FF FF FF FF     
   4137 FFFC336E FF FF FF FF FF FF FF FF     
   4138 FFFC3376 FF FF FF FF FF FF FF FF     
   4139 FFFC337E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 9
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4140 FFFC3386 FF FF FF FF FF FF FF FF     
   4141 FFFC338E FF FF FF FF FF FF FF FF     
   4142 FFFC3396 FF FF FF FF FF FF FF FF     
   4143 FFFC339E FF FF FF FF FF FF FF FF     
   4144 FFFC33A6 FF FF FF FF FF FF FF FF     
   4145 FFFC33AE FF FF FF FF FF FF FF FF     
   4146 FFFC33B6 FF FF FF FF FF FF FF FF     
   4147 FFFC33BE FF FF FF FF FF FF FF FF     
   4148 FFFC33C6 FF FF FF FF FF FF FF FF     
   4149 FFFC33CE FF FF FF FF FF FF FF FF     
   4150 FFFC33D6 FF FF FF FF FF FF FF FF     
   4151 FFFC33DE FF FF FF FF FF FF FF FF     
   4152 FFFC33E6 FF FF FF FF FF FF FF FF     
   4153 FFFC33EE FF FF FF FF FF FF FF FF     
   4154 FFFC33F6 FF FF FF FF FF FF FF FF     
   4155 FFFC33FE FF FF FF FF FF FF FF FF     
   4156 FFFC3406 FF FF FF FF FF FF FF FF     
   4157 FFFC340E FF FF FF FF FF FF FF FF     
   4158 FFFC3416 FF FF FF FF FF FF FF FF     
   4159 FFFC341E FF FF FF FF FF FF FF FF     
   4160 FFFC3426 FF FF FF FF FF FF FF FF     
   4161 FFFC342E FF FF FF FF FF FF FF FF     
   4162 FFFC3436 FF FF FF FF FF FF FF FF     
   4163 FFFC343E FF FF FF FF FF FF FF FF     
   4164 FFFC3446 FF FF FF FF FF FF FF FF     
   4165 FFFC344E FF FF FF FF FF FF FF FF     
   4166 FFFC3456 FF FF FF FF FF FF FF FF     
   4167 FFFC345E FF FF FF FF FF FF FF FF     
   4168 FFFC3466 FF FF FF FF FF FF FF FF     
   4169 FFFC346E FF FF FF FF FF FF FF FF     
   4170 FFFC3476 FF FF FF FF FF FF FF FF     
   4171 FFFC347E FF FF FF FF FF FF FF FF     
   4172 FFFC3486 FF FF FF FF FF FF FF FF     
   4173 FFFC348E FF FF FF FF FF FF FF FF     
   4174 FFFC3496 FF FF FF FF FF FF FF FF     
   4175 FFFC349E FF FF FF FF FF FF FF FF     
   4176 FFFC34A6 FF FF FF FF FF FF FF FF     
   4177 FFFC34AE FF FF FF FF FF FF FF FF     
   4178 FFFC34B6 FF FF FF FF FF FF FF FF     
   4179 FFFC34BE FF FF FF FF FF FF FF FF     
   4180 FFFC34C6 FF FF FF FF FF FF FF FF     
   4181 FFFC34CE FF FF FF FF FF FF FF FF     
   4182 FFFC34D6 FF FF FF FF FF FF FF FF     
   4183 FFFC34DE FF FF FF FF FF FF FF FF     
   4184 FFFC34E6 FF FF FF FF FF FF FF FF     
   4185 FFFC34EE FF FF FF FF FF FF FF FF     
   4186 FFFC34F6 FF FF FF FF FF FF FF FF     
   4187 FFFC34FE FF FF FF FF FF FF FF FF     
   4188 FFFC3506 FF FF FF FF FF FF FF FF     
   4189 FFFC350E FF FF FF FF FF FF FF FF     
   4190 FFFC3516 FF FF FF FF FF FF FF FF     
   4191 FFFC351E FF FF FF FF FF FF FF FF     
   4192 FFFC3526 FF FF FF FF FF FF FF FF     
   4193 FFFC352E FF FF FF FF FF FF FF FF     
   4194 FFFC3536 FF FF FF FF FF FF FF FF     
   4195 FFFC353E FF FF FF FF FF FF FF FF     
   4196 FFFC3546 FF FF FF FF FF FF FF FF     
   4197 FFFC354E FF FF FF FF FF FF FF FF     
   4198 FFFC3556 FF FF FF FF FF FF FF FF     
   4199 FFFC355E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 10
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4200 FFFC3566 FF FF FF FF FF FF FF FF     
   4201 FFFC356E FF FF FF FF FF FF FF FF     
   4202 FFFC3576 FF FF FF FF FF FF FF FF     
   4203 FFFC357E FF FF FF FF FF FF FF FF     
   4204 FFFC3586 FF FF FF FF FF FF FF FF     
   4205 FFFC358E FF FF FF FF FF FF FF FF     
   4206 FFFC3596 FF FF FF FF FF FF FF FF     
   4207 FFFC359E FF FF FF FF FF FF FF FF     
   4208 FFFC35A6 FF FF FF FF FF FF FF FF     
   4209 FFFC35AE FF FF FF FF FF FF FF FF     
   4210 FFFC35B6 FF FF FF FF FF FF FF FF     
   4211 FFFC35BE FF FF FF FF FF FF FF FF     
   4212 FFFC35C6 FF FF FF FF FF FF FF FF     
   4213 FFFC35CE FF FF FF FF FF FF FF FF     
   4214 FFFC35D6 FF FF FF FF FF FF FF FF     
   4215 FFFC35DE FF FF FF FF FF FF FF FF     
   4216 FFFC35E6 FF FF FF FF FF FF FF FF     
   4217 FFFC35EE FF FF FF FF FF FF FF FF     
   4218 FFFC35F6 FF FF FF FF FF FF FF FF     
   4219 FFFC35FE FF FF FF FF FF FF FF FF     
   4220 FFFC3606 FF FF FF FF FF FF FF FF     
   4221 FFFC360E FF FF FF FF FF FF FF FF     
   4222 FFFC3616 FF FF FF FF FF FF FF FF     
   4223 FFFC361E FF FF FF FF FF FF FF FF     
   4224 FFFC3626 FF FF FF FF FF FF FF FF     
   4225 FFFC362E FF FF FF FF FF FF FF FF     
   4226 FFFC3636 FF FF FF FF FF FF FF FF     
   4227 FFFC363E FF FF FF FF FF FF FF FF     
   4228 FFFC3646 FF FF FF FF FF FF FF FF     
   4229 FFFC364E FF FF FF FF FF FF FF FF     
   4230 FFFC3656 FF FF FF FF FF FF FF FF     
   4231 FFFC365E FF FF FF FF FF FF FF FF     
   4232 FFFC3666 FF FF FF FF FF FF FF FF     
   4233 FFFC366E FF FF FF FF FF FF FF FF     
   4234 FFFC3676 FF FF FF FF FF FF FF FF     
   4235 FFFC367E FF FF FF FF FF FF FF FF     
   4236 FFFC3686 FF FF FF FF FF FF FF FF     
   4237 FFFC368E FF FF FF FF FF FF FF FF     
   4238 FFFC3696 FF FF FF FF FF FF FF FF     
   4239 FFFC369E FF FF FF FF FF FF FF FF     
   4240 FFFC36A6 FF FF FF FF FF FF FF FF     
   4241 FFFC36AE FF FF FF FF FF FF FF FF     
   4242 FFFC36B6 FF FF FF FF FF FF FF FF     
   4243 FFFC36BE FF FF FF FF FF FF FF FF     
   4244 FFFC36C6 FF FF FF FF FF FF FF FF     
   4245 FFFC36CE FF FF FF FF FF FF FF FF     
   4246 FFFC36D6 FF FF FF FF FF FF FF FF     
   4247 FFFC36DE FF FF FF FF FF FF FF FF     
   4248 FFFC36E6 FF FF FF FF FF FF FF FF     
   4249 FFFC36EE FF FF FF FF FF FF FF FF     
   4250 FFFC36F6 FF FF FF FF FF FF FF FF     
   4251 FFFC36FE FF FF FF FF FF FF FF FF     
   4252 FFFC3706 FF FF FF FF FF FF FF FF     
   4253 FFFC370E FF FF FF FF FF FF FF FF     
   4254 FFFC3716 FF FF FF FF FF FF FF FF     
   4255 FFFC371E FF FF FF FF FF FF FF FF     
   4256 FFFC3726 FF FF FF FF FF FF FF FF     
   4257 FFFC372E FF FF FF FF FF FF FF FF     
   4258 FFFC3736 FF FF FF FF FF FF FF FF     
   4259 FFFC373E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 11
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4260 FFFC3746 FF FF FF FF FF FF FF FF     
   4261 FFFC374E FF FF FF FF FF FF FF FF     
   4262 FFFC3756 FF FF FF FF FF FF FF FF     
   4263 FFFC375E FF FF FF FF FF FF FF FF     
   4264 FFFC3766 FF FF FF FF FF FF FF FF     
   4265 FFFC376E FF FF FF FF FF FF FF FF     
   4266 FFFC3776 FF FF FF FF FF FF FF FF     
   4267 FFFC377E FF FF FF FF FF FF FF FF     
   4268 FFFC3786 FF FF FF FF FF FF FF FF     
   4269 FFFC378E FF FF FF FF FF FF FF FF     
   4270 FFFC3796 FF FF FF FF FF FF FF FF     
   4271 FFFC379E FF FF FF FF FF FF FF FF     
   4272 FFFC37A6 FF FF FF FF FF FF FF FF     
   4273 FFFC37AE FF FF FF FF FF FF FF FF     
   4274 FFFC37B6 FF FF FF FF FF FF FF FF     
   4275 FFFC37BE FF FF FF FF FF FF FF FF     
   4276 FFFC37C6 FF FF FF FF FF FF FF FF     
   4277 FFFC37CE FF FF FF FF FF FF FF FF     
   4278 FFFC37D6 FF FF FF FF FF FF FF FF     
   4279 FFFC37DE FF FF FF FF FF FF FF FF     
   4280 FFFC37E6 FF FF FF FF FF FF FF FF     
   4281 FFFC37EE FF FF FF FF FF FF FF FF     
   4282 FFFC37F6 FF FF FF FF FF FF FF FF     
   4283 FFFC37FE FF FF FF FF FF FF FF FF     
   4284 FFFC3806 FF FF FF FF FF FF FF FF     
   4285 FFFC380E FF FF FF FF FF FF FF FF     
   4286 FFFC3816 FF FF FF FF FF FF FF FF     
   4287 FFFC381E FF FF FF FF FF FF FF FF     
   4288 FFFC3826 FF FF FF FF FF FF FF FF     
   4289 FFFC382E FF FF FF FF FF FF FF FF     
   4290 FFFC3836 FF FF FF FF FF FF FF FF     
   4291 FFFC383E FF FF FF FF FF FF FF FF     
   4292 FFFC3846 FF FF FF FF FF FF FF FF     
   4293 FFFC384E FF FF FF FF FF FF FF FF     
   4294 FFFC3856 FF FF FF FF FF FF FF FF     
   4295 FFFC385E FF FF FF FF FF FF FF FF     
   4296 FFFC3866 FF FF FF FF FF FF FF FF     
   4297 FFFC386E FF FF FF FF FF FF FF FF     
   4298 FFFC3876 FF FF FF FF FF FF FF FF     
   4299 FFFC387E FF FF FF FF FF FF FF FF     
   4300 FFFC3886 FF FF FF FF FF FF FF FF     
   4301 FFFC388E FF FF FF FF FF FF FF FF     
   4302 FFFC3896 FF FF FF FF FF FF FF FF     
   4303 FFFC389E FF FF FF FF FF FF FF FF     
   4304 FFFC38A6 FF FF FF FF FF FF FF FF     
   4305 FFFC38AE FF FF FF FF FF FF FF FF     
   4306 FFFC38B6 FF FF FF FF FF FF FF FF     
   4307 FFFC38BE FF FF FF FF FF FF FF FF     
   4308 FFFC38C6 FF FF FF FF FF FF FF FF     
   4309 FFFC38CE FF FF FF FF FF FF FF FF     
   4310 FFFC38D6 FF FF FF FF FF FF FF FF     
   4311 FFFC38DE FF FF FF FF FF FF FF FF     
   4312 FFFC38E6 FF FF FF FF FF FF FF FF     
   4313 FFFC38EE FF FF FF FF FF FF FF FF     
   4314 FFFC38F6 FF FF FF FF FF FF FF FF     
   4315 FFFC38FE FF FF FF FF FF FF FF FF     
   4316 FFFC3906 FF FF FF FF FF FF FF FF     
   4317 FFFC390E FF FF FF FF FF FF FF FF     
   4318 FFFC3916 FF FF FF FF FF FF FF FF     
   4319 FFFC391E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 12
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4320 FFFC3926 FF FF FF FF FF FF FF FF     
   4321 FFFC392E FF FF FF FF FF FF FF FF     
   4322 FFFC3936 FF FF FF FF FF FF FF FF     
   4323 FFFC393E FF FF FF FF FF FF FF FF     
   4324 FFFC3946 FF FF FF FF FF FF FF FF     
   4325 FFFC394E FF FF FF FF FF FF FF FF     
   4326 FFFC3956 FF FF FF FF FF FF FF FF     
   4327 FFFC395E FF FF FF FF FF FF FF FF     
   4328 FFFC3966 FF FF FF FF FF FF FF FF     
   4329 FFFC396E FF FF FF FF FF FF FF FF     
   4330 FFFC3976 FF FF FF FF FF FF FF FF     
   4331 FFFC397E FF FF FF FF FF FF FF FF     
   4332 FFFC3986 FF FF FF FF FF FF FF FF     
   4333 FFFC398E FF FF FF FF FF FF FF FF     
   4334 FFFC3996 FF FF FF FF FF FF FF FF     
   4335 FFFC399E FF FF FF FF FF FF FF FF     
   4336 FFFC39A6 FF FF FF FF FF FF FF FF     
   4337 FFFC39AE FF FF FF FF FF FF FF FF     
   4338 FFFC39B6 FF FF FF FF FF FF FF FF     
   4339 FFFC39BE FF FF FF FF FF FF FF FF     
   4340 FFFC39C6 FF FF FF FF FF FF FF FF     
   4341 FFFC39CE FF FF FF FF FF FF FF FF     
   4342 FFFC39D6 FF FF FF FF FF FF FF FF     
   4343 FFFC39DE FF FF FF FF FF FF FF FF     
   4344 FFFC39E6 FF FF FF FF FF FF FF FF     
   4345 FFFC39EE FF FF FF FF FF FF FF FF     
   4346 FFFC39F6 FF FF FF FF FF FF FF FF     
   4347 FFFC39FE FF FF FF FF FF FF FF FF     
   4348 FFFC3A06 FF FF FF FF FF FF FF FF     
   4349 FFFC3A0E FF FF FF FF FF FF FF FF     
   4350 FFFC3A16 FF FF FF FF FF FF FF FF     
   4351 FFFC3A1E FF FF FF FF FF FF FF FF     
   4352 FFFC3A26 FF FF FF FF FF FF FF FF     
   4353 FFFC3A2E FF FF FF FF FF FF FF FF     
   4354 FFFC3A36 FF FF FF FF FF FF FF FF     
   4355 FFFC3A3E FF FF FF FF FF FF FF FF     
   4356 FFFC3A46 FF FF FF FF FF FF FF FF     
   4357 FFFC3A4E FF FF FF FF FF FF FF FF     
   4358 FFFC3A56 FF FF FF FF FF FF FF FF     
   4359 FFFC3A5E FF FF FF FF FF FF FF FF     
   4360 FFFC3A66 FF FF FF FF FF FF FF FF     
   4361 FFFC3A6E FF FF FF FF FF FF FF FF     
   4362 FFFC3A76 FF FF FF FF FF FF FF FF     
   4363 FFFC3A7E FF FF FF FF FF FF FF FF     
   4364 FFFC3A86 FF FF FF FF FF FF FF FF     
   4365 FFFC3A8E FF FF FF FF FF FF FF FF     
   4366 FFFC3A96 FF FF FF FF FF FF FF FF     
   4367 FFFC3A9E FF FF FF FF FF FF FF FF     
   4368 FFFC3AA6 FF FF FF FF FF FF FF FF     
   4369 FFFC3AAE FF FF FF FF FF FF FF FF     
   4370 FFFC3AB6 FF FF FF FF FF FF FF FF     
   4371 FFFC3ABE FF FF FF FF FF FF FF FF     
   4372 FFFC3AC6 FF FF FF FF FF FF FF FF     
   4373 FFFC3ACE FF FF FF FF FF FF FF FF     
   4374 FFFC3AD6 FF FF FF FF FF FF FF FF     
   4375 FFFC3ADE FF FF FF FF FF FF FF FF     
   4376 FFFC3AE6 FF FF FF FF FF FF FF FF     
   4377 FFFC3AEE FF FF FF FF FF FF FF FF     
   4378 FFFC3AF6 FF FF FF FF FF FF FF FF     
   4379 FFFC3AFE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 13
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4380 FFFC3B06 FF FF FF FF FF FF FF FF     
   4381 FFFC3B0E FF FF FF FF FF FF FF FF     
   4382 FFFC3B16 FF FF FF FF FF FF FF FF     
   4383 FFFC3B1E FF FF FF FF FF FF FF FF     
   4384 FFFC3B26 FF FF FF FF FF FF FF FF     
   4385 FFFC3B2E FF FF FF FF FF FF FF FF     
   4386 FFFC3B36 FF FF FF FF FF FF FF FF     
   4387 FFFC3B3E FF FF FF FF FF FF FF FF     
   4388 FFFC3B46 FF FF FF FF FF FF FF FF     
   4389 FFFC3B4E FF FF FF FF FF FF FF FF     
   4390 FFFC3B56 FF FF FF FF FF FF FF FF     
   4391 FFFC3B5E FF FF FF FF FF FF FF FF     
   4392 FFFC3B66 FF FF FF FF FF FF FF FF     
   4393 FFFC3B6E FF FF FF FF FF FF FF FF     
   4394 FFFC3B76 FF FF FF FF FF FF FF FF     
   4395 FFFC3B7E FF FF FF FF FF FF FF FF     
   4396 FFFC3B86 FF FF FF FF FF FF FF FF     
   4397 FFFC3B8E FF FF FF FF FF FF FF FF     
   4398 FFFC3B96 FF FF FF FF FF FF FF FF     
   4399 FFFC3B9E FF FF FF FF FF FF FF FF     
   4400 FFFC3BA6 FF FF FF FF FF FF FF FF     
   4401 FFFC3BAE FF FF FF FF FF FF FF FF     
   4402 FFFC3BB6 FF FF FF FF FF FF FF FF     
   4403 FFFC3BBE FF FF FF FF FF FF FF FF     
   4404 FFFC3BC6 FF FF FF FF FF FF FF FF     
   4405 FFFC3BCE FF FF FF FF FF FF FF FF     
   4406 FFFC3BD6 FF FF FF FF FF FF FF FF     
   4407 FFFC3BDE FF FF FF FF FF FF FF FF     
   4408 FFFC3BE6 FF FF FF FF FF FF FF FF     
   4409 FFFC3BEE FF FF FF FF FF FF FF FF     
   4410 FFFC3BF6 FF FF FF FF FF FF FF FF     
   4411 FFFC3BFE FF FF FF FF FF FF FF FF     
   4412 FFFC3C06 FF FF FF FF FF FF FF FF     
   4413 FFFC3C0E FF FF FF FF FF FF FF FF     
   4414 FFFC3C16 FF FF FF FF FF FF FF FF     
   4415 FFFC3C1E FF FF FF FF FF FF FF FF     
   4416 FFFC3C26 FF FF FF FF FF FF FF FF     
   4417 FFFC3C2E FF FF FF FF FF FF FF FF     
   4418 FFFC3C36 FF FF FF FF FF FF FF FF     
   4419 FFFC3C3E FF FF FF FF FF FF FF FF     
   4420 FFFC3C46 FF FF FF FF FF FF FF FF     
   4421 FFFC3C4E FF FF FF FF FF FF FF FF     
   4422 FFFC3C56 FF FF FF FF FF FF FF FF     
   4423 FFFC3C5E FF FF FF FF FF FF FF FF     
   4424 FFFC3C66 FF FF FF FF FF FF FF FF     
   4425 FFFC3C6E FF FF FF FF FF FF FF FF     
   4426 FFFC3C76 FF FF FF FF FF FF FF FF     
   4427 FFFC3C7E FF FF FF FF FF FF FF FF     
   4428 FFFC3C86 FF FF FF FF FF FF FF FF     
   4429 FFFC3C8E FF FF FF FF FF FF FF FF     
   4430 FFFC3C96 FF FF FF FF FF FF FF FF     
   4431 FFFC3C9E FF FF FF FF FF FF FF FF     
   4432 FFFC3CA6 FF FF FF FF FF FF FF FF     
   4433 FFFC3CAE FF FF FF FF FF FF FF FF     
   4434 FFFC3CB6 FF FF FF FF FF FF FF FF     
   4435 FFFC3CBE FF FF FF FF FF FF FF FF     
   4436 FFFC3CC6 FF FF FF FF FF FF FF FF     
   4437 FFFC3CCE FF FF FF FF FF FF FF FF     
   4438 FFFC3CD6 FF FF FF FF FF FF FF FF     
   4439 FFFC3CDE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 14
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4440 FFFC3CE6 FF FF FF FF FF FF FF FF     
   4441 FFFC3CEE FF FF FF FF FF FF FF FF     
   4442 FFFC3CF6 FF FF FF FF FF FF FF FF     
   4443 FFFC3CFE FF FF FF FF FF FF FF FF     
   4444 FFFC3D06 FF FF FF FF FF FF FF FF     
   4445 FFFC3D0E FF FF FF FF FF FF FF FF     
   4446 FFFC3D16 FF FF FF FF FF FF FF FF     
   4447 FFFC3D1E FF FF FF FF FF FF FF FF     
   4448 FFFC3D26 FF FF FF FF FF FF FF FF     
   4449 FFFC3D2E FF FF FF FF FF FF FF FF     
   4450 FFFC3D36 FF FF FF FF FF FF FF FF     
   4451 FFFC3D3E FF FF FF FF FF FF FF FF     
   4452 FFFC3D46 FF FF FF FF FF FF FF FF     
   4453 FFFC3D4E FF FF FF FF FF FF FF FF     
   4454 FFFC3D56 FF FF FF FF FF FF FF FF     
   4455 FFFC3D5E FF FF FF FF FF FF FF FF     
   4456 FFFC3D66 FF FF FF FF FF FF FF FF     
   4457 FFFC3D6E FF FF FF FF FF FF FF FF     
   4458 FFFC3D76 FF FF FF FF FF FF FF FF     
   4459 FFFC3D7E FF FF FF FF FF FF FF FF     
   4460 FFFC3D86 FF FF FF FF FF FF FF FF     
   4461 FFFC3D8E FF FF FF FF FF FF FF FF     
   4462 FFFC3D96 FF FF FF FF FF FF FF FF     
   4463 FFFC3D9E FF FF FF FF FF FF FF FF     
   4464 FFFC3DA6 FF FF FF FF FF FF FF FF     
   4465 FFFC3DAE FF FF FF FF FF FF FF FF     
   4466 FFFC3DB6 FF FF FF FF FF FF FF FF     
   4467 FFFC3DBE FF FF FF FF FF FF FF FF     
   4468 FFFC3DC6 FF FF FF FF FF FF FF FF     
   4469 FFFC3DCE FF FF FF FF FF FF FF FF     
   4470 FFFC3DD6 FF FF FF FF FF FF FF FF     
   4471 FFFC3DDE FF FF FF FF FF FF FF FF     
   4472 FFFC3DE6 FF FF FF FF FF FF FF FF     
   4473 FFFC3DEE FF FF FF FF FF FF FF FF     
   4474 FFFC3DF6 FF FF FF FF FF FF FF FF     
   4475 FFFC3DFE FF FF FF FF FF FF FF FF     
   4476 FFFC3E06 FF FF FF FF FF FF FF FF     
   4477 FFFC3E0E FF FF FF FF FF FF FF FF     
   4478 FFFC3E16 FF FF FF FF FF FF FF FF     
   4479 FFFC3E1E FF FF FF FF FF FF FF FF     
   4480 FFFC3E26 FF FF FF FF FF FF FF FF     
   4481 FFFC3E2E FF FF FF FF FF FF FF FF     
   4482 FFFC3E36 FF FF FF FF FF FF FF FF     
   4483 FFFC3E3E FF FF FF FF FF FF FF FF     
   4484 FFFC3E46 FF FF FF FF FF FF FF FF     
   4485 FFFC3E4E FF FF FF FF FF FF FF FF     
   4486 FFFC3E56 FF FF FF FF FF FF FF FF     
   4487 FFFC3E5E FF FF FF FF FF FF FF FF     
   4488 FFFC3E66 FF FF FF FF FF FF FF FF     
   4489 FFFC3E6E FF FF FF FF FF FF FF FF     
   4490 FFFC3E76 FF FF FF FF FF FF FF FF     
   4491 FFFC3E7E FF FF FF FF FF FF FF FF     
   4492 FFFC3E86 FF FF FF FF FF FF FF FF     
   4493 FFFC3E8E FF FF FF FF FF FF FF FF     
   4494 FFFC3E96 FF FF FF FF FF FF FF FF     
   4495 FFFC3E9E FF FF FF FF FF FF FF FF     
   4496 FFFC3EA6 FF FF FF FF FF FF FF FF     
   4497 FFFC3EAE FF FF FF FF FF FF FF FF     
   4498 FFFC3EB6 FF FF FF FF FF FF FF FF     
   4499 FFFC3EBE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 15
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4500 FFFC3EC6 FF FF FF FF FF FF FF FF     
   4501 FFFC3ECE FF FF FF FF FF FF FF FF     
   4502 FFFC3ED6 FF FF FF FF FF FF FF FF     
   4503 FFFC3EDE FF FF FF FF FF FF FF FF     
   4504 FFFC3EE6 FF FF FF FF FF FF FF FF     
   4505 FFFC3EEE FF FF FF FF FF FF FF FF     
   4506 FFFC3EF6 FF FF FF FF FF FF FF FF     
   4507 FFFC3EFE FF FF FF FF FF FF FF FF     
   4508 FFFC3F06 FF FF FF FF FF FF FF FF     
   4509 FFFC3F0E FF FF FF FF FF FF FF FF     
   4510 FFFC3F16 FF FF FF FF FF FF FF FF     
   4511 FFFC3F1E FF FF FF FF FF FF FF FF     
   4512 FFFC3F26 FF FF FF FF FF FF FF FF     
   4513 FFFC3F2E FF FF FF FF FF FF FF FF     
   4514 FFFC3F36 FF FF FF FF FF FF FF FF     
   4515 FFFC3F3E FF FF FF FF FF FF FF FF     
   4516 FFFC3F46 FF FF FF FF FF FF FF FF     
   4517 FFFC3F4E FF FF FF FF FF FF FF FF     
   4518 FFFC3F56 FF FF FF FF FF FF FF FF     
   4519 FFFC3F5E FF FF FF FF FF FF FF FF     
   4520 FFFC3F66 FF FF FF FF FF FF FF FF     
   4521 FFFC3F6E FF FF FF FF FF FF FF FF     
   4522 FFFC3F76 FF FF FF FF FF FF FF FF     
   4523 FFFC3F7E FF FF FF FF FF FF FF FF     
   4524 FFFC3F86 FF FF FF FF FF FF FF FF     
   4525 FFFC3F8E FF FF FF FF FF FF FF FF     
   4526 FFFC3F96 FF FF FF FF FF FF FF FF     
   4527 FFFC3F9E FF FF FF FF FF FF FF FF     
   4528 FFFC3FA6 FF FF FF FF FF FF FF FF     
   4529 FFFC3FAE FF FF FF FF FF FF FF FF     
   4530 FFFC3FB6 FF FF FF FF FF FF FF FF     
   4531 FFFC3FBE FF FF FF FF FF FF FF FF     
   4532 FFFC3FC6 FF FF FF FF FF FF FF FF     
   4533 FFFC3FCE FF FF FF FF FF FF FF FF     
   4534 FFFC3FD6 FF FF FF FF FF FF FF FF     
   4535 FFFC3FDE FF FF FF FF FF FF FF FF     
   4536 FFFC3FE6 FF FF FF FF FF FF FF FF     
   4537 FFFC3FEE FF FF FF FF FF FF FF FF     
   4538 FFFC3FF6 FF FF FF FF FF FF FF FF     
   4539 FFFC3FFE FF FF FF FF FF FF FF FF     
   4540 FFFC4006 FF FF FF FF FF FF FF FF     
   4541 FFFC400E FF FF FF FF FF FF FF FF     
   4542 FFFC4016 FF FF FF FF FF FF FF FF     
   4543 FFFC401E FF FF FF FF FF FF FF FF     
   4544 FFFC4026 FF FF FF FF FF FF FF FF     
   4545 FFFC402E FF FF FF FF FF FF FF FF     
   4546 FFFC4036 FF FF FF FF FF FF FF FF     
   4547 FFFC403E FF FF FF FF FF FF FF FF     
   4548 FFFC4046 FF FF FF FF FF FF FF FF     
   4549 FFFC404E FF FF FF FF FF FF FF FF     
   4550 FFFC4056 FF FF FF FF FF FF FF FF     
   4551 FFFC405E FF FF FF FF FF FF FF FF     
   4552 FFFC4066 FF FF FF FF FF FF FF FF     
   4553 FFFC406E FF FF FF FF FF FF FF FF     
   4554 FFFC4076 FF FF FF FF FF FF FF FF     
   4555 FFFC407E FF FF FF FF FF FF FF FF     
   4556 FFFC4086 FF FF FF FF FF FF FF FF     
   4557 FFFC408E FF FF FF FF FF FF FF FF     
   4558 FFFC4096 FF FF FF FF FF FF FF FF     
   4559 FFFC409E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 16
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4560 FFFC40A6 FF FF FF FF FF FF FF FF     
   4561 FFFC40AE FF FF FF FF FF FF FF FF     
   4562 FFFC40B6 FF FF FF FF FF FF FF FF     
   4563 FFFC40BE FF FF FF FF FF FF FF FF     
   4564 FFFC40C6 FF FF FF FF FF FF FF FF     
   4565 FFFC40CE FF FF FF FF FF FF FF FF     
   4566 FFFC40D6 FF FF FF FF FF FF FF FF     
   4567 FFFC40DE FF FF FF FF FF FF FF FF     
   4568 FFFC40E6 FF FF FF FF FF FF FF FF     
   4569 FFFC40EE FF FF FF FF FF FF FF FF     
   4570 FFFC40F6 FF FF FF FF FF FF FF FF     
   4571 FFFC40FE FF FF FF FF FF FF FF FF     
   4572 FFFC4106 FF FF FF FF FF FF FF FF     
   4573 FFFC410E FF FF FF FF FF FF FF FF     
   4574 FFFC4116 FF FF FF FF FF FF FF FF     
   4575 FFFC411E FF FF FF FF FF FF FF FF     
   4576 FFFC4126 FF FF FF FF FF FF FF FF     
   4577 FFFC412E FF FF FF FF FF FF FF FF     
   4578 FFFC4136 FF FF FF FF FF FF FF FF     
   4579 FFFC413E FF FF FF FF FF FF FF FF     
   4580 FFFC4146 FF FF FF FF FF FF FF FF     
   4581 FFFC414E FF FF FF FF FF FF FF FF     
   4582 FFFC4156 FF FF FF FF FF FF FF FF     
   4583 FFFC415E FF FF FF FF FF FF FF FF     
   4584 FFFC4166 FF FF FF FF FF FF FF FF     
   4585 FFFC416E FF FF FF FF FF FF FF FF     
   4586 FFFC4176 FF FF FF FF FF FF FF FF     
   4587 FFFC417E FF FF FF FF FF FF FF FF     
   4588 FFFC4186 FF FF FF FF FF FF FF FF     
   4589 FFFC418E FF FF FF FF FF FF FF FF     
   4590 FFFC4196 FF FF FF FF FF FF FF FF     
   4591 FFFC419E FF FF FF FF FF FF FF FF     
   4592 FFFC41A6 FF FF FF FF FF FF FF FF     
   4593 FFFC41AE FF FF FF FF FF FF FF FF     
   4594 FFFC41B6 FF FF FF FF FF FF FF FF     
   4595 FFFC41BE FF FF FF FF FF FF FF FF     
   4596 FFFC41C6 FF FF FF FF FF FF FF FF     
   4597 FFFC41CE FF FF FF FF FF FF FF FF     
   4598 FFFC41D6 FF FF FF FF FF FF FF FF     
   4599 FFFC41DE FF FF FF FF FF FF FF FF     
   4600 FFFC41E6 FF FF FF FF FF FF FF FF     
   4601 FFFC41EE FF FF FF FF FF FF FF FF     
   4602 FFFC41F6 FF FF FF FF FF FF FF FF     
   4603 FFFC41FE FF FF FF FF FF FF FF FF     
   4604 FFFC4206 FF FF FF FF FF FF FF FF     
   4605 FFFC420E FF FF FF FF FF FF FF FF     
   4606 FFFC4216 FF FF FF FF FF FF FF FF     
   4607 FFFC421E FF FF FF FF FF FF FF FF     
   4608 FFFC4226 FF FF FF FF FF FF FF FF     
   4609 FFFC422E FF FF FF FF FF FF FF FF     
   4610 FFFC4236 FF FF FF FF FF FF FF FF     
   4611 FFFC423E FF FF FF FF FF FF FF FF     
   4612 FFFC4246 FF FF FF FF FF FF FF FF     
   4613 FFFC424E FF FF FF FF FF FF FF FF     
   4614 FFFC4256 FF FF FF FF FF FF FF FF     
   4615 FFFC425E FF FF FF FF FF FF FF FF     
   4616 FFFC4266 FF FF FF FF FF FF FF FF     
   4617 FFFC426E FF FF FF FF FF FF FF FF     
   4618 FFFC4276 FF FF FF FF FF FF FF FF     
   4619 FFFC427E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 17
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4620 FFFC4286 FF FF FF FF FF FF FF FF     
   4621 FFFC428E FF FF FF FF FF FF FF FF     
   4622 FFFC4296 FF FF FF FF FF FF FF FF     
   4623 FFFC429E FF FF FF FF FF FF FF FF     
   4624 FFFC42A6 FF FF FF FF FF FF FF FF     
   4625 FFFC42AE FF FF FF FF FF FF FF FF     
   4626 FFFC42B6 FF FF FF FF FF FF FF FF     
   4627 FFFC42BE FF FF FF FF FF FF FF FF     
   4628 FFFC42C6 FF FF FF FF FF FF FF FF     
   4629 FFFC42CE FF FF FF FF FF FF FF FF     
   4630 FFFC42D6 FF FF FF FF FF FF FF FF     
   4631 FFFC42DE FF FF FF FF FF FF FF FF     
   4632 FFFC42E6 FF FF FF FF FF FF FF FF     
   4633 FFFC42EE FF FF FF FF FF FF FF FF     
   4634 FFFC42F6 FF FF FF FF FF FF FF FF     
   4635 FFFC42FE FF FF FF FF FF FF FF FF     
   4636 FFFC4306 FF FF FF FF FF FF FF FF     
   4637 FFFC430E FF FF FF FF FF FF FF FF     
   4638 FFFC4316 FF FF FF FF FF FF FF FF     
   4639 FFFC431E FF FF FF FF FF FF FF FF     
   4640 FFFC4326 FF FF FF FF FF FF FF FF     
   4641 FFFC432E FF FF FF FF FF FF FF FF     
   4642 FFFC4336 FF FF FF FF FF FF FF FF     
   4643 FFFC433E FF FF FF FF FF FF FF FF     
   4644 FFFC4346 FF FF FF FF FF FF FF FF     
   4645 FFFC434E FF FF FF FF FF FF FF FF     
   4646 FFFC4356 FF FF FF FF FF FF FF FF     
   4647 FFFC435E FF FF FF FF FF FF FF FF     
   4648 FFFC4366 FF FF FF FF FF FF FF FF     
   4649 FFFC436E FF FF FF FF FF FF FF FF     
   4650 FFFC4376 FF FF FF FF FF FF FF FF     
   4651 FFFC437E FF FF FF FF FF FF FF FF     
   4652 FFFC4386 FF FF FF FF FF FF FF FF     
   4653 FFFC438E FF FF FF FF FF FF FF FF     
   4654 FFFC4396 FF FF FF FF FF FF FF FF     
   4655 FFFC439E FF FF FF FF FF FF FF FF     
   4656 FFFC43A6 FF FF FF FF FF FF FF FF     
   4657 FFFC43AE FF FF FF FF FF FF FF FF     
   4658 FFFC43B6 FF FF FF FF FF FF FF FF     
   4659 FFFC43BE FF FF FF FF FF FF FF FF     
   4660 FFFC43C6 FF FF FF FF FF FF FF FF     
   4661 FFFC43CE FF FF FF FF FF FF FF FF     
   4662 FFFC43D6 FF FF FF FF FF FF FF FF     
   4663 FFFC43DE FF FF FF FF FF FF FF FF     
   4664 FFFC43E6 FF FF FF FF FF FF FF FF     
   4665 FFFC43EE FF FF FF FF FF FF FF FF     
   4666 FFFC43F6 FF FF FF FF FF FF FF FF     
   4667 FFFC43FE FF FF FF FF FF FF FF FF     
   4668 FFFC4406 FF FF FF FF FF FF FF FF     
   4669 FFFC440E FF FF FF FF FF FF FF FF     
   4670 FFFC4416 FF FF FF FF FF FF FF FF     
   4671 FFFC441E FF FF FF FF FF FF FF FF     
   4672 FFFC4426 FF FF FF FF FF FF FF FF     
   4673 FFFC442E FF FF FF FF FF FF FF FF     
   4674 FFFC4436 FF FF FF FF FF FF FF FF     
   4675 FFFC443E FF FF FF FF FF FF FF FF     
   4676 FFFC4446 FF FF FF FF FF FF FF FF     
   4677 FFFC444E FF FF FF FF FF FF FF FF     
   4678 FFFC4456 FF FF FF FF FF FF FF FF     
   4679 FFFC445E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 18
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4680 FFFC4466 FF FF FF FF FF FF FF FF     
   4681 FFFC446E FF FF FF FF FF FF FF FF     
   4682 FFFC4476 FF FF FF FF FF FF FF FF     
   4683 FFFC447E FF FF FF FF FF FF FF FF     
   4684 FFFC4486 FF FF FF FF FF FF FF FF     
   4685 FFFC448E FF FF FF FF FF FF FF FF     
   4686 FFFC4496 FF FF FF FF FF FF FF FF     
   4687 FFFC449E FF FF FF FF FF FF FF FF     
   4688 FFFC44A6 FF FF FF FF FF FF FF FF     
   4689 FFFC44AE FF FF FF FF FF FF FF FF     
   4690 FFFC44B6 FF FF FF FF FF FF FF FF     
   4691 FFFC44BE FF FF FF FF FF FF FF FF     
   4692 FFFC44C6 FF FF FF FF FF FF FF FF     
   4693 FFFC44CE FF FF FF FF FF FF FF FF     
   4694 FFFC44D6 FF FF FF FF FF FF FF FF     
   4695 FFFC44DE FF FF FF FF FF FF FF FF     
   4696 FFFC44E6 FF FF FF FF FF FF FF FF     
   4697 FFFC44EE FF FF FF FF FF FF FF FF     
   4698 FFFC44F6 FF FF FF FF FF FF FF FF     
   4699 FFFC44FE FF FF FF FF FF FF FF FF     
   4700 FFFC4506 FF FF FF FF FF FF FF FF     
   4701 FFFC450E FF FF FF FF FF FF FF FF     
   4702 FFFC4516 FF FF FF FF FF FF FF FF     
   4703 FFFC451E FF FF FF FF FF FF FF FF     
   4704 FFFC4526 FF FF FF FF FF FF FF FF     
   4705 FFFC452E FF FF FF FF FF FF FF FF     
   4706 FFFC4536 FF FF FF FF FF FF FF FF     
   4707 FFFC453E FF FF FF FF FF FF FF FF     
   4708 FFFC4546 FF FF FF FF FF FF FF FF     
   4709 FFFC454E FF FF FF FF FF FF FF FF     
   4710 FFFC4556 FF FF FF FF FF FF FF FF     
   4711 FFFC455E FF FF FF FF FF FF FF FF     
   4712 FFFC4566 FF FF FF FF FF FF FF FF     
   4713 FFFC456E FF FF FF FF FF FF FF FF     
   4714 FFFC4576 FF FF FF FF FF FF FF FF     
   4715 FFFC457E FF FF FF FF FF FF FF FF     
   4716 FFFC4586 FF FF FF FF FF FF FF FF     
   4717 FFFC458E FF FF FF FF FF FF FF FF     
   4718 FFFC4596 FF FF FF FF FF FF FF FF     
   4719 FFFC459E FF FF FF FF FF FF FF FF     
   4720 FFFC45A6 FF FF FF FF FF FF FF FF     
   4721 FFFC45AE FF FF FF FF FF FF FF FF     
   4722 FFFC45B6 FF FF FF FF FF FF FF FF     
   4723 FFFC45BE FF FF FF FF FF FF FF FF     
   4724 FFFC45C6 FF FF FF FF FF FF FF FF     
   4725 FFFC45CE FF FF FF FF FF FF FF FF     
   4726 FFFC45D6 FF FF FF FF FF FF FF FF     
   4727 FFFC45DE FF FF FF FF FF FF FF FF     
   4728 FFFC45E6 FF FF FF FF FF FF FF FF     
   4729 FFFC45EE FF FF FF FF FF FF FF FF     
   4730 FFFC45F6 FF FF FF FF FF FF FF FF     
   4731 FFFC45FE FF FF FF FF FF FF FF FF     
   4732 FFFC4606 FF FF FF FF FF FF FF FF     
   4733 FFFC460E FF FF FF FF FF FF FF FF     
   4734 FFFC4616 FF FF FF FF FF FF FF FF     
   4735 FFFC461E FF FF FF FF FF FF FF FF     
   4736 FFFC4626 FF FF FF FF FF FF FF FF     
   4737 FFFC462E FF FF FF FF FF FF FF FF     
   4738 FFFC4636 FF FF FF FF FF FF FF FF     
   4739 FFFC463E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 19
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4740 FFFC4646 FF FF FF FF FF FF FF FF     
   4741 FFFC464E FF FF FF FF FF FF FF FF     
   4742 FFFC4656 FF FF FF FF FF FF FF FF     
   4743 FFFC465E FF FF FF FF FF FF FF FF     
   4744 FFFC4666 FF FF FF FF FF FF FF FF     
   4745 FFFC466E FF FF FF FF FF FF FF FF     
   4746 FFFC4676 FF FF FF FF FF FF FF FF     
   4747 FFFC467E FF FF FF FF FF FF FF FF     
   4748 FFFC4686 FF FF FF FF FF FF FF FF     
   4749 FFFC468E FF FF FF FF FF FF FF FF     
   4750 FFFC4696 FF FF FF FF FF FF FF FF     
   4751 FFFC469E FF FF FF FF FF FF FF FF     
   4752 FFFC46A6 FF FF FF FF FF FF FF FF     
   4753 FFFC46AE FF FF FF FF FF FF FF FF     
   4754 FFFC46B6 FF FF FF FF FF FF FF FF     
   4755 FFFC46BE FF FF FF FF FF FF FF FF     
   4756 FFFC46C6 FF FF FF FF FF FF FF FF     
   4757 FFFC46CE FF FF FF FF FF FF FF FF     
   4758 FFFC46D6 FF FF FF FF FF FF FF FF     
   4759 FFFC46DE FF FF FF FF FF FF FF FF     
   4760 FFFC46E6 FF FF FF FF FF FF FF FF     
   4761 FFFC46EE FF FF FF FF FF FF FF FF     
   4762 FFFC46F6 FF FF FF FF FF FF FF FF     
   4763 FFFC46FE FF FF FF FF FF FF FF FF     
   4764 FFFC4706 FF FF FF FF FF FF FF FF     
   4765 FFFC470E FF FF FF FF FF FF FF FF     
   4766 FFFC4716 FF FF FF FF FF FF FF FF     
   4767 FFFC471E FF FF FF FF FF FF FF FF     
   4768 FFFC4726 FF FF FF FF FF FF FF FF     
   4769 FFFC472E FF FF FF FF FF FF FF FF     
   4770 FFFC4736 FF FF FF FF FF FF FF FF     
   4771 FFFC473E FF FF FF FF FF FF FF FF     
   4772 FFFC4746 FF FF FF FF FF FF FF FF     
   4773 FFFC474E FF FF FF FF FF FF FF FF     
   4774 FFFC4756 FF FF FF FF FF FF FF FF     
   4775 FFFC475E FF FF FF FF FF FF FF FF     
   4776 FFFC4766 FF FF FF FF FF FF FF FF     
   4777 FFFC476E FF FF FF FF FF FF FF FF     
   4778 FFFC4776 FF FF FF FF FF FF FF FF     
   4779 FFFC477E FF FF FF FF FF FF FF FF     
   4780 FFFC4786 FF FF FF FF FF FF FF FF     
   4781 FFFC478E FF FF FF FF FF FF FF FF     
   4782 FFFC4796 FF FF FF FF FF FF FF FF     
   4783 FFFC479E FF FF FF FF FF FF FF FF     
   4784 FFFC47A6 FF FF FF FF FF FF FF FF     
   4785 FFFC47AE FF FF FF FF FF FF FF FF     
   4786 FFFC47B6 FF FF FF FF FF FF FF FF     
   4787 FFFC47BE FF FF FF FF FF FF FF FF     
   4788 FFFC47C6 FF FF FF FF FF FF FF FF     
   4789 FFFC47CE FF FF FF FF FF FF FF FF     
   4790 FFFC47D6 FF FF FF FF FF FF FF FF     
   4791 FFFC47DE FF FF FF FF FF FF FF FF     
   4792 FFFC47E6 FF FF FF FF FF FF FF FF     
   4793 FFFC47EE FF FF FF FF FF FF FF FF     
   4794 FFFC47F6 FF FF FF FF FF FF FF FF     
   4795 FFFC47FE FF FF FF FF FF FF FF FF     
   4796 FFFC4806 FF FF FF FF FF FF FF FF     
   4797 FFFC480E FF FF FF FF FF FF FF FF     
   4798 FFFC4816 FF FF FF FF FF FF FF FF     
   4799 FFFC481E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 20
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4800 FFFC4826 FF FF FF FF FF FF FF FF     
   4801 FFFC482E FF FF FF FF FF FF FF FF     
   4802 FFFC4836 FF FF FF FF FF FF FF FF     
   4803 FFFC483E FF FF FF FF FF FF FF FF     
   4804 FFFC4846 FF FF FF FF FF FF FF FF     
   4805 FFFC484E FF FF FF FF FF FF FF FF     
   4806 FFFC4856 FF FF FF FF FF FF FF FF     
   4807 FFFC485E FF FF FF FF FF FF FF FF     
   4808 FFFC4866 FF FF FF FF FF FF FF FF     
   4809 FFFC486E FF FF FF FF FF FF FF FF     
   4810 FFFC4876 FF FF FF FF FF FF FF FF     
   4811 FFFC487E FF FF FF FF FF FF FF FF     
   4812 FFFC4886 FF FF FF FF FF FF FF FF     
   4813 FFFC488E FF FF FF FF FF FF FF FF     
   4814 FFFC4896 FF FF FF FF FF FF FF FF     
   4815 FFFC489E FF FF FF FF FF FF FF FF     
   4816 FFFC48A6 FF FF FF FF FF FF FF FF     
   4817 FFFC48AE FF FF FF FF FF FF FF FF     
   4818 FFFC48B6 FF FF FF FF FF FF FF FF     
   4819 FFFC48BE FF FF FF FF FF FF FF FF     
   4820 FFFC48C6 FF FF FF FF FF FF FF FF     
   4821 FFFC48CE FF FF FF FF FF FF FF FF     
   4822 FFFC48D6 FF FF FF FF FF FF FF FF     
   4823 FFFC48DE FF FF FF FF FF FF FF FF     
   4824 FFFC48E6 FF FF FF FF FF FF FF FF     
   4825 FFFC48EE FF FF FF FF FF FF FF FF     
   4826 FFFC48F6 FF FF FF FF FF FF FF FF     
   4827 FFFC48FE FF FF FF FF FF FF FF FF     
   4828 FFFC4906 FF FF FF FF FF FF FF FF     
   4829 FFFC490E FF FF FF FF FF FF FF FF     
   4830 FFFC4916 FF FF FF FF FF FF FF FF     
   4831 FFFC491E FF FF FF FF FF FF FF FF     
   4832 FFFC4926 FF FF FF FF FF FF FF FF     
   4833 FFFC492E FF FF FF FF FF FF FF FF     
   4834 FFFC4936 FF FF FF FF FF FF FF FF     
   4835 FFFC493E FF FF FF FF FF FF FF FF     
   4836 FFFC4946 FF FF FF FF FF FF FF FF     
   4837 FFFC494E FF FF FF FF FF FF FF FF     
   4838 FFFC4956 FF FF FF FF FF FF FF FF     
   4839 FFFC495E FF FF FF FF FF FF FF FF     
   4840 FFFC4966 FF FF FF FF FF FF FF FF     
   4841 FFFC496E FF FF FF FF FF FF FF FF     
   4842 FFFC4976 FF FF FF FF FF FF FF FF     
   4843 FFFC497E FF FF FF FF FF FF FF FF     
   4844 FFFC4986 FF FF FF FF FF FF FF FF     
   4845 FFFC498E FF FF FF FF FF FF FF FF     
   4846 FFFC4996 FF FF FF FF FF FF FF FF     
   4847 FFFC499E FF FF FF FF FF FF FF FF     
   4848 FFFC49A6 FF FF FF FF FF FF FF FF     
   4849 FFFC49AE FF FF FF FF FF FF FF FF     
   4850 FFFC49B6 FF FF FF FF FF FF FF FF     
   4851 FFFC49BE FF FF FF FF FF FF FF FF     
   4852 FFFC49C6 FF FF FF FF FF FF FF FF     
   4853 FFFC49CE FF FF FF FF FF FF FF FF     
   4854 FFFC49D6 FF FF FF FF FF FF FF FF     
   4855 FFFC49DE FF FF FF FF FF FF FF FF     
   4856 FFFC49E6 FF FF FF FF FF FF FF FF     
   4857 FFFC49EE FF FF FF FF FF FF FF FF     
   4858 FFFC49F6 FF FF FF FF FF FF FF FF     
   4859 FFFC49FE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 21
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4860 FFFC4A06 FF FF FF FF FF FF FF FF     
   4861 FFFC4A0E FF FF FF FF FF FF FF FF     
   4862 FFFC4A16 FF FF FF FF FF FF FF FF     
   4863 FFFC4A1E FF FF FF FF FF FF FF FF     
   4864 FFFC4A26 FF FF FF FF FF FF FF FF     
   4865 FFFC4A2E FF FF FF FF FF FF FF FF     
   4866 FFFC4A36 FF FF FF FF FF FF FF FF     
   4867 FFFC4A3E FF FF FF FF FF FF FF FF     
   4868 FFFC4A46 FF FF FF FF FF FF FF FF     
   4869 FFFC4A4E FF FF FF FF FF FF FF FF     
   4870 FFFC4A56 FF FF FF FF FF FF FF FF     
   4871 FFFC4A5E FF FF FF FF FF FF FF FF     
   4872 FFFC4A66 FF FF FF FF FF FF FF FF     
   4873 FFFC4A6E FF FF FF FF FF FF FF FF     
   4874 FFFC4A76 FF FF FF FF FF FF FF FF     
   4875 FFFC4A7E FF FF FF FF FF FF FF FF     
   4876 FFFC4A86 FF FF FF FF FF FF FF FF     
   4877 FFFC4A8E FF FF FF FF FF FF FF FF     
   4878 FFFC4A96 FF FF FF FF FF FF FF FF     
   4879 FFFC4A9E FF FF FF FF FF FF FF FF     
   4880 FFFC4AA6 FF FF FF FF FF FF FF FF     
   4881 FFFC4AAE FF FF FF FF FF FF FF FF     
   4882 FFFC4AB6 FF FF FF FF FF FF FF FF     
   4883 FFFC4ABE FF FF FF FF FF FF FF FF     
   4884 FFFC4AC6 FF FF FF FF FF FF FF FF     
   4885 FFFC4ACE FF FF FF FF FF FF FF FF     
   4886 FFFC4AD6 FF FF FF FF FF FF FF FF     
   4887 FFFC4ADE FF FF FF FF FF FF FF FF     
   4888 FFFC4AE6 FF FF FF FF FF FF FF FF     
   4889 FFFC4AEE FF FF FF FF FF FF FF FF     
   4890 FFFC4AF6 FF FF FF FF FF FF FF FF     
   4891 FFFC4AFE FF FF FF FF FF FF FF FF     
   4892 FFFC4B06 FF FF FF FF FF FF FF FF     
   4893 FFFC4B0E FF FF FF FF FF FF FF FF     
   4894 FFFC4B16 FF FF FF FF FF FF FF FF     
   4895 FFFC4B1E FF FF FF FF FF FF FF FF     
   4896 FFFC4B26 FF FF FF FF FF FF FF FF     
   4897 FFFC4B2E FF FF FF FF FF FF FF FF     
   4898 FFFC4B36 FF FF FF FF FF FF FF FF     
   4899 FFFC4B3E FF FF FF FF FF FF FF FF     
   4900 FFFC4B46 FF FF FF FF FF FF FF FF     
   4901 FFFC4B4E FF FF FF FF FF FF FF FF     
   4902 FFFC4B56 FF FF FF FF FF FF FF FF     
   4903 FFFC4B5E FF FF FF FF FF FF FF FF     
   4904 FFFC4B66 FF FF FF FF FF FF FF FF     
   4905 FFFC4B6E FF FF FF FF FF FF FF FF     
   4906 FFFC4B76 FF FF FF FF FF FF FF FF     
   4907 FFFC4B7E FF FF FF FF FF FF FF FF     
   4908 FFFC4B86 FF FF FF FF FF FF FF FF     
   4909 FFFC4B8E FF FF FF FF FF FF FF FF     
   4910 FFFC4B96 FF FF FF FF FF FF FF FF     
   4911 FFFC4B9E FF FF FF FF FF FF FF FF     
   4912 FFFC4BA6 FF FF FF FF FF FF FF FF     
   4913 FFFC4BAE FF FF FF FF FF FF FF FF     
   4914 FFFC4BB6 FF FF FF FF FF FF FF FF     
   4915 FFFC4BBE FF FF FF FF FF FF FF FF     
   4916 FFFC4BC6 FF FF FF FF FF FF FF FF     
   4917 FFFC4BCE FF FF FF FF FF FF FF FF     
   4918 FFFC4BD6 FF FF FF FF FF FF FF FF     
   4919 FFFC4BDE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 22
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4920 FFFC4BE6 FF FF FF FF FF FF FF FF     
   4921 FFFC4BEE FF FF FF FF FF FF FF FF     
   4922 FFFC4BF6 FF FF FF FF FF FF FF FF     
   4923 FFFC4BFE FF FF FF FF FF FF FF FF     
   4924 FFFC4C06 FF FF FF FF FF FF FF FF     
   4925 FFFC4C0E FF FF FF FF FF FF FF FF     
   4926 FFFC4C16 FF FF FF FF FF FF FF FF     
   4927 FFFC4C1E FF FF FF FF FF FF FF FF     
   4928 FFFC4C26 FF FF FF FF FF FF FF FF     
   4929 FFFC4C2E FF FF FF FF FF FF FF FF     
   4930 FFFC4C36 FF FF FF FF FF FF FF FF     
   4931 FFFC4C3E FF FF FF FF FF FF FF FF     
   4932 FFFC4C46 FF FF FF FF FF FF FF FF     
   4933 FFFC4C4E FF FF FF FF FF FF FF FF     
   4934 FFFC4C56 FF FF FF FF FF FF FF FF     
   4935 FFFC4C5E FF FF FF FF FF FF FF FF     
   4936 FFFC4C66 FF FF FF FF FF FF FF FF     
   4937 FFFC4C6E FF FF FF FF FF FF FF FF     
   4938 FFFC4C76 FF FF FF FF FF FF FF FF     
   4939 FFFC4C7E FF FF FF FF FF FF FF FF     
   4940 FFFC4C86 FF FF FF FF FF FF FF FF     
   4941 FFFC4C8E FF FF FF FF FF FF FF FF     
   4942 FFFC4C96 FF FF FF FF FF FF FF FF     
   4943 FFFC4C9E FF FF FF FF FF FF FF FF     
   4944 FFFC4CA6 FF FF FF FF FF FF FF FF     
   4945 FFFC4CAE FF FF FF FF FF FF FF FF     
   4946 FFFC4CB6 FF FF FF FF FF FF FF FF     
   4947 FFFC4CBE FF FF FF FF FF FF FF FF     
   4948 FFFC4CC6 FF FF FF FF FF FF FF FF     
   4949 FFFC4CCE FF FF FF FF FF FF FF FF     
   4950 FFFC4CD6 FF FF FF FF FF FF FF FF     
   4951 FFFC4CDE FF FF FF FF FF FF FF FF     
   4952 FFFC4CE6 FF FF FF FF FF FF FF FF     
   4953 FFFC4CEE FF FF FF FF FF FF FF FF     
   4954 FFFC4CF6 FF FF FF FF FF FF FF FF     
   4955 FFFC4CFE FF FF FF FF FF FF FF FF     
   4956 FFFC4D06 FF FF FF FF FF FF FF FF     
   4957 FFFC4D0E FF FF FF FF FF FF FF FF     
   4958 FFFC4D16 FF FF FF FF FF FF FF FF     
   4959 FFFC4D1E FF FF FF FF FF FF FF FF     
   4960 FFFC4D26 FF FF FF FF FF FF FF FF     
   4961 FFFC4D2E FF FF FF FF FF FF FF FF     
   4962 FFFC4D36 FF FF FF FF FF FF FF FF     
   4963 FFFC4D3E FF FF FF FF FF FF FF FF     
   4964 FFFC4D46 FF FF FF FF FF FF FF FF     
   4965 FFFC4D4E FF FF FF FF FF FF FF FF     
   4966 FFFC4D56 FF FF FF FF FF FF FF FF     
   4967 FFFC4D5E FF FF FF FF FF FF FF FF     
   4968 FFFC4D66 FF FF FF FF FF FF FF FF     
   4969 FFFC4D6E FF FF FF FF FF FF FF FF     
   4970 FFFC4D76 FF FF FF FF FF FF FF FF     
   4971 FFFC4D7E FF FF FF FF FF FF FF FF     
   4972 FFFC4D86 FF FF FF FF FF FF FF FF     
   4973 FFFC4D8E FF FF FF FF FF FF FF FF     
   4974 FFFC4D96 FF FF FF FF FF FF FF FF     
   4975 FFFC4D9E FF FF FF FF FF FF FF FF     
   4976 FFFC4DA6 FF FF FF FF FF FF FF FF     
   4977 FFFC4DAE FF FF FF FF FF FF FF FF     
   4978 FFFC4DB6 FF FF FF FF FF FF FF FF     
   4979 FFFC4DBE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 23
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   4980 FFFC4DC6 FF FF FF FF FF FF FF FF     
   4981 FFFC4DCE FF FF FF FF FF FF FF FF     
   4982 FFFC4DD6 FF FF FF FF FF FF FF FF     
   4983 FFFC4DDE FF FF FF FF FF FF FF FF     
   4984 FFFC4DE6 FF FF FF FF FF FF FF FF     
   4985 FFFC4DEE FF FF FF FF FF FF FF FF     
   4986 FFFC4DF6 FF FF FF FF FF FF FF FF     
   4987 FFFC4DFE FF FF FF FF FF FF FF FF     
   4988 FFFC4E06 FF FF FF FF FF FF FF FF     
   4989 FFFC4E0E FF FF FF FF FF FF FF FF     
   4990 FFFC4E16 FF FF FF FF FF FF FF FF     
   4991 FFFC4E1E FF FF FF FF FF FF FF FF     
   4992 FFFC4E26 FF FF FF FF FF FF FF FF     
   4993 FFFC4E2E FF FF FF FF FF FF FF FF     
   4994 FFFC4E36 FF FF FF FF FF FF FF FF     
   4995 FFFC4E3E FF FF FF FF FF FF FF FF     
   4996 FFFC4E46 FF FF FF FF FF FF FF FF     
   4997 FFFC4E4E FF FF FF FF FF FF FF FF     
   4998 FFFC4E56 FF FF FF FF FF FF FF FF     
   4999 FFFC4E5E FF FF FF FF FF FF FF FF     
   5000 FFFC4E66 FF FF FF FF FF FF FF FF     
   5001 FFFC4E6E FF FF FF FF FF FF FF FF     
   5002 FFFC4E76 FF FF FF FF FF FF FF FF     
   5003 FFFC4E7E FF FF FF FF FF FF FF FF     
   5004 FFFC4E86 FF FF FF FF FF FF FF FF     
   5005 FFFC4E8E FF FF FF FF FF FF FF FF     
   5006 FFFC4E96 FF FF FF FF FF FF FF FF     
   5007 FFFC4E9E FF FF FF FF FF FF FF FF     
   5008 FFFC4EA6 FF FF FF FF FF FF FF FF     
   5009 FFFC4EAE FF FF FF FF FF FF FF FF     
   5010 FFFC4EB6 FF FF FF FF FF FF FF FF     
   5011 FFFC4EBE FF FF FF FF FF FF FF FF     
   5012 FFFC4EC6 FF FF FF FF FF FF FF FF     
   5013 FFFC4ECE FF FF FF FF FF FF FF FF     
   5014 FFFC4ED6 FF FF FF FF FF FF FF FF     
   5015 FFFC4EDE FF FF FF FF FF FF FF FF     
   5016 FFFC4EE6 FF FF FF FF FF FF FF FF     
   5017 FFFC4EEE FF FF FF FF FF FF FF FF     
   5018 FFFC4EF6 FF FF FF FF FF FF FF FF     
   5019 FFFC4EFE FF FF FF FF FF FF FF FF     
   5020 FFFC4F06 FF FF FF FF FF FF FF FF     
   5021 FFFC4F0E FF FF FF FF FF FF FF FF     
   5022 FFFC4F16 FF FF FF FF FF FF FF FF     
   5023 FFFC4F1E FF FF FF FF FF FF FF FF     
   5024 FFFC4F26 FF FF FF FF FF FF FF FF     
   5025 FFFC4F2E FF FF FF FF FF FF FF FF     
   5026 FFFC4F36 FF FF FF FF FF FF FF FF     
   5027 FFFC4F3E FF FF FF FF FF FF FF FF     
   5028 FFFC4F46 FF FF FF FF FF FF FF FF     
   5029 FFFC4F4E FF FF FF FF FF FF FF FF     
   5030 FFFC4F56 FF FF FF FF FF FF FF FF     
   5031 FFFC4F5E FF FF FF FF FF FF FF FF     
   5032 FFFC4F66 FF FF FF FF FF FF FF FF     
   5033 FFFC4F6E FF FF FF FF FF FF FF FF     
   5034 FFFC4F76 FF FF FF FF FF FF FF FF     
   5035 FFFC4F7E FF FF FF FF FF FF FF FF     
   5036 FFFC4F86 FF FF FF FF FF FF FF FF     
   5037 FFFC4F8E FF FF FF FF FF FF FF FF     
   5038 FFFC4F96 FF FF FF FF FF FF FF FF     
   5039 FFFC4F9E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 24
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5040 FFFC4FA6 FF FF FF FF FF FF FF FF     
   5041 FFFC4FAE FF FF FF FF FF FF FF FF     
   5042 FFFC4FB6 FF FF FF FF FF FF FF FF     
   5043 FFFC4FBE FF FF FF FF FF FF FF FF     
   5044 FFFC4FC6 FF FF FF FF FF FF FF FF     
   5045 FFFC4FCE FF FF FF FF FF FF FF FF     
   5046 FFFC4FD6 FF FF FF FF FF FF FF FF     
   5047 FFFC4FDE FF FF FF FF FF FF FF FF     
   5048 FFFC4FE6 FF FF FF FF FF FF FF FF     
   5049 FFFC4FEE FF FF FF FF FF FF FF FF     
   5050 FFFC4FF6 FF FF FF FF FF FF FF FF     
   5051 FFFC4FFE FF FF FF FF FF FF FF FF     
   5052 FFFC5006 FF FF FF FF FF FF FF FF     
   5053 FFFC500E FF FF FF FF FF FF FF FF     
   5054 FFFC5016 FF FF FF FF FF FF FF FF     
   5055 FFFC501E FF FF FF FF FF FF FF FF     
   5056 FFFC5026 FF FF FF FF FF FF FF FF     
   5057 FFFC502E FF FF FF FF FF FF FF FF     
   5058 FFFC5036 FF FF FF FF FF FF FF FF     
   5059 FFFC503E FF FF FF FF FF FF FF FF     
   5060 FFFC5046 FF FF FF FF FF FF FF FF     
   5061 FFFC504E FF FF FF FF FF FF FF FF     
   5062 FFFC5056 FF FF FF FF FF FF FF FF     
   5063 FFFC505E FF FF FF FF FF FF FF FF     
   5064 FFFC5066 FF FF FF FF FF FF FF FF     
   5065 FFFC506E FF FF FF FF FF FF FF FF     
   5066 FFFC5076 FF FF FF FF FF FF FF FF     
   5067 FFFC507E FF FF FF FF FF FF FF FF     
   5068 FFFC5086 FF FF FF FF FF FF FF FF     
   5069 FFFC508E FF FF FF FF FF FF FF FF     
   5070 FFFC5096 FF FF FF FF FF FF FF FF     
   5071 FFFC509E FF FF FF FF FF FF FF FF     
   5072 FFFC50A6 FF FF FF FF FF FF FF FF     
   5073 FFFC50AE FF FF FF FF FF FF FF FF     
   5074 FFFC50B6 FF FF FF FF FF FF FF FF     
   5075 FFFC50BE FF FF FF FF FF FF FF FF     
   5076 FFFC50C6 FF FF FF FF FF FF FF FF     
   5077 FFFC50CE FF FF FF FF FF FF FF FF     
   5078 FFFC50D6 FF FF FF FF FF FF FF FF     
   5079 FFFC50DE FF FF FF FF FF FF FF FF     
   5080 FFFC50E6 FF FF FF FF FF FF FF FF     
   5081 FFFC50EE FF FF FF FF FF FF FF FF     
   5082 FFFC50F6 FF FF FF FF FF FF FF FF     
   5083 FFFC50FE FF FF FF FF FF FF FF FF     
   5084 FFFC5106 FF FF FF FF FF FF FF FF     
   5085 FFFC510E FF FF FF FF FF FF FF FF     
   5086 FFFC5116 FF FF FF FF FF FF FF FF     
   5087 FFFC511E FF FF FF FF FF FF FF FF     
   5088 FFFC5126 FF FF FF FF FF FF FF FF     
   5089 FFFC512E FF FF FF FF FF FF FF FF     
   5090 FFFC5136 FF FF FF FF FF FF FF FF     
   5091 FFFC513E FF FF FF FF FF FF FF FF     
   5092 FFFC5146 FF FF FF FF FF FF FF FF     
   5093 FFFC514E FF FF FF FF FF FF FF FF     
   5094 FFFC5156 FF FF FF FF FF FF FF FF     
   5095 FFFC515E FF FF FF FF FF FF FF FF     
   5096 FFFC5166 FF FF FF FF FF FF FF FF     
   5097 FFFC516E FF FF FF FF FF FF FF FF     
   5098 FFFC5176 FF FF FF FF FF FF FF FF     
   5099 FFFC517E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 25
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5100 FFFC5186 FF FF FF FF FF FF FF FF     
   5101 FFFC518E FF FF FF FF FF FF FF FF     
   5102 FFFC5196 FF FF FF FF FF FF FF FF     
   5103 FFFC519E FF FF FF FF FF FF FF FF     
   5104 FFFC51A6 FF FF FF FF FF FF FF FF     
   5105 FFFC51AE FF FF FF FF FF FF FF FF     
   5106 FFFC51B6 FF FF FF FF FF FF FF FF     
   5107 FFFC51BE FF FF FF FF FF FF FF FF     
   5108 FFFC51C6 FF FF FF FF FF FF FF FF     
   5109 FFFC51CE FF FF FF FF FF FF FF FF     
   5110 FFFC51D6 FF FF FF FF FF FF FF FF     
   5111 FFFC51DE FF FF FF FF FF FF FF FF     
   5112 FFFC51E6 FF FF FF FF FF FF FF FF     
   5113 FFFC51EE FF FF FF FF FF FF FF FF     
   5114 FFFC51F6 FF FF FF FF FF FF FF FF     
   5115 FFFC51FE FF FF FF FF FF FF FF FF     
   5116 FFFC5206 FF FF FF FF FF FF FF FF     
   5117 FFFC520E FF FF FF FF FF FF FF FF     
   5118 FFFC5216 FF FF FF FF FF FF FF FF     
   5119 FFFC521E FF FF FF FF FF FF FF FF     
   5120 FFFC5226 FF FF FF FF FF FF FF FF     
   5121 FFFC522E FF FF FF FF FF FF FF FF     
   5122 FFFC5236 FF FF FF FF FF FF FF FF     
   5123 FFFC523E FF FF FF FF FF FF FF FF     
   5124 FFFC5246 FF FF FF FF FF FF FF FF     
   5125 FFFC524E FF FF FF FF FF FF FF FF     
   5126 FFFC5256 FF FF FF FF FF FF FF FF     
   5127 FFFC525E FF FF FF FF FF FF FF FF     
   5128 FFFC5266 FF FF FF FF FF FF FF FF     
   5129 FFFC526E FF FF FF FF FF FF FF FF     
   5130 FFFC5276 FF FF FF FF FF FF FF FF     
   5131 FFFC527E FF FF FF FF FF FF FF FF     
   5132 FFFC5286 FF FF FF FF FF FF FF FF     
   5133 FFFC528E FF FF FF FF FF FF FF FF     
   5134 FFFC5296 FF FF FF FF FF FF FF FF     
   5135 FFFC529E FF FF FF FF FF FF FF FF     
   5136 FFFC52A6 FF FF FF FF FF FF FF FF     
   5137 FFFC52AE FF FF FF FF FF FF FF FF     
   5138 FFFC52B6 FF FF FF FF FF FF FF FF     
   5139 FFFC52BE FF FF FF FF FF FF FF FF     
   5140 FFFC52C6 FF FF FF FF FF FF FF FF     
   5141 FFFC52CE FF FF FF FF FF FF FF FF     
   5142 FFFC52D6 FF FF FF FF FF FF FF FF     
   5143 FFFC52DE FF FF FF FF FF FF FF FF     
   5144 FFFC52E6 FF FF FF FF FF FF FF FF     
   5145 FFFC52EE FF FF FF FF FF FF FF FF     
   5146 FFFC52F6 FF FF FF FF FF FF FF FF     
   5147 FFFC52FE FF FF FF FF FF FF FF FF     
   5148 FFFC5306 FF FF FF FF FF FF FF FF     
   5149 FFFC530E FF FF FF FF FF FF FF FF     
   5150 FFFC5316 FF FF FF FF FF FF FF FF     
   5151 FFFC531E FF FF FF FF FF FF FF FF     
   5152 FFFC5326 FF FF FF FF FF FF FF FF     
   5153 FFFC532E FF FF FF FF FF FF FF FF     
   5154 FFFC5336 FF FF FF FF FF FF FF FF     
   5155 FFFC533E FF FF FF FF FF FF FF FF     
   5156 FFFC5346 FF FF FF FF FF FF FF FF     
   5157 FFFC534E FF FF FF FF FF FF FF FF     
   5158 FFFC5356 FF FF FF FF FF FF FF FF     
   5159 FFFC535E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 26
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5160 FFFC5366 FF FF FF FF FF FF FF FF     
   5161 FFFC536E FF FF FF FF FF FF FF FF     
   5162 FFFC5376 FF FF FF FF FF FF FF FF     
   5163 FFFC537E FF FF FF FF FF FF FF FF     
   5164 FFFC5386 FF FF FF FF FF FF FF FF     
   5165 FFFC538E FF FF FF FF FF FF FF FF     
   5166 FFFC5396 FF FF FF FF FF FF FF FF     
   5167 FFFC539E FF FF FF FF FF FF FF FF     
   5168 FFFC53A6 FF FF FF FF FF FF FF FF     
   5169 FFFC53AE FF FF FF FF FF FF FF FF     
   5170 FFFC53B6 FF FF FF FF FF FF FF FF     
   5171 FFFC53BE FF FF FF FF FF FF FF FF     
   5172 FFFC53C6 FF FF FF FF FF FF FF FF     
   5173 FFFC53CE FF FF FF FF FF FF FF FF     
   5174 FFFC53D6 FF FF FF FF FF FF FF FF     
   5175 FFFC53DE FF FF FF FF FF FF FF FF     
   5176 FFFC53E6 FF FF FF FF FF FF FF FF     
   5177 FFFC53EE FF FF FF FF FF FF FF FF     
   5178 FFFC53F6 FF FF FF FF FF FF FF FF     
   5179 FFFC53FE FF FF FF FF FF FF FF FF     
   5180 FFFC5406 FF FF FF FF FF FF FF FF     
   5181 FFFC540E FF FF FF FF FF FF FF FF     
   5182 FFFC5416 FF FF FF FF FF FF FF FF     
   5183 FFFC541E FF FF FF FF FF FF FF FF     
   5184 FFFC5426 FF FF FF FF FF FF FF FF     
   5185 FFFC542E FF FF FF FF FF FF FF FF     
   5186 FFFC5436 FF FF FF FF FF FF FF FF     
   5187 FFFC543E FF FF FF FF FF FF FF FF     
   5188 FFFC5446 FF FF FF FF FF FF FF FF     
   5189 FFFC544E FF FF FF FF FF FF FF FF     
   5190 FFFC5456 FF FF FF FF FF FF FF FF     
   5191 FFFC545E FF FF FF FF FF FF FF FF     
   5192 FFFC5466 FF FF FF FF FF FF FF FF     
   5193 FFFC546E FF FF FF FF FF FF FF FF     
   5194 FFFC5476 FF FF FF FF FF FF FF FF     
   5195 FFFC547E FF FF FF FF FF FF FF FF     
   5196 FFFC5486 FF FF FF FF FF FF FF FF     
   5197 FFFC548E FF FF FF FF FF FF FF FF     
   5198 FFFC5496 FF FF FF FF FF FF FF FF     
   5199 FFFC549E FF FF FF FF FF FF FF FF     
   5200 FFFC54A6 FF FF FF FF FF FF FF FF     
   5201 FFFC54AE FF FF FF FF FF FF FF FF     
   5202 FFFC54B6 FF FF FF FF FF FF FF FF     
   5203 FFFC54BE FF FF FF FF FF FF FF FF     
   5204 FFFC54C6 FF FF FF FF FF FF FF FF     
   5205 FFFC54CE FF FF FF FF FF FF FF FF     
   5206 FFFC54D6 FF FF FF FF FF FF FF FF     
   5207 FFFC54DE FF FF FF FF FF FF FF FF     
   5208 FFFC54E6 FF FF FF FF FF FF FF FF     
   5209 FFFC54EE FF FF FF FF FF FF FF FF     
   5210 FFFC54F6 FF FF FF FF FF FF FF FF     
   5211 FFFC54FE FF FF FF FF FF FF FF FF     
   5212 FFFC5506 FF FF FF FF FF FF FF FF     
   5213 FFFC550E FF FF FF FF FF FF FF FF     
   5214 FFFC5516 FF FF FF FF FF FF FF FF     
   5215 FFFC551E FF FF FF FF FF FF FF FF     
   5216 FFFC5526 FF FF FF FF FF FF FF FF     
   5217 FFFC552E FF FF FF FF FF FF FF FF     
   5218 FFFC5536 FF FF FF FF FF FF FF FF     
   5219 FFFC553E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 27
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5220 FFFC5546 FF FF FF FF FF FF FF FF     
   5221 FFFC554E FF FF FF FF FF FF FF FF     
   5222 FFFC5556 FF FF FF FF FF FF FF FF     
   5223 FFFC555E FF FF FF FF FF FF FF FF     
   5224 FFFC5566 FF FF FF FF FF FF FF FF     
   5225 FFFC556E FF FF FF FF FF FF FF FF     
   5226 FFFC5576 FF FF FF FF FF FF FF FF     
   5227 FFFC557E FF FF FF FF FF FF FF FF     
   5228 FFFC5586 FF FF FF FF FF FF FF FF     
   5229 FFFC558E FF FF FF FF FF FF FF FF     
   5230 FFFC5596 FF FF FF FF FF FF FF FF     
   5231 FFFC559E FF FF FF FF FF FF FF FF     
   5232 FFFC55A6 FF FF FF FF FF FF FF FF     
   5233 FFFC55AE FF FF FF FF FF FF FF FF     
   5234 FFFC55B6 FF FF FF FF FF FF FF FF     
   5235 FFFC55BE FF FF FF FF FF FF FF FF     
   5236 FFFC55C6 FF FF FF FF FF FF FF FF     
   5237 FFFC55CE FF FF FF FF FF FF FF FF     
   5238 FFFC55D6 FF FF FF FF FF FF FF FF     
   5239 FFFC55DE FF FF FF FF FF FF FF FF     
   5240 FFFC55E6 FF FF FF FF FF FF FF FF     
   5241 FFFC55EE FF FF FF FF FF FF FF FF     
   5242 FFFC55F6 FF FF FF FF FF FF FF FF     
   5243 FFFC55FE FF FF FF FF FF FF FF FF     
   5244 FFFC5606 FF FF FF FF FF FF FF FF     
   5245 FFFC560E FF FF FF FF FF FF FF FF     
   5246 FFFC5616 FF FF FF FF FF FF FF FF     
   5247 FFFC561E FF FF FF FF FF FF FF FF     
   5248 FFFC5626 FF FF FF FF FF FF FF FF     
   5249 FFFC562E FF FF FF FF FF FF FF FF     
   5250 FFFC5636 FF FF FF FF FF FF FF FF     
   5251 FFFC563E FF FF FF FF FF FF FF FF     
   5252 FFFC5646 FF FF FF FF FF FF FF FF     
   5253 FFFC564E FF FF FF FF FF FF FF FF     
   5254 FFFC5656 FF FF FF FF FF FF FF FF     
   5255 FFFC565E FF FF FF FF FF FF FF FF     
   5256 FFFC5666 FF FF FF FF FF FF FF FF     
   5257 FFFC566E FF FF FF FF FF FF FF FF     
   5258 FFFC5676 FF FF FF FF FF FF FF FF     
   5259 FFFC567E FF FF FF FF FF FF FF FF     
   5260 FFFC5686 FF FF FF FF FF FF FF FF     
   5261 FFFC568E FF FF FF FF FF FF FF FF     
   5262 FFFC5696 FF FF FF FF FF FF FF FF     
   5263 FFFC569E FF FF FF FF FF FF FF FF     
   5264 FFFC56A6 FF FF FF FF FF FF FF FF     
   5265 FFFC56AE FF FF FF FF FF FF FF FF     
   5266 FFFC56B6 FF FF FF FF FF FF FF FF     
   5267 FFFC56BE FF FF FF FF FF FF FF FF     
   5268 FFFC56C6 FF FF FF FF FF FF FF FF     
   5269 FFFC56CE FF FF FF FF FF FF FF FF     
   5270 FFFC56D6 FF FF FF FF FF FF FF FF     
   5271 FFFC56DE FF FF FF FF FF FF FF FF     
   5272 FFFC56E6 FF FF FF FF FF FF FF FF     
   5273 FFFC56EE FF FF FF FF FF FF FF FF     
   5274 FFFC56F6 FF FF FF FF FF FF FF FF     
   5275 FFFC56FE FF FF FF FF FF FF FF FF     
   5276 FFFC5706 FF FF FF FF FF FF FF FF     
   5277 FFFC570E FF FF FF FF FF FF FF FF     
   5278 FFFC5716 FF FF FF FF FF FF FF FF     
   5279 FFFC571E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 28
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5280 FFFC5726 FF FF FF FF FF FF FF FF     
   5281 FFFC572E FF FF FF FF FF FF FF FF     
   5282 FFFC5736 FF FF FF FF FF FF FF FF     
   5283 FFFC573E FF FF FF FF FF FF FF FF     
   5284 FFFC5746 FF FF FF FF FF FF FF FF     
   5285 FFFC574E FF FF FF FF FF FF FF FF     
   5286 FFFC5756 FF FF FF FF FF FF FF FF     
   5287 FFFC575E FF FF FF FF FF FF FF FF     
   5288 FFFC5766 FF FF FF FF FF FF FF FF     
   5289 FFFC576E FF FF FF FF FF FF FF FF     
   5290 FFFC5776 FF FF FF FF FF FF FF FF     
   5291 FFFC577E FF FF FF FF FF FF FF FF     
   5292 FFFC5786 FF FF FF FF FF FF FF FF     
   5293 FFFC578E FF FF FF FF FF FF FF FF     
   5294 FFFC5796 FF FF FF FF FF FF FF FF     
   5295 FFFC579E FF FF FF FF FF FF FF FF     
   5296 FFFC57A6 FF FF FF FF FF FF FF FF     
   5297 FFFC57AE FF FF FF FF FF FF FF FF     
   5298 FFFC57B6 FF FF FF FF FF FF FF FF     
   5299 FFFC57BE FF FF FF FF FF FF FF FF     
   5300 FFFC57C6 FF FF FF FF FF FF FF FF     
   5301 FFFC57CE FF FF FF FF FF FF FF FF     
   5302 FFFC57D6 FF FF FF FF FF FF FF FF     
   5303 FFFC57DE FF FF FF FF FF FF FF FF     
   5304 FFFC57E6 FF FF FF FF FF FF FF FF     
   5305 FFFC57EE FF FF FF FF FF FF FF FF     
   5306 FFFC57F6 FF FF FF FF FF FF FF FF     
   5307 FFFC57FE FF FF FF FF FF FF FF FF     
   5308 FFFC5806 FF FF FF FF FF FF FF FF     
   5309 FFFC580E FF FF FF FF FF FF FF FF     
   5310 FFFC5816 FF FF FF FF FF FF FF FF     
   5311 FFFC581E FF FF FF FF FF FF FF FF     
   5312 FFFC5826 FF FF FF FF FF FF FF FF     
   5313 FFFC582E FF FF FF FF FF FF FF FF     
   5314 FFFC5836 FF FF FF FF FF FF FF FF     
   5315 FFFC583E FF FF FF FF FF FF FF FF     
   5316 FFFC5846 FF FF FF FF FF FF FF FF     
   5317 FFFC584E FF FF FF FF FF FF FF FF     
   5318 FFFC5856 FF FF FF FF FF FF FF FF     
   5319 FFFC585E FF FF FF FF FF FF FF FF     
   5320 FFFC5866 FF FF FF FF FF FF FF FF     
   5321 FFFC586E FF FF FF FF FF FF FF FF     
   5322 FFFC5876 FF FF FF FF FF FF FF FF     
   5323 FFFC587E FF FF FF FF FF FF FF FF     
   5324 FFFC5886 FF FF FF FF FF FF FF FF     
   5325 FFFC588E FF FF FF FF FF FF FF FF     
   5326 FFFC5896 FF FF FF FF FF FF FF FF     
   5327 FFFC589E FF FF FF FF FF FF FF FF     
   5328 FFFC58A6 FF FF FF FF FF FF FF FF     
   5329 FFFC58AE FF FF FF FF FF FF FF FF     
   5330 FFFC58B6 FF FF FF FF FF FF FF FF     
   5331 FFFC58BE FF FF FF FF FF FF FF FF     
   5332 FFFC58C6 FF FF FF FF FF FF FF FF     
   5333 FFFC58CE FF FF FF FF FF FF FF FF     
   5334 FFFC58D6 FF FF FF FF FF FF FF FF     
   5335 FFFC58DE FF FF FF FF FF FF FF FF     
   5336 FFFC58E6 FF FF FF FF FF FF FF FF     
   5337 FFFC58EE FF FF FF FF FF FF FF FF     
   5338 FFFC58F6 FF FF FF FF FF FF FF FF     
   5339 FFFC58FE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 29
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5340 FFFC5906 FF FF FF FF FF FF FF FF     
   5341 FFFC590E FF FF FF FF FF FF FF FF     
   5342 FFFC5916 FF FF FF FF FF FF FF FF     
   5343 FFFC591E FF FF FF FF FF FF FF FF     
   5344 FFFC5926 FF FF FF FF FF FF FF FF     
   5345 FFFC592E FF FF FF FF FF FF FF FF     
   5346 FFFC5936 FF FF FF FF FF FF FF FF     
   5347 FFFC593E FF FF FF FF FF FF FF FF     
   5348 FFFC5946 FF FF FF FF FF FF FF FF     
   5349 FFFC594E FF FF FF FF FF FF FF FF     
   5350 FFFC5956 FF FF FF FF FF FF FF FF     
   5351 FFFC595E FF FF FF FF FF FF FF FF     
   5352 FFFC5966 FF FF FF FF FF FF FF FF     
   5353 FFFC596E FF FF FF FF FF FF FF FF     
   5354 FFFC5976 FF FF FF FF FF FF FF FF     
   5355 FFFC597E FF FF FF FF FF FF FF FF     
   5356 FFFC5986 FF FF FF FF FF FF FF FF     
   5357 FFFC598E FF FF FF FF FF FF FF FF     
   5358 FFFC5996 FF FF FF FF FF FF FF FF     
   5359 FFFC599E FF FF FF FF FF FF FF FF     
   5360 FFFC59A6 FF FF FF FF FF FF FF FF     
   5361 FFFC59AE FF FF FF FF FF FF FF FF     
   5362 FFFC59B6 FF FF FF FF FF FF FF FF     
   5363 FFFC59BE FF FF FF FF FF FF FF FF     
   5364 FFFC59C6 FF FF FF FF FF FF FF FF     
   5365 FFFC59CE FF FF FF FF FF FF FF FF     
   5366 FFFC59D6 FF FF FF FF FF FF FF FF     
   5367 FFFC59DE FF FF FF FF FF FF FF FF     
   5368 FFFC59E6 FF FF FF FF FF FF FF FF     
   5369 FFFC59EE FF FF FF FF FF FF FF FF     
   5370 FFFC59F6 FF FF FF FF FF FF FF FF     
   5371 FFFC59FE FF FF FF FF FF FF FF FF     
   5372 FFFC5A06 FF FF FF FF FF FF FF FF     
   5373 FFFC5A0E FF FF FF FF FF FF FF FF     
   5374 FFFC5A16 FF FF FF FF FF FF FF FF     
   5375 FFFC5A1E FF FF FF FF FF FF FF FF     
   5376 FFFC5A26 FF FF FF FF FF FF FF FF     
   5377 FFFC5A2E FF FF FF FF FF FF FF FF     
   5378 FFFC5A36 FF FF FF FF FF FF FF FF     
   5379 FFFC5A3E FF FF FF FF FF FF FF FF     
   5380 FFFC5A46 FF FF FF FF FF FF FF FF     
   5381 FFFC5A4E FF FF FF FF FF FF FF FF     
   5382 FFFC5A56 FF FF FF FF FF FF FF FF     
   5383 FFFC5A5E FF FF FF FF FF FF FF FF     
   5384 FFFC5A66 FF FF FF FF FF FF FF FF     
   5385 FFFC5A6E FF FF FF FF FF FF FF FF     
   5386 FFFC5A76 FF FF FF FF FF FF FF FF     
   5387 FFFC5A7E FF FF FF FF FF FF FF FF     
   5388 FFFC5A86 FF FF FF FF FF FF FF FF     
   5389 FFFC5A8E FF FF FF FF FF FF FF FF     
   5390 FFFC5A96 FF FF FF FF FF FF FF FF     
   5391 FFFC5A9E FF FF FF FF FF FF FF FF     
   5392 FFFC5AA6 FF FF FF FF FF FF FF FF     
   5393 FFFC5AAE FF FF FF FF FF FF FF FF     
   5394 FFFC5AB6 FF FF FF FF FF FF FF FF     
   5395 FFFC5ABE FF FF FF FF FF FF FF FF     
   5396 FFFC5AC6 FF FF FF FF FF FF FF FF     
   5397 FFFC5ACE FF FF FF FF FF FF FF FF     
   5398 FFFC5AD6 FF FF FF FF FF FF FF FF     
   5399 FFFC5ADE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 30
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5400 FFFC5AE6 FF FF FF FF FF FF FF FF     
   5401 FFFC5AEE FF FF FF FF FF FF FF FF     
   5402 FFFC5AF6 FF FF FF FF FF FF FF FF     
   5403 FFFC5AFE FF FF FF FF FF FF FF FF     
   5404 FFFC5B06 FF FF FF FF FF FF FF FF     
   5405 FFFC5B0E FF FF FF FF FF FF FF FF     
   5406 FFFC5B16 FF FF FF FF FF FF FF FF     
   5407 FFFC5B1E FF FF FF FF FF FF FF FF     
   5408 FFFC5B26 FF FF FF FF FF FF FF FF     
   5409 FFFC5B2E FF FF FF FF FF FF FF FF     
   5410 FFFC5B36 FF FF FF FF FF FF FF FF     
   5411 FFFC5B3E FF FF FF FF FF FF FF FF     
   5412 FFFC5B46 FF FF FF FF FF FF FF FF     
   5413 FFFC5B4E FF FF FF FF FF FF FF FF     
   5414 FFFC5B56 FF FF FF FF FF FF FF FF     
   5415 FFFC5B5E FF FF FF FF FF FF FF FF     
   5416 FFFC5B66 FF FF FF FF FF FF FF FF     
   5417 FFFC5B6E FF FF FF FF FF FF FF FF     
   5418 FFFC5B76 FF FF FF FF FF FF FF FF     
   5419 FFFC5B7E FF FF FF FF FF FF FF FF     
   5420 FFFC5B86 FF FF FF FF FF FF FF FF     
   5421 FFFC5B8E FF FF FF FF FF FF FF FF     
   5422 FFFC5B96 FF FF FF FF FF FF FF FF     
   5423 FFFC5B9E FF FF FF FF FF FF FF FF     
   5424 FFFC5BA6 FF FF FF FF FF FF FF FF     
   5425 FFFC5BAE FF FF FF FF FF FF FF FF     
   5426 FFFC5BB6 FF FF FF FF FF FF FF FF     
   5427 FFFC5BBE FF FF FF FF FF FF FF FF     
   5428 FFFC5BC6 FF FF FF FF FF FF FF FF     
   5429 FFFC5BCE FF FF FF FF FF FF FF FF     
   5430 FFFC5BD6 FF FF FF FF FF FF FF FF     
   5431 FFFC5BDE FF FF FF FF FF FF FF FF     
   5432 FFFC5BE6 FF FF FF FF FF FF FF FF     
   5433 FFFC5BEE FF FF FF FF FF FF FF FF     
   5434 FFFC5BF6 FF FF FF FF FF FF FF FF     
   5435 FFFC5BFE FF FF FF FF FF FF FF FF     
   5436 FFFC5C06 FF FF FF FF FF FF FF FF     
   5437 FFFC5C0E FF FF FF FF FF FF FF FF     
   5438 FFFC5C16 FF FF FF FF FF FF FF FF     
   5439 FFFC5C1E FF FF FF FF FF FF FF FF     
   5440 FFFC5C26 FF FF FF FF FF FF FF FF     
   5441 FFFC5C2E FF FF FF FF FF FF FF FF     
   5442 FFFC5C36 FF FF FF FF FF FF FF FF     
   5443 FFFC5C3E FF FF FF FF FF FF FF FF     
   5444 FFFC5C46 FF FF FF FF FF FF FF FF     
   5445 FFFC5C4E FF FF FF FF FF FF FF FF     
   5446 FFFC5C56 FF FF FF FF FF FF FF FF     
   5447 FFFC5C5E FF FF FF FF FF FF FF FF     
   5448 FFFC5C66 FF FF FF FF FF FF FF FF     
   5449 FFFC5C6E FF FF FF FF FF FF FF FF     
   5450 FFFC5C76 FF FF FF FF FF FF FF FF     
   5451 FFFC5C7E FF FF FF FF FF FF FF FF     
   5452 FFFC5C86 FF FF FF FF FF FF FF FF     
   5453 FFFC5C8E FF FF FF FF FF FF FF FF     
   5454 FFFC5C96 FF FF FF FF FF FF FF FF     
   5455 FFFC5C9E FF FF FF FF FF FF FF FF     
   5456 FFFC5CA6 FF FF FF FF FF FF FF FF     
   5457 FFFC5CAE FF FF FF FF FF FF FF FF     
   5458 FFFC5CB6 FF FF FF FF FF FF FF FF     
   5459 FFFC5CBE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 31
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5460 FFFC5CC6 FF FF FF FF FF FF FF FF     
   5461 FFFC5CCE FF FF FF FF FF FF FF FF     
   5462 FFFC5CD6 FF FF FF FF FF FF FF FF     
   5463 FFFC5CDE FF FF FF FF FF FF FF FF     
   5464 FFFC5CE6 FF FF FF FF FF FF FF FF     
   5465 FFFC5CEE FF FF FF FF FF FF FF FF     
   5466 FFFC5CF6 FF FF FF FF FF FF FF FF     
   5467 FFFC5CFE FF FF FF FF FF FF FF FF     
   5468 FFFC5D06 FF FF FF FF FF FF FF FF     
   5469 FFFC5D0E FF FF FF FF FF FF FF FF     
   5470 FFFC5D16 FF FF FF FF FF FF FF FF     
   5471 FFFC5D1E FF FF FF FF FF FF FF FF     
   5472 FFFC5D26 FF FF FF FF FF FF FF FF     
   5473 FFFC5D2E FF FF FF FF FF FF FF FF     
   5474 FFFC5D36 FF FF FF FF FF FF FF FF     
   5475 FFFC5D3E FF FF FF FF FF FF FF FF     
   5476 FFFC5D46 FF FF FF FF FF FF FF FF     
   5477 FFFC5D4E FF FF FF FF FF FF FF FF     
   5478 FFFC5D56 FF FF FF FF FF FF FF FF     
   5479 FFFC5D5E FF FF FF FF FF FF FF FF     
   5480 FFFC5D66 FF FF FF FF FF FF FF FF     
   5481 FFFC5D6E FF FF FF FF FF FF FF FF     
   5482 FFFC5D76 FF FF FF FF FF FF FF FF     
   5483 FFFC5D7E FF FF FF FF FF FF FF FF     
   5484 FFFC5D86 FF FF FF FF FF FF FF FF     
   5485 FFFC5D8E FF FF FF FF FF FF FF FF     
   5486 FFFC5D96 FF FF FF FF FF FF FF FF     
   5487 FFFC5D9E FF FF FF FF FF FF FF FF     
   5488 FFFC5DA6 FF FF FF FF FF FF FF FF     
   5489 FFFC5DAE FF FF FF FF FF FF FF FF     
   5490 FFFC5DB6 FF FF FF FF FF FF FF FF     
   5491 FFFC5DBE FF FF FF FF FF FF FF FF     
   5492 FFFC5DC6 FF FF FF FF FF FF FF FF     
   5493 FFFC5DCE FF FF FF FF FF FF FF FF     
   5494 FFFC5DD6 FF FF FF FF FF FF FF FF     
   5495 FFFC5DDE FF FF FF FF FF FF FF FF     
   5496 FFFC5DE6 FF FF FF FF FF FF FF FF     
   5497 FFFC5DEE FF FF FF FF FF FF FF FF     
   5498 FFFC5DF6 FF FF FF FF FF FF FF FF     
   5499 FFFC5DFE FF FF FF FF FF FF FF FF     
   5500 FFFC5E06 FF FF FF FF FF FF FF FF     
   5501 FFFC5E0E FF FF FF FF FF FF FF FF     
   5502 FFFC5E16 FF FF FF FF FF FF FF FF     
   5503 FFFC5E1E FF FF FF FF FF FF FF FF     
   5504 FFFC5E26 FF FF FF FF FF FF FF FF     
   5505 FFFC5E2E FF FF FF FF FF FF FF FF     
   5506 FFFC5E36 FF FF FF FF FF FF FF FF     
   5507 FFFC5E3E FF FF FF FF FF FF FF FF     
   5508 FFFC5E46 FF FF FF FF FF FF FF FF     
   5509 FFFC5E4E FF FF FF FF FF FF FF FF     
   5510 FFFC5E56 FF FF FF FF FF FF FF FF     
   5511 FFFC5E5E FF FF FF FF FF FF FF FF     
   5512 FFFC5E66 FF FF FF FF FF FF FF FF     
   5513 FFFC5E6E FF FF FF FF FF FF FF FF     
   5514 FFFC5E76 FF FF FF FF FF FF FF FF     
   5515 FFFC5E7E FF FF FF FF FF FF FF FF     
   5516 FFFC5E86 FF FF FF FF FF FF FF FF     
   5517 FFFC5E8E FF FF FF FF FF FF FF FF     
   5518 FFFC5E96 FF FF FF FF FF FF FF FF     
   5519 FFFC5E9E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 32
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5520 FFFC5EA6 FF FF FF FF FF FF FF FF     
   5521 FFFC5EAE FF FF FF FF FF FF FF FF     
   5522 FFFC5EB6 FF FF FF FF FF FF FF FF     
   5523 FFFC5EBE FF FF FF FF FF FF FF FF     
   5524 FFFC5EC6 FF FF FF FF FF FF FF FF     
   5525 FFFC5ECE FF FF FF FF FF FF FF FF     
   5526 FFFC5ED6 FF FF FF FF FF FF FF FF     
   5527 FFFC5EDE FF FF FF FF FF FF FF FF     
   5528 FFFC5EE6 FF FF FF FF FF FF FF FF     
   5529 FFFC5EEE FF FF FF FF FF FF FF FF     
   5530 FFFC5EF6 FF FF FF FF FF FF FF FF     
   5531 FFFC5EFE FF FF FF FF FF FF FF FF     
   5532 FFFC5F06 FF FF FF FF FF FF FF FF     
   5533 FFFC5F0E FF FF FF FF FF FF FF FF     
   5534 FFFC5F16 FF FF FF FF FF FF FF FF     
   5535 FFFC5F1E FF FF FF FF FF FF FF FF     
   5536 FFFC5F26 FF FF FF FF FF FF FF FF     
   5537 FFFC5F2E FF FF FF FF FF FF FF FF     
   5538 FFFC5F36 FF FF FF FF FF FF FF FF     
   5539 FFFC5F3E FF FF FF FF FF FF FF FF     
   5540 FFFC5F46 FF FF FF FF FF FF FF FF     
   5541 FFFC5F4E FF FF FF FF FF FF FF FF     
   5542 FFFC5F56 FF FF FF FF FF FF FF FF     
   5543 FFFC5F5E FF FF FF FF FF FF FF FF     
   5544 FFFC5F66 FF FF FF FF FF FF FF FF     
   5545 FFFC5F6E FF FF FF FF FF FF FF FF     
   5546 FFFC5F76 FF FF FF FF FF FF FF FF     
   5547 FFFC5F7E FF FF FF FF FF FF FF FF     
   5548 FFFC5F86 FF FF FF FF FF FF FF FF     
   5549 FFFC5F8E FF FF FF FF FF FF FF FF     
   5550 FFFC5F96 FF FF FF FF FF FF FF FF     
   5551 FFFC5F9E FF FF FF FF FF FF FF FF     
   5552 FFFC5FA6 FF FF FF FF FF FF FF FF     
   5553 FFFC5FAE FF FF FF FF FF FF FF FF     
   5554 FFFC5FB6 FF FF FF FF FF FF FF FF     
   5555 FFFC5FBE FF FF FF FF FF FF FF FF     
   5556 FFFC5FC6 FF FF FF FF FF FF FF FF     
   5557 FFFC5FCE FF FF FF FF FF FF FF FF     
   5558 FFFC5FD6 FF FF FF FF FF FF FF FF     
   5559 FFFC5FDE FF FF FF FF FF FF FF FF     
   5560 FFFC5FE6 FF FF FF FF FF FF FF FF     
   5561 FFFC5FEE FF FF FF FF FF FF FF FF     
   5562 FFFC5FF6 FF FF FF FF FF FF FF FF     
   5563 FFFC5FFE FF FF FF FF FF FF FF FF     
   5564 FFFC6006 FF FF FF FF FF FF FF FF     
   5565 FFFC600E FF FF FF FF FF FF FF FF     
   5566 FFFC6016 FF FF FF FF FF FF FF FF     
   5567 FFFC601E FF FF FF FF FF FF FF FF     
   5568 FFFC6026 FF FF FF FF FF FF FF FF     
   5569 FFFC602E FF FF FF FF FF FF FF FF     
   5570 FFFC6036 FF FF FF FF FF FF FF FF     
   5571 FFFC603E FF FF FF FF FF FF FF FF     
   5572 FFFC6046 FF FF FF FF FF FF FF FF     
   5573 FFFC604E FF FF FF FF FF FF FF FF     
   5574 FFFC6056 FF FF FF FF FF FF FF FF     
   5575 FFFC605E FF FF FF FF FF FF FF FF     
   5576 FFFC6066 FF FF FF FF FF FF FF FF     
   5577 FFFC606E FF FF FF FF FF FF FF FF     
   5578 FFFC6076 FF FF FF FF FF FF FF FF     
   5579 FFFC607E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 33
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5580 FFFC6086 FF FF FF FF FF FF FF FF     
   5581 FFFC608E FF FF FF FF FF FF FF FF     
   5582 FFFC6096 FF FF FF FF FF FF FF FF     
   5583 FFFC609E FF FF FF FF FF FF FF FF     
   5584 FFFC60A6 FF FF FF FF FF FF FF FF     
   5585 FFFC60AE FF FF FF FF FF FF FF FF     
   5586 FFFC60B6 FF FF FF FF FF FF FF FF     
   5587 FFFC60BE FF FF FF FF FF FF FF FF     
   5588 FFFC60C6 FF FF FF FF FF FF FF FF     
   5589 FFFC60CE FF FF FF FF FF FF FF FF     
   5590 FFFC60D6 FF FF FF FF FF FF FF FF     
   5591 FFFC60DE FF FF FF FF FF FF FF FF     
   5592 FFFC60E6 FF FF FF FF FF FF FF FF     
   5593 FFFC60EE FF FF FF FF FF FF FF FF     
   5594 FFFC60F6 FF FF FF FF FF FF FF FF     
   5595 FFFC60FE FF FF FF FF FF FF FF FF     
   5596 FFFC6106 FF FF FF FF FF FF FF FF     
   5597 FFFC610E FF FF FF FF FF FF FF FF     
   5598 FFFC6116 FF FF FF FF FF FF FF FF     
   5599 FFFC611E FF FF FF FF FF FF FF FF     
   5600 FFFC6126 FF FF FF FF FF FF FF FF     
   5601 FFFC612E FF FF FF FF FF FF FF FF     
   5602 FFFC6136 FF FF FF FF FF FF FF FF     
   5603 FFFC613E FF FF FF FF FF FF FF FF     
   5604 FFFC6146 FF FF FF FF FF FF FF FF     
   5605 FFFC614E FF FF FF FF FF FF FF FF     
   5606 FFFC6156 FF FF FF FF FF FF FF FF     
   5607 FFFC615E FF FF FF FF FF FF FF FF     
   5608 FFFC6166 FF FF FF FF FF FF FF FF     
   5609 FFFC616E FF FF FF FF FF FF FF FF     
   5610 FFFC6176 FF FF FF FF FF FF FF FF     
   5611 FFFC617E FF FF FF FF FF FF FF FF     
   5612 FFFC6186 FF FF FF FF FF FF FF FF     
   5613 FFFC618E FF FF FF FF FF FF FF FF     
   5614 FFFC6196 FF FF FF FF FF FF FF FF     
   5615 FFFC619E FF FF FF FF FF FF FF FF     
   5616 FFFC61A6 FF FF FF FF FF FF FF FF     
   5617 FFFC61AE FF FF FF FF FF FF FF FF     
   5618 FFFC61B6 FF FF FF FF FF FF FF FF     
   5619 FFFC61BE FF FF FF FF FF FF FF FF     
   5620 FFFC61C6 FF FF FF FF FF FF FF FF     
   5621 FFFC61CE FF FF FF FF FF FF FF FF     
   5622 FFFC61D6 FF FF FF FF FF FF FF FF     
   5623 FFFC61DE FF FF FF FF FF FF FF FF     
   5624 FFFC61E6 FF FF FF FF FF FF FF FF     
   5625 FFFC61EE FF FF FF FF FF FF FF FF     
   5626 FFFC61F6 FF FF FF FF FF FF FF FF     
   5627 FFFC61FE FF FF FF FF FF FF FF FF     
   5628 FFFC6206 FF FF FF FF FF FF FF FF     
   5629 FFFC620E FF FF FF FF FF FF FF FF     
   5630 FFFC6216 FF FF FF FF FF FF FF FF     
   5631 FFFC621E FF FF FF FF FF FF FF FF     
   5632 FFFC6226 FF FF FF FF FF FF FF FF     
   5633 FFFC622E FF FF FF FF FF FF FF FF     
   5634 FFFC6236 FF FF FF FF FF FF FF FF     
   5635 FFFC623E FF FF FF FF FF FF FF FF     
   5636 FFFC6246 FF FF FF FF FF FF FF FF     
   5637 FFFC624E FF FF FF FF FF FF FF FF     
   5638 FFFC6256 FF FF FF FF FF FF FF FF     
   5639 FFFC625E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 34
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5640 FFFC6266 FF FF FF FF FF FF FF FF     
   5641 FFFC626E FF FF FF FF FF FF FF FF     
   5642 FFFC6276 FF FF FF FF FF FF FF FF     
   5643 FFFC627E FF FF FF FF FF FF FF FF     
   5644 FFFC6286 FF FF FF FF FF FF FF FF     
   5645 FFFC628E FF FF FF FF FF FF FF FF     
   5646 FFFC6296 FF FF FF FF FF FF FF FF     
   5647 FFFC629E FF FF FF FF FF FF FF FF     
   5648 FFFC62A6 FF FF FF FF FF FF FF FF     
   5649 FFFC62AE FF FF FF FF FF FF FF FF     
   5650 FFFC62B6 FF FF FF FF FF FF FF FF     
   5651 FFFC62BE FF FF FF FF FF FF FF FF     
   5652 FFFC62C6 FF FF FF FF FF FF FF FF     
   5653 FFFC62CE FF FF FF FF FF FF FF FF     
   5654 FFFC62D6 FF FF FF FF FF FF FF FF     
   5655 FFFC62DE FF FF FF FF FF FF FF FF     
   5656 FFFC62E6 FF FF FF FF FF FF FF FF     
   5657 FFFC62EE FF FF FF FF FF FF FF FF     
   5658 FFFC62F6 FF FF FF FF FF FF FF FF     
   5659 FFFC62FE FF FF FF FF FF FF FF FF     
   5660 FFFC6306 FF FF FF FF FF FF FF FF     
   5661 FFFC630E FF FF FF FF FF FF FF FF     
   5662 FFFC6316 FF FF FF FF FF FF FF FF     
   5663 FFFC631E FF FF FF FF FF FF FF FF     
   5664 FFFC6326 FF FF FF FF FF FF FF FF     
   5665 FFFC632E FF FF FF FF FF FF FF FF     
   5666 FFFC6336 FF FF FF FF FF FF FF FF     
   5667 FFFC633E FF FF FF FF FF FF FF FF     
   5668 FFFC6346 FF FF FF FF FF FF FF FF     
   5669 FFFC634E FF FF FF FF FF FF FF FF     
   5670 FFFC6356 FF FF FF FF FF FF FF FF     
   5671 FFFC635E FF FF FF FF FF FF FF FF     
   5672 FFFC6366 FF FF FF FF FF FF FF FF     
   5673 FFFC636E FF FF FF FF FF FF FF FF     
   5674 FFFC6376 FF FF FF FF FF FF FF FF     
   5675 FFFC637E FF FF FF FF FF FF FF FF     
   5676 FFFC6386 FF FF FF FF FF FF FF FF     
   5677 FFFC638E FF FF FF FF FF FF FF FF     
   5678 FFFC6396 FF FF FF FF FF FF FF FF     
   5679 FFFC639E FF FF FF FF FF FF FF FF     
   5680 FFFC63A6 FF FF FF FF FF FF FF FF     
   5681 FFFC63AE FF FF FF FF FF FF FF FF     
   5682 FFFC63B6 FF FF FF FF FF FF FF FF     
   5683 FFFC63BE FF FF FF FF FF FF FF FF     
   5684 FFFC63C6 FF FF FF FF FF FF FF FF     
   5685 FFFC63CE FF FF FF FF FF FF FF FF     
   5686 FFFC63D6 FF FF FF FF FF FF FF FF     
   5687 FFFC63DE FF FF FF FF FF FF FF FF     
   5688 FFFC63E6 FF FF FF FF FF FF FF FF     
   5689 FFFC63EE FF FF FF FF FF FF FF FF     
   5690 FFFC63F6 FF FF FF FF FF FF FF FF     
   5691 FFFC63FE FF FF FF FF FF FF FF FF     
   5692 FFFC6406 FF FF FF FF FF FF FF FF     
   5693 FFFC640E FF FF FF FF FF FF FF FF     
   5694 FFFC6416 FF FF FF FF FF FF FF FF     
   5695 FFFC641E FF FF FF FF FF FF FF FF     
   5696 FFFC6426 FF FF FF FF FF FF FF FF     
   5697 FFFC642E FF FF FF FF FF FF FF FF     
   5698 FFFC6436 FF FF FF FF FF FF FF FF     
   5699 FFFC643E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 35
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5700 FFFC6446 FF FF FF FF FF FF FF FF     
   5701 FFFC644E FF FF FF FF FF FF FF FF     
   5702 FFFC6456 FF FF FF FF FF FF FF FF     
   5703 FFFC645E FF FF FF FF FF FF FF FF     
   5704 FFFC6466 FF FF FF FF FF FF FF FF     
   5705 FFFC646E FF FF FF FF FF FF FF FF     
   5706 FFFC6476 FF FF FF FF FF FF FF FF     
   5707 FFFC647E FF FF FF FF FF FF FF FF     
   5708 FFFC6486 FF FF FF FF FF FF FF FF     
   5709 FFFC648E FF FF FF FF FF FF FF FF     
   5710 FFFC6496 FF FF FF FF FF FF FF FF     
   5711 FFFC649E FF FF FF FF FF FF FF FF     
   5712 FFFC64A6 FF FF FF FF FF FF FF FF     
   5713 FFFC64AE FF FF FF FF FF FF FF FF     
   5714 FFFC64B6 FF FF FF FF FF FF FF FF     
   5715 FFFC64BE FF FF FF FF FF FF FF FF     
   5716 FFFC64C6 FF FF FF FF FF FF FF FF     
   5717 FFFC64CE FF FF FF FF FF FF FF FF     
   5718 FFFC64D6 FF FF FF FF FF FF FF FF     
   5719 FFFC64DE FF FF FF FF FF FF FF FF     
   5720 FFFC64E6 FF FF FF FF FF FF FF FF     
   5721 FFFC64EE FF FF FF FF FF FF FF FF     
   5722 FFFC64F6 FF FF FF FF FF FF FF FF     
   5723 FFFC64FE FF FF FF FF FF FF FF FF     
   5724 FFFC6506 FF FF FF FF FF FF FF FF     
   5725 FFFC650E FF FF FF FF FF FF FF FF     
   5726 FFFC6516 FF FF FF FF FF FF FF FF     
   5727 FFFC651E FF FF FF FF FF FF FF FF     
   5728 FFFC6526 FF FF FF FF FF FF FF FF     
   5729 FFFC652E FF FF FF FF FF FF FF FF     
   5730 FFFC6536 FF FF FF FF FF FF FF FF     
   5731 FFFC653E FF FF FF FF FF FF FF FF     
   5732 FFFC6546 FF FF FF FF FF FF FF FF     
   5733 FFFC654E FF FF FF FF FF FF FF FF     
   5734 FFFC6556 FF FF FF FF FF FF FF FF     
   5735 FFFC655E FF FF FF FF FF FF FF FF     
   5736 FFFC6566 FF FF FF FF FF FF FF FF     
   5737 FFFC656E FF FF FF FF FF FF FF FF     
   5738 FFFC6576 FF FF FF FF FF FF FF FF     
   5739 FFFC657E FF FF FF FF FF FF FF FF     
   5740 FFFC6586 FF FF FF FF FF FF FF FF     
   5741 FFFC658E FF FF FF FF FF FF FF FF     
   5742 FFFC6596 FF FF FF FF FF FF FF FF     
   5743 FFFC659E FF FF FF FF FF FF FF FF     
   5744 FFFC65A6 FF FF FF FF FF FF FF FF     
   5745 FFFC65AE FF FF FF FF FF FF FF FF     
   5746 FFFC65B6 FF FF FF FF FF FF FF FF     
   5747 FFFC65BE FF FF FF FF FF FF FF FF     
   5748 FFFC65C6 FF FF FF FF FF FF FF FF     
   5749 FFFC65CE FF FF FF FF FF FF FF FF     
   5750 FFFC65D6 FF FF FF FF FF FF FF FF     
   5751 FFFC65DE FF FF FF FF FF FF FF FF     
   5752 FFFC65E6 FF FF FF FF FF FF FF FF     
   5753 FFFC65EE FF FF FF FF FF FF FF FF     
   5754 FFFC65F6 FF FF FF FF FF FF FF FF     
   5755 FFFC65FE FF FF FF FF FF FF FF FF     
   5756 FFFC6606 FF FF FF FF FF FF FF FF     
   5757 FFFC660E FF FF FF FF FF FF FF FF     
   5758 FFFC6616 FF FF FF FF FF FF FF FF     
   5759 FFFC661E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 36
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5760 FFFC6626 FF FF FF FF FF FF FF FF     
   5761 FFFC662E FF FF FF FF FF FF FF FF     
   5762 FFFC6636 FF FF FF FF FF FF FF FF     
   5763 FFFC663E FF FF FF FF FF FF FF FF     
   5764 FFFC6646 FF FF FF FF FF FF FF FF     
   5765 FFFC664E FF FF FF FF FF FF FF FF     
   5766 FFFC6656 FF FF FF FF FF FF FF FF     
   5767 FFFC665E FF FF FF FF FF FF FF FF     
   5768 FFFC6666 FF FF FF FF FF FF FF FF     
   5769 FFFC666E FF FF FF FF FF FF FF FF     
   5770 FFFC6676 FF FF FF FF FF FF FF FF     
   5771 FFFC667E FF FF FF FF FF FF FF FF     
   5772 FFFC6686 FF FF FF FF FF FF FF FF     
   5773 FFFC668E FF FF FF FF FF FF FF FF     
   5774 FFFC6696 FF FF FF FF FF FF FF FF     
   5775 FFFC669E FF FF FF FF FF FF FF FF     
   5776 FFFC66A6 FF FF FF FF FF FF FF FF     
   5777 FFFC66AE FF FF FF FF FF FF FF FF     
   5778 FFFC66B6 FF FF FF FF FF FF FF FF     
   5779 FFFC66BE FF FF FF FF FF FF FF FF     
   5780 FFFC66C6 FF FF FF FF FF FF FF FF     
   5781 FFFC66CE FF FF FF FF FF FF FF FF     
   5782 FFFC66D6 FF FF FF FF FF FF FF FF     
   5783 FFFC66DE FF FF FF FF FF FF FF FF     
   5784 FFFC66E6 FF FF FF FF FF FF FF FF     
   5785 FFFC66EE FF FF FF FF FF FF FF FF     
   5786 FFFC66F6 FF FF FF FF FF FF FF FF     
   5787 FFFC66FE FF FF FF FF FF FF FF FF     
   5788 FFFC6706 FF FF FF FF FF FF FF FF     
   5789 FFFC670E FF FF FF FF FF FF FF FF     
   5790 FFFC6716 FF FF FF FF FF FF FF FF     
   5791 FFFC671E FF FF FF FF FF FF FF FF     
   5792 FFFC6726 FF FF FF FF FF FF FF FF     
   5793 FFFC672E FF FF FF FF FF FF FF FF     
   5794 FFFC6736 FF FF FF FF FF FF FF FF     
   5795 FFFC673E FF FF FF FF FF FF FF FF     
   5796 FFFC6746 FF FF FF FF FF FF FF FF     
   5797 FFFC674E FF FF FF FF FF FF FF FF     
   5798 FFFC6756 FF FF FF FF FF FF FF FF     
   5799 FFFC675E FF FF FF FF FF FF FF FF     
   5800 FFFC6766 FF FF FF FF FF FF FF FF     
   5801 FFFC676E FF FF FF FF FF FF FF FF     
   5802 FFFC6776 FF FF FF FF FF FF FF FF     
   5803 FFFC677E FF FF FF FF FF FF FF FF     
   5804 FFFC6786 FF FF FF FF FF FF FF FF     
   5805 FFFC678E FF FF FF FF FF FF FF FF     
   5806 FFFC6796 FF FF FF FF FF FF FF FF     
   5807 FFFC679E FF FF FF FF FF FF FF FF     
   5808 FFFC67A6 FF FF FF FF FF FF FF FF     
   5809 FFFC67AE FF FF FF FF FF FF FF FF     
   5810 FFFC67B6 FF FF FF FF FF FF FF FF     
   5811 FFFC67BE FF FF FF FF FF FF FF FF     
   5812 FFFC67C6 FF FF FF FF FF FF FF FF     
   5813 FFFC67CE FF FF FF FF FF FF FF FF     
   5814 FFFC67D6 FF FF FF FF FF FF FF FF     
   5815 FFFC67DE FF FF FF FF FF FF FF FF     
   5816 FFFC67E6 FF FF FF FF FF FF FF FF     
   5817 FFFC67EE FF FF FF FF FF FF FF FF     
   5818 FFFC67F6 FF FF FF FF FF FF FF FF     
   5819 FFFC67FE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 37
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5820 FFFC6806 FF FF FF FF FF FF FF FF     
   5821 FFFC680E FF FF FF FF FF FF FF FF     
   5822 FFFC6816 FF FF FF FF FF FF FF FF     
   5823 FFFC681E FF FF FF FF FF FF FF FF     
   5824 FFFC6826 FF FF FF FF FF FF FF FF     
   5825 FFFC682E FF FF FF FF FF FF FF FF     
   5826 FFFC6836 FF FF FF FF FF FF FF FF     
   5827 FFFC683E FF FF FF FF FF FF FF FF     
   5828 FFFC6846 FF FF FF FF FF FF FF FF     
   5829 FFFC684E FF FF FF FF FF FF FF FF     
   5830 FFFC6856 FF FF FF FF FF FF FF FF     
   5831 FFFC685E FF FF FF FF FF FF FF FF     
   5832 FFFC6866 FF FF FF FF FF FF FF FF     
   5833 FFFC686E FF FF FF FF FF FF FF FF     
   5834 FFFC6876 FF FF FF FF FF FF FF FF     
   5835 FFFC687E FF FF FF FF FF FF FF FF     
   5836 FFFC6886 FF FF FF FF FF FF FF FF     
   5837 FFFC688E FF FF FF FF FF FF FF FF     
   5838 FFFC6896 FF FF FF FF FF FF FF FF     
   5839 FFFC689E FF FF FF FF FF FF FF FF     
   5840 FFFC68A6 FF FF FF FF FF FF FF FF     
   5841 FFFC68AE FF FF FF FF FF FF FF FF     
   5842 FFFC68B6 FF FF FF FF FF FF FF FF     
   5843 FFFC68BE FF FF FF FF FF FF FF FF     
   5844 FFFC68C6 FF FF FF FF FF FF FF FF     
   5845 FFFC68CE FF FF FF FF FF FF FF FF     
   5846 FFFC68D6 FF FF FF FF FF FF FF FF     
   5847 FFFC68DE FF FF FF FF FF FF FF FF     
   5848 FFFC68E6 FF FF FF FF FF FF FF FF     
   5849 FFFC68EE FF FF FF FF FF FF FF FF     
   5850 FFFC68F6 FF FF FF FF FF FF FF FF     
   5851 FFFC68FE FF FF FF FF FF FF FF FF     
   5852 FFFC6906 FF FF FF FF FF FF FF FF     
   5853 FFFC690E FF FF FF FF FF FF FF FF     
   5854 FFFC6916 FF FF FF FF FF FF FF FF     
   5855 FFFC691E FF FF FF FF FF FF FF FF     
   5856 FFFC6926 FF FF FF FF FF FF FF FF     
   5857 FFFC692E FF FF FF FF FF FF FF FF     
   5858 FFFC6936 FF FF FF FF FF FF FF FF     
   5859 FFFC693E FF FF FF FF FF FF FF FF     
   5860 FFFC6946 FF FF FF FF FF FF FF FF     
   5861 FFFC694E FF FF FF FF FF FF FF FF     
   5862 FFFC6956 FF FF FF FF FF FF FF FF     
   5863 FFFC695E FF FF FF FF FF FF FF FF     
   5864 FFFC6966 FF FF FF FF FF FF FF FF     
   5865 FFFC696E FF FF FF FF FF FF FF FF     
   5866 FFFC6976 FF FF FF FF FF FF FF FF     
   5867 FFFC697E FF FF FF FF FF FF FF FF     
   5868 FFFC6986 FF FF FF FF FF FF FF FF     
   5869 FFFC698E FF FF FF FF FF FF FF FF     
   5870 FFFC6996 FF FF FF FF FF FF FF FF     
   5871 FFFC699E FF FF FF FF FF FF FF FF     
   5872 FFFC69A6 FF FF FF FF FF FF FF FF     
   5873 FFFC69AE FF FF FF FF FF FF FF FF     
   5874 FFFC69B6 FF FF FF FF FF FF FF FF     
   5875 FFFC69BE FF FF FF FF FF FF FF FF     
   5876 FFFC69C6 FF FF FF FF FF FF FF FF     
   5877 FFFC69CE FF FF FF FF FF FF FF FF     
   5878 FFFC69D6 FF FF FF FF FF FF FF FF     
   5879 FFFC69DE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 38
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5880 FFFC69E6 FF FF FF FF FF FF FF FF     
   5881 FFFC69EE FF FF FF FF FF FF FF FF     
   5882 FFFC69F6 FF FF FF FF FF FF FF FF     
   5883 FFFC69FE FF FF FF FF FF FF FF FF     
   5884 FFFC6A06 FF FF FF FF FF FF FF FF     
   5885 FFFC6A0E FF FF FF FF FF FF FF FF     
   5886 FFFC6A16 FF FF FF FF FF FF FF FF     
   5887 FFFC6A1E FF FF FF FF FF FF FF FF     
   5888 FFFC6A26 FF FF FF FF FF FF FF FF     
   5889 FFFC6A2E FF FF FF FF FF FF FF FF     
   5890 FFFC6A36 FF FF FF FF FF FF FF FF     
   5891 FFFC6A3E FF FF FF FF FF FF FF FF     
   5892 FFFC6A46 FF FF FF FF FF FF FF FF     
   5893 FFFC6A4E FF FF FF FF FF FF FF FF     
   5894 FFFC6A56 FF FF FF FF FF FF FF FF     
   5895 FFFC6A5E FF FF FF FF FF FF FF FF     
   5896 FFFC6A66 FF FF FF FF FF FF FF FF     
   5897 FFFC6A6E FF FF FF FF FF FF FF FF     
   5898 FFFC6A76 FF FF FF FF FF FF FF FF     
   5899 FFFC6A7E FF FF FF FF FF FF FF FF     
   5900 FFFC6A86 FF FF FF FF FF FF FF FF     
   5901 FFFC6A8E FF FF FF FF FF FF FF FF     
   5902 FFFC6A96 FF FF FF FF FF FF FF FF     
   5903 FFFC6A9E FF FF FF FF FF FF FF FF     
   5904 FFFC6AA6 FF FF FF FF FF FF FF FF     
   5905 FFFC6AAE FF FF FF FF FF FF FF FF     
   5906 FFFC6AB6 FF FF FF FF FF FF FF FF     
   5907 FFFC6ABE FF FF FF FF FF FF FF FF     
   5908 FFFC6AC6 FF FF FF FF FF FF FF FF     
   5909 FFFC6ACE FF FF FF FF FF FF FF FF     
   5910 FFFC6AD6 FF FF FF FF FF FF FF FF     
   5911 FFFC6ADE FF FF FF FF FF FF FF FF     
   5912 FFFC6AE6 FF FF FF FF FF FF FF FF     
   5913 FFFC6AEE FF FF FF FF FF FF FF FF     
   5914 FFFC6AF6 FF FF FF FF FF FF FF FF     
   5915 FFFC6AFE FF FF FF FF FF FF FF FF     
   5916 FFFC6B06 FF FF FF FF FF FF FF FF     
   5917 FFFC6B0E FF FF FF FF FF FF FF FF     
   5918 FFFC6B16 FF FF FF FF FF FF FF FF     
   5919 FFFC6B1E FF FF FF FF FF FF FF FF     
   5920 FFFC6B26 FF FF FF FF FF FF FF FF     
   5921 FFFC6B2E FF FF FF FF FF FF FF FF     
   5922 FFFC6B36 FF FF FF FF FF FF FF FF     
   5923 FFFC6B3E FF FF FF FF FF FF FF FF     
   5924 FFFC6B46 FF FF FF FF FF FF FF FF     
   5925 FFFC6B4E FF FF FF FF FF FF FF FF     
   5926 FFFC6B56 FF FF FF FF FF FF FF FF     
   5927 FFFC6B5E FF FF FF FF FF FF FF FF     
   5928 FFFC6B66 FF FF FF FF FF FF FF FF     
   5929 FFFC6B6E FF FF FF FF FF FF FF FF     
   5930 FFFC6B76 FF FF FF FF FF FF FF FF     
   5931 FFFC6B7E FF FF FF FF FF FF FF FF     
   5932 FFFC6B86 FF FF FF FF FF FF FF FF     
   5933 FFFC6B8E FF FF FF FF FF FF FF FF     
   5934 FFFC6B96 FF FF FF FF FF FF FF FF     
   5935 FFFC6B9E FF FF FF FF FF FF FF FF     
   5936 FFFC6BA6 FF FF FF FF FF FF FF FF     
   5937 FFFC6BAE FF FF FF FF FF FF FF FF     
   5938 FFFC6BB6 FF FF FF FF FF FF FF FF     
   5939 FFFC6BBE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 39
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   5940 FFFC6BC6 FF FF FF FF FF FF FF FF     
   5941 FFFC6BCE FF FF FF FF FF FF FF FF     
   5942 FFFC6BD6 FF FF FF FF FF FF FF FF     
   5943 FFFC6BDE FF FF FF FF FF FF FF FF     
   5944 FFFC6BE6 FF FF FF FF FF FF FF FF     
   5945 FFFC6BEE FF FF FF FF FF FF FF FF     
   5946 FFFC6BF6 FF FF FF FF FF FF FF FF     
   5947 FFFC6BFE FF FF FF FF FF FF FF FF     
   5948 FFFC6C06 FF FF FF FF FF FF FF FF     
   5949 FFFC6C0E FF FF FF FF FF FF FF FF     
   5950 FFFC6C16 FF FF FF FF FF FF FF FF     
   5951 FFFC6C1E FF FF FF FF FF FF FF FF     
   5952 FFFC6C26 FF FF FF FF FF FF FF FF     
   5953 FFFC6C2E FF FF FF FF FF FF FF FF     
   5954 FFFC6C36 FF FF FF FF FF FF FF FF     
   5955 FFFC6C3E FF FF FF FF FF FF FF FF     
   5956 FFFC6C46 FF FF FF FF FF FF FF FF     
   5957 FFFC6C4E FF FF FF FF FF FF FF FF     
   5958 FFFC6C56 FF FF FF FF FF FF FF FF     
   5959 FFFC6C5E FF FF FF FF FF FF FF FF     
   5960 FFFC6C66 FF FF FF FF FF FF FF FF     
   5961 FFFC6C6E FF FF FF FF FF FF FF FF     
   5962 FFFC6C76 FF FF FF FF FF FF FF FF     
   5963 FFFC6C7E FF FF FF FF FF FF FF FF     
   5964 FFFC6C86 FF FF FF FF FF FF FF FF     
   5965 FFFC6C8E FF FF FF FF FF FF FF FF     
   5966 FFFC6C96 FF FF FF FF FF FF FF FF     
   5967 FFFC6C9E FF FF FF FF FF FF FF FF     
   5968 FFFC6CA6 FF FF FF FF FF FF FF FF     
   5969 FFFC6CAE FF FF FF FF FF FF FF FF     
   5970 FFFC6CB6 FF FF FF FF FF FF FF FF     
   5971 FFFC6CBE FF FF FF FF FF FF FF FF     
   5972 FFFC6CC6 FF FF FF FF FF FF FF FF     
   5973 FFFC6CCE FF FF FF FF FF FF FF FF     
   5974 FFFC6CD6 FF FF FF FF FF FF FF FF     
   5975 FFFC6CDE FF FF FF FF FF FF FF FF     
   5976 FFFC6CE6 FF FF FF FF FF FF FF FF     
   5977 FFFC6CEE FF FF FF FF FF FF FF FF     
   5978 FFFC6CF6 FF FF FF FF FF FF FF FF     
   5979 FFFC6CFE FF FF FF FF FF FF FF FF     
   5980 FFFC6D06 FF FF FF FF FF FF FF FF     
   5981 FFFC6D0E FF FF FF FF FF FF FF FF     
   5982 FFFC6D16 FF FF FF FF FF FF FF FF     
   5983 FFFC6D1E FF FF FF FF FF FF FF FF     
   5984 FFFC6D26 FF FF FF FF FF FF FF FF     
   5985 FFFC6D2E FF FF FF FF FF FF FF FF     
   5986 FFFC6D36 FF FF FF FF FF FF FF FF     
   5987 FFFC6D3E FF FF FF FF FF FF FF FF     
   5988 FFFC6D46 FF FF FF FF FF FF FF FF     
   5989 FFFC6D4E FF FF FF FF FF FF FF FF     
   5990 FFFC6D56 FF FF FF FF FF FF FF FF     
   5991 FFFC6D5E FF FF FF FF FF FF FF FF     
   5992 FFFC6D66 FF FF FF FF FF FF FF FF     
   5993 FFFC6D6E FF FF FF FF FF FF FF FF     
   5994 FFFC6D76 FF FF FF FF FF FF FF FF     
   5995 FFFC6D7E FF FF FF FF FF FF FF FF     
   5996 FFFC6D86 FF FF FF FF FF FF FF FF     
   5997 FFFC6D8E FF FF FF FF FF FF FF FF     
   5998 FFFC6D96 FF FF FF FF FF FF FF FF     
   5999 FFFC6D9E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 40
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6000 FFFC6DA6 FF FF FF FF FF FF FF FF     
   6001 FFFC6DAE FF FF FF FF FF FF FF FF     
   6002 FFFC6DB6 FF FF FF FF FF FF FF FF     
   6003 FFFC6DBE FF FF FF FF FF FF FF FF     
   6004 FFFC6DC6 FF FF FF FF FF FF FF FF     
   6005 FFFC6DCE FF FF FF FF FF FF FF FF     
   6006 FFFC6DD6 FF FF FF FF FF FF FF FF     
   6007 FFFC6DDE FF FF FF FF FF FF FF FF     
   6008 FFFC6DE6 FF FF FF FF FF FF FF FF     
   6009 FFFC6DEE FF FF FF FF FF FF FF FF     
   6010 FFFC6DF6 FF FF FF FF FF FF FF FF     
   6011 FFFC6DFE FF FF FF FF FF FF FF FF     
   6012 FFFC6E06 FF FF FF FF FF FF FF FF     
   6013 FFFC6E0E FF FF FF FF FF FF FF FF     
   6014 FFFC6E16 FF FF FF FF FF FF FF FF     
   6015 FFFC6E1E FF FF FF FF FF FF FF FF     
   6016 FFFC6E26 FF FF FF FF FF FF FF FF     
   6017 FFFC6E2E FF FF FF FF FF FF FF FF     
   6018 FFFC6E36 FF FF FF FF FF FF FF FF     
   6019 FFFC6E3E FF FF FF FF FF FF FF FF     
   6020 FFFC6E46 FF FF FF FF FF FF FF FF     
   6021 FFFC6E4E FF FF FF FF FF FF FF FF     
   6022 FFFC6E56 FF FF FF FF FF FF FF FF     
   6023 FFFC6E5E FF FF FF FF FF FF FF FF     
   6024 FFFC6E66 FF FF FF FF FF FF FF FF     
   6025 FFFC6E6E FF FF FF FF FF FF FF FF     
   6026 FFFC6E76 FF FF FF FF FF FF FF FF     
   6027 FFFC6E7E FF FF FF FF FF FF FF FF     
   6028 FFFC6E86 FF FF FF FF FF FF FF FF     
   6029 FFFC6E8E FF FF FF FF FF FF FF FF     
   6030 FFFC6E96 FF FF FF FF FF FF FF FF     
   6031 FFFC6E9E FF FF FF FF FF FF FF FF     
   6032 FFFC6EA6 FF FF FF FF FF FF FF FF     
   6033 FFFC6EAE FF FF FF FF FF FF FF FF     
   6034 FFFC6EB6 FF FF FF FF FF FF FF FF     
   6035 FFFC6EBE FF FF FF FF FF FF FF FF     
   6036 FFFC6EC6 FF FF FF FF FF FF FF FF     
   6037 FFFC6ECE FF FF FF FF FF FF FF FF     
   6038 FFFC6ED6 FF FF FF FF FF FF FF FF     
   6039 FFFC6EDE FF FF FF FF FF FF FF FF     
   6040 FFFC6EE6 FF FF FF FF FF FF FF FF     
   6041 FFFC6EEE FF FF FF FF FF FF FF FF     
   6042 FFFC6EF6 FF FF FF FF FF FF FF FF     
   6043 FFFC6EFE FF FF FF FF FF FF FF FF     
   6044 FFFC6F06 FF FF FF FF FF FF FF FF     
   6045 FFFC6F0E FF FF FF FF FF FF FF FF     
   6046 FFFC6F16 FF FF FF FF FF FF FF FF     
   6047 FFFC6F1E FF FF FF FF FF FF FF FF     
   6048 FFFC6F26 FF FF FF FF FF FF FF FF     
   6049 FFFC6F2E FF FF FF FF FF FF FF FF     
   6050 FFFC6F36 FF FF FF FF FF FF FF FF     
   6051 FFFC6F3E FF FF FF FF FF FF FF FF     
   6052 FFFC6F46 FF FF FF FF FF FF FF FF     
   6053 FFFC6F4E FF FF FF FF FF FF FF FF     
   6054 FFFC6F56 FF FF FF FF FF FF FF FF     
   6055 FFFC6F5E FF FF FF FF FF FF FF FF     
   6056 FFFC6F66 FF FF FF FF FF FF FF FF     
   6057 FFFC6F6E FF FF FF FF FF FF FF FF     
   6058 FFFC6F76 FF FF FF FF FF FF FF FF     
   6059 FFFC6F7E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 41
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6060 FFFC6F86 FF FF FF FF FF FF FF FF     
   6061 FFFC6F8E FF FF FF FF FF FF FF FF     
   6062 FFFC6F96 FF FF FF FF FF FF FF FF     
   6063 FFFC6F9E FF FF FF FF FF FF FF FF     
   6064 FFFC6FA6 FF FF FF FF FF FF FF FF     
   6065 FFFC6FAE FF FF FF FF FF FF FF FF     
   6066 FFFC6FB6 FF FF FF FF FF FF FF FF     
   6067 FFFC6FBE FF FF FF FF FF FF FF FF     
   6068 FFFC6FC6 FF FF FF FF FF FF FF FF     
   6069 FFFC6FCE FF FF FF FF FF FF FF FF     
   6070 FFFC6FD6 FF FF FF FF FF FF FF FF     
   6071 FFFC6FDE FF FF FF FF FF FF FF FF     
   6072 FFFC6FE6 FF FF FF FF FF FF FF FF     
   6073 FFFC6FEE FF FF FF FF FF FF FF FF     
   6074 FFFC6FF6 FF FF FF FF FF FF FF FF     
   6075 FFFC6FFE FF FF FF FF FF FF FF FF     
   6076 FFFC7006 FF FF FF FF FF FF FF FF     
   6077 FFFC700E FF FF FF FF FF FF FF FF     
   6078 FFFC7016 FF FF FF FF FF FF FF FF     
   6079 FFFC701E FF FF FF FF FF FF FF FF     
   6080 FFFC7026 FF FF FF FF FF FF FF FF     
   6081 FFFC702E FF FF FF FF FF FF FF FF     
   6082 FFFC7036 FF FF FF FF FF FF FF FF     
   6083 FFFC703E FF FF FF FF FF FF FF FF     
   6084 FFFC7046 FF FF FF FF FF FF FF FF     
   6085 FFFC704E FF FF FF FF FF FF FF FF     
   6086 FFFC7056 FF FF FF FF FF FF FF FF     
   6087 FFFC705E FF FF FF FF FF FF FF FF     
   6088 FFFC7066 FF FF FF FF FF FF FF FF     
   6089 FFFC706E FF FF FF FF FF FF FF FF     
   6090 FFFC7076 FF FF FF FF FF FF FF FF     
   6091 FFFC707E FF FF FF FF FF FF FF FF     
   6092 FFFC7086 FF FF FF FF FF FF FF FF     
   6093 FFFC708E FF FF FF FF FF FF FF FF     
   6094 FFFC7096 FF FF FF FF FF FF FF FF     
   6095 FFFC709E FF FF FF FF FF FF FF FF     
   6096 FFFC70A6 FF FF FF FF FF FF FF FF     
   6097 FFFC70AE FF FF FF FF FF FF FF FF     
   6098 FFFC70B6 FF FF FF FF FF FF FF FF     
   6099 FFFC70BE FF FF FF FF FF FF FF FF     
   6100 FFFC70C6 FF FF FF FF FF FF FF FF     
   6101 FFFC70CE FF FF FF FF FF FF FF FF     
   6102 FFFC70D6 FF FF FF FF FF FF FF FF     
   6103 FFFC70DE FF FF FF FF FF FF FF FF     
   6104 FFFC70E6 FF FF FF FF FF FF FF FF     
   6105 FFFC70EE FF FF FF FF FF FF FF FF     
   6106 FFFC70F6 FF FF FF FF FF FF FF FF     
   6107 FFFC70FE FF FF FF FF FF FF FF FF     
   6108 FFFC7106 FF FF FF FF FF FF FF FF     
   6109 FFFC710E FF FF FF FF FF FF FF FF     
   6110 FFFC7116 FF FF FF FF FF FF FF FF     
   6111 FFFC711E FF FF FF FF FF FF FF FF     
   6112 FFFC7126 FF FF FF FF FF FF FF FF     
   6113 FFFC712E FF FF FF FF FF FF FF FF     
   6114 FFFC7136 FF FF FF FF FF FF FF FF     
   6115 FFFC713E FF FF FF FF FF FF FF FF     
   6116 FFFC7146 FF FF FF FF FF FF FF FF     
   6117 FFFC714E FF FF FF FF FF FF FF FF     
   6118 FFFC7156 FF FF FF FF FF FF FF FF     
   6119 FFFC715E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 42
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6120 FFFC7166 FF FF FF FF FF FF FF FF     
   6121 FFFC716E FF FF FF FF FF FF FF FF     
   6122 FFFC7176 FF FF FF FF FF FF FF FF     
   6123 FFFC717E FF FF FF FF FF FF FF FF     
   6124 FFFC7186 FF FF FF FF FF FF FF FF     
   6125 FFFC718E FF FF FF FF FF FF FF FF     
   6126 FFFC7196 FF FF FF FF FF FF FF FF     
   6127 FFFC719E FF FF FF FF FF FF FF FF     
   6128 FFFC71A6 FF FF FF FF FF FF FF FF     
   6129 FFFC71AE FF FF FF FF FF FF FF FF     
   6130 FFFC71B6 FF FF FF FF FF FF FF FF     
   6131 FFFC71BE FF FF FF FF FF FF FF FF     
   6132 FFFC71C6 FF FF FF FF FF FF FF FF     
   6133 FFFC71CE FF FF FF FF FF FF FF FF     
   6134 FFFC71D6 FF FF FF FF FF FF FF FF     
   6135 FFFC71DE FF FF FF FF FF FF FF FF     
   6136 FFFC71E6 FF FF FF FF FF FF FF FF     
   6137 FFFC71EE FF FF FF FF FF FF FF FF     
   6138 FFFC71F6 FF FF FF FF FF FF FF FF     
   6139 FFFC71FE FF FF FF FF FF FF FF FF     
   6140 FFFC7206 FF FF FF FF FF FF FF FF     
   6141 FFFC720E FF FF FF FF FF FF FF FF     
   6142 FFFC7216 FF FF FF FF FF FF FF FF     
   6143 FFFC721E FF FF FF FF FF FF FF FF     
   6144 FFFC7226 FF FF FF FF FF FF FF FF     
   6145 FFFC722E FF FF FF FF FF FF FF FF     
   6146 FFFC7236 FF FF FF FF FF FF FF FF     
   6147 FFFC723E FF FF FF FF FF FF FF FF     
   6148 FFFC7246 FF FF FF FF FF FF FF FF     
   6149 FFFC724E FF FF FF FF FF FF FF FF     
   6150 FFFC7256 FF FF FF FF FF FF FF FF     
   6151 FFFC725E FF FF FF FF FF FF FF FF     
   6152 FFFC7266 FF FF FF FF FF FF FF FF     
   6153 FFFC726E FF FF FF FF FF FF FF FF     
   6154 FFFC7276 FF FF FF FF FF FF FF FF     
   6155 FFFC727E FF FF FF FF FF FF FF FF     
   6156 FFFC7286 FF FF FF FF FF FF FF FF     
   6157 FFFC728E FF FF FF FF FF FF FF FF     
   6158 FFFC7296 FF FF FF FF FF FF FF FF     
   6159 FFFC729E FF FF FF FF FF FF FF FF     
   6160 FFFC72A6 FF FF FF FF FF FF FF FF     
   6161 FFFC72AE FF FF FF FF FF FF FF FF     
   6162 FFFC72B6 FF FF FF FF FF FF FF FF     
   6163 FFFC72BE FF FF FF FF FF FF FF FF     
   6164 FFFC72C6 FF FF FF FF FF FF FF FF     
   6165 FFFC72CE FF FF FF FF FF FF FF FF     
   6166 FFFC72D6 FF FF FF FF FF FF FF FF     
   6167 FFFC72DE FF FF FF FF FF FF FF FF     
   6168 FFFC72E6 FF FF FF FF FF FF FF FF     
   6169 FFFC72EE FF FF FF FF FF FF FF FF     
   6170 FFFC72F6 FF FF FF FF FF FF FF FF     
   6171 FFFC72FE FF FF FF FF FF FF FF FF     
   6172 FFFC7306 FF FF FF FF FF FF FF FF     
   6173 FFFC730E FF FF FF FF FF FF FF FF     
   6174 FFFC7316 FF FF FF FF FF FF FF FF     
   6175 FFFC731E FF FF FF FF FF FF FF FF     
   6176 FFFC7326 FF FF FF FF FF FF FF FF     
   6177 FFFC732E FF FF FF FF FF FF FF FF     
   6178 FFFC7336 FF FF FF FF FF FF FF FF     
   6179 FFFC733E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 43
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6180 FFFC7346 FF FF FF FF FF FF FF FF     
   6181 FFFC734E FF FF FF FF FF FF FF FF     
   6182 FFFC7356 FF FF FF FF FF FF FF FF     
   6183 FFFC735E FF FF FF FF FF FF FF FF     
   6184 FFFC7366 FF FF FF FF FF FF FF FF     
   6185 FFFC736E FF FF FF FF FF FF FF FF     
   6186 FFFC7376 FF FF FF FF FF FF FF FF     
   6187 FFFC737E FF FF FF FF FF FF FF FF     
   6188 FFFC7386 FF FF FF FF FF FF FF FF     
   6189 FFFC738E FF FF FF FF FF FF FF FF     
   6190 FFFC7396 FF FF FF FF FF FF FF FF     
   6191 FFFC739E FF FF FF FF FF FF FF FF     
   6192 FFFC73A6 FF FF FF FF FF FF FF FF     
   6193 FFFC73AE FF FF FF FF FF FF FF FF     
   6194 FFFC73B6 FF FF FF FF FF FF FF FF     
   6195 FFFC73BE FF FF FF FF FF FF FF FF     
   6196 FFFC73C6 FF FF FF FF FF FF FF FF     
   6197 FFFC73CE FF FF FF FF FF FF FF FF     
   6198 FFFC73D6 FF FF FF FF FF FF FF FF     
   6199 FFFC73DE FF FF FF FF FF FF FF FF     
   6200 FFFC73E6 FF FF FF FF FF FF FF FF     
   6201 FFFC73EE FF FF FF FF FF FF FF FF     
   6202 FFFC73F6 FF FF FF FF FF FF FF FF     
   6203 FFFC73FE FF FF FF FF FF FF FF FF     
   6204 FFFC7406 FF FF FF FF FF FF FF FF     
   6205 FFFC740E FF FF FF FF FF FF FF FF     
   6206 FFFC7416 FF FF FF FF FF FF FF FF     
   6207 FFFC741E FF FF FF FF FF FF FF FF     
   6208 FFFC7426 FF FF FF FF FF FF FF FF     
   6209 FFFC742E FF FF FF FF FF FF FF FF     
   6210 FFFC7436 FF FF FF FF FF FF FF FF     
   6211 FFFC743E FF FF FF FF FF FF FF FF     
   6212 FFFC7446 FF FF FF FF FF FF FF FF     
   6213 FFFC744E FF FF FF FF FF FF FF FF     
   6214 FFFC7456 FF FF FF FF FF FF FF FF     
   6215 FFFC745E FF FF FF FF FF FF FF FF     
   6216 FFFC7466 FF FF FF FF FF FF FF FF     
   6217 FFFC746E FF FF FF FF FF FF FF FF     
   6218 FFFC7476 FF FF FF FF FF FF FF FF     
   6219 FFFC747E FF FF FF FF FF FF FF FF     
   6220 FFFC7486 FF FF FF FF FF FF FF FF     
   6221 FFFC748E FF FF FF FF FF FF FF FF     
   6222 FFFC7496 FF FF FF FF FF FF FF FF     
   6223 FFFC749E FF FF FF FF FF FF FF FF     
   6224 FFFC74A6 FF FF FF FF FF FF FF FF     
   6225 FFFC74AE FF FF FF FF FF FF FF FF     
   6226 FFFC74B6 FF FF FF FF FF FF FF FF     
   6227 FFFC74BE FF FF FF FF FF FF FF FF     
   6228 FFFC74C6 FF FF FF FF FF FF FF FF     
   6229 FFFC74CE FF FF FF FF FF FF FF FF     
   6230 FFFC74D6 FF FF FF FF FF FF FF FF     
   6231 FFFC74DE FF FF FF FF FF FF FF FF     
   6232 FFFC74E6 FF FF FF FF FF FF FF FF     
   6233 FFFC74EE FF FF FF FF FF FF FF FF     
   6234 FFFC74F6 FF FF FF FF FF FF FF FF     
   6235 FFFC74FE FF FF FF FF FF FF FF FF     
   6236 FFFC7506 FF FF FF FF FF FF FF FF     
   6237 FFFC750E FF FF FF FF FF FF FF FF     
   6238 FFFC7516 FF FF FF FF FF FF FF FF     
   6239 FFFC751E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 44
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6240 FFFC7526 FF FF FF FF FF FF FF FF     
   6241 FFFC752E FF FF FF FF FF FF FF FF     
   6242 FFFC7536 FF FF FF FF FF FF FF FF     
   6243 FFFC753E FF FF FF FF FF FF FF FF     
   6244 FFFC7546 FF FF FF FF FF FF FF FF     
   6245 FFFC754E FF FF FF FF FF FF FF FF     
   6246 FFFC7556 FF FF FF FF FF FF FF FF     
   6247 FFFC755E FF FF FF FF FF FF FF FF     
   6248 FFFC7566 FF FF FF FF FF FF FF FF     
   6249 FFFC756E FF FF FF FF FF FF FF FF     
   6250 FFFC7576 FF FF FF FF FF FF FF FF     
   6251 FFFC757E FF FF FF FF FF FF FF FF     
   6252 FFFC7586 FF FF FF FF FF FF FF FF     
   6253 FFFC758E FF FF FF FF FF FF FF FF     
   6254 FFFC7596 FF FF FF FF FF FF FF FF     
   6255 FFFC759E FF FF FF FF FF FF FF FF     
   6256 FFFC75A6 FF FF FF FF FF FF FF FF     
   6257 FFFC75AE FF FF FF FF FF FF FF FF     
   6258 FFFC75B6 FF FF FF FF FF FF FF FF     
   6259 FFFC75BE FF FF FF FF FF FF FF FF     
   6260 FFFC75C6 FF FF FF FF FF FF FF FF     
   6261 FFFC75CE FF FF FF FF FF FF FF FF     
   6262 FFFC75D6 FF FF FF FF FF FF FF FF     
   6263 FFFC75DE FF FF FF FF FF FF FF FF     
   6264 FFFC75E6 FF FF FF FF FF FF FF FF     
   6265 FFFC75EE FF FF FF FF FF FF FF FF     
   6266 FFFC75F6 FF FF FF FF FF FF FF FF     
   6267 FFFC75FE FF FF FF FF FF FF FF FF     
   6268 FFFC7606 FF FF FF FF FF FF FF FF     
   6269 FFFC760E FF FF FF FF FF FF FF FF     
   6270 FFFC7616 FF FF FF FF FF FF FF FF     
   6271 FFFC761E FF FF FF FF FF FF FF FF     
   6272 FFFC7626 FF FF FF FF FF FF FF FF     
   6273 FFFC762E FF FF FF FF FF FF FF FF     
   6274 FFFC7636 FF FF FF FF FF FF FF FF     
   6275 FFFC763E FF FF FF FF FF FF FF FF     
   6276 FFFC7646 FF FF FF FF FF FF FF FF     
   6277 FFFC764E FF FF FF FF FF FF FF FF     
   6278 FFFC7656 FF FF FF FF FF FF FF FF     
   6279 FFFC765E FF FF FF FF FF FF FF FF     
   6280 FFFC7666 FF FF FF FF FF FF FF FF     
   6281 FFFC766E FF FF FF FF FF FF FF FF     
   6282 FFFC7676 FF FF FF FF FF FF FF FF     
   6283 FFFC767E FF FF FF FF FF FF FF FF     
   6284 FFFC7686 FF FF FF FF FF FF FF FF     
   6285 FFFC768E FF FF FF FF FF FF FF FF     
   6286 FFFC7696 FF FF FF FF FF FF FF FF     
   6287 FFFC769E FF FF FF FF FF FF FF FF     
   6288 FFFC76A6 FF FF FF FF FF FF FF FF     
   6289 FFFC76AE FF FF FF FF FF FF FF FF     
   6290 FFFC76B6 FF FF FF FF FF FF FF FF     
   6291 FFFC76BE FF FF FF FF FF FF FF FF     
   6292 FFFC76C6 FF FF FF FF FF FF FF FF     
   6293 FFFC76CE FF FF FF FF FF FF FF FF     
   6294 FFFC76D6 FF FF FF FF FF FF FF FF     
   6295 FFFC76DE FF FF FF FF FF FF FF FF     
   6296 FFFC76E6 FF FF FF FF FF FF FF FF     
   6297 FFFC76EE FF FF FF FF FF FF FF FF     
   6298 FFFC76F6 FF FF FF FF FF FF FF FF     
   6299 FFFC76FE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 45
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6300 FFFC7706 FF FF FF FF FF FF FF FF     
   6301 FFFC770E FF FF FF FF FF FF FF FF     
   6302 FFFC7716 FF FF FF FF FF FF FF FF     
   6303 FFFC771E FF FF FF FF FF FF FF FF     
   6304 FFFC7726 FF FF FF FF FF FF FF FF     
   6305 FFFC772E FF FF FF FF FF FF FF FF     
   6306 FFFC7736 FF FF FF FF FF FF FF FF     
   6307 FFFC773E FF FF FF FF FF FF FF FF     
   6308 FFFC7746 FF FF FF FF FF FF FF FF     
   6309 FFFC774E FF FF FF FF FF FF FF FF     
   6310 FFFC7756 FF FF FF FF FF FF FF FF     
   6311 FFFC775E FF FF FF FF FF FF FF FF     
   6312 FFFC7766 FF FF FF FF FF FF FF FF     
   6313 FFFC776E FF FF FF FF FF FF FF FF     
   6314 FFFC7776 FF FF FF FF FF FF FF FF     
   6315 FFFC777E FF FF FF FF FF FF FF FF     
   6316 FFFC7786 FF FF FF FF FF FF FF FF     
   6317 FFFC778E FF FF FF FF FF FF FF FF     
   6318 FFFC7796 FF FF FF FF FF FF FF FF     
   6319 FFFC779E FF FF FF FF FF FF FF FF     
   6320 FFFC77A6 FF FF FF FF FF FF FF FF     
   6321 FFFC77AE FF FF FF FF FF FF FF FF     
   6322 FFFC77B6 FF FF FF FF FF FF FF FF     
   6323 FFFC77BE FF FF FF FF FF FF FF FF     
   6324 FFFC77C6 FF FF FF FF FF FF FF FF     
   6325 FFFC77CE FF FF FF FF FF FF FF FF     
   6326 FFFC77D6 FF FF FF FF FF FF FF FF     
   6327 FFFC77DE FF FF FF FF FF FF FF FF     
   6328 FFFC77E6 FF FF FF FF FF FF FF FF     
   6329 FFFC77EE FF FF FF FF FF FF FF FF     
   6330 FFFC77F6 FF FF FF FF FF FF FF FF     
   6331 FFFC77FE FF FF FF FF FF FF FF FF     
   6332 FFFC7806 FF FF FF FF FF FF FF FF     
   6333 FFFC780E FF FF FF FF FF FF FF FF     
   6334 FFFC7816 FF FF FF FF FF FF FF FF     
   6335 FFFC781E FF FF FF FF FF FF FF FF     
   6336 FFFC7826 FF FF FF FF FF FF FF FF     
   6337 FFFC782E FF FF FF FF FF FF FF FF     
   6338 FFFC7836 FF FF FF FF FF FF FF FF     
   6339 FFFC783E FF FF FF FF FF FF FF FF     
   6340 FFFC7846 FF FF FF FF FF FF FF FF     
   6341 FFFC784E FF FF FF FF FF FF FF FF     
   6342 FFFC7856 FF FF FF FF FF FF FF FF     
   6343 FFFC785E FF FF FF FF FF FF FF FF     
   6344 FFFC7866 FF FF FF FF FF FF FF FF     
   6345 FFFC786E FF FF FF FF FF FF FF FF     
   6346 FFFC7876 FF FF FF FF FF FF FF FF     
   6347 FFFC787E FF FF FF FF FF FF FF FF     
   6348 FFFC7886 FF FF FF FF FF FF FF FF     
   6349 FFFC788E FF FF FF FF FF FF FF FF     
   6350 FFFC7896 FF FF FF FF FF FF FF FF     
   6351 FFFC789E FF FF FF FF FF FF FF FF     
   6352 FFFC78A6 FF FF FF FF FF FF FF FF     
   6353 FFFC78AE FF FF FF FF FF FF FF FF     
   6354 FFFC78B6 FF FF FF FF FF FF FF FF     
   6355 FFFC78BE FF FF FF FF FF FF FF FF     
   6356 FFFC78C6 FF FF FF FF FF FF FF FF     
   6357 FFFC78CE FF FF FF FF FF FF FF FF     
   6358 FFFC78D6 FF FF FF FF FF FF FF FF     
   6359 FFFC78DE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 46
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6360 FFFC78E6 FF FF FF FF FF FF FF FF     
   6361 FFFC78EE FF FF FF FF FF FF FF FF     
   6362 FFFC78F6 FF FF FF FF FF FF FF FF     
   6363 FFFC78FE FF FF FF FF FF FF FF FF     
   6364 FFFC7906 FF FF FF FF FF FF FF FF     
   6365 FFFC790E FF FF FF FF FF FF FF FF     
   6366 FFFC7916 FF FF FF FF FF FF FF FF     
   6367 FFFC791E FF FF FF FF FF FF FF FF     
   6368 FFFC7926 FF FF FF FF FF FF FF FF     
   6369 FFFC792E FF FF FF FF FF FF FF FF     
   6370 FFFC7936 FF FF FF FF FF FF FF FF     
   6371 FFFC793E FF FF FF FF FF FF FF FF     
   6372 FFFC7946 FF FF FF FF FF FF FF FF     
   6373 FFFC794E FF FF FF FF FF FF FF FF     
   6374 FFFC7956 FF FF FF FF FF FF FF FF     
   6375 FFFC795E FF FF FF FF FF FF FF FF     
   6376 FFFC7966 FF FF FF FF FF FF FF FF     
   6377 FFFC796E FF FF FF FF FF FF FF FF     
   6378 FFFC7976 FF FF FF FF FF FF FF FF     
   6379 FFFC797E FF FF FF FF FF FF FF FF     
   6380 FFFC7986 FF FF FF FF FF FF FF FF     
   6381 FFFC798E FF FF FF FF FF FF FF FF     
   6382 FFFC7996 FF FF FF FF FF FF FF FF     
   6383 FFFC799E FF FF FF FF FF FF FF FF     
   6384 FFFC79A6 FF FF FF FF FF FF FF FF     
   6385 FFFC79AE FF FF FF FF FF FF FF FF     
   6386 FFFC79B6 FF FF FF FF FF FF FF FF     
   6387 FFFC79BE FF FF FF FF FF FF FF FF     
   6388 FFFC79C6 FF FF FF FF FF FF FF FF     
   6389 FFFC79CE FF FF FF FF FF FF FF FF     
   6390 FFFC79D6 FF FF FF FF FF FF FF FF     
   6391 FFFC79DE FF FF FF FF FF FF FF FF     
   6392 FFFC79E6 FF FF FF FF FF FF FF FF     
   6393 FFFC79EE FF FF FF FF FF FF FF FF     
   6394 FFFC79F6 FF FF FF FF FF FF FF FF     
   6395 FFFC79FE FF FF FF FF FF FF FF FF     
   6396 FFFC7A06 FF FF FF FF FF FF FF FF     
   6397 FFFC7A0E FF FF FF FF FF FF FF FF     
   6398 FFFC7A16 FF FF FF FF FF FF FF FF     
   6399 FFFC7A1E FF FF FF FF FF FF FF FF     
   6400 FFFC7A26 FF FF FF FF FF FF FF FF     
   6401 FFFC7A2E FF FF FF FF FF FF FF FF     
   6402 FFFC7A36 FF FF FF FF FF FF FF FF     
   6403 FFFC7A3E FF FF FF FF FF FF FF FF     
   6404 FFFC7A46 FF FF FF FF FF FF FF FF     
   6405 FFFC7A4E FF FF FF FF FF FF FF FF     
   6406 FFFC7A56 FF FF FF FF FF FF FF FF     
   6407 FFFC7A5E FF FF FF FF FF FF FF FF     
   6408 FFFC7A66 FF FF FF FF FF FF FF FF     
   6409 FFFC7A6E FF FF FF FF FF FF FF FF     
   6410 FFFC7A76 FF FF FF FF FF FF FF FF     
   6411 FFFC7A7E FF FF FF FF FF FF FF FF     
   6412 FFFC7A86 FF FF FF FF FF FF FF FF     
   6413 FFFC7A8E FF FF FF FF FF FF FF FF     
   6414 FFFC7A96 FF FF FF FF FF FF FF FF     
   6415 FFFC7A9E FF FF FF FF FF FF FF FF     
   6416 FFFC7AA6 FF FF FF FF FF FF FF FF     
   6417 FFFC7AAE FF FF FF FF FF FF FF FF     
   6418 FFFC7AB6 FF FF FF FF FF FF FF FF     
   6419 FFFC7ABE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 47
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6420 FFFC7AC6 FF FF FF FF FF FF FF FF     
   6421 FFFC7ACE FF FF FF FF FF FF FF FF     
   6422 FFFC7AD6 FF FF FF FF FF FF FF FF     
   6423 FFFC7ADE FF FF FF FF FF FF FF FF     
   6424 FFFC7AE6 FF FF FF FF FF FF FF FF     
   6425 FFFC7AEE FF FF FF FF FF FF FF FF     
   6426 FFFC7AF6 FF FF FF FF FF FF FF FF     
   6427 FFFC7AFE FF FF FF FF FF FF FF FF     
   6428 FFFC7B06 FF FF FF FF FF FF FF FF     
   6429 FFFC7B0E FF FF FF FF FF FF FF FF     
   6430 FFFC7B16 FF FF FF FF FF FF FF FF     
   6431 FFFC7B1E FF FF FF FF FF FF FF FF     
   6432 FFFC7B26 FF FF FF FF FF FF FF FF     
   6433 FFFC7B2E FF FF FF FF FF FF FF FF     
   6434 FFFC7B36 FF FF FF FF FF FF FF FF     
   6435 FFFC7B3E FF FF FF FF FF FF FF FF     
   6436 FFFC7B46 FF FF FF FF FF FF FF FF     
   6437 FFFC7B4E FF FF FF FF FF FF FF FF     
   6438 FFFC7B56 FF FF FF FF FF FF FF FF     
   6439 FFFC7B5E FF FF FF FF FF FF FF FF     
   6440 FFFC7B66 FF FF FF FF FF FF FF FF     
   6441 FFFC7B6E FF FF FF FF FF FF FF FF     
   6442 FFFC7B76 FF FF FF FF FF FF FF FF     
   6443 FFFC7B7E FF FF FF FF FF FF FF FF     
   6444 FFFC7B86 FF FF FF FF FF FF FF FF     
   6445 FFFC7B8E FF FF FF FF FF FF FF FF     
   6446 FFFC7B96 FF FF FF FF FF FF FF FF     
   6447 FFFC7B9E FF FF FF FF FF FF FF FF     
   6448 FFFC7BA6 FF FF FF FF FF FF FF FF     
   6449 FFFC7BAE FF FF FF FF FF FF FF FF     
   6450 FFFC7BB6 FF FF FF FF FF FF FF FF     
   6451 FFFC7BBE FF FF FF FF FF FF FF FF     
   6452 FFFC7BC6 FF FF FF FF FF FF FF FF     
   6453 FFFC7BCE FF FF FF FF FF FF FF FF     
   6454 FFFC7BD6 FF FF FF FF FF FF FF FF     
   6455 FFFC7BDE FF FF FF FF FF FF FF FF     
   6456 FFFC7BE6 FF FF FF FF FF FF FF FF     
   6457 FFFC7BEE FF FF FF FF FF FF FF FF     
   6458 FFFC7BF6 FF FF FF FF FF FF FF FF     
   6459 FFFC7BFE FF FF FF FF FF FF FF FF     
   6460 FFFC7C06 FF FF FF FF FF FF FF FF     
   6461 FFFC7C0E FF FF FF FF FF FF FF FF     
   6462 FFFC7C16 FF FF FF FF FF FF FF FF     
   6463 FFFC7C1E FF FF FF FF FF FF FF FF     
   6464 FFFC7C26 FF FF FF FF FF FF FF FF     
   6465 FFFC7C2E FF FF FF FF FF FF FF FF     
   6466 FFFC7C36 FF FF FF FF FF FF FF FF     
   6467 FFFC7C3E FF FF FF FF FF FF FF FF     
   6468 FFFC7C46 FF FF FF FF FF FF FF FF     
   6469 FFFC7C4E FF FF FF FF FF FF FF FF     
   6470 FFFC7C56 FF FF FF FF FF FF FF FF     
   6471 FFFC7C5E FF FF FF FF FF FF FF FF     
   6472 FFFC7C66 FF FF FF FF FF FF FF FF     
   6473 FFFC7C6E FF FF FF FF FF FF FF FF     
   6474 FFFC7C76 FF FF FF FF FF FF FF FF     
   6475 FFFC7C7E FF FF FF FF FF FF FF FF     
   6476 FFFC7C86 FF FF FF FF FF FF FF FF     
   6477 FFFC7C8E FF FF FF FF FF FF FF FF     
   6478 FFFC7C96 FF FF FF FF FF FF FF FF     
   6479 FFFC7C9E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 48
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6480 FFFC7CA6 FF FF FF FF FF FF FF FF     
   6481 FFFC7CAE FF FF FF FF FF FF FF FF     
   6482 FFFC7CB6 FF FF FF FF FF FF FF FF     
   6483 FFFC7CBE FF FF FF FF FF FF FF FF     
   6484 FFFC7CC6 FF FF FF FF FF FF FF FF     
   6485 FFFC7CCE FF FF FF FF FF FF FF FF     
   6486 FFFC7CD6 FF FF FF FF FF FF FF FF     
   6487 FFFC7CDE FF FF FF FF FF FF FF FF     
   6488 FFFC7CE6 FF FF FF FF FF FF FF FF     
   6489 FFFC7CEE FF FF FF FF FF FF FF FF     
   6490 FFFC7CF6 FF FF FF FF FF FF FF FF     
   6491 FFFC7CFE FF FF FF FF FF FF FF FF     
   6492 FFFC7D06 FF FF FF FF FF FF FF FF     
   6493 FFFC7D0E FF FF FF FF FF FF FF FF     
   6494 FFFC7D16 FF FF FF FF FF FF FF FF     
   6495 FFFC7D1E FF FF FF FF FF FF FF FF     
   6496 FFFC7D26 FF FF FF FF FF FF FF FF     
   6497 FFFC7D2E FF FF FF FF FF FF FF FF     
   6498 FFFC7D36 FF FF FF FF FF FF FF FF     
   6499 FFFC7D3E FF FF FF FF FF FF FF FF     
   6500 FFFC7D46 FF FF FF FF FF FF FF FF     
   6501 FFFC7D4E FF FF FF FF FF FF FF FF     
   6502 FFFC7D56 FF FF FF FF FF FF FF FF     
   6503 FFFC7D5E FF FF FF FF FF FF FF FF     
   6504 FFFC7D66 FF FF FF FF FF FF FF FF     
   6505 FFFC7D6E FF FF FF FF FF FF FF FF     
   6506 FFFC7D76 FF FF FF FF FF FF FF FF     
   6507 FFFC7D7E FF FF FF FF FF FF FF FF     
   6508 FFFC7D86 FF FF FF FF FF FF FF FF     
   6509 FFFC7D8E FF FF FF FF FF FF FF FF     
   6510 FFFC7D96 FF FF FF FF FF FF FF FF     
   6511 FFFC7D9E FF FF FF FF FF FF FF FF     
   6512 FFFC7DA6 FF FF FF FF FF FF FF FF     
   6513 FFFC7DAE FF FF FF FF FF FF FF FF     
   6514 FFFC7DB6 FF FF FF FF FF FF FF FF     
   6515 FFFC7DBE FF FF FF FF FF FF FF FF     
   6516 FFFC7DC6 FF FF FF FF FF FF FF FF     
   6517 FFFC7DCE FF FF FF FF FF FF FF FF     
   6518 FFFC7DD6 FF FF FF FF FF FF FF FF     
   6519 FFFC7DDE FF FF FF FF FF FF FF FF     
   6520 FFFC7DE6 FF FF FF FF FF FF FF FF     
   6521 FFFC7DEE FF FF FF FF FF FF FF FF     
   6522 FFFC7DF6 FF FF FF FF FF FF FF FF     
   6523 FFFC7DFE FF FF FF FF FF FF FF FF     
   6524 FFFC7E06 FF FF FF FF FF FF FF FF     
   6525 FFFC7E0E FF FF FF FF FF FF FF FF     
   6526 FFFC7E16 FF FF FF FF FF FF FF FF     
   6527 FFFC7E1E FF FF FF FF FF FF FF FF     
   6528 FFFC7E26 FF FF FF FF FF FF FF FF     
   6529 FFFC7E2E FF FF FF FF FF FF FF FF     
   6530 FFFC7E36 FF FF FF FF FF FF FF FF     
   6531 FFFC7E3E FF FF FF FF FF FF FF FF     
   6532 FFFC7E46 FF FF FF FF FF FF FF FF     
   6533 FFFC7E4E FF FF FF FF FF FF FF FF     
   6534 FFFC7E56 FF FF FF FF FF FF FF FF     
   6535 FFFC7E5E FF FF FF FF FF FF FF FF     
   6536 FFFC7E66 FF FF FF FF FF FF FF FF     
   6537 FFFC7E6E FF FF FF FF FF FF FF FF     
   6538 FFFC7E76 FF FF FF FF FF FF FF FF     
   6539 FFFC7E7E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 49
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6540 FFFC7E86 FF FF FF FF FF FF FF FF     
   6541 FFFC7E8E FF FF FF FF FF FF FF FF     
   6542 FFFC7E96 FF FF FF FF FF FF FF FF     
   6543 FFFC7E9E FF FF FF FF FF FF FF FF     
   6544 FFFC7EA6 FF FF FF FF FF FF FF FF     
   6545 FFFC7EAE FF FF FF FF FF FF FF FF     
   6546 FFFC7EB6 FF FF FF FF FF FF FF FF     
   6547 FFFC7EBE FF FF FF FF FF FF FF FF     
   6548 FFFC7EC6 FF FF FF FF FF FF FF FF     
   6549 FFFC7ECE FF FF FF FF FF FF FF FF     
   6550 FFFC7ED6 FF FF FF FF FF FF FF FF     
   6551 FFFC7EDE FF FF FF FF FF FF FF FF     
   6552 FFFC7EE6 FF FF FF FF FF FF FF FF     
   6553 FFFC7EEE FF FF FF FF FF FF FF FF     
   6554 FFFC7EF6 FF FF FF FF FF FF FF FF     
   6555 FFFC7EFE FF FF FF FF FF FF FF FF     
   6556 FFFC7F06 FF FF FF FF FF FF FF FF     
   6557 FFFC7F0E FF FF FF FF FF FF FF FF     
   6558 FFFC7F16 FF FF FF FF FF FF FF FF     
   6559 FFFC7F1E FF FF FF FF FF FF FF FF     
   6560 FFFC7F26 FF FF FF FF FF FF FF FF     
   6561 FFFC7F2E FF FF FF FF FF FF FF FF     
   6562 FFFC7F36 FF FF FF FF FF FF FF FF     
   6563 FFFC7F3E FF FF FF FF FF FF FF FF     
   6564 FFFC7F46 FF FF FF FF FF FF FF FF     
   6565 FFFC7F4E FF FF FF FF FF FF FF FF     
   6566 FFFC7F56 FF FF FF FF FF FF FF FF     
   6567 FFFC7F5E FF FF FF FF FF FF FF FF     
   6568 FFFC7F66 FF FF FF FF FF FF FF FF     
   6569 FFFC7F6E FF FF FF FF FF FF FF FF     
   6570 FFFC7F76 FF FF FF FF FF FF FF FF     
   6571 FFFC7F7E FF FF FF FF FF FF FF FF     
   6572 FFFC7F86 FF FF FF FF FF FF FF FF     
   6573 FFFC7F8E FF FF FF FF FF FF FF FF     
   6574 FFFC7F96 FF FF FF FF FF FF FF FF     
   6575 FFFC7F9E FF FF FF FF FF FF FF FF     
   6576 FFFC7FA6 FF FF FF FF FF FF FF FF     
   6577 FFFC7FAE FF FF FF FF FF FF FF FF     
   6578 FFFC7FB6 FF FF FF FF FF FF FF FF     
   6579 FFFC7FBE FF FF FF FF FF FF FF FF     
   6580 FFFC7FC6 FF FF FF FF FF FF FF FF     
   6581 FFFC7FCE FF FF FF FF FF FF FF FF     
   6582 FFFC7FD6 FF FF FF FF FF FF FF FF     
   6583 FFFC7FDE FF FF FF FF FF FF FF FF     
   6584 FFFC7FE6 FF FF FF FF FF FF FF FF     
   6585 FFFC7FEE FF FF FF FF FF FF FF FF     
   6586 FFFC7FF6 FF FF FF FF FF FF FF FF     
   6587 FFFC7FFE FF FF FF FF FF FF FF FF     
   6588 FFFC8006 FF FF FF FF FF FF FF FF     
   6589 FFFC800E FF FF FF FF FF FF FF FF     
   6590 FFFC8016 FF FF FF FF FF FF FF FF     
   6591 FFFC801E FF FF FF FF FF FF FF FF     
   6592 FFFC8026 FF FF FF FF FF FF FF FF     
   6593 FFFC802E FF FF FF FF FF FF FF FF     
   6594 FFFC8036 FF FF FF FF FF FF FF FF     
   6595 FFFC803E FF FF FF FF FF FF FF FF     
   6596 FFFC8046 FF FF FF FF FF FF FF FF     
   6597 FFFC804E FF FF FF FF FF FF FF FF     
   6598 FFFC8056 FF FF FF FF FF FF FF FF     
   6599 FFFC805E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 50
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6600 FFFC8066 FF FF FF FF FF FF FF FF     
   6601 FFFC806E FF FF FF FF FF FF FF FF     
   6602 FFFC8076 FF FF FF FF FF FF FF FF     
   6603 FFFC807E FF FF FF FF FF FF FF FF     
   6604 FFFC8086 FF FF FF FF FF FF FF FF     
   6605 FFFC808E FF FF FF FF FF FF FF FF     
   6606 FFFC8096 FF FF FF FF FF FF FF FF     
   6607 FFFC809E FF FF FF FF FF FF FF FF     
   6608 FFFC80A6 FF FF FF FF FF FF FF FF     
   6609 FFFC80AE FF FF FF FF FF FF FF FF     
   6610 FFFC80B6 FF FF FF FF FF FF FF FF     
   6611 FFFC80BE FF FF FF FF FF FF FF FF     
   6612 FFFC80C6 FF FF FF FF FF FF FF FF     
   6613 FFFC80CE FF FF FF FF FF FF FF FF     
   6614 FFFC80D6 FF FF FF FF FF FF FF FF     
   6615 FFFC80DE FF FF FF FF FF FF FF FF     
   6616 FFFC80E6 FF FF FF FF FF FF FF FF     
   6617 FFFC80EE FF FF FF FF FF FF FF FF     
   6618 FFFC80F6 FF FF FF FF FF FF FF FF     
   6619 FFFC80FE FF FF FF FF FF FF FF FF     
   6620 FFFC8106 FF FF FF FF FF FF FF FF     
   6621 FFFC810E FF FF FF FF FF FF FF FF     
   6622 FFFC8116 FF FF FF FF FF FF FF FF     
   6623 FFFC811E FF FF FF FF FF FF FF FF     
   6624 FFFC8126 FF FF FF FF FF FF FF FF     
   6625 FFFC812E FF FF FF FF FF FF FF FF     
   6626 FFFC8136 FF FF FF FF FF FF FF FF     
   6627 FFFC813E FF FF FF FF FF FF FF FF     
   6628 FFFC8146 FF FF FF FF FF FF FF FF     
   6629 FFFC814E FF FF FF FF FF FF FF FF     
   6630 FFFC8156 FF FF FF FF FF FF FF FF     
   6631 FFFC815E FF FF FF FF FF FF FF FF     
   6632 FFFC8166 FF FF FF FF FF FF FF FF     
   6633 FFFC816E FF FF FF FF FF FF FF FF     
   6634 FFFC8176 FF FF FF FF FF FF FF FF     
   6635 FFFC817E FF FF FF FF FF FF FF FF     
   6636 FFFC8186 FF FF FF FF FF FF FF FF     
   6637 FFFC818E FF FF FF FF FF FF FF FF     
   6638 FFFC8196 FF FF FF FF FF FF FF FF     
   6639 FFFC819E FF FF FF FF FF FF FF FF     
   6640 FFFC81A6 FF FF FF FF FF FF FF FF     
   6641 FFFC81AE FF FF FF FF FF FF FF FF     
   6642 FFFC81B6 FF FF FF FF FF FF FF FF     
   6643 FFFC81BE FF FF FF FF FF FF FF FF     
   6644 FFFC81C6 FF FF FF FF FF FF FF FF     
   6645 FFFC81CE FF FF FF FF FF FF FF FF     
   6646 FFFC81D6 FF FF FF FF FF FF FF FF     
   6647 FFFC81DE FF FF FF FF FF FF FF FF     
   6648 FFFC81E6 FF FF FF FF FF FF FF FF     
   6649 FFFC81EE FF FF FF FF FF FF FF FF     
   6650 FFFC81F6 FF FF FF FF FF FF FF FF     
   6651 FFFC81FE FF FF FF FF FF FF FF FF     
   6652 FFFC8206 FF FF FF FF FF FF FF FF     
   6653 FFFC820E FF FF FF FF FF FF FF FF     
   6654 FFFC8216 FF FF FF FF FF FF FF FF     
   6655 FFFC821E FF FF FF FF FF FF FF FF     
   6656 FFFC8226 FF FF FF FF FF FF FF FF     
   6657 FFFC822E FF FF FF FF FF FF FF FF     
   6658 FFFC8236 FF FF FF FF FF FF FF FF     
   6659 FFFC823E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 51
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6660 FFFC8246 FF FF FF FF FF FF FF FF     
   6661 FFFC824E FF FF FF FF FF FF FF FF     
   6662 FFFC8256 FF FF FF FF FF FF FF FF     
   6663 FFFC825E FF FF FF FF FF FF FF FF     
   6664 FFFC8266 FF FF FF FF FF FF FF FF     
   6665 FFFC826E FF FF FF FF FF FF FF FF     
   6666 FFFC8276 FF FF FF FF FF FF FF FF     
   6667 FFFC827E FF FF FF FF FF FF FF FF     
   6668 FFFC8286 FF FF FF FF FF FF FF FF     
   6669 FFFC828E FF FF FF FF FF FF FF FF     
   6670 FFFC8296 FF FF FF FF FF FF FF FF     
   6671 FFFC829E FF FF FF FF FF FF FF FF     
   6672 FFFC82A6 FF FF FF FF FF FF FF FF     
   6673 FFFC82AE FF FF FF FF FF FF FF FF     
   6674 FFFC82B6 FF FF FF FF FF FF FF FF     
   6675 FFFC82BE FF FF FF FF FF FF FF FF     
   6676 FFFC82C6 FF FF FF FF FF FF FF FF     
   6677 FFFC82CE FF FF FF FF FF FF FF FF     
   6678 FFFC82D6 FF FF FF FF FF FF FF FF     
   6679 FFFC82DE FF FF FF FF FF FF FF FF     
   6680 FFFC82E6 FF FF FF FF FF FF FF FF     
   6681 FFFC82EE FF FF FF FF FF FF FF FF     
   6682 FFFC82F6 FF FF FF FF FF FF FF FF     
   6683 FFFC82FE FF FF FF FF FF FF FF FF     
   6684 FFFC8306 FF FF FF FF FF FF FF FF     
   6685 FFFC830E FF FF FF FF FF FF FF FF     
   6686 FFFC8316 FF FF FF FF FF FF FF FF     
   6687 FFFC831E FF FF FF FF FF FF FF FF     
   6688 FFFC8326 FF FF FF FF FF FF FF FF     
   6689 FFFC832E FF FF FF FF FF FF FF FF     
   6690 FFFC8336 FF FF FF FF FF FF FF FF     
   6691 FFFC833E FF FF FF FF FF FF FF FF     
   6692 FFFC8346 FF FF FF FF FF FF FF FF     
   6693 FFFC834E FF FF FF FF FF FF FF FF     
   6694 FFFC8356 FF FF FF FF FF FF FF FF     
   6695 FFFC835E FF FF FF FF FF FF FF FF     
   6696 FFFC8366 FF FF FF FF FF FF FF FF     
   6697 FFFC836E FF FF FF FF FF FF FF FF     
   6698 FFFC8376 FF FF FF FF FF FF FF FF     
   6699 FFFC837E FF FF FF FF FF FF FF FF     
   6700 FFFC8386 FF FF FF FF FF FF FF FF     
   6701 FFFC838E FF FF FF FF FF FF FF FF     
   6702 FFFC8396 FF FF FF FF FF FF FF FF     
   6703 FFFC839E FF FF FF FF FF FF FF FF     
   6704 FFFC83A6 FF FF FF FF FF FF FF FF     
   6705 FFFC83AE FF FF FF FF FF FF FF FF     
   6706 FFFC83B6 FF FF FF FF FF FF FF FF     
   6707 FFFC83BE FF FF FF FF FF FF FF FF     
   6708 FFFC83C6 FF FF FF FF FF FF FF FF     
   6709 FFFC83CE FF FF FF FF FF FF FF FF     
   6710 FFFC83D6 FF FF FF FF FF FF FF FF     
   6711 FFFC83DE FF FF FF FF FF FF FF FF     
   6712 FFFC83E6 FF FF FF FF FF FF FF FF     
   6713 FFFC83EE FF FF FF FF FF FF FF FF     
   6714 FFFC83F6 FF FF FF FF FF FF FF FF     
   6715 FFFC83FE FF FF FF FF FF FF FF FF     
   6716 FFFC8406 FF FF FF FF FF FF FF FF     
   6717 FFFC840E FF FF FF FF FF FF FF FF     
   6718 FFFC8416 FF FF FF FF FF FF FF FF     
   6719 FFFC841E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 52
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6720 FFFC8426 FF FF FF FF FF FF FF FF     
   6721 FFFC842E FF FF FF FF FF FF FF FF     
   6722 FFFC8436 FF FF FF FF FF FF FF FF     
   6723 FFFC843E FF FF FF FF FF FF FF FF     
   6724 FFFC8446 FF FF FF FF FF FF FF FF     
   6725 FFFC844E FF FF FF FF FF FF FF FF     
   6726 FFFC8456 FF FF FF FF FF FF FF FF     
   6727 FFFC845E FF FF FF FF FF FF FF FF     
   6728 FFFC8466 FF FF FF FF FF FF FF FF     
   6729 FFFC846E FF FF FF FF FF FF FF FF     
   6730 FFFC8476 FF FF FF FF FF FF FF FF     
   6731 FFFC847E FF FF FF FF FF FF FF FF     
   6732 FFFC8486 FF FF FF FF FF FF FF FF     
   6733 FFFC848E FF FF FF FF FF FF FF FF     
   6734 FFFC8496 FF FF FF FF FF FF FF FF     
   6735 FFFC849E FF FF FF FF FF FF FF FF     
   6736 FFFC84A6 FF FF FF FF FF FF FF FF     
   6737 FFFC84AE FF FF FF FF FF FF FF FF     
   6738 FFFC84B6 FF FF FF FF FF FF FF FF     
   6739 FFFC84BE FF FF FF FF FF FF FF FF     
   6740 FFFC84C6 FF FF FF FF FF FF FF FF     
   6741 FFFC84CE FF FF FF FF FF FF FF FF     
   6742 FFFC84D6 FF FF FF FF FF FF FF FF     
   6743 FFFC84DE FF FF FF FF FF FF FF FF     
   6744 FFFC84E6 FF FF FF FF FF FF FF FF     
   6745 FFFC84EE FF FF FF FF FF FF FF FF     
   6746 FFFC84F6 FF FF FF FF FF FF FF FF     
   6747 FFFC84FE FF FF FF FF FF FF FF FF     
   6748 FFFC8506 FF FF FF FF FF FF FF FF     
   6749 FFFC850E FF FF FF FF FF FF FF FF     
   6750 FFFC8516 FF FF FF FF FF FF FF FF     
   6751 FFFC851E FF FF FF FF FF FF FF FF     
   6752 FFFC8526 FF FF FF FF FF FF FF FF     
   6753 FFFC852E FF FF FF FF FF FF FF FF     
   6754 FFFC8536 FF FF FF FF FF FF FF FF     
   6755 FFFC853E FF FF FF FF FF FF FF FF     
   6756 FFFC8546 FF FF FF FF FF FF FF FF     
   6757 FFFC854E FF FF FF FF FF FF FF FF     
   6758 FFFC8556 FF FF FF FF FF FF FF FF     
   6759 FFFC855E FF FF FF FF FF FF FF FF     
   6760 FFFC8566 FF FF FF FF FF FF FF FF     
   6761 FFFC856E FF FF FF FF FF FF FF FF     
   6762 FFFC8576 FF FF FF FF FF FF FF FF     
   6763 FFFC857E FF FF FF FF FF FF FF FF     
   6764 FFFC8586 FF FF FF FF FF FF FF FF     
   6765 FFFC858E FF FF FF FF FF FF FF FF     
   6766 FFFC8596 FF FF FF FF FF FF FF FF     
   6767 FFFC859E FF FF FF FF FF FF FF FF     
   6768 FFFC85A6 FF FF FF FF FF FF FF FF     
   6769 FFFC85AE FF FF FF FF FF FF FF FF     
   6770 FFFC85B6 FF FF FF FF FF FF FF FF     
   6771 FFFC85BE FF FF FF FF FF FF FF FF     
   6772 FFFC85C6 FF FF FF FF FF FF FF FF     
   6773 FFFC85CE FF FF FF FF FF FF FF FF     
   6774 FFFC85D6 FF FF FF FF FF FF FF FF     
   6775 FFFC85DE FF FF FF FF FF FF FF FF     
   6776 FFFC85E6 FF FF FF FF FF FF FF FF     
   6777 FFFC85EE FF FF FF FF FF FF FF FF     
   6778 FFFC85F6 FF FF FF FF FF FF FF FF     
   6779 FFFC85FE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 53
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6780 FFFC8606 FF FF FF FF FF FF FF FF     
   6781 FFFC860E FF FF FF FF FF FF FF FF     
   6782 FFFC8616 FF FF FF FF FF FF FF FF     
   6783 FFFC861E FF FF FF FF FF FF FF FF     
   6784 FFFC8626 FF FF FF FF FF FF FF FF     
   6785 FFFC862E FF FF FF FF FF FF FF FF     
   6786 FFFC8636 FF FF FF FF FF FF FF FF     
   6787 FFFC863E FF FF FF FF FF FF FF FF     
   6788 FFFC8646 FF FF FF FF FF FF FF FF     
   6789 FFFC864E FF FF FF FF FF FF FF FF     
   6790 FFFC8656 FF FF FF FF FF FF FF FF     
   6791 FFFC865E FF FF FF FF FF FF FF FF     
   6792 FFFC8666 FF FF FF FF FF FF FF FF     
   6793 FFFC866E FF FF FF FF FF FF FF FF     
   6794 FFFC8676 FF FF FF FF FF FF FF FF     
   6795 FFFC867E FF FF FF FF FF FF FF FF     
   6796 FFFC8686 FF FF FF FF FF FF FF FF     
   6797 FFFC868E FF FF FF FF FF FF FF FF     
   6798 FFFC8696 FF FF FF FF FF FF FF FF     
   6799 FFFC869E FF FF FF FF FF FF FF FF     
   6800 FFFC86A6 FF FF FF FF FF FF FF FF     
   6801 FFFC86AE FF FF FF FF FF FF FF FF     
   6802 FFFC86B6 FF FF FF FF FF FF FF FF     
   6803 FFFC86BE FF FF FF FF FF FF FF FF     
   6804 FFFC86C6 FF FF FF FF FF FF FF FF     
   6805 FFFC86CE FF FF FF FF FF FF FF FF     
   6806 FFFC86D6 FF FF FF FF FF FF FF FF     
   6807 FFFC86DE FF FF FF FF FF FF FF FF     
   6808 FFFC86E6 FF FF FF FF FF FF FF FF     
   6809 FFFC86EE FF FF FF FF FF FF FF FF     
   6810 FFFC86F6 FF FF FF FF FF FF FF FF     
   6811 FFFC86FE FF FF FF FF FF FF FF FF     
   6812 FFFC8706 FF FF FF FF FF FF FF FF     
   6813 FFFC870E FF FF FF FF FF FF FF FF     
   6814 FFFC8716 FF FF FF FF FF FF FF FF     
   6815 FFFC871E FF FF FF FF FF FF FF FF     
   6816 FFFC8726 FF FF FF FF FF FF FF FF     
   6817 FFFC872E FF FF FF FF FF FF FF FF     
   6818 FFFC8736 FF FF FF FF FF FF FF FF     
   6819 FFFC873E FF FF FF FF FF FF FF FF     
   6820 FFFC8746 FF FF FF FF FF FF FF FF     
   6821 FFFC874E FF FF FF FF FF FF FF FF     
   6822 FFFC8756 FF FF FF FF FF FF FF FF     
   6823 FFFC875E FF FF FF FF FF FF FF FF     
   6824 FFFC8766 FF FF FF FF FF FF FF FF     
   6825 FFFC876E FF FF FF FF FF FF FF FF     
   6826 FFFC8776 FF FF FF FF FF FF FF FF     
   6827 FFFC877E FF FF FF FF FF FF FF FF     
   6828 FFFC8786 FF FF FF FF FF FF FF FF     
   6829 FFFC878E FF FF FF FF FF FF FF FF     
   6830 FFFC8796 FF FF FF FF FF FF FF FF     
   6831 FFFC879E FF FF FF FF FF FF FF FF     
   6832 FFFC87A6 FF FF FF FF FF FF FF FF     
   6833 FFFC87AE FF FF FF FF FF FF FF FF     
   6834 FFFC87B6 FF FF FF FF FF FF FF FF     
   6835 FFFC87BE FF FF FF FF FF FF FF FF     
   6836 FFFC87C6 FF FF FF FF FF FF FF FF     
   6837 FFFC87CE FF FF FF FF FF FF FF FF     
   6838 FFFC87D6 FF FF FF FF FF FF FF FF     
   6839 FFFC87DE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 54
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6840 FFFC87E6 FF FF FF FF FF FF FF FF     
   6841 FFFC87EE FF FF FF FF FF FF FF FF     
   6842 FFFC87F6 FF FF FF FF FF FF FF FF     
   6843 FFFC87FE FF FF FF FF FF FF FF FF     
   6844 FFFC8806 FF FF FF FF FF FF FF FF     
   6845 FFFC880E FF FF FF FF FF FF FF FF     
   6846 FFFC8816 FF FF FF FF FF FF FF FF     
   6847 FFFC881E FF FF FF FF FF FF FF FF     
   6848 FFFC8826 FF FF FF FF FF FF FF FF     
   6849 FFFC882E FF FF FF FF FF FF FF FF     
   6850 FFFC8836 FF FF FF FF FF FF FF FF     
   6851 FFFC883E FF FF FF FF FF FF FF FF     
   6852 FFFC8846 FF FF FF FF FF FF FF FF     
   6853 FFFC884E FF FF FF FF FF FF FF FF     
   6854 FFFC8856 FF FF FF FF FF FF FF FF     
   6855 FFFC885E FF FF FF FF FF FF FF FF     
   6856 FFFC8866 FF FF FF FF FF FF FF FF     
   6857 FFFC886E FF FF FF FF FF FF FF FF     
   6858 FFFC8876 FF FF FF FF FF FF FF FF     
   6859 FFFC887E FF FF FF FF FF FF FF FF     
   6860 FFFC8886 FF FF FF FF FF FF FF FF     
   6861 FFFC888E FF FF FF FF FF FF FF FF     
   6862 FFFC8896 FF FF FF FF FF FF FF FF     
   6863 FFFC889E FF FF FF FF FF FF FF FF     
   6864 FFFC88A6 FF FF FF FF FF FF FF FF     
   6865 FFFC88AE FF FF FF FF FF FF FF FF     
   6866 FFFC88B6 FF FF FF FF FF FF FF FF     
   6867 FFFC88BE FF FF FF FF FF FF FF FF     
   6868 FFFC88C6 FF FF FF FF FF FF FF FF     
   6869 FFFC88CE FF FF FF FF FF FF FF FF     
   6870 FFFC88D6 FF FF FF FF FF FF FF FF     
   6871 FFFC88DE FF FF FF FF FF FF FF FF     
   6872 FFFC88E6 FF FF FF FF FF FF FF FF     
   6873 FFFC88EE FF FF FF FF FF FF FF FF     
   6874 FFFC88F6 FF FF FF FF FF FF FF FF     
   6875 FFFC88FE FF FF FF FF FF FF FF FF     
   6876 FFFC8906 FF FF FF FF FF FF FF FF     
   6877 FFFC890E FF FF FF FF FF FF FF FF     
   6878 FFFC8916 FF FF FF FF FF FF FF FF     
   6879 FFFC891E FF FF FF FF FF FF FF FF     
   6880 FFFC8926 FF FF FF FF FF FF FF FF     
   6881 FFFC892E FF FF FF FF FF FF FF FF     
   6882 FFFC8936 FF FF FF FF FF FF FF FF     
   6883 FFFC893E FF FF FF FF FF FF FF FF     
   6884 FFFC8946 FF FF FF FF FF FF FF FF     
   6885 FFFC894E FF FF FF FF FF FF FF FF     
   6886 FFFC8956 FF FF FF FF FF FF FF FF     
   6887 FFFC895E FF FF FF FF FF FF FF FF     
   6888 FFFC8966 FF FF FF FF FF FF FF FF     
   6889 FFFC896E FF FF FF FF FF FF FF FF     
   6890 FFFC8976 FF FF FF FF FF FF FF FF     
   6891 FFFC897E FF FF FF FF FF FF FF FF     
   6892 FFFC8986 FF FF FF FF FF FF FF FF     
   6893 FFFC898E FF FF FF FF FF FF FF FF     
   6894 FFFC8996 FF FF FF FF FF FF FF FF     
   6895 FFFC899E FF FF FF FF FF FF FF FF     
   6896 FFFC89A6 FF FF FF FF FF FF FF FF     
   6897 FFFC89AE FF FF FF FF FF FF FF FF     
   6898 FFFC89B6 FF FF FF FF FF FF FF FF     
   6899 FFFC89BE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 55
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6900 FFFC89C6 FF FF FF FF FF FF FF FF     
   6901 FFFC89CE FF FF FF FF FF FF FF FF     
   6902 FFFC89D6 FF FF FF FF FF FF FF FF     
   6903 FFFC89DE FF FF FF FF FF FF FF FF     
   6904 FFFC89E6 FF FF FF FF FF FF FF FF     
   6905 FFFC89EE FF FF FF FF FF FF FF FF     
   6906 FFFC89F6 FF FF FF FF FF FF FF FF     
   6907 FFFC89FE FF FF FF FF FF FF FF FF     
   6908 FFFC8A06 FF FF FF FF FF FF FF FF     
   6909 FFFC8A0E FF FF FF FF FF FF FF FF     
   6910 FFFC8A16 FF FF FF FF FF FF FF FF     
   6911 FFFC8A1E FF FF FF FF FF FF FF FF     
   6912 FFFC8A26 FF FF FF FF FF FF FF FF     
   6913 FFFC8A2E FF FF FF FF FF FF FF FF     
   6914 FFFC8A36 FF FF FF FF FF FF FF FF     
   6915 FFFC8A3E FF FF FF FF FF FF FF FF     
   6916 FFFC8A46 FF FF FF FF FF FF FF FF     
   6917 FFFC8A4E FF FF FF FF FF FF FF FF     
   6918 FFFC8A56 FF FF FF FF FF FF FF FF     
   6919 FFFC8A5E FF FF FF FF FF FF FF FF     
   6920 FFFC8A66 FF FF FF FF FF FF FF FF     
   6921 FFFC8A6E FF FF FF FF FF FF FF FF     
   6922 FFFC8A76 FF FF FF FF FF FF FF FF     
   6923 FFFC8A7E FF FF FF FF FF FF FF FF     
   6924 FFFC8A86 FF FF FF FF FF FF FF FF     
   6925 FFFC8A8E FF FF FF FF FF FF FF FF     
   6926 FFFC8A96 FF FF FF FF FF FF FF FF     
   6927 FFFC8A9E FF FF FF FF FF FF FF FF     
   6928 FFFC8AA6 FF FF FF FF FF FF FF FF     
   6929 FFFC8AAE FF FF FF FF FF FF FF FF     
   6930 FFFC8AB6 FF FF FF FF FF FF FF FF     
   6931 FFFC8ABE FF FF FF FF FF FF FF FF     
   6932 FFFC8AC6 FF FF FF FF FF FF FF FF     
   6933 FFFC8ACE FF FF FF FF FF FF FF FF     
   6934 FFFC8AD6 FF FF FF FF FF FF FF FF     
   6935 FFFC8ADE FF FF FF FF FF FF FF FF     
   6936 FFFC8AE6 FF FF FF FF FF FF FF FF     
   6937 FFFC8AEE FF FF FF FF FF FF FF FF     
   6938 FFFC8AF6 FF FF FF FF FF FF FF FF     
   6939 FFFC8AFE FF FF FF FF FF FF FF FF     
   6940 FFFC8B06 FF FF FF FF FF FF FF FF     
   6941 FFFC8B0E FF FF FF FF FF FF FF FF     
   6942 FFFC8B16 FF FF FF FF FF FF FF FF     
   6943 FFFC8B1E FF FF FF FF FF FF FF FF     
   6944 FFFC8B26 FF FF FF FF FF FF FF FF     
   6945 FFFC8B2E FF FF FF FF FF FF FF FF     
   6946 FFFC8B36 FF FF FF FF FF FF FF FF     
   6947 FFFC8B3E FF FF FF FF FF FF FF FF     
   6948 FFFC8B46 FF FF FF FF FF FF FF FF     
   6949 FFFC8B4E FF FF FF FF FF FF FF FF     
   6950 FFFC8B56 FF FF FF FF FF FF FF FF     
   6951 FFFC8B5E FF FF FF FF FF FF FF FF     
   6952 FFFC8B66 FF FF FF FF FF FF FF FF     
   6953 FFFC8B6E FF FF FF FF FF FF FF FF     
   6954 FFFC8B76 FF FF FF FF FF FF FF FF     
   6955 FFFC8B7E FF FF FF FF FF FF FF FF     
   6956 FFFC8B86 FF FF FF FF FF FF FF FF     
   6957 FFFC8B8E FF FF FF FF FF FF FF FF     
   6958 FFFC8B96 FF FF FF FF FF FF FF FF     
   6959 FFFC8B9E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 56
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   6960 FFFC8BA6 FF FF FF FF FF FF FF FF     
   6961 FFFC8BAE FF FF FF FF FF FF FF FF     
   6962 FFFC8BB6 FF FF FF FF FF FF FF FF     
   6963 FFFC8BBE FF FF FF FF FF FF FF FF     
   6964 FFFC8BC6 FF FF FF FF FF FF FF FF     
   6965 FFFC8BCE FF FF FF FF FF FF FF FF     
   6966 FFFC8BD6 FF FF FF FF FF FF FF FF     
   6967 FFFC8BDE FF FF FF FF FF FF FF FF     
   6968 FFFC8BE6 FF FF FF FF FF FF FF FF     
   6969 FFFC8BEE FF FF FF FF FF FF FF FF     
   6970 FFFC8BF6 FF FF FF FF FF FF FF FF     
   6971 FFFC8BFE FF FF FF FF FF FF FF FF     
   6972 FFFC8C06 FF FF FF FF FF FF FF FF     
   6973 FFFC8C0E FF FF FF FF FF FF FF FF     
   6974 FFFC8C16 FF FF FF FF FF FF FF FF     
   6975 FFFC8C1E FF FF FF FF FF FF FF FF     
   6976 FFFC8C26 FF FF FF FF FF FF FF FF     
   6977 FFFC8C2E FF FF FF FF FF FF FF FF     
   6978 FFFC8C36 FF FF FF FF FF FF FF FF     
   6979 FFFC8C3E FF FF FF FF FF FF FF FF     
   6980 FFFC8C46 FF FF FF FF FF FF FF FF     
   6981 FFFC8C4E FF FF FF FF FF FF FF FF     
   6982 FFFC8C56 FF FF FF FF FF FF FF FF     
   6983 FFFC8C5E FF FF FF FF FF FF FF FF     
   6984 FFFC8C66 FF FF FF FF FF FF FF FF     
   6985 FFFC8C6E FF FF FF FF FF FF FF FF     
   6986 FFFC8C76 FF FF FF FF FF FF FF FF     
   6987 FFFC8C7E FF FF FF FF FF FF FF FF     
   6988 FFFC8C86 FF FF FF FF FF FF FF FF     
   6989 FFFC8C8E FF FF FF FF FF FF FF FF     
   6990 FFFC8C96 FF FF FF FF FF FF FF FF     
   6991 FFFC8C9E FF FF FF FF FF FF FF FF     
   6992 FFFC8CA6 FF FF FF FF FF FF FF FF     
   6993 FFFC8CAE FF FF FF FF FF FF FF FF     
   6994 FFFC8CB6 FF FF FF FF FF FF FF FF     
   6995 FFFC8CBE FF FF FF FF FF FF FF FF     
   6996 FFFC8CC6 FF FF FF FF FF FF FF FF     
   6997 FFFC8CCE FF FF FF FF FF FF FF FF     
   6998 FFFC8CD6 FF FF FF FF FF FF FF FF     
   6999 FFFC8CDE FF FF FF FF FF FF FF FF     
   7000 FFFC8CE6 FF FF FF FF FF FF FF FF     
   7001 FFFC8CEE FF FF FF FF FF FF FF FF     
   7002 FFFC8CF6 FF FF FF FF FF FF FF FF     
   7003 FFFC8CFE FF FF FF FF FF FF FF FF     
   7004 FFFC8D06 FF FF FF FF FF FF FF FF     
   7005 FFFC8D0E FF FF FF FF FF FF FF FF     
   7006 FFFC8D16 FF FF FF FF FF FF FF FF     
   7007 FFFC8D1E FF FF FF FF FF FF FF FF     
   7008 FFFC8D26 FF FF FF FF FF FF FF FF     
   7009 FFFC8D2E FF FF FF FF FF FF FF FF     
   7010 FFFC8D36 FF FF FF FF FF FF FF FF     
   7011 FFFC8D3E FF FF FF FF FF FF FF FF     
   7012 FFFC8D46 FF FF FF FF FF FF FF FF     
   7013 FFFC8D4E FF FF FF FF FF FF FF FF     
   7014 FFFC8D56 FF FF FF FF FF FF FF FF     
   7015 FFFC8D5E FF FF FF FF FF FF FF FF     
   7016 FFFC8D66 FF FF FF FF FF FF FF FF     
   7017 FFFC8D6E FF FF FF FF FF FF FF FF     
   7018 FFFC8D76 FF FF FF FF FF FF FF FF     
   7019 FFFC8D7E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 57
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7020 FFFC8D86 FF FF FF FF FF FF FF FF     
   7021 FFFC8D8E FF FF FF FF FF FF FF FF     
   7022 FFFC8D96 FF FF FF FF FF FF FF FF     
   7023 FFFC8D9E FF FF FF FF FF FF FF FF     
   7024 FFFC8DA6 FF FF FF FF FF FF FF FF     
   7025 FFFC8DAE FF FF FF FF FF FF FF FF     
   7026 FFFC8DB6 FF FF FF FF FF FF FF FF     
   7027 FFFC8DBE FF FF FF FF FF FF FF FF     
   7028 FFFC8DC6 FF FF FF FF FF FF FF FF     
   7029 FFFC8DCE FF FF FF FF FF FF FF FF     
   7030 FFFC8DD6 FF FF FF FF FF FF FF FF     
   7031 FFFC8DDE FF FF FF FF FF FF FF FF     
   7032 FFFC8DE6 FF FF FF FF FF FF FF FF     
   7033 FFFC8DEE FF FF FF FF FF FF FF FF     
   7034 FFFC8DF6 FF FF FF FF FF FF FF FF     
   7035 FFFC8DFE FF FF FF FF FF FF FF FF     
   7036 FFFC8E06 FF FF FF FF FF FF FF FF     
   7037 FFFC8E0E FF FF FF FF FF FF FF FF     
   7038 FFFC8E16 FF FF FF FF FF FF FF FF     
   7039 FFFC8E1E FF FF FF FF FF FF FF FF     
   7040 FFFC8E26 FF FF FF FF FF FF FF FF     
   7041 FFFC8E2E FF FF FF FF FF FF FF FF     
   7042 FFFC8E36 FF FF FF FF FF FF FF FF     
   7043 FFFC8E3E FF FF FF FF FF FF FF FF     
   7044 FFFC8E46 FF FF FF FF FF FF FF FF     
   7045 FFFC8E4E FF FF FF FF FF FF FF FF     
   7046 FFFC8E56 FF FF FF FF FF FF FF FF     
   7047 FFFC8E5E FF FF FF FF FF FF FF FF     
   7048 FFFC8E66 FF FF FF FF FF FF FF FF     
   7049 FFFC8E6E FF FF FF FF FF FF FF FF     
   7050 FFFC8E76 FF FF FF FF FF FF FF FF     
   7051 FFFC8E7E FF FF FF FF FF FF FF FF     
   7052 FFFC8E86 FF FF FF FF FF FF FF FF     
   7053 FFFC8E8E FF FF FF FF FF FF FF FF     
   7054 FFFC8E96 FF FF FF FF FF FF FF FF     
   7055 FFFC8E9E FF FF FF FF FF FF FF FF     
   7056 FFFC8EA6 FF FF FF FF FF FF FF FF     
   7057 FFFC8EAE FF FF FF FF FF FF FF FF     
   7058 FFFC8EB6 FF FF FF FF FF FF FF FF     
   7059 FFFC8EBE FF FF FF FF FF FF FF FF     
   7060 FFFC8EC6 FF FF FF FF FF FF FF FF     
   7061 FFFC8ECE FF FF FF FF FF FF FF FF     
   7062 FFFC8ED6 FF FF FF FF FF FF FF FF     
   7063 FFFC8EDE FF FF FF FF FF FF FF FF     
   7064 FFFC8EE6 FF FF FF FF FF FF FF FF     
   7065 FFFC8EEE FF FF FF FF FF FF FF FF     
   7066 FFFC8EF6 FF FF FF FF FF FF FF FF     
   7067 FFFC8EFE FF FF FF FF FF FF FF FF     
   7068 FFFC8F06 FF FF FF FF FF FF FF FF     
   7069 FFFC8F0E FF FF FF FF FF FF FF FF     
   7070 FFFC8F16 FF FF FF FF FF FF FF FF     
   7071 FFFC8F1E FF FF FF FF FF FF FF FF     
   7072 FFFC8F26 FF FF FF FF FF FF FF FF     
   7073 FFFC8F2E FF FF FF FF FF FF FF FF     
   7074 FFFC8F36 FF FF FF FF FF FF FF FF     
   7075 FFFC8F3E FF FF FF FF FF FF FF FF     
   7076 FFFC8F46 FF FF FF FF FF FF FF FF     
   7077 FFFC8F4E FF FF FF FF FF FF FF FF     
   7078 FFFC8F56 FF FF FF FF FF FF FF FF     
   7079 FFFC8F5E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 58
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7080 FFFC8F66 FF FF FF FF FF FF FF FF     
   7081 FFFC8F6E FF FF FF FF FF FF FF FF     
   7082 FFFC8F76 FF FF FF FF FF FF FF FF     
   7083 FFFC8F7E FF FF FF FF FF FF FF FF     
   7084 FFFC8F86 FF FF FF FF FF FF FF FF     
   7085 FFFC8F8E FF FF FF FF FF FF FF FF     
   7086 FFFC8F96 FF FF FF FF FF FF FF FF     
   7087 FFFC8F9E FF FF FF FF FF FF FF FF     
   7088 FFFC8FA6 FF FF FF FF FF FF FF FF     
   7089 FFFC8FAE FF FF FF FF FF FF FF FF     
   7090 FFFC8FB6 FF FF FF FF FF FF FF FF     
   7091 FFFC8FBE FF FF FF FF FF FF FF FF     
   7092 FFFC8FC6 FF FF FF FF FF FF FF FF     
   7093 FFFC8FCE FF FF FF FF FF FF FF FF     
   7094 FFFC8FD6 FF FF FF FF FF FF FF FF     
   7095 FFFC8FDE FF FF FF FF FF FF FF FF     
   7096 FFFC8FE6 FF FF FF FF FF FF FF FF     
   7097 FFFC8FEE FF FF FF FF FF FF FF FF     
   7098 FFFC8FF6 FF FF FF FF FF FF FF FF     
   7099 FFFC8FFE FF FF FF FF FF FF FF FF     
   7100 FFFC9006 FF FF FF FF FF FF FF FF     
   7101 FFFC900E FF FF FF FF FF FF FF FF     
   7102 FFFC9016 FF FF FF FF FF FF FF FF     
   7103 FFFC901E FF FF FF FF FF FF FF FF     
   7104 FFFC9026 FF FF FF FF FF FF FF FF     
   7105 FFFC902E FF FF FF FF FF FF FF FF     
   7106 FFFC9036 FF FF FF FF FF FF FF FF     
   7107 FFFC903E FF FF FF FF FF FF FF FF     
   7108 FFFC9046 FF FF FF FF FF FF FF FF     
   7109 FFFC904E FF FF FF FF FF FF FF FF     
   7110 FFFC9056 FF FF FF FF FF FF FF FF     
   7111 FFFC905E FF FF FF FF FF FF FF FF     
   7112 FFFC9066 FF FF FF FF FF FF FF FF     
   7113 FFFC906E FF FF FF FF FF FF FF FF     
   7114 FFFC9076 FF FF FF FF FF FF FF FF     
   7115 FFFC907E FF FF FF FF FF FF FF FF     
   7116 FFFC9086 FF FF FF FF FF FF FF FF     
   7117 FFFC908E FF FF FF FF FF FF FF FF     
   7118 FFFC9096 FF FF FF FF FF FF FF FF     
   7119 FFFC909E FF FF FF FF FF FF FF FF     
   7120 FFFC90A6 FF FF FF FF FF FF FF FF     
   7121 FFFC90AE FF FF FF FF FF FF FF FF     
   7122 FFFC90B6 FF FF FF FF FF FF FF FF     
   7123 FFFC90BE FF FF FF FF FF FF FF FF     
   7124 FFFC90C6 FF FF FF FF FF FF FF FF     
   7125 FFFC90CE FF FF FF FF FF FF FF FF     
   7126 FFFC90D6 FF FF FF FF FF FF FF FF     
   7127 FFFC90DE FF FF FF FF FF FF FF FF     
   7128 FFFC90E6 FF FF FF FF FF FF FF FF     
   7129 FFFC90EE FF FF FF FF FF FF FF FF     
   7130 FFFC90F6 FF FF FF FF FF FF FF FF     
   7131 FFFC90FE FF FF FF FF FF FF FF FF     
   7132 FFFC9106 FF FF FF FF FF FF FF FF     
   7133 FFFC910E FF FF FF FF FF FF FF FF     
   7134 FFFC9116 FF FF FF FF FF FF FF FF     
   7135 FFFC911E FF FF FF FF FF FF FF FF     
   7136 FFFC9126 FF FF FF FF FF FF FF FF     
   7137 FFFC912E FF FF FF FF FF FF FF FF     
   7138 FFFC9136 FF FF FF FF FF FF FF FF     
   7139 FFFC913E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 59
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7140 FFFC9146 FF FF FF FF FF FF FF FF     
   7141 FFFC914E FF FF FF FF FF FF FF FF     
   7142 FFFC9156 FF FF FF FF FF FF FF FF     
   7143 FFFC915E FF FF FF FF FF FF FF FF     
   7144 FFFC9166 FF FF FF FF FF FF FF FF     
   7145 FFFC916E FF FF FF FF FF FF FF FF     
   7146 FFFC9176 FF FF FF FF FF FF FF FF     
   7147 FFFC917E FF FF FF FF FF FF FF FF     
   7148 FFFC9186 FF FF FF FF FF FF FF FF     
   7149 FFFC918E FF FF FF FF FF FF FF FF     
   7150 FFFC9196 FF FF FF FF FF FF FF FF     
   7151 FFFC919E FF FF FF FF FF FF FF FF     
   7152 FFFC91A6 FF FF FF FF FF FF FF FF     
   7153 FFFC91AE FF FF FF FF FF FF FF FF     
   7154 FFFC91B6 FF FF FF FF FF FF FF FF     
   7155 FFFC91BE FF FF FF FF FF FF FF FF     
   7156 FFFC91C6 FF FF FF FF FF FF FF FF     
   7157 FFFC91CE FF FF FF FF FF FF FF FF     
   7158 FFFC91D6 FF FF FF FF FF FF FF FF     
   7159 FFFC91DE FF FF FF FF FF FF FF FF     
   7160 FFFC91E6 FF FF FF FF FF FF FF FF     
   7161 FFFC91EE FF FF FF FF FF FF FF FF     
   7162 FFFC91F6 FF FF FF FF FF FF FF FF     
   7163 FFFC91FE FF FF FF FF FF FF FF FF     
   7164 FFFC9206 FF FF FF FF FF FF FF FF     
   7165 FFFC920E FF FF FF FF FF FF FF FF     
   7166 FFFC9216 FF FF FF FF FF FF FF FF     
   7167 FFFC921E FF FF FF FF FF FF FF FF     
   7168 FFFC9226 FF FF FF FF FF FF FF FF     
   7169 FFFC922E FF FF FF FF FF FF FF FF     
   7170 FFFC9236 FF FF FF FF FF FF FF FF     
   7171 FFFC923E FF FF FF FF FF FF FF FF     
   7172 FFFC9246 FF FF FF FF FF FF FF FF     
   7173 FFFC924E FF FF FF FF FF FF FF FF     
   7174 FFFC9256 FF FF FF FF FF FF FF FF     
   7175 FFFC925E FF FF FF FF FF FF FF FF     
   7176 FFFC9266 FF FF FF FF FF FF FF FF     
   7177 FFFC926E FF FF FF FF FF FF FF FF     
   7178 FFFC9276 FF FF FF FF FF FF FF FF     
   7179 FFFC927E FF FF FF FF FF FF FF FF     
   7180 FFFC9286 FF FF FF FF FF FF FF FF     
   7181 FFFC928E FF FF FF FF FF FF FF FF     
   7182 FFFC9296 FF FF FF FF FF FF FF FF     
   7183 FFFC929E FF FF FF FF FF FF FF FF     
   7184 FFFC92A6 FF FF FF FF FF FF FF FF     
   7185 FFFC92AE FF FF FF FF FF FF FF FF     
   7186 FFFC92B6 FF FF FF FF FF FF FF FF     
   7187 FFFC92BE FF FF FF FF FF FF FF FF     
   7188 FFFC92C6 FF FF FF FF FF FF FF FF     
   7189 FFFC92CE FF FF FF FF FF FF FF FF     
   7190 FFFC92D6 FF FF FF FF FF FF FF FF     
   7191 FFFC92DE FF FF FF FF FF FF FF FF     
   7192 FFFC92E6 FF FF FF FF FF FF FF FF     
   7193 FFFC92EE FF FF FF FF FF FF FF FF     
   7194 FFFC92F6 FF FF FF FF FF FF FF FF     
   7195 FFFC92FE FF FF FF FF FF FF FF FF     
   7196 FFFC9306 FF FF FF FF FF FF FF FF     
   7197 FFFC930E FF FF FF FF FF FF FF FF     
   7198 FFFC9316 FF FF FF FF FF FF FF FF     
   7199 FFFC931E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 60
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7200 FFFC9326 FF FF FF FF FF FF FF FF     
   7201 FFFC932E FF FF FF FF FF FF FF FF     
   7202 FFFC9336 FF FF FF FF FF FF FF FF     
   7203 FFFC933E FF FF FF FF FF FF FF FF     
   7204 FFFC9346 FF FF FF FF FF FF FF FF     
   7205 FFFC934E FF FF FF FF FF FF FF FF     
   7206 FFFC9356 FF FF FF FF FF FF FF FF     
   7207 FFFC935E FF FF FF FF FF FF FF FF     
   7208 FFFC9366 FF FF FF FF FF FF FF FF     
   7209 FFFC936E FF FF FF FF FF FF FF FF     
   7210 FFFC9376 FF FF FF FF FF FF FF FF     
   7211 FFFC937E FF FF FF FF FF FF FF FF     
   7212 FFFC9386 FF FF FF FF FF FF FF FF     
   7213 FFFC938E FF FF FF FF FF FF FF FF     
   7214 FFFC9396 FF FF FF FF FF FF FF FF     
   7215 FFFC939E FF FF FF FF FF FF FF FF     
   7216 FFFC93A6 FF FF FF FF FF FF FF FF     
   7217 FFFC93AE FF FF FF FF FF FF FF FF     
   7218 FFFC93B6 FF FF FF FF FF FF FF FF     
   7219 FFFC93BE FF FF FF FF FF FF FF FF     
   7220 FFFC93C6 FF FF FF FF FF FF FF FF     
   7221 FFFC93CE FF FF FF FF FF FF FF FF     
   7222 FFFC93D6 FF FF FF FF FF FF FF FF     
   7223 FFFC93DE FF FF FF FF FF FF FF FF     
   7224 FFFC93E6 FF FF FF FF FF FF FF FF     
   7225 FFFC93EE FF FF FF FF FF FF FF FF     
   7226 FFFC93F6 FF FF FF FF FF FF FF FF     
   7227 FFFC93FE FF FF FF FF FF FF FF FF     
   7228 FFFC9406 FF FF FF FF FF FF FF FF     
   7229 FFFC940E FF FF FF FF FF FF FF FF     
   7230 FFFC9416 FF FF FF FF FF FF FF FF     
   7231 FFFC941E FF FF FF FF FF FF FF FF     
   7232 FFFC9426 FF FF FF FF FF FF FF FF     
   7233 FFFC942E FF FF FF FF FF FF FF FF     
   7234 FFFC9436 FF FF FF FF FF FF FF FF     
   7235 FFFC943E FF FF FF FF FF FF FF FF     
   7236 FFFC9446 FF FF FF FF FF FF FF FF     
   7237 FFFC944E FF FF FF FF FF FF FF FF     
   7238 FFFC9456 FF FF FF FF FF FF FF FF     
   7239 FFFC945E FF FF FF FF FF FF FF FF     
   7240 FFFC9466 FF FF FF FF FF FF FF FF     
   7241 FFFC946E FF FF FF FF FF FF FF FF     
   7242 FFFC9476 FF FF FF FF FF FF FF FF     
   7243 FFFC947E FF FF FF FF FF FF FF FF     
   7244 FFFC9486 FF FF FF FF FF FF FF FF     
   7245 FFFC948E FF FF FF FF FF FF FF FF     
   7246 FFFC9496 FF FF FF FF FF FF FF FF     
   7247 FFFC949E FF FF FF FF FF FF FF FF     
   7248 FFFC94A6 FF FF FF FF FF FF FF FF     
   7249 FFFC94AE FF FF FF FF FF FF FF FF     
   7250 FFFC94B6 FF FF FF FF FF FF FF FF     
   7251 FFFC94BE FF FF FF FF FF FF FF FF     
   7252 FFFC94C6 FF FF FF FF FF FF FF FF     
   7253 FFFC94CE FF FF FF FF FF FF FF FF     
   7254 FFFC94D6 FF FF FF FF FF FF FF FF     
   7255 FFFC94DE FF FF FF FF FF FF FF FF     
   7256 FFFC94E6 FF FF FF FF FF FF FF FF     
   7257 FFFC94EE FF FF FF FF FF FF FF FF     
   7258 FFFC94F6 FF FF FF FF FF FF FF FF     
   7259 FFFC94FE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 61
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7260 FFFC9506 FF FF FF FF FF FF FF FF     
   7261 FFFC950E FF FF FF FF FF FF FF FF     
   7262 FFFC9516 FF FF FF FF FF FF FF FF     
   7263 FFFC951E FF FF FF FF FF FF FF FF     
   7264 FFFC9526 FF FF FF FF FF FF FF FF     
   7265 FFFC952E FF FF FF FF FF FF FF FF     
   7266 FFFC9536 FF FF FF FF FF FF FF FF     
   7267 FFFC953E FF FF FF FF FF FF FF FF     
   7268 FFFC9546 FF FF FF FF FF FF FF FF     
   7269 FFFC954E FF FF FF FF FF FF FF FF     
   7270 FFFC9556 FF FF FF FF FF FF FF FF     
   7271 FFFC955E FF FF FF FF FF FF FF FF     
   7272 FFFC9566 FF FF FF FF FF FF FF FF     
   7273 FFFC956E FF FF FF FF FF FF FF FF     
   7274 FFFC9576 FF FF FF FF FF FF FF FF     
   7275 FFFC957E FF FF FF FF FF FF FF FF     
   7276 FFFC9586 FF FF FF FF FF FF FF FF     
   7277 FFFC958E FF FF FF FF FF FF FF FF     
   7278 FFFC9596 FF FF FF FF FF FF FF FF     
   7279 FFFC959E FF FF FF FF FF FF FF FF     
   7280 FFFC95A6 FF FF FF FF FF FF FF FF     
   7281 FFFC95AE FF FF FF FF FF FF FF FF     
   7282 FFFC95B6 FF FF FF FF FF FF FF FF     
   7283 FFFC95BE FF FF FF FF FF FF FF FF     
   7284 FFFC95C6 FF FF FF FF FF FF FF FF     
   7285 FFFC95CE FF FF FF FF FF FF FF FF     
   7286 FFFC95D6 FF FF FF FF FF FF FF FF     
   7287 FFFC95DE FF FF FF FF FF FF FF FF     
   7288 FFFC95E6 FF FF FF FF FF FF FF FF     
   7289 FFFC95EE FF FF FF FF FF FF FF FF     
   7290 FFFC95F6 FF FF FF FF FF FF FF FF     
   7291 FFFC95FE FF FF FF FF FF FF FF FF     
   7292 FFFC9606 FF FF FF FF FF FF FF FF     
   7293 FFFC960E FF FF FF FF FF FF FF FF     
   7294 FFFC9616 FF FF FF FF FF FF FF FF     
   7295 FFFC961E FF FF FF FF FF FF FF FF     
   7296 FFFC9626 FF FF FF FF FF FF FF FF     
   7297 FFFC962E FF FF FF FF FF FF FF FF     
   7298 FFFC9636 FF FF FF FF FF FF FF FF     
   7299 FFFC963E FF FF FF FF FF FF FF FF     
   7300 FFFC9646 FF FF FF FF FF FF FF FF     
   7301 FFFC964E FF FF FF FF FF FF FF FF     
   7302 FFFC9656 FF FF FF FF FF FF FF FF     
   7303 FFFC965E FF FF FF FF FF FF FF FF     
   7304 FFFC9666 FF FF FF FF FF FF FF FF     
   7305 FFFC966E FF FF FF FF FF FF FF FF     
   7306 FFFC9676 FF FF FF FF FF FF FF FF     
   7307 FFFC967E FF FF FF FF FF FF FF FF     
   7308 FFFC9686 FF FF FF FF FF FF FF FF     
   7309 FFFC968E FF FF FF FF FF FF FF FF     
   7310 FFFC9696 FF FF FF FF FF FF FF FF     
   7311 FFFC969E FF FF FF FF FF FF FF FF     
   7312 FFFC96A6 FF FF FF FF FF FF FF FF     
   7313 FFFC96AE FF FF FF FF FF FF FF FF     
   7314 FFFC96B6 FF FF FF FF FF FF FF FF     
   7315 FFFC96BE FF FF FF FF FF FF FF FF     
   7316 FFFC96C6 FF FF FF FF FF FF FF FF     
   7317 FFFC96CE FF FF FF FF FF FF FF FF     
   7318 FFFC96D6 FF FF FF FF FF FF FF FF     
   7319 FFFC96DE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 62
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7320 FFFC96E6 FF FF FF FF FF FF FF FF     
   7321 FFFC96EE FF FF FF FF FF FF FF FF     
   7322 FFFC96F6 FF FF FF FF FF FF FF FF     
   7323 FFFC96FE FF FF FF FF FF FF FF FF     
   7324 FFFC9706 FF FF FF FF FF FF FF FF     
   7325 FFFC970E FF FF FF FF FF FF FF FF     
   7326 FFFC9716 FF FF FF FF FF FF FF FF     
   7327 FFFC971E FF FF FF FF FF FF FF FF     
   7328 FFFC9726 FF FF FF FF FF FF FF FF     
   7329 FFFC972E FF FF FF FF FF FF FF FF     
   7330 FFFC9736 FF FF FF FF FF FF FF FF     
   7331 FFFC973E FF FF FF FF FF FF FF FF     
   7332 FFFC9746 FF FF FF FF FF FF FF FF     
   7333 FFFC974E FF FF FF FF FF FF FF FF     
   7334 FFFC9756 FF FF FF FF FF FF FF FF     
   7335 FFFC975E FF FF FF FF FF FF FF FF     
   7336 FFFC9766 FF FF FF FF FF FF FF FF     
   7337 FFFC976E FF FF FF FF FF FF FF FF     
   7338 FFFC9776 FF FF FF FF FF FF FF FF     
   7339 FFFC977E FF FF FF FF FF FF FF FF     
   7340 FFFC9786 FF FF FF FF FF FF FF FF     
   7341 FFFC978E FF FF FF FF FF FF FF FF     
   7342 FFFC9796 FF FF FF FF FF FF FF FF     
   7343 FFFC979E FF FF FF FF FF FF FF FF     
   7344 FFFC97A6 FF FF FF FF FF FF FF FF     
   7345 FFFC97AE FF FF FF FF FF FF FF FF     
   7346 FFFC97B6 FF FF FF FF FF FF FF FF     
   7347 FFFC97BE FF FF FF FF FF FF FF FF     
   7348 FFFC97C6 FF FF FF FF FF FF FF FF     
   7349 FFFC97CE FF FF FF FF FF FF FF FF     
   7350 FFFC97D6 FF FF FF FF FF FF FF FF     
   7351 FFFC97DE FF FF FF FF FF FF FF FF     
   7352 FFFC97E6 FF FF FF FF FF FF FF FF     
   7353 FFFC97EE FF FF FF FF FF FF FF FF     
   7354 FFFC97F6 FF FF FF FF FF FF FF FF     
   7355 FFFC97FE FF FF FF FF FF FF FF FF     
   7356 FFFC9806 FF FF FF FF FF FF FF FF     
   7357 FFFC980E FF FF FF FF FF FF FF FF     
   7358 FFFC9816 FF FF FF FF FF FF FF FF     
   7359 FFFC981E FF FF FF FF FF FF FF FF     
   7360 FFFC9826 FF FF FF FF FF FF FF FF     
   7361 FFFC982E FF FF FF FF FF FF FF FF     
   7362 FFFC9836 FF FF FF FF FF FF FF FF     
   7363 FFFC983E FF FF FF FF FF FF FF FF     
   7364 FFFC9846 FF FF FF FF FF FF FF FF     
   7365 FFFC984E FF FF FF FF FF FF FF FF     
   7366 FFFC9856 FF FF FF FF FF FF FF FF     
   7367 FFFC985E FF FF FF FF FF FF FF FF     
   7368 FFFC9866 FF FF FF FF FF FF FF FF     
   7369 FFFC986E FF FF FF FF FF FF FF FF     
   7370 FFFC9876 FF FF FF FF FF FF FF FF     
   7371 FFFC987E FF FF FF FF FF FF FF FF     
   7372 FFFC9886 FF FF FF FF FF FF FF FF     
   7373 FFFC988E FF FF FF FF FF FF FF FF     
   7374 FFFC9896 FF FF FF FF FF FF FF FF     
   7375 FFFC989E FF FF FF FF FF FF FF FF     
   7376 FFFC98A6 FF FF FF FF FF FF FF FF     
   7377 FFFC98AE FF FF FF FF FF FF FF FF     
   7378 FFFC98B6 FF FF FF FF FF FF FF FF     
   7379 FFFC98BE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 63
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7380 FFFC98C6 FF FF FF FF FF FF FF FF     
   7381 FFFC98CE FF FF FF FF FF FF FF FF     
   7382 FFFC98D6 FF FF FF FF FF FF FF FF     
   7383 FFFC98DE FF FF FF FF FF FF FF FF     
   7384 FFFC98E6 FF FF FF FF FF FF FF FF     
   7385 FFFC98EE FF FF FF FF FF FF FF FF     
   7386 FFFC98F6 FF FF FF FF FF FF FF FF     
   7387 FFFC98FE FF FF FF FF FF FF FF FF     
   7388 FFFC9906 FF FF FF FF FF FF FF FF     
   7389 FFFC990E FF FF FF FF FF FF FF FF     
   7390 FFFC9916 FF FF FF FF FF FF FF FF     
   7391 FFFC991E FF FF FF FF FF FF FF FF     
   7392 FFFC9926 FF FF FF FF FF FF FF FF     
   7393 FFFC992E FF FF FF FF FF FF FF FF     
   7394 FFFC9936 FF FF FF FF FF FF FF FF     
   7395 FFFC993E FF FF FF FF FF FF FF FF     
   7396 FFFC9946 FF FF FF FF FF FF FF FF     
   7397 FFFC994E FF FF FF FF FF FF FF FF     
   7398 FFFC9956 FF FF FF FF FF FF FF FF     
   7399 FFFC995E FF FF FF FF FF FF FF FF     
   7400 FFFC9966 FF FF FF FF FF FF FF FF     
   7401 FFFC996E FF FF FF FF FF FF FF FF     
   7402 FFFC9976 FF FF FF FF FF FF FF FF     
   7403 FFFC997E FF FF FF FF FF FF FF FF     
   7404 FFFC9986 FF FF FF FF FF FF FF FF     
   7405 FFFC998E FF FF FF FF FF FF FF FF     
   7406 FFFC9996 FF FF FF FF FF FF FF FF     
   7407 FFFC999E FF FF FF FF FF FF FF FF     
   7408 FFFC99A6 FF FF FF FF FF FF FF FF     
   7409 FFFC99AE FF FF FF FF FF FF FF FF     
   7410 FFFC99B6 FF FF FF FF FF FF FF FF     
   7411 FFFC99BE FF FF FF FF FF FF FF FF     
   7412 FFFC99C6 FF FF FF FF FF FF FF FF     
   7413 FFFC99CE FF FF FF FF FF FF FF FF     
   7414 FFFC99D6 FF FF FF FF FF FF FF FF     
   7415 FFFC99DE FF FF FF FF FF FF FF FF     
   7416 FFFC99E6 FF FF FF FF FF FF FF FF     
   7417 FFFC99EE FF FF FF FF FF FF FF FF     
   7418 FFFC99F6 FF FF FF FF FF FF FF FF     
   7419 FFFC99FE FF FF FF FF FF FF FF FF     
   7420 FFFC9A06 FF FF FF FF FF FF FF FF     
   7421 FFFC9A0E FF FF FF FF FF FF FF FF     
   7422 FFFC9A16 FF FF FF FF FF FF FF FF     
   7423 FFFC9A1E FF FF FF FF FF FF FF FF     
   7424 FFFC9A26 FF FF FF FF FF FF FF FF     
   7425 FFFC9A2E FF FF FF FF FF FF FF FF     
   7426 FFFC9A36 FF FF FF FF FF FF FF FF     
   7427 FFFC9A3E FF FF FF FF FF FF FF FF     
   7428 FFFC9A46 FF FF FF FF FF FF FF FF     
   7429 FFFC9A4E FF FF FF FF FF FF FF FF     
   7430 FFFC9A56 FF FF FF FF FF FF FF FF     
   7431 FFFC9A5E FF FF FF FF FF FF FF FF     
   7432 FFFC9A66 FF FF FF FF FF FF FF FF     
   7433 FFFC9A6E FF FF FF FF FF FF FF FF     
   7434 FFFC9A76 FF FF FF FF FF FF FF FF     
   7435 FFFC9A7E FF FF FF FF FF FF FF FF     
   7436 FFFC9A86 FF FF FF FF FF FF FF FF     
   7437 FFFC9A8E FF FF FF FF FF FF FF FF     
   7438 FFFC9A96 FF FF FF FF FF FF FF FF     
   7439 FFFC9A9E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 64
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7440 FFFC9AA6 FF FF FF FF FF FF FF FF     
   7441 FFFC9AAE FF FF FF FF FF FF FF FF     
   7442 FFFC9AB6 FF FF FF FF FF FF FF FF     
   7443 FFFC9ABE FF FF FF FF FF FF FF FF     
   7444 FFFC9AC6 FF FF FF FF FF FF FF FF     
   7445 FFFC9ACE FF FF FF FF FF FF FF FF     
   7446 FFFC9AD6 FF FF FF FF FF FF FF FF     
   7447 FFFC9ADE FF FF FF FF FF FF FF FF     
   7448 FFFC9AE6 FF FF FF FF FF FF FF FF     
   7449 FFFC9AEE FF FF FF FF FF FF FF FF     
   7450 FFFC9AF6 FF FF FF FF FF FF FF FF     
   7451 FFFC9AFE FF FF FF FF FF FF FF FF     
   7452 FFFC9B06 FF FF FF FF FF FF FF FF     
   7453 FFFC9B0E FF FF FF FF FF FF FF FF     
   7454 FFFC9B16 FF FF FF FF FF FF FF FF     
   7455 FFFC9B1E FF FF FF FF FF FF FF FF     
   7456 FFFC9B26 FF FF FF FF FF FF FF FF     
   7457 FFFC9B2E FF FF FF FF FF FF FF FF     
   7458 FFFC9B36 FF FF FF FF FF FF FF FF     
   7459 FFFC9B3E FF FF FF FF FF FF FF FF     
   7460 FFFC9B46 FF FF FF FF FF FF FF FF     
   7461 FFFC9B4E FF FF FF FF FF FF FF FF     
   7462 FFFC9B56 FF FF FF FF FF FF FF FF     
   7463 FFFC9B5E FF FF FF FF FF FF FF FF     
   7464 FFFC9B66 FF FF FF FF FF FF FF FF     
   7465 FFFC9B6E FF FF FF FF FF FF FF FF     
   7466 FFFC9B76 FF FF FF FF FF FF FF FF     
   7467 FFFC9B7E FF FF FF FF FF FF FF FF     
   7468 FFFC9B86 FF FF FF FF FF FF FF FF     
   7469 FFFC9B8E FF FF FF FF FF FF FF FF     
   7470 FFFC9B96 FF FF FF FF FF FF FF FF     
   7471 FFFC9B9E FF FF FF FF FF FF FF FF     
   7472 FFFC9BA6 FF FF FF FF FF FF FF FF     
   7473 FFFC9BAE FF FF FF FF FF FF FF FF     
   7474 FFFC9BB6 FF FF FF FF FF FF FF FF     
   7475 FFFC9BBE FF FF FF FF FF FF FF FF     
   7476 FFFC9BC6 FF FF FF FF FF FF FF FF     
   7477 FFFC9BCE FF FF FF FF FF FF FF FF     
   7478 FFFC9BD6 FF FF FF FF FF FF FF FF     
   7479 FFFC9BDE FF FF FF FF FF FF FF FF     
   7480 FFFC9BE6 FF FF FF FF FF FF FF FF     
   7481 FFFC9BEE FF FF FF FF FF FF FF FF     
   7482 FFFC9BF6 FF FF FF FF FF FF FF FF     
   7483 FFFC9BFE FF FF FF FF FF FF FF FF     
   7484 FFFC9C06 FF FF FF FF FF FF FF FF     
   7485 FFFC9C0E FF FF FF FF FF FF FF FF     
   7486 FFFC9C16 FF FF FF FF FF FF FF FF     
   7487 FFFC9C1E FF FF FF FF FF FF FF FF     
   7488 FFFC9C26 FF FF FF FF FF FF FF FF     
   7489 FFFC9C2E FF FF FF FF FF FF FF FF     
   7490 FFFC9C36 FF FF FF FF FF FF FF FF     
   7491 FFFC9C3E FF FF FF FF FF FF FF FF     
   7492 FFFC9C46 FF FF FF FF FF FF FF FF     
   7493 FFFC9C4E FF FF FF FF FF FF FF FF     
   7494 FFFC9C56 FF FF FF FF FF FF FF FF     
   7495 FFFC9C5E FF FF FF FF FF FF FF FF     
   7496 FFFC9C66 FF FF FF FF FF FF FF FF     
   7497 FFFC9C6E FF FF FF FF FF FF FF FF     
   7498 FFFC9C76 FF FF FF FF FF FF FF FF     
   7499 FFFC9C7E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 65
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7500 FFFC9C86 FF FF FF FF FF FF FF FF     
   7501 FFFC9C8E FF FF FF FF FF FF FF FF     
   7502 FFFC9C96 FF FF FF FF FF FF FF FF     
   7503 FFFC9C9E FF FF FF FF FF FF FF FF     
   7504 FFFC9CA6 FF FF FF FF FF FF FF FF     
   7505 FFFC9CAE FF FF FF FF FF FF FF FF     
   7506 FFFC9CB6 FF FF FF FF FF FF FF FF     
   7507 FFFC9CBE FF FF FF FF FF FF FF FF     
   7508 FFFC9CC6 FF FF FF FF FF FF FF FF     
   7509 FFFC9CCE FF FF FF FF FF FF FF FF     
   7510 FFFC9CD6 FF FF FF FF FF FF FF FF     
   7511 FFFC9CDE FF FF FF FF FF FF FF FF     
   7512 FFFC9CE6 FF FF FF FF FF FF FF FF     
   7513 FFFC9CEE FF FF FF FF FF FF FF FF     
   7514 FFFC9CF6 FF FF FF FF FF FF FF FF     
   7515 FFFC9CFE FF FF FF FF FF FF FF FF     
   7516 FFFC9D06 FF FF FF FF FF FF FF FF     
   7517 FFFC9D0E FF FF FF FF FF FF FF FF     
   7518 FFFC9D16 FF FF FF FF FF FF FF FF     
   7519 FFFC9D1E FF FF FF FF FF FF FF FF     
   7520 FFFC9D26 FF FF FF FF FF FF FF FF     
   7521 FFFC9D2E FF FF FF FF FF FF FF FF     
   7522 FFFC9D36 FF FF FF FF FF FF FF FF     
   7523 FFFC9D3E FF FF FF FF FF FF FF FF     
   7524 FFFC9D46 FF FF FF FF FF FF FF FF     
   7525 FFFC9D4E FF FF FF FF FF FF FF FF     
   7526 FFFC9D56 FF FF FF FF FF FF FF FF     
   7527 FFFC9D5E FF FF FF FF FF FF FF FF     
   7528 FFFC9D66 FF FF FF FF FF FF FF FF     
   7529 FFFC9D6E FF FF FF FF FF FF FF FF     
   7530 FFFC9D76 FF FF FF FF FF FF FF FF     
   7531 FFFC9D7E FF FF FF FF FF FF FF FF     
   7532 FFFC9D86 FF FF FF FF FF FF FF FF     
   7533 FFFC9D8E FF FF FF FF FF FF FF FF     
   7534 FFFC9D96 FF FF FF FF FF FF FF FF     
   7535 FFFC9D9E FF FF FF FF FF FF FF FF     
   7536 FFFC9DA6 FF FF FF FF FF FF FF FF     
   7537 FFFC9DAE FF FF FF FF FF FF FF FF     
   7538 FFFC9DB6 FF FF FF FF FF FF FF FF     
   7539 FFFC9DBE FF FF FF FF FF FF FF FF     
   7540 FFFC9DC6 FF FF FF FF FF FF FF FF     
   7541 FFFC9DCE FF FF FF FF FF FF FF FF     
   7542 FFFC9DD6 FF FF FF FF FF FF FF FF     
   7543 FFFC9DDE FF FF FF FF FF FF FF FF     
   7544 FFFC9DE6 FF FF FF FF FF FF FF FF     
   7545 FFFC9DEE FF FF FF FF FF FF FF FF     
   7546 FFFC9DF6 FF FF FF FF FF FF FF FF     
   7547 FFFC9DFE FF FF FF FF FF FF FF FF     
   7548 FFFC9E06 FF FF FF FF FF FF FF FF     
   7549 FFFC9E0E FF FF FF FF FF FF FF FF     
   7550 FFFC9E16 FF FF FF FF FF FF FF FF     
   7551 FFFC9E1E FF FF FF FF FF FF FF FF     
   7552 FFFC9E26 FF FF FF FF FF FF FF FF     
   7553 FFFC9E2E FF FF FF FF FF FF FF FF     
   7554 FFFC9E36 FF FF FF FF FF FF FF FF     
   7555 FFFC9E3E FF FF FF FF FF FF FF FF     
   7556 FFFC9E46 FF FF FF FF FF FF FF FF     
   7557 FFFC9E4E FF FF FF FF FF FF FF FF     
   7558 FFFC9E56 FF FF FF FF FF FF FF FF     
   7559 FFFC9E5E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 66
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7560 FFFC9E66 FF FF FF FF FF FF FF FF     
   7561 FFFC9E6E FF FF FF FF FF FF FF FF     
   7562 FFFC9E76 FF FF FF FF FF FF FF FF     
   7563 FFFC9E7E FF FF FF FF FF FF FF FF     
   7564 FFFC9E86 FF FF FF FF FF FF FF FF     
   7565 FFFC9E8E FF FF FF FF FF FF FF FF     
   7566 FFFC9E96 FF FF FF FF FF FF FF FF     
   7567 FFFC9E9E FF FF FF FF FF FF FF FF     
   7568 FFFC9EA6 FF FF FF FF FF FF FF FF     
   7569 FFFC9EAE FF FF FF FF FF FF FF FF     
   7570 FFFC9EB6 FF FF FF FF FF FF FF FF     
   7571 FFFC9EBE FF FF FF FF FF FF FF FF     
   7572 FFFC9EC6 FF FF FF FF FF FF FF FF     
   7573 FFFC9ECE FF FF FF FF FF FF FF FF     
   7574 FFFC9ED6 FF FF FF FF FF FF FF FF     
   7575 FFFC9EDE FF FF FF FF FF FF FF FF     
   7576 FFFC9EE6 FF FF FF FF FF FF FF FF     
   7577 FFFC9EEE FF FF FF FF FF FF FF FF     
   7578 FFFC9EF6 FF FF FF FF FF FF FF FF     
   7579 FFFC9EFE FF FF FF FF FF FF FF FF     
   7580 FFFC9F06 FF FF FF FF FF FF FF FF     
   7581 FFFC9F0E FF FF FF FF FF FF FF FF     
   7582 FFFC9F16 FF FF FF FF FF FF FF FF     
   7583 FFFC9F1E FF FF FF FF FF FF FF FF     
   7584 FFFC9F26 FF FF FF FF FF FF FF FF     
   7585 FFFC9F2E FF FF FF FF FF FF FF FF     
   7586 FFFC9F36 FF FF FF FF FF FF FF FF     
   7587 FFFC9F3E FF FF FF FF FF FF FF FF     
   7588 FFFC9F46 FF FF FF FF FF FF FF FF     
   7589 FFFC9F4E FF FF FF FF FF FF FF FF     
   7590 FFFC9F56 FF FF FF FF FF FF FF FF     
   7591 FFFC9F5E FF FF FF FF FF FF FF FF     
   7592 FFFC9F66 FF FF FF FF FF FF FF FF     
   7593 FFFC9F6E FF FF FF FF FF FF FF FF     
   7594 FFFC9F76 FF FF FF FF FF FF FF FF     
   7595 FFFC9F7E FF FF FF FF FF FF FF FF     
   7596 FFFC9F86 FF FF FF FF FF FF FF FF     
   7597 FFFC9F8E FF FF FF FF FF FF FF FF     
   7598 FFFC9F96 FF FF FF FF FF FF FF FF     
   7599 FFFC9F9E FF FF FF FF FF FF FF FF     
   7600 FFFC9FA6 FF FF FF FF FF FF FF FF     
   7601 FFFC9FAE FF FF FF FF FF FF FF FF     
   7602 FFFC9FB6 FF FF FF FF FF FF FF FF     
   7603 FFFC9FBE FF FF FF FF FF FF FF FF     
   7604 FFFC9FC6 FF FF FF FF FF FF FF FF     
   7605 FFFC9FCE FF FF FF FF FF FF FF FF     
   7606 FFFC9FD6 FF FF FF FF FF FF FF FF     
   7607 FFFC9FDE FF FF FF FF FF FF FF FF     
   7608 FFFC9FE6 FF FF FF FF FF FF FF FF     
   7609 FFFC9FEE FF FF FF FF FF FF FF FF     
   7610 FFFC9FF6 FF FF FF FF FF FF FF FF     
   7611 FFFC9FFE FF FF FF FF FF FF FF FF     
   7612 FFFCA006 FF FF FF FF FF FF FF FF     
   7613 FFFCA00E FF FF FF FF FF FF FF FF     
   7614 FFFCA016 FF FF FF FF FF FF FF FF     
   7615 FFFCA01E FF FF FF FF FF FF FF FF     
   7616 FFFCA026 FF FF FF FF FF FF FF FF     
   7617 FFFCA02E FF FF FF FF FF FF FF FF     
   7618 FFFCA036 FF FF FF FF FF FF FF FF     
   7619 FFFCA03E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 67
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7620 FFFCA046 FF FF FF FF FF FF FF FF     
   7621 FFFCA04E FF FF FF FF FF FF FF FF     
   7622 FFFCA056 FF FF FF FF FF FF FF FF     
   7623 FFFCA05E FF FF FF FF FF FF FF FF     
   7624 FFFCA066 FF FF FF FF FF FF FF FF     
   7625 FFFCA06E FF FF FF FF FF FF FF FF     
   7626 FFFCA076 FF FF FF FF FF FF FF FF     
   7627 FFFCA07E FF FF FF FF FF FF FF FF     
   7628 FFFCA086 FF FF FF FF FF FF FF FF     
   7629 FFFCA08E FF FF FF FF FF FF FF FF     
   7630 FFFCA096 FF FF FF FF FF FF FF FF     
   7631 FFFCA09E FF FF FF FF FF FF FF FF     
   7632 FFFCA0A6 FF FF FF FF FF FF FF FF     
   7633 FFFCA0AE FF FF FF FF FF FF FF FF     
   7634 FFFCA0B6 FF FF FF FF FF FF FF FF     
   7635 FFFCA0BE FF FF FF FF FF FF FF FF     
   7636 FFFCA0C6 FF FF FF FF FF FF FF FF     
   7637 FFFCA0CE FF FF FF FF FF FF FF FF     
   7638 FFFCA0D6 FF FF FF FF FF FF FF FF     
   7639 FFFCA0DE FF FF FF FF FF FF FF FF     
   7640 FFFCA0E6 FF FF FF FF FF FF FF FF     
   7641 FFFCA0EE FF FF FF FF FF FF FF FF     
   7642 FFFCA0F6 FF FF FF FF FF FF FF FF     
   7643 FFFCA0FE FF FF FF FF FF FF FF FF     
   7644 FFFCA106 FF FF FF FF FF FF FF FF     
   7645 FFFCA10E FF FF FF FF FF FF FF FF     
   7646 FFFCA116 FF FF FF FF FF FF FF FF     
   7647 FFFCA11E FF FF FF FF FF FF FF FF     
   7648 FFFCA126 FF FF FF FF FF FF FF FF     
   7649 FFFCA12E FF FF FF FF FF FF FF FF     
   7650 FFFCA136 FF FF FF FF FF FF FF FF     
   7651 FFFCA13E FF FF FF FF FF FF FF FF     
   7652 FFFCA146 FF FF FF FF FF FF FF FF     
   7653 FFFCA14E FF FF FF FF FF FF FF FF     
   7654 FFFCA156 FF FF FF FF FF FF FF FF     
   7655 FFFCA15E FF FF FF FF FF FF FF FF     
   7656 FFFCA166 FF FF FF FF FF FF FF FF     
   7657 FFFCA16E FF FF FF FF FF FF FF FF     
   7658 FFFCA176 FF FF FF FF FF FF FF FF     
   7659 FFFCA17E FF FF FF FF FF FF FF FF     
   7660 FFFCA186 FF FF FF FF FF FF FF FF     
   7661 FFFCA18E FF FF FF FF FF FF FF FF     
   7662 FFFCA196 FF FF FF FF FF FF FF FF     
   7663 FFFCA19E FF FF FF FF FF FF FF FF     
   7664 FFFCA1A6 FF FF FF FF FF FF FF FF     
   7665 FFFCA1AE FF FF FF FF FF FF FF FF     
   7666 FFFCA1B6 FF FF FF FF FF FF FF FF     
   7667 FFFCA1BE FF FF FF FF FF FF FF FF     
   7668 FFFCA1C6 FF FF FF FF FF FF FF FF     
   7669 FFFCA1CE FF FF FF FF FF FF FF FF     
   7670 FFFCA1D6 FF FF FF FF FF FF FF FF     
   7671 FFFCA1DE FF FF FF FF FF FF FF FF     
   7672 FFFCA1E6 FF FF FF FF FF FF FF FF     
   7673 FFFCA1EE FF FF FF FF FF FF FF FF     
   7674 FFFCA1F6 FF FF FF FF FF FF FF FF     
   7675 FFFCA1FE FF FF FF FF FF FF FF FF     
   7676 FFFCA206 FF FF FF FF FF FF FF FF     
   7677 FFFCA20E FF FF FF FF FF FF FF FF     
   7678 FFFCA216 FF FF FF FF FF FF FF FF     
   7679 FFFCA21E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 68
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7680 FFFCA226 FF FF FF FF FF FF FF FF     
   7681 FFFCA22E FF FF FF FF FF FF FF FF     
   7682 FFFCA236 FF FF FF FF FF FF FF FF     
   7683 FFFCA23E FF FF FF FF FF FF FF FF     
   7684 FFFCA246 FF FF FF FF FF FF FF FF     
   7685 FFFCA24E FF FF FF FF FF FF FF FF     
   7686 FFFCA256 FF FF FF FF FF FF FF FF     
   7687 FFFCA25E FF FF FF FF FF FF FF FF     
   7688 FFFCA266 FF FF FF FF FF FF FF FF     
   7689 FFFCA26E FF FF FF FF FF FF FF FF     
   7690 FFFCA276 FF FF FF FF FF FF FF FF     
   7691 FFFCA27E FF FF FF FF FF FF FF FF     
   7692 FFFCA286 FF FF FF FF FF FF FF FF     
   7693 FFFCA28E FF FF FF FF FF FF FF FF     
   7694 FFFCA296 FF FF FF FF FF FF FF FF     
   7695 FFFCA29E FF FF FF FF FF FF FF FF     
   7696 FFFCA2A6 FF FF FF FF FF FF FF FF     
   7697 FFFCA2AE FF FF FF FF FF FF FF FF     
   7698 FFFCA2B6 FF FF FF FF FF FF FF FF     
   7699 FFFCA2BE FF FF FF FF FF FF FF FF     
   7700 FFFCA2C6 FF FF FF FF FF FF FF FF     
   7701 FFFCA2CE FF FF FF FF FF FF FF FF     
   7702 FFFCA2D6 FF FF FF FF FF FF FF FF     
   7703 FFFCA2DE FF FF FF FF FF FF FF FF     
   7704 FFFCA2E6 FF FF FF FF FF FF FF FF     
   7705 FFFCA2EE FF FF FF FF FF FF FF FF     
   7706 FFFCA2F6 FF FF FF FF FF FF FF FF     
   7707 FFFCA2FE FF FF FF FF FF FF FF FF     
   7708 FFFCA306 FF FF FF FF FF FF FF FF     
   7709 FFFCA30E FF FF FF FF FF FF FF FF     
   7710 FFFCA316 FF FF FF FF FF FF FF FF     
   7711 FFFCA31E FF FF FF FF FF FF FF FF     
   7712 FFFCA326 FF FF FF FF FF FF FF FF     
   7713 FFFCA32E FF FF FF FF FF FF FF FF     
   7714 FFFCA336 FF FF FF FF FF FF FF FF     
   7715 FFFCA33E FF FF FF FF FF FF FF FF     
   7716 FFFCA346 FF FF FF FF FF FF FF FF     
   7717 FFFCA34E FF FF FF FF FF FF FF FF     
   7718 FFFCA356 FF FF FF FF FF FF FF FF     
   7719 FFFCA35E FF FF FF FF FF FF FF FF     
   7720 FFFCA366 FF FF FF FF FF FF FF FF     
   7721 FFFCA36E FF FF FF FF FF FF FF FF     
   7722 FFFCA376 FF FF FF FF FF FF FF FF     
   7723 FFFCA37E FF FF FF FF FF FF FF FF     
   7724 FFFCA386 FF FF FF FF FF FF FF FF     
   7725 FFFCA38E FF FF FF FF FF FF FF FF     
   7726 FFFCA396 FF FF FF FF FF FF FF FF     
   7727 FFFCA39E FF FF FF FF FF FF FF FF     
   7728 FFFCA3A6 FF FF FF FF FF FF FF FF     
   7729 FFFCA3AE FF FF FF FF FF FF FF FF     
   7730 FFFCA3B6 FF FF FF FF FF FF FF FF     
   7731 FFFCA3BE FF FF FF FF FF FF FF FF     
   7732 FFFCA3C6 FF FF FF FF FF FF FF FF     
   7733 FFFCA3CE FF FF FF FF FF FF FF FF     
   7734 FFFCA3D6 FF FF FF FF FF FF FF FF     
   7735 FFFCA3DE FF FF FF FF FF FF FF FF     
   7736 FFFCA3E6 FF FF FF FF FF FF FF FF     
   7737 FFFCA3EE FF FF FF FF FF FF FF FF     
   7738 FFFCA3F6 FF FF FF FF FF FF FF FF     
   7739 FFFCA3FE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 69
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7740 FFFCA406 FF FF FF FF FF FF FF FF     
   7741 FFFCA40E FF FF FF FF FF FF FF FF     
   7742 FFFCA416 FF FF FF FF FF FF FF FF     
   7743 FFFCA41E FF FF FF FF FF FF FF FF     
   7744 FFFCA426 FF FF FF FF FF FF FF FF     
   7745 FFFCA42E FF FF FF FF FF FF FF FF     
   7746 FFFCA436 FF FF FF FF FF FF FF FF     
   7747 FFFCA43E FF FF FF FF FF FF FF FF     
   7748 FFFCA446 FF FF FF FF FF FF FF FF     
   7749 FFFCA44E FF FF FF FF FF FF FF FF     
   7750 FFFCA456 FF FF FF FF FF FF FF FF     
   7751 FFFCA45E FF FF FF FF FF FF FF FF     
   7752 FFFCA466 FF FF FF FF FF FF FF FF     
   7753 FFFCA46E FF FF FF FF FF FF FF FF     
   7754 FFFCA476 FF FF FF FF FF FF FF FF     
   7755 FFFCA47E FF FF FF FF FF FF FF FF     
   7756 FFFCA486 FF FF FF FF FF FF FF FF     
   7757 FFFCA48E FF FF FF FF FF FF FF FF     
   7758 FFFCA496 FF FF FF FF FF FF FF FF     
   7759 FFFCA49E FF FF FF FF FF FF FF FF     
   7760 FFFCA4A6 FF FF FF FF FF FF FF FF     
   7761 FFFCA4AE FF FF FF FF FF FF FF FF     
   7762 FFFCA4B6 FF FF FF FF FF FF FF FF     
   7763 FFFCA4BE FF FF FF FF FF FF FF FF     
   7764 FFFCA4C6 FF FF FF FF FF FF FF FF     
   7765 FFFCA4CE FF FF FF FF FF FF FF FF     
   7766 FFFCA4D6 FF FF FF FF FF FF FF FF     
   7767 FFFCA4DE FF FF FF FF FF FF FF FF     
   7768 FFFCA4E6 FF FF FF FF FF FF FF FF     
   7769 FFFCA4EE FF FF FF FF FF FF FF FF     
   7770 FFFCA4F6 FF FF FF FF FF FF FF FF     
   7771 FFFCA4FE FF FF FF FF FF FF FF FF     
   7772 FFFCA506 FF FF FF FF FF FF FF FF     
   7773 FFFCA50E FF FF FF FF FF FF FF FF     
   7774 FFFCA516 FF FF FF FF FF FF FF FF     
   7775 FFFCA51E FF FF FF FF FF FF FF FF     
   7776 FFFCA526 FF FF FF FF FF FF FF FF     
   7777 FFFCA52E FF FF FF FF FF FF FF FF     
   7778 FFFCA536 FF FF FF FF FF FF FF FF     
   7779 FFFCA53E FF FF FF FF FF FF FF FF     
   7780 FFFCA546 FF FF FF FF FF FF FF FF     
   7781 FFFCA54E FF FF FF FF FF FF FF FF     
   7782 FFFCA556 FF FF FF FF FF FF FF FF     
   7783 FFFCA55E FF FF FF FF FF FF FF FF     
   7784 FFFCA566 FF FF FF FF FF FF FF FF     
   7785 FFFCA56E FF FF FF FF FF FF FF FF     
   7786 FFFCA576 FF FF FF FF FF FF FF FF     
   7787 FFFCA57E FF FF FF FF FF FF FF FF     
   7788 FFFCA586 FF FF FF FF FF FF FF FF     
   7789 FFFCA58E FF FF FF FF FF FF FF FF     
   7790 FFFCA596 FF FF FF FF FF FF FF FF     
   7791 FFFCA59E FF FF FF FF FF FF FF FF     
   7792 FFFCA5A6 FF FF FF FF FF FF FF FF     
   7793 FFFCA5AE FF FF FF FF FF FF FF FF     
   7794 FFFCA5B6 FF FF FF FF FF FF FF FF     
   7795 FFFCA5BE FF FF FF FF FF FF FF FF     
   7796 FFFCA5C6 FF FF FF FF FF FF FF FF     
   7797 FFFCA5CE FF FF FF FF FF FF FF FF     
   7798 FFFCA5D6 FF FF FF FF FF FF FF FF     
   7799 FFFCA5DE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 70
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7800 FFFCA5E6 FF FF FF FF FF FF FF FF     
   7801 FFFCA5EE FF FF FF FF FF FF FF FF     
   7802 FFFCA5F6 FF FF FF FF FF FF FF FF     
   7803 FFFCA5FE FF FF FF FF FF FF FF FF     
   7804 FFFCA606 FF FF FF FF FF FF FF FF     
   7805 FFFCA60E FF FF FF FF FF FF FF FF     
   7806 FFFCA616 FF FF FF FF FF FF FF FF     
   7807 FFFCA61E FF FF FF FF FF FF FF FF     
   7808 FFFCA626 FF FF FF FF FF FF FF FF     
   7809 FFFCA62E FF FF FF FF FF FF FF FF     
   7810 FFFCA636 FF FF FF FF FF FF FF FF     
   7811 FFFCA63E FF FF FF FF FF FF FF FF     
   7812 FFFCA646 FF FF FF FF FF FF FF FF     
   7813 FFFCA64E FF FF FF FF FF FF FF FF     
   7814 FFFCA656 FF FF FF FF FF FF FF FF     
   7815 FFFCA65E FF FF FF FF FF FF FF FF     
   7816 FFFCA666 FF FF FF FF FF FF FF FF     
   7817 FFFCA66E FF FF FF FF FF FF FF FF     
   7818 FFFCA676 FF FF FF FF FF FF FF FF     
   7819 FFFCA67E FF FF FF FF FF FF FF FF     
   7820 FFFCA686 FF FF FF FF FF FF FF FF     
   7821 FFFCA68E FF FF FF FF FF FF FF FF     
   7822 FFFCA696 FF FF FF FF FF FF FF FF     
   7823 FFFCA69E FF FF FF FF FF FF FF FF     
   7824 FFFCA6A6 FF FF FF FF FF FF FF FF     
   7825 FFFCA6AE FF FF FF FF FF FF FF FF     
   7826 FFFCA6B6 FF FF FF FF FF FF FF FF     
   7827 FFFCA6BE FF FF FF FF FF FF FF FF     
   7828 FFFCA6C6 FF FF FF FF FF FF FF FF     
   7829 FFFCA6CE FF FF FF FF FF FF FF FF     
   7830 FFFCA6D6 FF FF FF FF FF FF FF FF     
   7831 FFFCA6DE FF FF FF FF FF FF FF FF     
   7832 FFFCA6E6 FF FF FF FF FF FF FF FF     
   7833 FFFCA6EE FF FF FF FF FF FF FF FF     
   7834 FFFCA6F6 FF FF FF FF FF FF FF FF     
   7835 FFFCA6FE FF FF FF FF FF FF FF FF     
   7836 FFFCA706 FF FF FF FF FF FF FF FF     
   7837 FFFCA70E FF FF FF FF FF FF FF FF     
   7838 FFFCA716 FF FF FF FF FF FF FF FF     
   7839 FFFCA71E FF FF FF FF FF FF FF FF     
   7840 FFFCA726 FF FF FF FF FF FF FF FF     
   7841 FFFCA72E FF FF FF FF FF FF FF FF     
   7842 FFFCA736 FF FF FF FF FF FF FF FF     
   7843 FFFCA73E FF FF FF FF FF FF FF FF     
   7844 FFFCA746 FF FF FF FF FF FF FF FF     
   7845 FFFCA74E FF FF FF FF FF FF FF FF     
   7846 FFFCA756 FF FF FF FF FF FF FF FF     
   7847 FFFCA75E FF FF FF FF FF FF FF FF     
   7848 FFFCA766 FF FF FF FF FF FF FF FF     
   7849 FFFCA76E FF FF FF FF FF FF FF FF     
   7850 FFFCA776 FF FF FF FF FF FF FF FF     
   7851 FFFCA77E FF FF FF FF FF FF FF FF     
   7852 FFFCA786 FF FF FF FF FF FF FF FF     
   7853 FFFCA78E FF FF FF FF FF FF FF FF     
   7854 FFFCA796 FF FF FF FF FF FF FF FF     
   7855 FFFCA79E FF FF FF FF FF FF FF FF     
   7856 FFFCA7A6 FF FF FF FF FF FF FF FF     
   7857 FFFCA7AE FF FF FF FF FF FF FF FF     
   7858 FFFCA7B6 FF FF FF FF FF FF FF FF     
   7859 FFFCA7BE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 71
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7860 FFFCA7C6 FF FF FF FF FF FF FF FF     
   7861 FFFCA7CE FF FF FF FF FF FF FF FF     
   7862 FFFCA7D6 FF FF FF FF FF FF FF FF     
   7863 FFFCA7DE FF FF FF FF FF FF FF FF     
   7864 FFFCA7E6 FF FF FF FF FF FF FF FF     
   7865 FFFCA7EE FF FF FF FF FF FF FF FF     
   7866 FFFCA7F6 FF FF FF FF FF FF FF FF     
   7867 FFFCA7FE FF FF FF FF FF FF FF FF     
   7868 FFFCA806 FF FF FF FF FF FF FF FF     
   7869 FFFCA80E FF FF FF FF FF FF FF FF     
   7870 FFFCA816 FF FF FF FF FF FF FF FF     
   7871 FFFCA81E FF FF FF FF FF FF FF FF     
   7872 FFFCA826 FF FF FF FF FF FF FF FF     
   7873 FFFCA82E FF FF FF FF FF FF FF FF     
   7874 FFFCA836 FF FF FF FF FF FF FF FF     
   7875 FFFCA83E FF FF FF FF FF FF FF FF     
   7876 FFFCA846 FF FF FF FF FF FF FF FF     
   7877 FFFCA84E FF FF FF FF FF FF FF FF     
   7878 FFFCA856 FF FF FF FF FF FF FF FF     
   7879 FFFCA85E FF FF FF FF FF FF FF FF     
   7880 FFFCA866 FF FF FF FF FF FF FF FF     
   7881 FFFCA86E FF FF FF FF FF FF FF FF     
   7882 FFFCA876 FF FF FF FF FF FF FF FF     
   7883 FFFCA87E FF FF FF FF FF FF FF FF     
   7884 FFFCA886 FF FF FF FF FF FF FF FF     
   7885 FFFCA88E FF FF FF FF FF FF FF FF     
   7886 FFFCA896 FF FF FF FF FF FF FF FF     
   7887 FFFCA89E FF FF FF FF FF FF FF FF     
   7888 FFFCA8A6 FF FF FF FF FF FF FF FF     
   7889 FFFCA8AE FF FF FF FF FF FF FF FF     
   7890 FFFCA8B6 FF FF FF FF FF FF FF FF     
   7891 FFFCA8BE FF FF FF FF FF FF FF FF     
   7892 FFFCA8C6 FF FF FF FF FF FF FF FF     
   7893 FFFCA8CE FF FF FF FF FF FF FF FF     
   7894 FFFCA8D6 FF FF FF FF FF FF FF FF     
   7895 FFFCA8DE FF FF FF FF FF FF FF FF     
   7896 FFFCA8E6 FF FF FF FF FF FF FF FF     
   7897 FFFCA8EE FF FF FF FF FF FF FF FF     
   7898 FFFCA8F6 FF FF FF FF FF FF FF FF     
   7899 FFFCA8FE FF FF FF FF FF FF FF FF     
   7900 FFFCA906 FF FF FF FF FF FF FF FF     
   7901 FFFCA90E FF FF FF FF FF FF FF FF     
   7902 FFFCA916 FF FF FF FF FF FF FF FF     
   7903 FFFCA91E FF FF FF FF FF FF FF FF     
   7904 FFFCA926 FF FF FF FF FF FF FF FF     
   7905 FFFCA92E FF FF FF FF FF FF FF FF     
   7906 FFFCA936 FF FF FF FF FF FF FF FF     
   7907 FFFCA93E FF FF FF FF FF FF FF FF     
   7908 FFFCA946 FF FF FF FF FF FF FF FF     
   7909 FFFCA94E FF FF FF FF FF FF FF FF     
   7910 FFFCA956 FF FF FF FF FF FF FF FF     
   7911 FFFCA95E FF FF FF FF FF FF FF FF     
   7912 FFFCA966 FF FF FF FF FF FF FF FF     
   7913 FFFCA96E FF FF FF FF FF FF FF FF     
   7914 FFFCA976 FF FF FF FF FF FF FF FF     
   7915 FFFCA97E FF FF FF FF FF FF FF FF     
   7916 FFFCA986 FF FF FF FF FF FF FF FF     
   7917 FFFCA98E FF FF FF FF FF FF FF FF     
   7918 FFFCA996 FF FF FF FF FF FF FF FF     
   7919 FFFCA99E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 72
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7920 FFFCA9A6 FF FF FF FF FF FF FF FF     
   7921 FFFCA9AE FF FF FF FF FF FF FF FF     
   7922 FFFCA9B6 FF FF FF FF FF FF FF FF     
   7923 FFFCA9BE FF FF FF FF FF FF FF FF     
   7924 FFFCA9C6 FF FF FF FF FF FF FF FF     
   7925 FFFCA9CE FF FF FF FF FF FF FF FF     
   7926 FFFCA9D6 FF FF FF FF FF FF FF FF     
   7927 FFFCA9DE FF FF FF FF FF FF FF FF     
   7928 FFFCA9E6 FF FF FF FF FF FF FF FF     
   7929 FFFCA9EE FF FF FF FF FF FF FF FF     
   7930 FFFCA9F6 FF FF FF FF FF FF FF FF     
   7931 FFFCA9FE FF FF FF FF FF FF FF FF     
   7932 FFFCAA06 FF FF FF FF FF FF FF FF     
   7933 FFFCAA0E FF FF FF FF FF FF FF FF     
   7934 FFFCAA16 FF FF FF FF FF FF FF FF     
   7935 FFFCAA1E FF FF FF FF FF FF FF FF     
   7936 FFFCAA26 FF FF FF FF FF FF FF FF     
   7937 FFFCAA2E FF FF FF FF FF FF FF FF     
   7938 FFFCAA36 FF FF FF FF FF FF FF FF     
   7939 FFFCAA3E FF FF FF FF FF FF FF FF     
   7940 FFFCAA46 FF FF FF FF FF FF FF FF     
   7941 FFFCAA4E FF FF FF FF FF FF FF FF     
   7942 FFFCAA56 FF FF FF FF FF FF FF FF     
   7943 FFFCAA5E FF FF FF FF FF FF FF FF     
   7944 FFFCAA66 FF FF FF FF FF FF FF FF     
   7945 FFFCAA6E FF FF FF FF FF FF FF FF     
   7946 FFFCAA76 FF FF FF FF FF FF FF FF     
   7947 FFFCAA7E FF FF FF FF FF FF FF FF     
   7948 FFFCAA86 FF FF FF FF FF FF FF FF     
   7949 FFFCAA8E FF FF FF FF FF FF FF FF     
   7950 FFFCAA96 FF FF FF FF FF FF FF FF     
   7951 FFFCAA9E FF FF FF FF FF FF FF FF     
   7952 FFFCAAA6 FF FF FF FF FF FF FF FF     
   7953 FFFCAAAE FF FF FF FF FF FF FF FF     
   7954 FFFCAAB6 FF FF FF FF FF FF FF FF     
   7955 FFFCAABE FF FF FF FF FF FF FF FF     
   7956 FFFCAAC6 FF FF FF FF FF FF FF FF     
   7957 FFFCAACE FF FF FF FF FF FF FF FF     
   7958 FFFCAAD6 FF FF FF FF FF FF FF FF     
   7959 FFFCAADE FF FF FF FF FF FF FF FF     
   7960 FFFCAAE6 FF FF FF FF FF FF FF FF     
   7961 FFFCAAEE FF FF FF FF FF FF FF FF     
   7962 FFFCAAF6 FF FF FF FF FF FF FF FF     
   7963 FFFCAAFE FF FF FF FF FF FF FF FF     
   7964 FFFCAB06 FF FF FF FF FF FF FF FF     
   7965 FFFCAB0E FF FF FF FF FF FF FF FF     
   7966 FFFCAB16 FF FF FF FF FF FF FF FF     
   7967 FFFCAB1E FF FF FF FF FF FF FF FF     
   7968 FFFCAB26 FF FF FF FF FF FF FF FF     
   7969 FFFCAB2E FF FF FF FF FF FF FF FF     
   7970 FFFCAB36 FF FF FF FF FF FF FF FF     
   7971 FFFCAB3E FF FF FF FF FF FF FF FF     
   7972 FFFCAB46 FF FF FF FF FF FF FF FF     
   7973 FFFCAB4E FF FF FF FF FF FF FF FF     
   7974 FFFCAB56 FF FF FF FF FF FF FF FF     
   7975 FFFCAB5E FF FF FF FF FF FF FF FF     
   7976 FFFCAB66 FF FF FF FF FF FF FF FF     
   7977 FFFCAB6E FF FF FF FF FF FF FF FF     
   7978 FFFCAB76 FF FF FF FF FF FF FF FF     
   7979 FFFCAB7E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 73
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   7980 FFFCAB86 FF FF FF FF FF FF FF FF     
   7981 FFFCAB8E FF FF FF FF FF FF FF FF     
   7982 FFFCAB96 FF FF FF FF FF FF FF FF     
   7983 FFFCAB9E FF FF FF FF FF FF FF FF     
   7984 FFFCABA6 FF FF FF FF FF FF FF FF     
   7985 FFFCABAE FF FF FF FF FF FF FF FF     
   7986 FFFCABB6 FF FF FF FF FF FF FF FF     
   7987 FFFCABBE FF FF FF FF FF FF FF FF     
   7988 FFFCABC6 FF FF FF FF FF FF FF FF     
   7989 FFFCABCE FF FF FF FF FF FF FF FF     
   7990 FFFCABD6 FF FF FF FF FF FF FF FF     
   7991 FFFCABDE FF FF FF FF FF FF FF FF     
   7992 FFFCABE6 FF FF FF FF FF FF FF FF     
   7993 FFFCABEE FF FF FF FF FF FF FF FF     
   7994 FFFCABF6 FF FF FF FF FF FF FF FF     
   7995 FFFCABFE FF FF FF FF FF FF FF FF     
   7996 FFFCAC06 FF FF FF FF FF FF FF FF     
   7997 FFFCAC0E FF FF FF FF FF FF FF FF     
   7998 FFFCAC16 FF FF FF FF FF FF FF FF     
   7999 FFFCAC1E FF FF FF FF FF FF FF FF     
   8000 FFFCAC26 FF FF FF FF FF FF FF FF     
   8001 FFFCAC2E FF FF FF FF FF FF FF FF     
   8002 FFFCAC36 FF FF FF FF FF FF FF FF     
   8003 FFFCAC3E FF FF FF FF FF FF FF FF     
   8004 FFFCAC46 FF FF FF FF FF FF FF FF     
   8005 FFFCAC4E FF FF FF FF FF FF FF FF     
   8006 FFFCAC56 FF FF FF FF FF FF FF FF     
   8007 FFFCAC5E FF FF FF FF FF FF FF FF     
   8008 FFFCAC66 FF FF FF FF FF FF FF FF     
   8009 FFFCAC6E FF FF FF FF FF FF FF FF     
   8010 FFFCAC76 FF FF FF FF FF FF FF FF     
   8011 FFFCAC7E FF FF FF FF FF FF FF FF     
   8012 FFFCAC86 FF FF FF FF FF FF FF FF     
   8013 FFFCAC8E FF FF FF FF FF FF FF FF     
   8014 FFFCAC96 FF FF FF FF FF FF FF FF     
   8015 FFFCAC9E FF FF FF FF FF FF FF FF     
   8016 FFFCACA6 FF FF FF FF FF FF FF FF     
   8017 FFFCACAE FF FF FF FF FF FF FF FF     
   8018 FFFCACB6 FF FF FF FF FF FF FF FF     
   8019 FFFCACBE FF FF FF FF FF FF FF FF     
   8020 FFFCACC6 FF FF FF FF FF FF FF FF     
   8021 FFFCACCE FF FF FF FF FF FF FF FF     
   8022 FFFCACD6 FF FF FF FF FF FF FF FF     
   8023 FFFCACDE FF FF FF FF FF FF FF FF     
   8024 FFFCACE6 FF FF FF FF FF FF FF FF     
   8025 FFFCACEE FF FF FF FF FF FF FF FF     
   8026 FFFCACF6 FF FF FF FF FF FF FF FF     
   8027 FFFCACFE FF FF FF FF FF FF FF FF     
   8028 FFFCAD06 FF FF FF FF FF FF FF FF     
   8029 FFFCAD0E FF FF FF FF FF FF FF FF     
   8030 FFFCAD16 FF FF FF FF FF FF FF FF     
   8031 FFFCAD1E FF FF FF FF FF FF FF FF     
   8032 FFFCAD26 FF FF FF FF FF FF FF FF     
   8033 FFFCAD2E FF FF FF FF FF FF FF FF     
   8034 FFFCAD36 FF FF FF FF FF FF FF FF     
   8035 FFFCAD3E FF FF FF FF FF FF FF FF     
   8036 FFFCAD46 FF FF FF FF FF FF FF FF     
   8037 FFFCAD4E FF FF FF FF FF FF FF FF     
   8038 FFFCAD56 FF FF FF FF FF FF FF FF     
   8039 FFFCAD5E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 74
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8040 FFFCAD66 FF FF FF FF FF FF FF FF     
   8041 FFFCAD6E FF FF FF FF FF FF FF FF     
   8042 FFFCAD76 FF FF FF FF FF FF FF FF     
   8043 FFFCAD7E FF FF FF FF FF FF FF FF     
   8044 FFFCAD86 FF FF FF FF FF FF FF FF     
   8045 FFFCAD8E FF FF FF FF FF FF FF FF     
   8046 FFFCAD96 FF FF FF FF FF FF FF FF     
   8047 FFFCAD9E FF FF FF FF FF FF FF FF     
   8048 FFFCADA6 FF FF FF FF FF FF FF FF     
   8049 FFFCADAE FF FF FF FF FF FF FF FF     
   8050 FFFCADB6 FF FF FF FF FF FF FF FF     
   8051 FFFCADBE FF FF FF FF FF FF FF FF     
   8052 FFFCADC6 FF FF FF FF FF FF FF FF     
   8053 FFFCADCE FF FF FF FF FF FF FF FF     
   8054 FFFCADD6 FF FF FF FF FF FF FF FF     
   8055 FFFCADDE FF FF FF FF FF FF FF FF     
   8056 FFFCADE6 FF FF FF FF FF FF FF FF     
   8057 FFFCADEE FF FF FF FF FF FF FF FF     
   8058 FFFCADF6 FF FF FF FF FF FF FF FF     
   8059 FFFCADFE FF FF FF FF FF FF FF FF     
   8060 FFFCAE06 FF FF FF FF FF FF FF FF     
   8061 FFFCAE0E FF FF FF FF FF FF FF FF     
   8062 FFFCAE16 FF FF FF FF FF FF FF FF     
   8063 FFFCAE1E FF FF FF FF FF FF FF FF     
   8064 FFFCAE26 FF FF FF FF FF FF FF FF     
   8065 FFFCAE2E FF FF FF FF FF FF FF FF     
   8066 FFFCAE36 FF FF FF FF FF FF FF FF     
   8067 FFFCAE3E FF FF FF FF FF FF FF FF     
   8068 FFFCAE46 FF FF FF FF FF FF FF FF     
   8069 FFFCAE4E FF FF FF FF FF FF FF FF     
   8070 FFFCAE56 FF FF FF FF FF FF FF FF     
   8071 FFFCAE5E FF FF FF FF FF FF FF FF     
   8072 FFFCAE66 FF FF FF FF FF FF FF FF     
   8073 FFFCAE6E FF FF FF FF FF FF FF FF     
   8074 FFFCAE76 FF FF FF FF FF FF FF FF     
   8075 FFFCAE7E FF FF FF FF FF FF FF FF     
   8076 FFFCAE86 FF FF FF FF FF FF FF FF     
   8077 FFFCAE8E FF FF FF FF FF FF FF FF     
   8078 FFFCAE96 FF FF FF FF FF FF FF FF     
   8079 FFFCAE9E FF FF FF FF FF FF FF FF     
   8080 FFFCAEA6 FF FF FF FF FF FF FF FF     
   8081 FFFCAEAE FF FF FF FF FF FF FF FF     
   8082 FFFCAEB6 FF FF FF FF FF FF FF FF     
   8083 FFFCAEBE FF FF FF FF FF FF FF FF     
   8084 FFFCAEC6 FF FF FF FF FF FF FF FF     
   8085 FFFCAECE FF FF FF FF FF FF FF FF     
   8086 FFFCAED6 FF FF FF FF FF FF FF FF     
   8087 FFFCAEDE FF FF FF FF FF FF FF FF     
   8088 FFFCAEE6 FF FF FF FF FF FF FF FF     
   8089 FFFCAEEE FF FF FF FF FF FF FF FF     
   8090 FFFCAEF6 FF FF FF FF FF FF FF FF     
   8091 FFFCAEFE FF FF FF FF FF FF FF FF     
   8092 FFFCAF06 FF FF FF FF FF FF FF FF     
   8093 FFFCAF0E FF FF FF FF FF FF FF FF     
   8094 FFFCAF16 FF FF FF FF FF FF FF FF     
   8095 FFFCAF1E FF FF FF FF FF FF FF FF     
   8096 FFFCAF26 FF FF FF FF FF FF FF FF     
   8097 FFFCAF2E FF FF FF FF FF FF FF FF     
   8098 FFFCAF36 FF FF FF FF FF FF FF FF     
   8099 FFFCAF3E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 75
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8100 FFFCAF46 FF FF FF FF FF FF FF FF     
   8101 FFFCAF4E FF FF FF FF FF FF FF FF     
   8102 FFFCAF56 FF FF FF FF FF FF FF FF     
   8103 FFFCAF5E FF FF FF FF FF FF FF FF     
   8104 FFFCAF66 FF FF FF FF FF FF FF FF     
   8105 FFFCAF6E FF FF FF FF FF FF FF FF     
   8106 FFFCAF76 FF FF FF FF FF FF FF FF     
   8107 FFFCAF7E FF FF FF FF FF FF FF FF     
   8108 FFFCAF86 FF FF FF FF FF FF FF FF     
   8109 FFFCAF8E FF FF FF FF FF FF FF FF     
   8110 FFFCAF96 FF FF FF FF FF FF FF FF     
   8111 FFFCAF9E FF FF FF FF FF FF FF FF     
   8112 FFFCAFA6 FF FF FF FF FF FF FF FF     
   8113 FFFCAFAE FF FF FF FF FF FF FF FF     
   8114 FFFCAFB6 FF FF FF FF FF FF FF FF     
   8115 FFFCAFBE FF FF FF FF FF FF FF FF     
   8116 FFFCAFC6 FF FF FF FF FF FF FF FF     
   8117 FFFCAFCE FF FF FF FF FF FF FF FF     
   8118 FFFCAFD6 FF FF FF FF FF FF FF FF     
   8119 FFFCAFDE FF FF FF FF FF FF FF FF     
   8120 FFFCAFE6 FF FF FF FF FF FF FF FF     
   8121 FFFCAFEE FF FF FF FF FF FF FF FF     
   8122 FFFCAFF6 FF FF FF FF FF FF FF FF     
   8123 FFFCAFFE FF FF FF FF FF FF FF FF     
   8124 FFFCB006 FF FF FF FF FF FF FF FF     
   8125 FFFCB00E FF FF FF FF FF FF FF FF     
   8126 FFFCB016 FF FF FF FF FF FF FF FF     
   8127 FFFCB01E FF FF FF FF FF FF FF FF     
   8128 FFFCB026 FF FF FF FF FF FF FF FF     
   8129 FFFCB02E FF FF FF FF FF FF FF FF     
   8130 FFFCB036 FF FF FF FF FF FF FF FF     
   8131 FFFCB03E FF FF FF FF FF FF FF FF     
   8132 FFFCB046 FF FF FF FF FF FF FF FF     
   8133 FFFCB04E FF FF FF FF FF FF FF FF     
   8134 FFFCB056 FF FF FF FF FF FF FF FF     
   8135 FFFCB05E FF FF FF FF FF FF FF FF     
   8136 FFFCB066 FF FF FF FF FF FF FF FF     
   8137 FFFCB06E FF FF FF FF FF FF FF FF     
   8138 FFFCB076 FF FF FF FF FF FF FF FF     
   8139 FFFCB07E FF FF FF FF FF FF FF FF     
   8140 FFFCB086 FF FF FF FF FF FF FF FF     
   8141 FFFCB08E FF FF FF FF FF FF FF FF     
   8142 FFFCB096 FF FF FF FF FF FF FF FF     
   8143 FFFCB09E FF FF FF FF FF FF FF FF     
   8144 FFFCB0A6 FF FF FF FF FF FF FF FF     
   8145 FFFCB0AE FF FF FF FF FF FF FF FF     
   8146 FFFCB0B6 FF FF FF FF FF FF FF FF     
   8147 FFFCB0BE FF FF FF FF FF FF FF FF     
   8148 FFFCB0C6 FF FF FF FF FF FF FF FF     
   8149 FFFCB0CE FF FF FF FF FF FF FF FF     
   8150 FFFCB0D6 FF FF FF FF FF FF FF FF     
   8151 FFFCB0DE FF FF FF FF FF FF FF FF     
   8152 FFFCB0E6 FF FF FF FF FF FF FF FF     
   8153 FFFCB0EE FF FF FF FF FF FF FF FF     
   8154 FFFCB0F6 FF FF FF FF FF FF FF FF     
   8155 FFFCB0FE FF FF FF FF FF FF FF FF     
   8156 FFFCB106 FF FF FF FF FF FF FF FF     
   8157 FFFCB10E FF FF FF FF FF FF FF FF     
   8158 FFFCB116 FF FF FF FF FF FF FF FF     
   8159 FFFCB11E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 76
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8160 FFFCB126 FF FF FF FF FF FF FF FF     
   8161 FFFCB12E FF FF FF FF FF FF FF FF     
   8162 FFFCB136 FF FF FF FF FF FF FF FF     
   8163 FFFCB13E FF FF FF FF FF FF FF FF     
   8164 FFFCB146 FF FF FF FF FF FF FF FF     
   8165 FFFCB14E FF FF FF FF FF FF FF FF     
   8166 FFFCB156 FF FF FF FF FF FF FF FF     
   8167 FFFCB15E FF FF FF FF FF FF FF FF     
   8168 FFFCB166 FF FF FF FF FF FF FF FF     
   8169 FFFCB16E FF FF FF FF FF FF FF FF     
   8170 FFFCB176 FF FF FF FF FF FF FF FF     
   8171 FFFCB17E FF FF FF FF FF FF FF FF     
   8172 FFFCB186 FF FF FF FF FF FF FF FF     
   8173 FFFCB18E FF FF FF FF FF FF FF FF     
   8174 FFFCB196 FF FF FF FF FF FF FF FF     
   8175 FFFCB19E FF FF FF FF FF FF FF FF     
   8176 FFFCB1A6 FF FF FF FF FF FF FF FF     
   8177 FFFCB1AE FF FF FF FF FF FF FF FF     
   8178 FFFCB1B6 FF FF FF FF FF FF FF FF     
   8179 FFFCB1BE FF FF FF FF FF FF FF FF     
   8180 FFFCB1C6 FF FF FF FF FF FF FF FF     
   8181 FFFCB1CE FF FF FF FF FF FF FF FF     
   8182 FFFCB1D6 FF FF FF FF FF FF FF FF     
   8183 FFFCB1DE FF FF FF FF FF FF FF FF     
   8184 FFFCB1E6 FF FF FF FF FF FF FF FF     
   8185 FFFCB1EE FF FF FF FF FF FF FF FF     
   8186 FFFCB1F6 FF FF FF FF FF FF FF FF     
   8187 FFFCB1FE FF FF FF FF FF FF FF FF     
   8188 FFFCB206 FF FF FF FF FF FF FF FF     
   8189 FFFCB20E FF FF FF FF FF FF FF FF     
   8190 FFFCB216 FF FF FF FF FF FF FF FF     
   8191 FFFCB21E FF FF FF FF FF FF FF FF     
   8192 FFFCB226 FF FF FF FF FF FF FF FF     
   8193 FFFCB22E FF FF FF FF FF FF FF FF     
   8194 FFFCB236 FF FF FF FF FF FF FF FF     
   8195 FFFCB23E FF FF FF FF FF FF FF FF     
   8196 FFFCB246 FF FF FF FF FF FF FF FF     
   8197 FFFCB24E FF FF FF FF FF FF FF FF     
   8198 FFFCB256 FF FF FF FF FF FF FF FF     
   8199 FFFCB25E FF FF FF FF FF FF FF FF     
   8200 FFFCB266 FF FF FF FF FF FF FF FF     
   8201 FFFCB26E FF FF FF FF FF FF FF FF     
   8202 FFFCB276 FF FF FF FF FF FF FF FF     
   8203 FFFCB27E FF FF FF FF FF FF FF FF     
   8204 FFFCB286 FF FF FF FF FF FF FF FF     
   8205 FFFCB28E FF FF FF FF FF FF FF FF     
   8206 FFFCB296 FF FF FF FF FF FF FF FF     
   8207 FFFCB29E FF FF FF FF FF FF FF FF     
   8208 FFFCB2A6 FF FF FF FF FF FF FF FF     
   8209 FFFCB2AE FF FF FF FF FF FF FF FF     
   8210 FFFCB2B6 FF FF FF FF FF FF FF FF     
   8211 FFFCB2BE FF FF FF FF FF FF FF FF     
   8212 FFFCB2C6 FF FF FF FF FF FF FF FF     
   8213 FFFCB2CE FF FF FF FF FF FF FF FF     
   8214 FFFCB2D6 FF FF FF FF FF FF FF FF     
   8215 FFFCB2DE FF FF FF FF FF FF FF FF     
   8216 FFFCB2E6 FF FF FF FF FF FF FF FF     
   8217 FFFCB2EE FF FF FF FF FF FF FF FF     
   8218 FFFCB2F6 FF FF FF FF FF FF FF FF     
   8219 FFFCB2FE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 77
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8220 FFFCB306 FF FF FF FF FF FF FF FF     
   8221 FFFCB30E FF FF FF FF FF FF FF FF     
   8222 FFFCB316 FF FF FF FF FF FF FF FF     
   8223 FFFCB31E FF FF FF FF FF FF FF FF     
   8224 FFFCB326 FF FF FF FF FF FF FF FF     
   8225 FFFCB32E FF FF FF FF FF FF FF FF     
   8226 FFFCB336 FF FF FF FF FF FF FF FF     
   8227 FFFCB33E FF FF FF FF FF FF FF FF     
   8228 FFFCB346 FF FF FF FF FF FF FF FF     
   8229 FFFCB34E FF FF FF FF FF FF FF FF     
   8230 FFFCB356 FF FF FF FF FF FF FF FF     
   8231 FFFCB35E FF FF FF FF FF FF FF FF     
   8232 FFFCB366 FF FF FF FF FF FF FF FF     
   8233 FFFCB36E FF FF FF FF FF FF FF FF     
   8234 FFFCB376 FF FF FF FF FF FF FF FF     
   8235 FFFCB37E FF FF FF FF FF FF FF FF     
   8236 FFFCB386 FF FF FF FF FF FF FF FF     
   8237 FFFCB38E FF FF FF FF FF FF FF FF     
   8238 FFFCB396 FF FF FF FF FF FF FF FF     
   8239 FFFCB39E FF FF FF FF FF FF FF FF     
   8240 FFFCB3A6 FF FF FF FF FF FF FF FF     
   8241 FFFCB3AE FF FF FF FF FF FF FF FF     
   8242 FFFCB3B6 FF FF FF FF FF FF FF FF     
   8243 FFFCB3BE FF FF FF FF FF FF FF FF     
   8244 FFFCB3C6 FF FF FF FF FF FF FF FF     
   8245 FFFCB3CE FF FF FF FF FF FF FF FF     
   8246 FFFCB3D6 FF FF FF FF FF FF FF FF     
   8247 FFFCB3DE FF FF FF FF FF FF FF FF     
   8248 FFFCB3E6 FF FF FF FF FF FF FF FF     
   8249 FFFCB3EE FF FF FF FF FF FF FF FF     
   8250 FFFCB3F6 FF FF FF FF FF FF FF FF     
   8251 FFFCB3FE FF FF FF FF FF FF FF FF     
   8252 FFFCB406 FF FF FF FF FF FF FF FF     
   8253 FFFCB40E FF FF FF FF FF FF FF FF     
   8254 FFFCB416 FF FF FF FF FF FF FF FF     
   8255 FFFCB41E FF FF FF FF FF FF FF FF     
   8256 FFFCB426 FF FF FF FF FF FF FF FF     
   8257 FFFCB42E FF FF FF FF FF FF FF FF     
   8258 FFFCB436 FF FF FF FF FF FF FF FF     
   8259 FFFCB43E FF FF FF FF FF FF FF FF     
   8260 FFFCB446 FF FF FF FF FF FF FF FF     
   8261 FFFCB44E FF FF FF FF FF FF FF FF     
   8262 FFFCB456 FF FF FF FF FF FF FF FF     
   8263 FFFCB45E FF FF FF FF FF FF FF FF     
   8264 FFFCB466 FF FF FF FF FF FF FF FF     
   8265 FFFCB46E FF FF FF FF FF FF FF FF     
   8266 FFFCB476 FF FF FF FF FF FF FF FF     
   8267 FFFCB47E FF FF FF FF FF FF FF FF     
   8268 FFFCB486 FF FF FF FF FF FF FF FF     
   8269 FFFCB48E FF FF FF FF FF FF FF FF     
   8270 FFFCB496 FF FF FF FF FF FF FF FF     
   8271 FFFCB49E FF FF FF FF FF FF FF FF     
   8272 FFFCB4A6 FF FF FF FF FF FF FF FF     
   8273 FFFCB4AE FF FF FF FF FF FF FF FF     
   8274 FFFCB4B6 FF FF FF FF FF FF FF FF     
   8275 FFFCB4BE FF FF FF FF FF FF FF FF     
   8276 FFFCB4C6 FF FF FF FF FF FF FF FF     
   8277 FFFCB4CE FF FF FF FF FF FF FF FF     
   8278 FFFCB4D6 FF FF FF FF FF FF FF FF     
   8279 FFFCB4DE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 78
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8280 FFFCB4E6 FF FF FF FF FF FF FF FF     
   8281 FFFCB4EE FF FF FF FF FF FF FF FF     
   8282 FFFCB4F6 FF FF FF FF FF FF FF FF     
   8283 FFFCB4FE FF FF FF FF FF FF FF FF     
   8284 FFFCB506 FF FF FF FF FF FF FF FF     
   8285 FFFCB50E FF FF FF FF FF FF FF FF     
   8286 FFFCB516 FF FF FF FF FF FF FF FF     
   8287 FFFCB51E FF FF FF FF FF FF FF FF     
   8288 FFFCB526 FF FF FF FF FF FF FF FF     
   8289 FFFCB52E FF FF FF FF FF FF FF FF     
   8290 FFFCB536 FF FF FF FF FF FF FF FF     
   8291 FFFCB53E FF FF FF FF FF FF FF FF     
   8292 FFFCB546 FF FF FF FF FF FF FF FF     
   8293 FFFCB54E FF FF FF FF FF FF FF FF     
   8294 FFFCB556 FF FF FF FF FF FF FF FF     
   8295 FFFCB55E FF FF FF FF FF FF FF FF     
   8296 FFFCB566 FF FF FF FF FF FF FF FF     
   8297 FFFCB56E FF FF FF FF FF FF FF FF     
   8298 FFFCB576 FF FF FF FF FF FF FF FF     
   8299 FFFCB57E FF FF FF FF FF FF FF FF     
   8300 FFFCB586 FF FF FF FF FF FF FF FF     
   8301 FFFCB58E FF FF FF FF FF FF FF FF     
   8302 FFFCB596 FF FF FF FF FF FF FF FF     
   8303 FFFCB59E FF FF FF FF FF FF FF FF     
   8304 FFFCB5A6 FF FF FF FF FF FF FF FF     
   8305 FFFCB5AE FF FF FF FF FF FF FF FF     
   8306 FFFCB5B6 FF FF FF FF FF FF FF FF     
   8307 FFFCB5BE FF FF FF FF FF FF FF FF     
   8308 FFFCB5C6 FF FF FF FF FF FF FF FF     
   8309 FFFCB5CE FF FF FF FF FF FF FF FF     
   8310 FFFCB5D6 FF FF FF FF FF FF FF FF     
   8311 FFFCB5DE FF FF FF FF FF FF FF FF     
   8312 FFFCB5E6 FF FF FF FF FF FF FF FF     
   8313 FFFCB5EE FF FF FF FF FF FF FF FF     
   8314 FFFCB5F6 FF FF FF FF FF FF FF FF     
   8315 FFFCB5FE FF FF FF FF FF FF FF FF     
   8316 FFFCB606 FF FF FF FF FF FF FF FF     
   8317 FFFCB60E FF FF FF FF FF FF FF FF     
   8318 FFFCB616 FF FF FF FF FF FF FF FF     
   8319 FFFCB61E FF FF FF FF FF FF FF FF     
   8320 FFFCB626 FF FF FF FF FF FF FF FF     
   8321 FFFCB62E FF FF FF FF FF FF FF FF     
   8322 FFFCB636 FF FF FF FF FF FF FF FF     
   8323 FFFCB63E FF FF FF FF FF FF FF FF     
   8324 FFFCB646 FF FF FF FF FF FF FF FF     
   8325 FFFCB64E FF FF FF FF FF FF FF FF     
   8326 FFFCB656 FF FF FF FF FF FF FF FF     
   8327 FFFCB65E FF FF FF FF FF FF FF FF     
   8328 FFFCB666 FF FF FF FF FF FF FF FF     
   8329 FFFCB66E FF FF FF FF FF FF FF FF     
   8330 FFFCB676 FF FF FF FF FF FF FF FF     
   8331 FFFCB67E FF FF FF FF FF FF FF FF     
   8332 FFFCB686 FF FF FF FF FF FF FF FF     
   8333 FFFCB68E FF FF FF FF FF FF FF FF     
   8334 FFFCB696 FF FF FF FF FF FF FF FF     
   8335 FFFCB69E FF FF FF FF FF FF FF FF     
   8336 FFFCB6A6 FF FF FF FF FF FF FF FF     
   8337 FFFCB6AE FF FF FF FF FF FF FF FF     
   8338 FFFCB6B6 FF FF FF FF FF FF FF FF     
   8339 FFFCB6BE FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 79
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8340 FFFCB6C6 FF FF FF FF FF FF FF FF     
   8341 FFFCB6CE FF FF FF FF FF FF FF FF     
   8342 FFFCB6D6 FF FF FF FF FF FF FF FF     
   8343 FFFCB6DE FF FF FF FF FF FF FF FF     
   8344 FFFCB6E6 FF FF FF FF FF FF FF FF     
   8345 FFFCB6EE FF FF FF FF FF FF FF FF     
   8346 FFFCB6F6 FF FF FF FF FF FF FF FF     
   8347 FFFCB6FE FF FF FF FF FF FF FF FF     
   8348 FFFCB706 FF FF FF FF FF FF FF FF     
   8349 FFFCB70E FF FF FF FF FF FF FF FF     
   8350 FFFCB716 FF FF FF FF FF FF FF FF     
   8351 FFFCB71E FF FF FF FF FF FF FF FF     
   8352 FFFCB726 FF FF FF FF FF FF FF FF     
   8353 FFFCB72E FF FF FF FF FF FF FF FF     
   8354 FFFCB736 FF FF FF FF FF FF FF FF     
   8355 FFFCB73E FF FF FF FF FF FF FF FF     
   8356 FFFCB746 FF FF FF FF FF FF FF FF     
   8357 FFFCB74E FF FF FF FF FF FF FF FF     
   8358 FFFCB756 FF FF FF FF FF FF FF FF     
   8359 FFFCB75E FF FF FF FF FF FF FF FF     
   8360 FFFCB766 FF FF FF FF FF FF FF FF     
   8361 FFFCB76E FF FF FF FF FF FF FF FF     
   8362 FFFCB776 FF FF FF FF FF FF FF FF     
   8363 FFFCB77E FF FF FF FF FF FF FF FF     
   8364 FFFCB786 FF FF FF FF FF FF FF FF     
   8365 FFFCB78E FF FF FF FF FF FF FF FF     
   8366 FFFCB796 FF FF FF FF FF FF FF FF     
   8367 FFFCB79E FF FF FF FF FF FF FF FF     
   8368 FFFCB7A6 FF FF FF FF FF FF FF FF     
   8369 FFFCB7AE FF FF FF FF FF FF FF FF     
   8370 FFFCB7B6 FF FF FF FF FF FF FF FF     
   8371 FFFCB7BE FF FF FF FF FF FF FF FF     
   8372 FFFCB7C6 FF FF FF FF FF FF FF FF     
   8373 FFFCB7CE FF FF FF FF FF FF FF FF     
   8374 FFFCB7D6 FF FF FF FF FF FF FF FF     
   8375 FFFCB7DE FF FF FF FF FF FF FF FF     
   8376 FFFCB7E6 FF FF FF FF FF FF FF FF     
   8377 FFFCB7EE FF FF FF FF FF FF FF FF     
   8378 FFFCB7F6 FF FF FF FF FF FF FF FF     
   8379 FFFCB7FE FF FF FF FF FF FF FF FF     
   8380 FFFCB806 FF FF FF FF FF FF FF FF     
   8381 FFFCB80E FF FF FF FF FF FF FF FF     
   8382 FFFCB816 FF FF FF FF FF FF FF FF     
   8383 FFFCB81E FF FF FF FF FF FF FF FF     
   8384 FFFCB826 FF FF FF FF FF FF FF FF     
   8385 FFFCB82E FF FF FF FF FF FF FF FF     
   8386 FFFCB836 FF FF FF FF FF FF FF FF     
   8387 FFFCB83E FF FF FF FF FF FF FF FF     
   8388 FFFCB846 FF FF FF FF FF FF FF FF     
   8389 FFFCB84E FF FF FF FF FF FF FF FF     
   8390 FFFCB856 FF FF FF FF FF FF FF FF     
   8391 FFFCB85E FF FF FF FF FF FF FF FF     
   8392 FFFCB866 FF FF FF FF FF FF FF FF     
   8393 FFFCB86E FF FF FF FF FF FF FF FF     
   8394 FFFCB876 FF FF FF FF FF FF FF FF     
   8395 FFFCB87E FF FF FF FF FF FF FF FF     
   8396 FFFCB886 FF FF FF FF FF FF FF FF     
   8397 FFFCB88E FF FF FF FF FF FF FF FF     
   8398 FFFCB896 FF FF FF FF FF FF FF FF     
   8399 FFFCB89E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 80
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8400 FFFCB8A6 FF FF FF FF FF FF FF FF     
   8401 FFFCB8AE FF FF FF FF FF FF FF FF     
   8402 FFFCB8B6 FF FF FF FF FF FF FF FF     
   8403 FFFCB8BE FF FF FF FF FF FF FF FF     
   8404 FFFCB8C6 FF FF FF FF FF FF FF FF     
   8405 FFFCB8CE FF FF FF FF FF FF FF FF     
   8406 FFFCB8D6 FF FF FF FF FF FF FF FF     
   8407 FFFCB8DE FF FF FF FF FF FF FF FF     
   8408 FFFCB8E6 FF FF FF FF FF FF FF FF     
   8409 FFFCB8EE FF FF FF FF FF FF FF FF     
   8410 FFFCB8F6 FF FF FF FF FF FF FF FF     
   8411 FFFCB8FE FF FF FF FF FF FF FF FF     
   8412 FFFCB906 FF FF FF FF FF FF FF FF     
   8413 FFFCB90E FF FF FF FF FF FF FF FF     
   8414 FFFCB916 FF FF FF FF FF FF FF FF     
   8415 FFFCB91E FF FF FF FF FF FF FF FF     
   8416 FFFCB926 FF FF FF FF FF FF FF FF     
   8417 FFFCB92E FF FF FF FF FF FF FF FF     
   8418 FFFCB936 FF FF FF FF FF FF FF FF     
   8419 FFFCB93E FF FF FF FF FF FF FF FF     
   8420 FFFCB946 FF FF FF FF FF FF FF FF     
   8421 FFFCB94E FF FF FF FF FF FF FF FF     
   8422 FFFCB956 FF FF FF FF FF FF FF FF     
   8423 FFFCB95E FF FF FF FF FF FF FF FF     
   8424 FFFCB966 FF FF FF FF FF FF FF FF     
   8425 FFFCB96E FF FF FF FF FF FF FF FF     
   8426 FFFCB976 FF FF FF FF FF FF FF FF     
   8427 FFFCB97E FF FF FF FF FF FF FF FF     
   8428 FFFCB986 FF FF FF FF FF FF FF FF     
   8429 FFFCB98E FF FF FF FF FF FF FF FF     
   8430 FFFCB996 FF FF FF FF FF FF FF FF     
   8431 FFFCB99E FF FF FF FF FF FF FF FF     
   8432 FFFCB9A6 FF FF FF FF FF FF FF FF     
   8433 FFFCB9AE FF FF FF FF FF FF FF FF     
   8434 FFFCB9B6 FF FF FF FF FF FF FF FF     
   8435 FFFCB9BE FF FF FF FF FF FF FF FF     
   8436 FFFCB9C6 FF FF FF FF FF FF FF FF     
   8437 FFFCB9CE FF FF FF FF FF FF FF FF     
   8438 FFFCB9D6 FF FF FF FF FF FF FF FF     
   8439 FFFCB9DE FF FF FF FF FF FF FF FF     
   8440 FFFCB9E6 FF FF FF FF FF FF FF FF     
   8441 FFFCB9EE FF FF FF FF FF FF FF FF     
   8442 FFFCB9F6 FF FF FF FF FF FF FF FF     
   8443 FFFCB9FE FF FF FF FF FF FF FF FF     
   8444 FFFCBA06 FF FF FF FF FF FF FF FF     
   8445 FFFCBA0E FF FF FF FF FF FF FF FF     
   8446 FFFCBA16 FF FF FF FF FF FF FF FF     
   8447 FFFCBA1E FF FF FF FF FF FF FF FF     
   8448 FFFCBA26 FF FF FF FF FF FF FF FF     
   8449 FFFCBA2E FF FF FF FF FF FF FF FF     
   8450 FFFCBA36 FF FF FF FF FF FF FF FF     
   8451 FFFCBA3E FF FF FF FF FF FF FF FF     
   8452 FFFCBA46 FF FF FF FF FF FF FF FF     
   8453 FFFCBA4E FF FF FF FF FF FF FF FF     
   8454 FFFCBA56 FF FF FF FF FF FF FF FF     
   8455 FFFCBA5E FF FF FF FF FF FF FF FF     
   8456 FFFCBA66 FF FF FF FF FF FF FF FF     
   8457 FFFCBA6E FF FF FF FF FF FF FF FF     
   8458 FFFCBA76 FF FF FF FF FF FF FF FF     
   8459 FFFCBA7E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 81
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8460 FFFCBA86 FF FF FF FF FF FF FF FF     
   8461 FFFCBA8E FF FF FF FF FF FF FF FF     
   8462 FFFCBA96 FF FF FF FF FF FF FF FF     
   8463 FFFCBA9E FF FF FF FF FF FF FF FF     
   8464 FFFCBAA6 FF FF FF FF FF FF FF FF     
   8465 FFFCBAAE FF FF FF FF FF FF FF FF     
   8466 FFFCBAB6 FF FF FF FF FF FF FF FF     
   8467 FFFCBABE FF FF FF FF FF FF FF FF     
   8468 FFFCBAC6 FF FF FF FF FF FF FF FF     
   8469 FFFCBACE FF FF FF FF FF FF FF FF     
   8470 FFFCBAD6 FF FF FF FF FF FF FF FF     
   8471 FFFCBADE FF FF FF FF FF FF FF FF     
   8472 FFFCBAE6 FF FF FF FF FF FF FF FF     
   8473 FFFCBAEE FF FF FF FF FF FF FF FF     
   8474 FFFCBAF6 FF FF FF FF FF FF FF FF     
   8475 FFFCBAFE FF FF FF FF FF FF FF FF     
   8476 FFFCBB06 FF FF FF FF FF FF FF FF     
   8477 FFFCBB0E FF FF FF FF FF FF FF FF     
   8478 FFFCBB16 FF FF FF FF FF FF FF FF     
   8479 FFFCBB1E FF FF FF FF FF FF FF FF     
   8480 FFFCBB26 FF FF FF FF FF FF FF FF     
   8481 FFFCBB2E FF FF FF FF FF FF FF FF     
   8482 FFFCBB36 FF FF FF FF FF FF FF FF     
   8483 FFFCBB3E FF FF FF FF FF FF FF FF     
   8484 FFFCBB46 FF FF FF FF FF FF FF FF     
   8485 FFFCBB4E FF FF FF FF FF FF FF FF     
   8486 FFFCBB56 FF FF FF FF FF FF FF FF     
   8487 FFFCBB5E FF FF FF FF FF FF FF FF     
   8488 FFFCBB66 FF FF FF FF FF FF FF FF     
   8489 FFFCBB6E FF FF FF FF FF FF FF FF     
   8490 FFFCBB76 FF FF FF FF FF FF FF FF     
   8491 FFFCBB7E FF FF FF FF FF FF FF FF     
   8492 FFFCBB86 FF FF FF FF FF FF FF FF     
   8493 FFFCBB8E FF FF FF FF FF FF FF FF     
   8494 FFFCBB96 FF FF FF FF FF FF FF FF     
   8495 FFFCBB9E FF FF FF FF FF FF FF FF     
   8496 FFFCBBA6 FF FF FF FF FF FF FF FF     
   8497 FFFCBBAE FF FF FF FF FF FF FF FF     
   8498 FFFCBBB6 FF FF FF FF FF FF FF FF     
   8499 FFFCBBBE FF FF FF FF FF FF FF FF     
   8500 FFFCBBC6 FF FF FF FF FF FF FF FF     
   8501 FFFCBBCE FF FF FF FF FF FF FF FF     
   8502 FFFCBBD6 FF FF FF FF FF FF FF FF     
   8503 FFFCBBDE FF FF FF FF FF FF FF FF     
   8504 FFFCBBE6 FF FF FF FF FF FF FF FF     
   8505 FFFCBBEE FF FF FF FF FF FF FF FF     
   8506 FFFCBBF6 FF FF FF FF FF FF FF FF     
   8507 FFFCBBFE FF FF FF FF FF FF FF FF     
   8508 FFFCBC06 FF FF FF FF FF FF FF FF     
   8509 FFFCBC0E FF FF FF FF FF FF FF FF     
   8510 FFFCBC16 FF FF FF FF FF FF FF FF     
   8511 FFFCBC1E FF FF FF FF FF FF FF FF     
   8512 FFFCBC26 FF FF FF FF FF FF FF FF     
   8513 FFFCBC2E FF FF FF FF FF FF FF FF     
   8514 FFFCBC36 FF FF FF FF FF FF FF FF     
   8515 FFFCBC3E FF FF FF FF FF FF FF FF     
   8516 FFFCBC46 FF FF FF FF FF FF FF FF     
   8517 FFFCBC4E FF FF FF FF FF FF FF FF     
   8518 FFFCBC56 FF FF FF FF FF FF FF FF     
   8519 FFFCBC5E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 82
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8520 FFFCBC66 FF FF FF FF FF FF FF FF     
   8521 FFFCBC6E FF FF FF FF FF FF FF FF     
   8522 FFFCBC76 FF FF FF FF FF FF FF FF     
   8523 FFFCBC7E FF FF FF FF FF FF FF FF     
   8524 FFFCBC86 FF FF FF FF FF FF FF FF     
   8525 FFFCBC8E FF FF FF FF FF FF FF FF     
   8526 FFFCBC96 FF FF FF FF FF FF FF FF     
   8527 FFFCBC9E FF FF FF FF FF FF FF FF     
   8528 FFFCBCA6 FF FF FF FF FF FF FF FF     
   8529 FFFCBCAE FF FF FF FF FF FF FF FF     
   8530 FFFCBCB6 FF FF FF FF FF FF FF FF     
   8531 FFFCBCBE FF FF FF FF FF FF FF FF     
   8532 FFFCBCC6 FF FF FF FF FF FF FF FF     
   8533 FFFCBCCE FF FF FF FF FF FF FF FF     
   8534 FFFCBCD6 FF FF FF FF FF FF FF FF     
   8535 FFFCBCDE FF FF FF FF FF FF FF FF     
   8536 FFFCBCE6 FF FF FF FF FF FF FF FF     
   8537 FFFCBCEE FF FF FF FF FF FF FF FF     
   8538 FFFCBCF6 FF FF FF FF FF FF FF FF     
   8539 FFFCBCFE FF FF FF FF FF FF FF FF     
   8540 FFFCBD06 FF FF FF FF FF FF FF FF     
   8541 FFFCBD0E FF FF FF FF FF FF FF FF     
   8542 FFFCBD16 FF FF FF FF FF FF FF FF     
   8543 FFFCBD1E FF FF FF FF FF FF FF FF     
   8544 FFFCBD26 FF FF FF FF FF FF FF FF     
   8545 FFFCBD2E FF FF FF FF FF FF FF FF     
   8546 FFFCBD36 FF FF FF FF FF FF FF FF     
   8547 FFFCBD3E FF FF FF FF FF FF FF FF     
   8548 FFFCBD46 FF FF FF FF FF FF FF FF     
   8549 FFFCBD4E FF FF FF FF FF FF FF FF     
   8550 FFFCBD56 FF FF FF FF FF FF FF FF     
   8551 FFFCBD5E FF FF FF FF FF FF FF FF     
   8552 FFFCBD66 FF FF FF FF FF FF FF FF     
   8553 FFFCBD6E FF FF FF FF FF FF FF FF     
   8554 FFFCBD76 FF FF FF FF FF FF FF FF     
   8555 FFFCBD7E FF FF FF FF FF FF FF FF     
   8556 FFFCBD86 FF FF FF FF FF FF FF FF     
   8557 FFFCBD8E FF FF FF FF FF FF FF FF     
   8558 FFFCBD96 FF FF FF FF FF FF FF FF     
   8559 FFFCBD9E FF FF FF FF FF FF FF FF     
   8560 FFFCBDA6 FF FF FF FF FF FF FF FF     
   8561 FFFCBDAE FF FF FF FF FF FF FF FF     
   8562 FFFCBDB6 FF FF FF FF FF FF FF FF     
   8563 FFFCBDBE FF FF FF FF FF FF FF FF     
   8564 FFFCBDC6 FF FF FF FF FF FF FF FF     
   8565 FFFCBDCE FF FF FF FF FF FF FF FF     
   8566 FFFCBDD6 FF FF FF FF FF FF FF FF     
   8567 FFFCBDDE FF FF FF FF FF FF FF FF     
   8568 FFFCBDE6 FF FF FF FF FF FF FF FF     
   8569 FFFCBDEE FF FF FF FF FF FF FF FF     
   8570 FFFCBDF6 FF FF FF FF FF FF FF FF     
   8571 FFFCBDFE FF FF FF FF FF FF FF FF     
   8572 FFFCBE06 FF FF FF FF FF FF FF FF     
   8573 FFFCBE0E FF FF FF FF FF FF FF FF     
   8574 FFFCBE16 FF FF FF FF FF FF FF FF     
   8575 FFFCBE1E FF FF FF FF FF FF FF FF     
   8576 FFFCBE26 FF FF FF FF FF FF FF FF     
   8577 FFFCBE2E FF FF FF FF FF FF FF FF     
   8578 FFFCBE36 FF FF FF FF FF FF FF FF     
   8579 FFFCBE3E FF FF FF FF FF FF FF FF     
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 83
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8580 FFFCBE46 FF FF FF FF FF FF FF FF     
   8581 FFFCBE4E FF FF FF FF FF FF FF FF     
   8582 FFFCBE56 FF FF FF FF FF FF FF FF     
   8583 FFFCBE5E FF FF FF FF FF FF FF FF     
   8584 FFFCBE66 FF FF FF FF FF FF FF FF     
   8585 FFFCBE6E FF FF FF FF FF FF FF FF     
   8586 FFFCBE76 FF FF FF FF FF FF FF FF     
   8587 FFFCBE7E FF FF FF FF FF FF FF FF     
   8588 FFFCBE86 FF FF FF FF FF FF FF FF     
   8589 FFFCBE8E FF FF FF FF FF FF FF FF     
   8590 FFFCBE96 FF FF FF FF FF FF FF FF     
   8591 FFFCBE9E FF FF FF FF FF FF FF FF     
   8592 FFFCBEA6 FF FF FF FF FF FF FF FF     
   8593 FFFCBEAE FF FF FF FF FF FF FF FF     
   8594 FFFCBEB6 FF FF FF FF FF FF FF FF     
   8595 FFFCBEBE FF FF FF FF FF FF FF FF     
   8596 FFFCBEC6 FF FF FF FF FF FF FF FF     
   8597 FFFCBECE FF FF FF FF FF FF FF FF     
   8598 FFFCBED6 FF FF FF FF FF FF FF FF     
   8599 FFFCBEDE FF FF FF FF FF FF FF FF     
   8600 FFFCBEE6 FF FF FF FF FF FF FF FF     
   8601 FFFCBEEE FF FF FF FF FF FF FF FF     
   8602 FFFCBEF6 FF FF FF FF FF FF FF FF     
   8603 FFFCBEFE FF FF FF FF FF FF FF FF     
   8604 FFFCBF06 FF FF FF FF FF FF FF FF     
   8605 FFFCBF0E FF FF FF FF FF FF FF FF     
   8606 FFFCBF16 FF FF FF FF FF FF FF FF     
   8607 FFFCBF1E FF FF FF FF FF FF FF FF     
   8608 FFFCBF26 FF FF FF FF FF FF FF FF     
   8609 FFFCBF2E FF FF FF FF FF FF FF FF     
   8610 FFFCBF36 FF FF FF FF FF FF FF FF     
   8611 FFFCBF3E FF FF FF FF FF FF FF FF     
   8612 FFFCBF46 FF FF FF FF FF FF FF FF     
   8613 FFFCBF4E FF FF FF FF FF FF FF FF     
   8614 FFFCBF56 FF FF FF FF FF FF FF FF     
   8615 FFFCBF5E FF FF FF FF FF FF FF FF     
   8616 FFFCBF66 FF FF FF FF FF FF FF FF     
   8617 FFFCBF6E FF FF FF FF FF FF FF FF     
   8618 FFFCBF76 FF FF FF FF FF FF FF FF     
   8619 FFFCBF7E FF FF FF FF FF FF FF FF     
   8620 FFFCBF86 FF FF FF FF FF FF FF FF     
   8621 FFFCBF8E FF FF FF FF FF FF FF FF     
   8622 FFFCBF96 FF FF FF FF FF FF FF FF     
   8623 FFFCBF9E FF FF FF FF FF FF FF FF     
   8624 FFFCBFA6 FF FF FF FF FF FF FF FF     
   8625 FFFCBFAE FF FF FF FF FF FF FF FF     
   8626 FFFCBFB6 FF FF FF FF FF FF FF FF     
   8627 FFFCBFBE FF FF FF FF FF FF FF FF     
   8628 FFFCBFC6 FF FF FF FF FF FF FF FF     
   8629 FFFCBFCE FF FF FF FF FF FF FF FF     
   8630 FFFCBFD6 FF FF FF FF FF FF FF FF     
   8631 FFFCBFDE FF FF FF FF FF FF FF FF     
   8632 FFFCBFE6 FF FF FF FF FF FF FF FF     
   8633 FFFCBFEE FF FF FF FF FF FF FF FF     
   8634 FFFCBFF6 FF FF FF FF FF FF FF FF     
   8635 FFFCBFFE FF FF                       
                                             ;*
                                             ;* Standard jump table. You can change these addresses if you are
                                             ;* customizing this interpreter for a different environment.
                                             ;*
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 84
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8640 FFFCC000 6000 0022                   START	BRA.L	CSTART		;Cold Start entry point
   8641 FFFCC004 6000 005A                   GOWARM	BRA.L	WSTART		;Warm Start entry point
   8642 FFFCC008 6000 0B68                   GOOUT	BRA.L	OUTC		;Jump to character-out routine
   8643 FFFCC00C 6000 0B74                   GOIN	BRA.L	INC		;Jump to character-in routine
   8644 FFFCC010 6000 0B86                   GOAUXO	BRA.L	AUXOUT		;Jump to auxiliary-out routine
   8645 FFFCC014 6000 0B94                   GOAUXI	BRA.L	AUXIN		;Jump to auxiliary-in routine
   8646 FFFCC018 6000 0BA6                   GOBYE	BRA.L	BYEBYE		;Jump to monitor, DOS, etc.
                                             ;*
                                             ;* Modifiable system constants:
                                             ;*
   8650 FFFCC01C 00200000                    TXTBGN	DC.L	0x200000	;beginning of program memory
   8651 FFFCC020 1E000000                    ENDMEM	DC.L	0x1E000000	;	end of available memory
                                             ;*
                                             ;* The main interpreter starts here:
                                             ;*
   8655 FFFCC024                             CSTART:
   8656 FFFCC024 41F9 FFFC C000              	LEA		START,A0
   8657 FFFCC02A 21C8 0600                   	MOVE.L	A0,RANPNT
   8658 FFFCC02E 2E79 FFFC C020              	MOVE.L	ENDMEM,SP	;initialize stack pointer
   8659 FFFCC034 4DF9 FFFC CBC6              	LEA		INITMSG,A6	;tell who we are
   8660 FFFCC03A 6100 0B2A                   	BSR.L	PRMESG
   8661 FFFCC03E 21F9 FFFC C01C 0624         	MOVE.L	TXTBGN,TXTUNF	;init. end-of-program pointer
   8662 FFFCC046 2039 FFFC C020              	MOVE.L	ENDMEM,D0	;get address of end of memory
   8663 FFFCC04C 0480 0000 0800              	SUB.L	#2048,D0	;reserve 2K for the stack
   8664 FFFCC052 21C0 062C                   	MOVE.L	D0,STKLMT
   8665 FFFCC056 0480 0000 006C              	SUB.L	#108,D0 	;reserve variable area (27 long words)
   8666 FFFCC05C 21C0 0628                   	MOVE.L	D0,VARBGN
   8667 FFFCC060                             WSTART:
   8668 FFFCC060 4280                        	CLR.L	D0		;initialize internal variables
   8669 FFFCC062 21C0 0610                   	MOVE.L	D0,LOPVAR
   8670 FFFCC066 21C0 0608                   	MOVE.L	D0,STKGOS
   8671 FFFCC06A 21C0 0604                   	MOVE.L	D0,CURRNT	;current line number pointer = 0
   8672 FFFCC06E 2E79 FFFC C020              	MOVE.L	ENDMEM,SP	;init S.P. again, just in case
   8673 FFFCC074 4DF9 FFFC CBEC              	LEA	OKMSG,A6	;display "OK"
   8674 FFFCC07A 6100 0AEA                   	BSR.L	PRMESG
   8675 FFFCC07E                             ST3:
   8676 FFFCC07E 103C 003E                   	MOVE.B	#'>',D0  ;       Prompt with a '>' and
   8677 FFFCC082 6100 0810                   	BSR.L	GETLN	;	read a line.
   8678 FFFCC086 6100 0A7A                   	BSR.L	TOUPBUF ;	convert to upper case
   8679 FFFCC08A 2848                        	MOVE.L	A0,A4	;	save pointer to end of line
   8680 FFFCC08C 41F8 0630                   	LEA	BUFFER,A0	;point to the beginning of line
   8681 FFFCC090 6100 0A2C                   	BSR.L	TSTNUM	;	is there a number there?
   8682 FFFCC094 6100 0A60                   	BSR.L	IGNBLK	;	skip trailing blanks
   8683 FFFCC098 4A81                        	TST	D1		;does line no. exist? (or nonzero?)
   8684 FFFCC09A 6700 011A                   	BEQ.L	DIRECT	;	if not, it's a direct statement
   8685 FFFCC09E B2BC 0000 FFFF              	CMP.L	#$FFFF,D1	;see if line no. is <= 16 bits
   8686 FFFCC0A4 6400 07E4                   	BCC.L	QHOW		;if not, we've overflowed
   8687 FFFCC0A8 1101                        	MOVE.B	D1,-(A0)	;store the binary line no.
   8688 FFFCC0AA E099                        	ROR	#8,D1		;(Kludge to store a word on a
   8689 FFFCC0AC 1101                        	MOVE.B	D1,-(A0)	;possible byte boundary)
   8690 FFFCC0AE E199                        	ROL	#8,D1
   8691 FFFCC0B0 6100 0882                   	BSR.L	FNDLN	;	find this line in save area
   8692 FFFCC0B4 2A49                        	MOVE.L	A1,A5	;	save possible line pointer
   8693 FFFCC0B6 6612                        	BNE	ST4				;	if not found, insert
   8694 FFFCC0B8 6100 08A2                   	BSR.L	FNDNXT		;find the next line (into A1)
   8695 FFFCC0BC 244D                        	MOVE.L	A5,A2		;pointer to line to be deleted
   8696 FFFCC0BE 2678 0624                   	MOVE.L	TXTUNF,A3	;points to top of save area
   8697 FFFCC0C2 6100 08A2                   	BSR.L	MVUP		;move up to delete
   8698 FFFCC0C6 21CA 0624                   	MOVE.L	A2,TXTUNF	;update the end pointer
   8699 FFFCC0CA                             ST4:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 85
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8700 FFFCC0CA 200C                        	MOVE.L	A4,D0		;calculate the length of new line
   8701 FFFCC0CC 9088                        	SUB.L	A0,D0
   8702 FFFCC0CE B0BC 0000 0003              	CMP.L	#3,D0		;is it just a line no. & CR?
   8703 FFFCC0D4 67A8                        	BEQ	ST3				;if so, it was just a delete
   8704 FFFCC0D6 2678 0624                   	MOVE.L	TXTUNF,A3	;compute new end
   8705 FFFCC0DA 2C4B                        	MOVE.L	A3,A6
   8706 FFFCC0DC D7C0                        	ADD.L	D0,A3
   8707 FFFCC0DE 2038 0628                   	MOVE.L	VARBGN,D0	;see if there's enough room
   8708 FFFCC0E2 B08B                        	CMP.L	A3,D0
   8709 FFFCC0E4 6300 079A                   	BLS.L	QSORRY		;if not, say so
   8710 FFFCC0E8 21CB 0624                   	MOVE.L	A3,TXTUNF	;if so, store new end position
   8711 FFFCC0EC 224E                        	MOVE.L	A6,A1		;points to old unfilled area
   8712 FFFCC0EE 244D                        	MOVE.L	A5,A2		;points to beginning of move area
   8713 FFFCC0F0 6100 087E                   	BSR.L	MVDOWN		;move things out of the way
   8714 FFFCC0F4 2248                        	MOVE.L	A0,A1		;set up to do the insertion
   8715 FFFCC0F6 244D                        	MOVE.L	A5,A2
   8716 FFFCC0F8 264C                        	MOVE.L	A4,A3
   8717 FFFCC0FA 6100 086A                   	BSR.L	MVUP		;do it
   8718 FFFCC0FE 6000 FF7E                   	BRA	ST3		;go back and get another line
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** Tables *** DIRECT *** EXEC ***
                                             ;*
                                             ;* This section of the code tests a string against a table. When
                                             ;* a match is found, control is transferred to the section of
                                             ;* code according to the table.
                                             ;*
                                             ;* At 'EXEC', A0 should point to the string, A1 should point to
                                             ;* the character table, and A2 should point to the execution
                                             ;* table. At 'DIRECT', A0 should point to the string, A1 and
                                             ;* A2 will be set up to point to TAB1 and TAB1.1, which are
                                             ;* the tables of all direct and statement commands.
                                             ;*
                                             ;* A '.' in the string will terminate the test and the partial
                                             ;* match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                                             ;* 'PRIN.', or 'PRINT' will all match 'PRINT'.
                                             ;*
                                             ;* There are two tables: the character table and the execution
                                             ;* table. The character table consists of any number of text items.
                                             ;* Each item is a string of characters with the last character's
                                             ;* high bit set to one. The execution table holds a 16-bit
                                             ;* execution addresses that correspond to each entry in the
                                             ;* character table.
                                             ;*
                                             ;* The end of the character table is a 0 byte which corresponds
                                             ;* to the default routine in the execution table, which is
                                             ;* executed if none of the other table items are matched.
                                             ;*
                                             ;* Character-matching tables:
   8751 FFFCC102                             TAB1:
   8752 FFFCC102 4C 49 53 D4                 	DC.B	'LIS',('T'+0x80) ;        Direct commands
   8753 FFFCC106 4C 4F 41 C4                 	DC.B	'LOA',('D'+0x80)
   8754 FFFCC10A 4E 45 D7                    	DC.B	'NE',('W'+0x80)
   8755 FFFCC10D 52 55 CE                    	DC.B	'RU',('N'+0x80)
   8756 FFFCC110 53 41 56 C5                 	DC.B	'SAV',('E'+0x80)
   8757 FFFCC114                             TAB2:
   8758 FFFCC114 4E 45 58 D4                 	DC.B	'NEX',('T'+0x80)  ;       Direct / statement
   8759 FFFCC118 4C 45 D4                    	DC.B	'LE',('T'+0x80)
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 86
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8760 FFFCC11B 49 C6                       	DC.B	'I',('F'+0x80)
   8761 FFFCC11D 47 4F 54 CF                 	DC.B	'GOT',('O'+0x80)
   8762 FFFCC121 47 4F 53 55 C2              	DC.B	'GOSU',('B'+0x80)
   8763 FFFCC126 52 45 54 55 52 CE           	DC.B	'RETUR',('N'+0x80)
   8764 FFFCC12C 52 45 CD                    	DC.B	'RE',('M'+0x80)
   8765 FFFCC12F 46 4F D2                    	DC.B	'FO',('R'+0x80)
   8766 FFFCC132 49 4E 50 55 D4              	DC.B	'INPU',('T'+0x80)
   8767 FFFCC137 50 52 49 4E D4              	DC.B	'PRIN',('T'+0x80)
   8768 FFFCC13C 50 4F 4B C5                 	DC.B	'POK',('E'+0x80)
   8769 FFFCC140 53 54 4F D0                 	DC.B	'STO',('P'+0x80)
   8770 FFFCC144 42 59 C5                    	DC.B	'BY',('E'+0x80)
   8771 FFFCC147 43 41 4C CC                 	DC.B	'CAL',('L'+0x80)
   8772 FFFCC14B 00                          	DC.B	0
   8773 FFFCC14C                             TAB4:
   8774 FFFCC14C 50 45 45 CB                 	DC.B	'PEE',('K'+0x80)   ;      Functions
   8775 FFFCC150 52 4E C4                    	DC.B	'RN',('D'+0x80)
   8776 FFFCC153 41 42 D3                    	DC.B	'AB',('S'+0x80)
   8777 FFFCC156 53 49 5A C5                 	DC.B	'SIZ',('E'+0x80)
   8778 FFFCC15A 00                          	DC.B	0
   8779 FFFCC15B                             TAB5:
   8780 FFFCC15B 54 CF                       	DC.B	'T',('O'+0x80)      ;     "TO" in "FOR"
   8781 FFFCC15D 00                          	DC.B	0
   8782 FFFCC15E                             TAB6:
   8783 FFFCC15E 53 54 45 D0                 	DC.B	'STE',('P'+0x80)     ;    "STEP" in "FOR"
   8784 FFFCC162 00                          	DC.B	0
   8785 FFFCC163                             TAB8:
   8786 FFFCC163 3E BD                       	DC.B	'>',('='+0x80)        ;   Relational operators
   8787 FFFCC165 3C BE                       	DC.B	'<',('>'+0x80)
   8788 FFFCC167 BE                          	DC.B	('>'+0x80)
   8789 FFFCC168 BD                          	DC.B	('='+0x80)
   8790 FFFCC169 3C BD                       	DC.B	'<',('='+0x80)
   8791 FFFCC16B BC                          	DC.B	('<'+0x80)
   8792 FFFCC16C 00                          	DC.B	0
   8793 FFFCC16D 00                          	DC.B	0	;<- for aligning on a word boundary
                                             
                                             	align	2
                                             ;* Execution address tables:
   8797 FFFCC16E                             TAB1_1:
   8798 FFFCC16E C266                        	DC.W	LIST_			;Direct commands
   8799 FFFCC170 C4A8                        	DC.W	LOAD
   8800 FFFCC172 C200                        	DC.W	NEW
   8801 FFFCC174 C214                        	DC.W	RUN
   8802 FFFCC176 C50C                        	DC.W	SAVE
   8803 FFFCC178                             TAB2_1:
   8804 FFFCC178 C3B4                        	DC.W	NEXT			;Direct / statement
   8805 FFFCC17A C498                        	DC.W	LET
   8806 FFFCC17C C404                        	DC.W	IF
   8807 FFFCC17E C252                        	DC.W	GOTO
   8808 FFFCC180 C2FC                        	DC.W	GOSUB
   8809 FFFCC182 C324                        	DC.W	RETURN
   8810 FFFCC184 C402                        	DC.W	REM
   8811 FFFCC186 C342                        	DC.W	FOR
   8812 FFFCC188 C42A                        	DC.W	INPUT
   8813 FFFCC18A C292                        	DC.W	PRINT
   8814 FFFCC18C C590                        	DC.W	POKE
   8815 FFFCC18E C20C                        	DC.W	STOP_
   8816 FFFCC190 C018                        	DC.W	GOBYE
   8817 FFFCC192 C5AC                        	DC.W	CALL
   8818 FFFCC194 C492                        	DC.W	DEFLT
   8819 FFFCC196                             TAB4_1:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 87
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8820 FFFCC196 C7A2                        	DC.W	PEEK			;Functions
   8821 FFFCC198 C7AE                        	DC.W	RND
   8822 FFFCC19A C7E4                        	DC.W	ABS
   8823 FFFCC19C C7F4                        	DC.W	SIZE_
   8824 FFFCC19E C6A6                        	DC.W	XP40
   8825 FFFCC1A0                             TAB5_1:
   8826 FFFCC1A0 C35E                        	DC.W	FR1		;	"TO" in "FOR"
   8827 FFFCC1A2 C83E                        	DC.W	QWHAT
   8828 FFFCC1A4                             TAB6_1:
   8829 FFFCC1A4 C376                        	DC.W	FR2		;	"STEP" in "FOR"
   8830 FFFCC1A6 C37C                        	DC.W	FR3
   8831 FFFCC1A8                             TAB8_1:
   8832 FFFCC1A8 C5D8                        	DC.W	XP11;	>=		Relational operators
   8833 FFFCC1AA C5E0                        	DC.W	XP12	;<>
   8834 FFFCC1AC C5E8                        	DC.W	XP13	;>
   8835 FFFCC1AE C5F8                        	DC.W	XP15	;=
   8836 FFFCC1B0 C5F0                        	DC.W	XP14	;<=
   8837 FFFCC1B2 C602                        	DC.W	XP16	;<
   8838 FFFCC1B4 C614                        	DC.W	XP17
                                             ;*
   8840 FFFCC1B6                             DIRECT:
   8841 FFFCC1B6 43F9 FFFC C102              	LEA	TAB1,A1
   8842 FFFCC1BC 45F9 FFFC C16E              	LEA	TAB1_1,A2
   8843 FFFCC1C2                             EXEC:
   8844 FFFCC1C2 6100 0932                   	BSR.L	IGNBLK;		ignore leading blanks
   8845 FFFCC1C6 2648                        	MOVE.L	A0,A3		;save the pointer
   8846 FFFCC1C8 4202                        	CLR.B	D2		;clear match flag
   8847 FFFCC1CA                             EXLP:
   8848 FFFCC1CA 1018                        	MOVE.B	(A0)+,D0;	get the program character
   8849 FFFCC1CC 1211                        	MOVE.B	(A1),D1 	;get the table character
   8850 FFFCC1CE 6604                        	BNE	EXNGO		;If end of table,
   8851 FFFCC1D0 204B                        	MOVE.L	A3,A0	;;	restore the text pointer and...
   8852 FFFCC1D2 6024                        	BRA	EXGO		;execute the default.
   8853 FFFCC1D4                             EXNGO:
   8854 FFFCC1D4 1600                        	MOVE.B	D0,D3	;	Else check for period...
   8855 FFFCC1D6 C602                        	AND.B	D2,D3		;and a match.
   8856 FFFCC1D8 B63C 002E                   	CMP.B	#'.',D3
   8857 FFFCC1DC 671A                        	BEQ	EXGO		;if so, execute
   8858 FFFCC1DE 0201 007F                   	AND.B	#0x7F,D1 ;	ignore the table's high bit
   8859 FFFCC1E2 B200                        	CMP.B	D0,D1	;	is there a match?
   8860 FFFCC1E4 670C                        	BEQ	EXMAT
   8861 FFFCC1E6 548A                        	ADDQ.L	#2,A2	;	if not, try the next entry
   8862 FFFCC1E8 204B                        	MOVE.L	A3,A0	;	reset the program pointer
   8863 FFFCC1EA 4202                        	CLR.B	D2		;sorry, no match
   8864 FFFCC1EC                             EX1:
   8865 FFFCC1EC 4A19                        	TST.B	(A1)+	;	get to the end of the entry
   8866 FFFCC1EE 6AFC                        	BPL	EX1
   8867 FFFCC1F0 60D8                        	BRA	EXLP		;back for more matching
   8868 FFFCC1F2                             EXMAT:
   8869 FFFCC1F2 74FF                        	MOVEQ	#-1,D2;		we've got a match so far
   8870 FFFCC1F4 4A19                        	TST.B	(A1)+	;	end of table entry?
   8871 FFFCC1F6 6AD2                        	BPL	EXLP		;if not, go back for more
   8872 FFFCC1F8                             EXGO:
   8873 FFFCC1F8 47F8 0000                   	LEA	0,A3	;	execute the appropriate routine
   8874 FFFCC1FC 2652                        	MOVE	(A2),A3
   8875 FFFCC1FE 4ED3                        	JMP	(A3)
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* What follows is the code to execute direct and statement
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 88
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;* commands. Control is transferred to these points via the command
                                             ;* table lookup code of 'DIRECT' and 'EXEC' in the last section.
                                             ;* After the command is executed, control is transferred to other
                                             ;* sections as follows:
                                             ;*
                                             ;* For 'LIST', 'NEW', and 'STOP': go back to the warm start point.
                                             ;* For 'RUN': go execute the first stored line if any; else go
                                             ;* back to the warm start point.
                                             ;* For 'GOTO' and 'GOSUB': go execute the target line.
                                             ;* For 'RETURN' and 'NEXT'; go back to saved return line.
                                             ;* For all others: if 'CURRNT' is 0, go to warm start; else go;
                                             ;* execute next command. (This is done in 'FINISH'.)
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                                             ;*
                                             ;* 'NEW<CR>' sets TXTUNF to point to TXTBGN
                                             ;*
                                             ;* 'STOP<CR>' goes back to WSTART
                                             ;*
                                             ;* 'RUN<CR>' finds the first stored line, stores its address
                                             ;* in CURRNT, and starts executing it. Note that only those
                                             ;* commands in TAB2 are legal for a stored program.
                                             ;*
                                             ;* There are 3 more entries in 'RUN':
                                             ;* 'RUNNXL' finds next line, stores it's address and executes it.
                                             ;* 'RUNTSL' stores the address of this line and executes it.
                                             ;* 'RUNSML' continues the execution on same line.
                                             ;*
                                             ;* 'GOTO expr<CR>' evaluates the expression, finds the target
                                             ;* line, and jumps to 'RUNTSL' to do it.
                                             ;*
   8913 FFFCC200                             NEW:
   8914 FFFCC200 6100 0630                   	BSR.L	ENDCHK
   8915 FFFCC204 21F9 FFFC C01C 0624         	MOVE.L	TXTBGN,TXTUNF	;set the end pointer
                                             
   8917 FFFCC20C                             STOP_:
   8918 FFFCC20C 6100 0624                   	BSR.L	ENDCHK
   8919 FFFCC210 6000 FE4E                   	BRA	WSTART
                                             
   8921 FFFCC214                             RUN:
   8922 FFFCC214 6100 061C                   	BSR.L	ENDCHK
   8923 FFFCC218 2079 FFFC C01C              	MOVE.L	TXTBGN,A0	;set pointer to beginning
   8924 FFFCC21E 21C8 0604                   	MOVE.L	A0,CURRNT
                                             
   8926 FFFCC222                             RUNNXL:
   8927 FFFCC222 4AB8 0604                   	TST.L	CURRNT	;	executing a program?
   8928 FFFCC226 6700 FE38                   	BEQ.L	WSTART		;if not, we've finished a direct stat.
   8929 FFFCC22A 4281                        	CLR.L	D1		;else find the next line number
   8930 FFFCC22C 2248                        	MOVE.L	A0,A1
   8931 FFFCC22E 6100 0714                   	BSR.L	FNDLNP
   8932 FFFCC232 6500 FE2C                   	BCS	WSTART		;if we've fallen off the end, stop
                                             
   8934 FFFCC236                             RUNTSL:
   8935 FFFCC236 21C9 0604                   	MOVE.L	A1,CURRNT	;set CURRNT to point to the line no.
   8936 FFFCC23A 2049                        	MOVE.L	A1,A0		;set the text pointer to
   8937 FFFCC23C 5488                        	ADDQ.L	#2,A0		;the start of the line text
                                             
   8939 FFFCC23E                             RUNSML:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 89
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   8940 FFFCC23E 6100 090E                   	BSR.L	CHKIO	;	see if a control-C was pressed
   8941 FFFCC242 43F9 FFFC C114              	LEA	TAB2,A1 	;find command in TAB2
   8942 FFFCC248 45F9 FFFC C178              	LEA	TAB2_1,A2
   8943 FFFCC24E 6000 FF72                   	BRA	EXEC		;and execute it
                                             
   8945 FFFCC252                             GOTO:
   8946 FFFCC252 6100 036E                   	BSR.L	EXPR	;	evaluate the following expression
   8947 FFFCC256 6100 05DA                   	BSR.L	ENDCHK		;must find end of line
   8948 FFFCC25A 2200                        	MOVE.L	D0,D1
   8949 FFFCC25C 6100 06D6                   	BSR.L	FNDLN		;find the target line
   8950 FFFCC260 6600 0628                   	BNE.L	QHOW		;no such line no.
   8951 FFFCC264 60D0                        	BRA	RUNTSL		;go do it
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** LIST *** PRINT ***
                                             ;*
                                             ;* LIST has two forms:
                                             ;* 'LIST<CR>' lists all saved lines
                                             ;* 'LIST #<CR>' starts listing at the line #
                                             ;* Control-S pauses the listing, control-C stops it.
                                             ;*
                                             ;* PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                                             ;* where '....' is a list of expressions, formats, back-arrows,
                                             ;* and strings.	These items a separated by commas.
                                             ;*
                                             ;* A format is a pound sign followed by a number.  It controls
                                             ;* the number of spaces the value of an expression is going to
                                             ;* be printed in.  It stays effective for the rest of the print
                                             ;* command unless changed by another format.  If no format is
                                             ;* specified, 11 positions will be used.
                                             ;*
                                             ;* A string is quoted in a pair of single- or double-quotes.
                                             ;*
                                             ;* An underline (back-arrow) means generate a <CR> without a <LF>
                                             ;*
                                             ;* A <CR LF> is generated after the entire list has been printed
                                             ;* or if the list is empty.  If the list ends with a semicolon,
                                             ;* however, no <CR LF> is generated.
                                             ;*
                                             
   8982 FFFCC266                             LIST_:
   8983 FFFCC266 6100 0856                   	BSR.L	TSTNUM	;	see if there's a line no.
   8984 FFFCC26A 6100 05C6                   	BSR.L	ENDCHK		;if not, we get a zero
   8985 FFFCC26E 6100 06C4                   	BSR.L	FNDLN		;find this or next line
   8986 FFFCC272                             LS1:
   8987 FFFCC272 6500 FDEC                   	BCS	WSTART		;warm start if we passed the end
   8988 FFFCC276 6100 0810                   	BSR.L	PRTLN	;	print the line
   8989 FFFCC27A 6100 08D2                   	BSR.L	CHKIO	;	check for listing halt request
   8990 FFFCC27E 670C                        	BEQ	LS3
   8991 FFFCC280 B03C 0013                   	CMP.B	#CTRLS,D0	;pause the listing?
   8992 FFFCC284 6606                        	BNE	LS3
   8993 FFFCC286                             LS2:
   8994 FFFCC286 6100 08C6                   	BSR.L	CHKIO		;if so, wait for another keypress
   8995 FFFCC28A 67FA                        	BEQ	LS2
   8996 FFFCC28C                             LS3:
   8997 FFFCC28C 6100 06B6                   	BSR.L	FNDLNP		;find the next line
   8998 FFFCC290 60E0                        	BRA	LS1
                                             
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 90
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9000 FFFCC292                             PRINT:
   9001 FFFCC292 780B                        	MOVE	#11,D4	;	D4 = number of print spaces
   9002 FFFCC294 6100 080E                   	BSR.L	TSTC		;if null list and ":"
   9003 FFFCC298 3A 07                       	DC.B	':',PR2-$
   9004 FFFCC29A 6100 08C4                   	BSR.L	CRLF		;give CR-LF and continue
   9005 FFFCC29E 609E                        	BRA	RUNSML		;execution on the same line
   9006 FFFCC2A0                             PR2:
   9007 FFFCC2A0 6100 0802                   	BSR.L	TSTC		;if null list and <CR>
   9008 FFFCC2A4 0D 09                       	DC.B	CR,PR0-$
   9009 FFFCC2A6 6100 08B8                   	BSR.L	CRLF		;also give CR-LF and
   9010 FFFCC2AA 6000 FF76                   	BRA	RUNNXL		;execute the next line
   9011 FFFCC2AE                             PR0:
   9012 FFFCC2AE 6100 07F4                   	BSR.L	TSTC		;else is it a format?
   9013 FFFCC2B2 23 09                       	DC.B	'#',PR1-$
   9014 FFFCC2B4 6100 030C                   	BSR.L	EXPR		;yes, evaluate expression
   9015 FFFCC2B8 2800                        	MOVE	D0,D4		;and save it as print width
   9016 FFFCC2BA 6016                        	BRA	PR3		;look for more to print
   9017 FFFCC2BC                             PR1:
   9018 FFFCC2BC 6100 07E6                   	BSR.L	TSTC		;is character expression? (MRL)
   9019 FFFCC2C0 24 0B                       	DC.B	'$',PR4-$
   9020 FFFCC2C2 6100 02FE                   	BSR.L	EXPR		;yep. Evaluate expression (MRL)
   9021 FFFCC2C6 6100 FD40                   	BSR	GOOUT		;print low byte (MRL)
   9022 FFFCC2CA 6006                        	BRA	PR3		;look for more. (MRL)
   9023 FFFCC2CC                             PR4:
   9024 FFFCC2CC 6100 0706                   	BSR.L	QTSTG	;	is it a string?
   9025 FFFCC2D0 6012                        	BRA.S	PR8		;if not, must be an expression
   9026 FFFCC2D2                             PR3:
   9027 FFFCC2D2 6100 07D0                   	BSR.L	TSTC	;	if ",", go find next
   9028 FFFCC2D6 2C 07                       	DC.B	',',PR6-$
   9029 FFFCC2D8 6100 053E                   	BSR.L	FIN		;in the list.
   9030 FFFCC2DC 60D0                        	BRA	PR0
   9031 FFFCC2DE                             PR6:
   9032 FFFCC2DE 6100 0880                   	BSR.L	CRLF	;	list ends here
   9033 FFFCC2E2 6010                        	BRA	FINISH
   9034 FFFCC2E4                             PR8:
   9035 FFFCC2E4 2F04                        	MOVE	D4,-(SP)	;save the width value
   9036 FFFCC2E6 6100 02DA                   	BSR.L	EXPR		;evaluate the expression
   9037 FFFCC2EA 281F                        	MOVE	(SP)+,D4	;restore the width
   9038 FFFCC2EC 2200                        	MOVE.L	D0,D1
   9039 FFFCC2EE 6100 0724                   	BSR.L	PRTNUM		;print its value
   9040 FFFCC2F2 60DE                        	BRA	PR3		;more to print?
                                             
   9042 FFFCC2F4                             FINISH:
   9043 FFFCC2F4 6100 0522                   	BSR.L	FIN	;	Check end of command
   9044 FFFCC2F8 6000 0544                   	BRA.L	QWHAT	;	print "What?" if wrong
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** GOSUB *** & RETURN ***
                                             ;*
                                             ;* 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                                             ;* except that the current text pointer, stack pointer, etc. are
                                             ;* saved so that execution can be continued after the subroutine
                                             ;* 'RETURN's.  In order that 'GOSUB' can be nested (and even
                                             ;* recursive), the save area must be stacked.  The stack pointer
                                             ;* is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                                             ;* If we are in the main routine, 'STKGOS' is zero (this was done
                                             ;* in the initialization section of the interpreter), but we still
                                             ;* save it as a flag for no further 'RETURN's.
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 91
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;*
                                             ;* 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                                             ;* returns the execution to the command after the most recent
                                             ;* 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                                             ;* a 'GOSUB' and is thus an error.
                                             ;*
   9066 FFFCC2FC                             GOSUB:
   9067 FFFCC2FC 6100 0694                   	BSR.L	PUSHA	;	save the current 'FOR' parameters
   9068 FFFCC300 6100 02C0                   	BSR.L	EXPR		;get line number
   9069 FFFCC304 2F08                        	MOVE.L	A0,-(SP)	;save text pointer
   9070 FFFCC306 2200                        	MOVE.L	D0,D1
   9071 FFFCC308 6100 062A                   	BSR.L	FNDLN		;find the target line
   9072 FFFCC30C 6600 057E                   	BNE.L	AHOW		;if not there, say "How?"
   9073 FFFCC310 2F38 0604                   	MOVE.L	CURRNT,-(SP)	;found it, save old 'CURRNT'...
   9074 FFFCC314 2F38 0608                   	MOVE.L	STKGOS,-(SP)	;and 'STKGOS'
   9075 FFFCC318 42B8 0610                   	CLR.L	LOPVAR		;load new values
   9076 FFFCC31C 21CF 0608                   	MOVE.L	SP,STKGOS
   9077 FFFCC320 6000 FF14                   	BRA	RUNTSL
                                             
   9079 FFFCC324                             RETURN:
   9080 FFFCC324 6100 050C                   	BSR.L	ENDCHK	;	there should be just a <CR>
   9081 FFFCC328 2238 0608                   	MOVE.L	STKGOS,D1	;get old stack pointer
   9082 FFFCC32C 6700 0510                   	BEQ.L	QWHAT		;if zero, it doesn't exist
   9083 FFFCC330 2E41                        	MOVE.L	D1,SP		;else restore it
   9084 FFFCC332 21DF 0608                   	MOVE.L	(SP)+,STKGOS	;and the old 'STKGOS'
   9085 FFFCC336 21DF 0604                   	MOVE.L	(SP)+,CURRNT	;and the old 'CURRNT'
   9086 FFFCC33A 205F                        	MOVE.L	(SP)+,A0	;and the old text pointer
   9087 FFFCC33C 6100 063A                   	BSR.L	POPA		;and the old 'FOR' parameters
   9088 FFFCC340 60B2                        	BRA	FINISH		;and we are back home
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** FOR *** & NEXT ***
                                             ;*
                                             ;* 'FOR' has two forms:
                                             ;* 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                                             ;* The second form means the same thing as the first form with a
                                             ;* STEP of positive 1.  The interpreter will find the variable 'var'
                                             ;* and set its value to the current value of 'exp1'.  It also
                                             ;* evaluates 'exp2' and 'exp1' and saves all these together with
                                             ;* the text pointer, etc. in the 'FOR' save area, which consisits of
                                             ;* 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                                             ;* already something in the save area (indicated by a non-zero
                                             ;* 'LOPVAR'), then the old save area is saved on the stack before
                                             ;* the new values are stored.  The interpreter will then dig in the
                                             ;* stack and find out if this same variable was used in another
                                             ;* currently active 'FOR' loop.  If that is the case, then the old
                                             ;* 'FOR' loop is deactivated. (i.e. purged from the stack)
                                             ;*
                                             ;* 'NEXT var' serves as the logical (not necessarily physical) end
                                             ;* of the 'FOR' loop.  The control variable 'var' is checked with
                                             ;* the 'LOPVAR'.  If they are not the same, the interpreter digs in
                                             ;* the stack to find the right one and purges all those that didn't
                                             ;* match.  Either way, it then adds the 'STEP' to that variable and
                                             ;* checks the result with against the limit value.  If it is within
                                             ;* the limit, control loops back to the command following the
                                             ;* 'FOR'.  If it's outside the limit, the save area is purged and
                                             ;* execution continues.
                                             ;*
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 92
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9120 FFFCC342                             FOR:
   9121 FFFCC342 6100 064E                   	BSR.L	PUSHA		;save the old 'FOR' save area
   9122 FFFCC346 6100 04B6                   	BSR.L	SETVAL		;set the control variable
   9123 FFFCC34A 21CE 0610                   	MOVE.L	A6,LOPVAR	;save its address
   9124 FFFCC34E 43F9 FFFC C15B              	LEA	TAB5,A1 	;use 'EXEC' to test for 'TO'
   9125 FFFCC354 45F9 FFFC C1A0              	LEA	TAB5_1,A2
   9126 FFFCC35A 6000 FE66                   	BRA	EXEC
   9127 FFFCC35E                             FR1:
   9128 FFFCC35E 6100 0262                   	BSR.L	EXPR		;evaluate the limit
   9129 FFFCC362 21C0 0618                   	MOVE.L	D0,LOPLMT	;save that
   9130 FFFCC366 43F9 FFFC C15E              	LEA	TAB6,A1 	;use 'EXEC' to look for the
   9131 FFFCC36C 45F9 FFFC C1A4              	LEA	TAB6_1,A2	;word 'STEP'
   9132 FFFCC372 6000 FE4E                   	BRA	EXEC
   9133 FFFCC376                             FR2:
   9134 FFFCC376 6100 024A                   	BSR.L	EXPR	;	found it, get the step value
   9135 FFFCC37A 6002                        	BRA	FR4
   9136 FFFCC37C                             FR3:
   9137 FFFCC37C 7001                        	MOVEQ	#1,D0	;	not found, step defaults to 1
   9138 FFFCC37E                             FR4:
   9139 FFFCC37E 21C0 0614                   	MOVE.L	D0,LOPINC	;save that too
   9140 FFFCC382                             FR5:
   9141 FFFCC382 21F8 0604 061C              	MOVE.L	CURRNT,LOPLN	;save address of current line number
   9142 FFFCC388 21C8 0620                   	MOVE.L	A0,LOPPT	;and text pointer
   9143 FFFCC38C 2C4F                        	MOVE.L	SP,A6		;dig into the stack to find 'LOPVAR'
   9144 FFFCC38E 6006                        	BRA	FR7
   9145 FFFCC390                             FR6:
   9146 FFFCC390 DDFC 0000 0014              	ADD.L	#20,A6		;look at next stack frame
   9147 FFFCC396                             FR7:
   9148 FFFCC396 2016                        	MOVE.L	(A6),D0 	;is it zero?
   9149 FFFCC398 6716                        	BEQ	FR8		;if so, we're done
   9150 FFFCC39A B0B8 0610                   	CMP.L	LOPVAR,D0	;same as current LOPVAR?
   9151 FFFCC39E 66F0                        	BNE	FR6		;nope, look some more
   9152 FFFCC3A0 244F                        	MOVE.L	SP,A2	;	Else remove 5 long words from...
   9153 FFFCC3A2 224E                        	MOVE.L	A6,A1	;	inside the stack.
   9154 FFFCC3A4 47F8 0014                   	LEA	20,A3
   9155 FFFCC3A8 D7C9                        	ADD.L	A1,A3
   9156 FFFCC3AA 6100 05C4                   	BSR.L	MVDOWN
   9157 FFFCC3AE 2E4B                        	MOVE.L	A3,SP	;	set the SP 5 long words up
   9158 FFFCC3B0                             FR8:
   9159 FFFCC3B0 6000 FF42                   	BRA	FINISH		;and continue execution
                                             
   9161 FFFCC3B4                             NEXT:
   9162 FFFCC3B4 6100 031E                   	BSR.L	TSTV;		get address of variable
   9163 FFFCC3B8 6500 0484                   	BCS.L	QWHAT	;	if no variable, say "What?"
   9164 FFFCC3BC 2240                        	MOVE.L	D0,A1	;	save variable's address
   9165 FFFCC3BE                             NX0:
   9166 FFFCC3BE 2038 0610                   	MOVE.L	LOPVAR,D0;	If 'LOPVAR' is zero, we never...
   9167 FFFCC3C2 6700 047A                   	BEQ.L	QWHAT	;	had a FOR loop, so say "What?"
   9168 FFFCC3C6 B3C0                        	CMP.L	D0,A1	;;	else we check them
   9169 FFFCC3C8 6706                        	BEQ	NX3	;	OK, they agree
   9170 FFFCC3CA 6100 05AC                   	BSR.L	POPA	;	nope, let's see the next frame
   9171 FFFCC3CE 60EE                        	BRA	NX0
   9172 FFFCC3D0                             NX3:
   9173 FFFCC3D0 2011                        	MOVE.L	(A1),D0 ;	get control variable's value
   9174 FFFCC3D2 D0B8 0614                   	ADD.L	LOPINC,D0;	add in loop increment
   9175 FFFCC3D6 6900 04B2                   	BVS.L	QHOW	;	say "How?" for 32-bit overflow
   9176 FFFCC3DA 2280                        	MOVE.L	D0,(A1) ;	save control variable's new value
   9177 FFFCC3DC 2238 0618                   	MOVE.L	LOPLMT,D1;	get loop's limit value
   9178 FFFCC3E0 4AB8 0614                   	TST.L	LOPINC
   9179 FFFCC3E4 6A02                        	BPL	NX1	;	branch if loop increment is positive
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 93
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9180 FFFCC3E6 C141                        	EXG	D0,D1
   9181 FFFCC3E8                             NX1:
   9182 FFFCC3E8 B280                        	CMP.L	D0,D1;		test against limit
   9183 FFFCC3EA 6D0E                        	BLT	NX2;		branch if outside limit
   9184 FFFCC3EC 21F8 061C 0604              	MOVE.L	LOPLN,CURRNT	;Within limit, go back to the...
   9185 FFFCC3F2 2078 0620                   	MOVE.L	LOPPT,A0	;saved 'CURRNT' and text pointer.
   9186 FFFCC3F6 6000 FEFC                   	BRA	FINISH
   9187 FFFCC3FA                             NX2:
   9188 FFFCC3FA 6100 057C                   	BSR.L	POPA		;purge this loop
   9189 FFFCC3FE 6000 FEF4                   	BRA	FINISH
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                                             ;*
                                             ;* 'REM' can be followed by anything and is ignored by the
                                             ;* interpreter.
                                             ;*
                                             ;* 'IF' is followed by an expression, as a condition and one or
                                             ;* more commands (including other 'IF's) separated by colons.
                                             ;* Note that the word 'THEN' is not used.  The interpreter evaluates
                                             ;* the expression.  If it is non-zero, execution continues.  If it
                                             ;* is zero, the commands that follow are ignored and execution
                                             ;* continues on the next line.
                                             ;*
                                             ;* 'INPUT' is like the 'PRINT' command, and is followed by a list
                                             ;* of items.  If the item is a string in single or double quotes,
                                             ;* or is an underline (back arrow), it has the same effect as in
                                             ;* 'PRINT'.  If an item is a variable, this variable name is
                                             ;* printed out followed by a colon, then the interpreter waits for
                                             ;* an expression to be typed in.  The variable is then set to the
                                             ;* value of this expression.  If the variable is preceeded by a
                                             ;* string (again in single or double quotes), the string will be
                                             ;* displayed followed by a colon.  The interpreter the waits for an
                                             ;* expression to be entered and sets the variable equal to the
                                             ;* expression's value.  If the input expression is invalid, the
                                             ;* interpreter will print "What?", "How?", or "Sorry" and reprint
                                             ;* the prompt and redo the input.  The execution will not terminate
                                             ;* unless you press control-C.  This is handled in 'INPERR'.
                                             ;*
                                             ;* 'LET' is followed by a list of items separated by commas.
                                             ;* Each item consists of a variable, an equals sign, and an
                                             ;* expression.  The interpreter evaluates the expression and sets
                                             ;* the variable to that value.  The interpreter will also handle
                                             ;* 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                                             ;*
   9227 FFFCC402                             REM:
   9228 FFFCC402 600A                        	BRA	IF2		;skip the rest of the line
                                             
   9230 FFFCC404                             IF:	
   9231 FFFCC404 6100 01BC                   	BSR.L	EXPR	;	evaluate the expression
   9232 FFFCC408                             IF1:
   9233 FFFCC408 4A80                        	TST.L	D0		;is it zero?
   9234 FFFCC40A 6600 FE32                   	BNE	RUNSML		;if not, continue
   9235 FFFCC40E                             IF2:
   9236 FFFCC40E 2248                        	MOVE.L	A0,A1
   9237 FFFCC410 4281                        	CLR.L	D1
   9238 FFFCC412 6100 054A                   	BSR.L	FNDSKP	;	if so, skip the rest of the line
   9239 FFFCC416 6400 FE1E                   	BCC	RUNTSL		;and run the next line
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 94
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9240 FFFCC41A 6000 FC44                   	BRA.L	WSTART	;	if no next line, do a warm start
                                             
   9242 FFFCC41E                             INPERR:
   9243 FFFCC41E 2E78 060C                   	MOVE.L	STKINP,SP;	restore the old stack pointer
   9244 FFFCC422 21DF 0604                   	MOVE.L	(SP)+,CURRNT;	and old 'CURRNT'
   9245 FFFCC426 588F                        	ADDQ.L	#4,SP
   9246 FFFCC428 205F                        	MOVE.L	(SP)+,A0	;and old text pointer
                                             
   9248 FFFCC42A                             INPUT:
   9249 FFFCC42A 2F08                        	MOVE.L	A0,-(SP);	save in case of error
   9250 FFFCC42C 6100 05A6                   	BSR.L	QTSTG		;is next item a string?
   9251 FFFCC430 600A                        	BRA.S	IP2		;nope
   9252 FFFCC432 6100 02A0                   	BSR.L	TSTV	;	yes, but is it followed by a variable?
   9253 FFFCC436 654C                        	BCS	IP4		;if not, branch
   9254 FFFCC438 2440                        	MOVE.L	D0,A2	;	put away the variable's address
   9255 FFFCC43A 601A                        	BRA	IP3		;if so, input to variable
   9256 FFFCC43C                             IP2:
   9257 FFFCC43C 2F08                        	MOVE.L	A0,-(SP);	save for 'PRTSTG'
   9258 FFFCC43E 6100 0294                   	BSR.L	TSTV	;	must be a variable now
   9259 FFFCC442 6500 03FA                   	BCS.L	QWHAT	;	"What?" it isn't?
   9260 FFFCC446 2440                        	MOVE.L	D0,A2	;	put away the variable's address
   9261 FFFCC448 1410                        	MOVE.B	(A0),D2 ;	get ready for 'PRTSTG'
   9262 FFFCC44A 4200                        	CLR.B	D0
   9263 FFFCC44C 1080                        	MOVE.B	D0,(A0)
   9264 FFFCC44E 225F                        	MOVE.L	(SP)+,A1
   9265 FFFCC450 6100 0566                   	BSR.L	PRTSTG	;	print string as prompt
   9266 FFFCC454 1082                        	MOVE.B	D2,(A0) ;	restore text
   9267 FFFCC456                             IP3:
   9268 FFFCC456 2F08                        	MOVE.L	A0,-(SP);	save in case of error
   9269 FFFCC458 2F38 0604                   	MOVE.L	CURRNT,-(SP)	;also save 'CURRNT'
   9270 FFFCC45C 21FC FFFF FFFF 0604         	MOVE.L	#-1,CURRNT	;flag that we are in INPUT
   9271 FFFCC464 21CF 060C                   	MOVE.L	SP,STKINP	;save the stack pointer too
   9272 FFFCC468 2F0A                        	MOVE.L	A2,-(SP)	;save the variable address
   9273 FFFCC46A 103C 003A                   	MOVE.B	#':',D0     ;    print a colon first
   9274 FFFCC46E 6100 0424                   	BSR.L	GETLN		;then get an input line
   9275 FFFCC472 41F8 0630                   	LEA	BUFFER,A0	;point to the buffer
   9276 FFFCC476 6100 014A                   	BSR.L	EXPR	;	evaluate the input
   9277 FFFCC47A 245F                        	MOVE.L	(SP)+,A2	;restore the variable address
   9278 FFFCC47C 2480                        	MOVE.L	D0,(A2) 	;save value in variable
   9279 FFFCC47E 21DF 0604                   	MOVE.L	(SP)+,CURRNT	;restore old 'CURRNT'
   9280 FFFCC482 205F                        	MOVE.L	(SP)+,A0;	and the old text pointer
   9281 FFFCC484                             IP4:
   9282 FFFCC484 588F                        	ADDQ.L	#4,SP	;	clean up the stack
   9283 FFFCC486 6100 061C                   	BSR.L	TSTC	;	is the next thing a comma?
   9284 FFFCC48A 2C 03                       	DC.B	',',IP5-$
   9285 FFFCC48C 609C                        	BRA	INPUT	;	yes, more items
   9286 FFFCC48E                             IP5:
   9287 FFFCC48E 6000 FE64                   	BRA	FINISH
                                             
   9289 FFFCC492                             DEFLT:
   9290 FFFCC492 0C10 000D                   	CMP.B	#CR,(A0);	empty line is OK
   9291 FFFCC496 670C                        	BEQ	LT1		;else it is 'LET'
                                             
   9293 FFFCC498                             LET:
   9294 FFFCC498 6100 0364                   	BSR.L	SETVAL		;do the assignment
   9295 FFFCC49C 6100 0606                   	BSR.L	TSTC		;check for more 'LET' items
   9296 FFFCC4A0 2C 03                       	DC.B	',',LT1-$
   9297 FFFCC4A2 60F4                        	BRA	LET
   9298 FFFCC4A4                             LT1:
   9299 FFFCC4A4 6000 FE4E                   	BRA	FINISH		;until we are finished.
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 95
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** LOAD *** & SAVE ***
                                             ;*
                                             ;* These two commands transfer a program to/from an auxiliary
                                             ;* device such as a cassette, another computer, etc.  The program
                                             ;* is converted to an easily-stored format: each line starts with
                                             ;* a colon, the line no. as 4 hex digits, and the rest of the line.
                                             ;* At the end, a line starting with an '@' sign is sent.  This
                                             ;* format can be read back with a minimum of processing time by
                                             ;* the 68000.
                                             ;*
   9314 FFFCC4A8                             LOAD:
   9315 FFFCC4A8 2079 FFFC C01C              	MOVE.L	TXTBGN,A0	;set pointer to start of prog. area
   9316 FFFCC4AE 103C 000D                   	MOVE.B	#CR,D0		;For a CP/M host, tell it we're ready...
   9317 FFFCC4B2 6100 FB5C                   	BSR	GOAUXO		;by sending a CR to finish PIP command.
   9318 FFFCC4B6                             LOD1:
   9319 FFFCC4B6 6100 FB5C                   	BSR	GOAUXI	;	look for start of line
   9320 FFFCC4BA 67FA                        	BEQ	LOD1
   9321 FFFCC4BC B03C 0040                   	CMP.B	#'@',D0  ;       end of program?
   9322 FFFCC4C0 6722                        	BEQ	LODEND
   9323 FFFCC4C2 B03C 003A                   	CMP.B	#':',D0   ;      if not, is it start of line?
   9324 FFFCC4C6 66EE                        	BNE	LOD1		;if not, wait for it
   9325 FFFCC4C8 6100 0022                   	BSR	GBYTE		;get first byte of line no.
   9326 FFFCC4CC 10C1                        	MOVE.B	D1,(A0)+	;store it
   9327 FFFCC4CE 6100 001C                   	BSR	GBYTE		;get 2nd bye of line no.
   9328 FFFCC4D2 10C1                        	MOVE.B	D1,(A0)+;	store that, too
   9329 FFFCC4D4                             LOD2:
   9330 FFFCC4D4 6100 FB3E                   	BSR	GOAUXI	;	get another text char.
   9331 FFFCC4D8 67FA                        	BEQ	LOD2
   9332 FFFCC4DA 10C0                        	MOVE.B	D0,(A0)+	;store it
   9333 FFFCC4DC B03C 000D                   	CMP.B	#CR,D0		;is it the end of the line?
   9334 FFFCC4E0 66F2                        	BNE	LOD2		;if not, go back for more
   9335 FFFCC4E2 60D2                        	BRA	LOD1		;if so, start a new line
   9336 FFFCC4E4                             LODEND:
   9337 FFFCC4E4 21C8 0624                   	MOVE.L	A0,TXTUNF	;set end-of program pointer
   9338 FFFCC4E8 6000 FB76                   	BRA	WSTART		;back to direct mode
                                             
   9340 FFFCC4EC                             GBYTE:
   9341 FFFCC4EC 7401                        	MOVEQ	#1,D2;		get two hex characters from auxiliary
   9342 FFFCC4EE 4281                        	CLR	D1		;and store them as a byte in D1
   9343 FFFCC4F0                             GBYTE1:
   9344 FFFCC4F0 6100 FB22                   	BSR	GOAUXI	;	get a char.
   9345 FFFCC4F4 67FA                        	BEQ	GBYTE1
   9346 FFFCC4F6 B03C 0041                   	CMP.B	#'A',D0
   9347 FFFCC4FA 6502                        	BCS	GBYTE2
   9348 FFFCC4FC 5F00                        	SUBQ.B	#7,D0	;	if greater than 9, adjust
   9349 FFFCC4FE                             GBYTE2:
   9350 FFFCC4FE 0200 000F                   	AND.B	#0xF,D0		;strip ASCII
   9351 FFFCC502 E909                        	LSL.B	#4,D1		;put nybble into the result
   9352 FFFCC504 8200                        	OR.B	D0,D1
   9353 FFFCC506 51CA FFE8                   	DBRA	D2,GBYTE1	;get another char.
   9354 FFFCC50A 4E75                        	RTS
                                             
   9356 FFFCC50C                             SAVE:
   9357 FFFCC50C 2079 FFFC C01C              	MOVE.L	TXTBGN,A0;	set pointer to start of prog. area
   9358 FFFCC512 2278 0624                   	MOVE.L	TXTUNF,A1	;set pointer to end of prog. area
   9359 FFFCC516                             SAVE1:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 96
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9360 FFFCC516 103C 000D                   	MOVE.B	#CR,D0	;	send out a CR & LF (CP/M likes this)
   9361 FFFCC51A 6100 FAF4                   	BSR	GOAUXO
   9362 FFFCC51E 103C 000A                   	MOVE.B	#LF,D0
   9363 FFFCC522 6100 FAEC                   	BSR	GOAUXO
   9364 FFFCC526 B3C8                        	CMP.L	A0,A1		;are we finished?
   9365 FFFCC528 6322                        	BLS	SAVEND
   9366 FFFCC52A 103C 003A                   	MOVE.B	#':',D0      ;   if not, start a line
   9367 FFFCC52E 6100 FAE0                   	BSR	GOAUXO
   9368 FFFCC532 1218                        	MOVE.B	(A0)+,D1	;send first half of line no.
   9369 FFFCC534 6100 003A                   	BSR	PBYTE
   9370 FFFCC538 1218                        	MOVE.B	(A0)+,D1	;and send 2nd half
   9371 FFFCC53A 6100 0034                   	BSR	PBYTE
   9372 FFFCC53E                             SAVE2:
   9373 FFFCC53E 1018                        	MOVE.B	(A0)+,D0;	get a text char.
   9374 FFFCC540 B03C 000D                   	CMP.B	#CR,D0		;is it the end of the line?
   9375 FFFCC544 67D0                        	BEQ	SAVE1		;if so, send CR & LF and start new line
   9376 FFFCC546 6100 FAC8                   	BSR	GOAUXO		;send it out
   9377 FFFCC54A 60F2                        	BRA	SAVE2		;go back for more text
   9378 FFFCC54C                             SAVEND:
   9379 FFFCC54C 103C 0040                   	MOVE.B	#'@',D0 ;        send end-of-program indicator
   9380 FFFCC550 6100 FABE                   	BSR	GOAUXO
   9381 FFFCC554 103C 000D                   	MOVE.B	#CR,D0	;	followed by a CR & LF
   9382 FFFCC558 6100 FAB6                   	BSR	GOAUXO
   9383 FFFCC55C 103C 000A                   	MOVE.B	#LF,D0
   9384 FFFCC560 6100 FAAE                   	BSR	GOAUXO
   9385 FFFCC564 103C 001A                   	MOVE.B	#0x1A,D0 	;and a control-Z to end the CP/M file
   9386 FFFCC568 6100 FAA6                   	BSR	GOAUXO
   9387 FFFCC56C 6000 FAF2                   	BRA	WSTART		;then go do a warm start
                                             
   9389 FFFCC570                             PBYTE:
   9390 FFFCC570 7401                        	MOVEQ	#1,D2	;	send two hex characters from D1's low byte
   9391 FFFCC572                             PBYTE1:
   9392 FFFCC572 E919                        	ROL.B	#4,D1	;	get the next nybble
   9393 FFFCC574 1001                        	MOVE.B	D1,D0
   9394 FFFCC576 0200 000F                   	AND.B	#0xF,D0	;	strip off garbage
   9395 FFFCC57A 0600 0030                   	ADD.B	#'0',D0   ;      make it into ASCII
   9396 FFFCC57E B03C 0039                   	CMP.B	#'9',D0
   9397 FFFCC582 6302                        	BLS	PBYTE2
   9398 FFFCC584 5E00                        	ADDQ.B	#7,D0		;adjust if greater than 9
   9399 FFFCC586                             PBYTE2:
   9400 FFFCC586 6100 FA88                   	BSR	GOAUXO		;send it out
   9401 FFFCC58A 51CA FFE6                   	DBRA	D2,PBYTE1	;then send the next nybble
   9402 FFFCC58E 4E75                        	RTS
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** POKE *** & CALL ***
                                             ;*
                                             ;* 'POKE expr1,expr2' stores the byte from 'expr2' into the memory
                                             ;* address specified by 'expr1'.
                                             ;*
                                             ;* 'CALL expr' jumps to the machine language subroutine whose
                                             ;* starting address is specified by 'expr'.  The subroutine can use
                                             ;* all registers but must leave the stack the way it found it.
                                             ;* The subroutine returns to the interpreter by executing an RTS.
                                             ;*
   9417 FFFCC590                             POKE:
   9418 FFFCC590 6100 0030                   	BSR	EXPR		;get the memory address
   9419 FFFCC594 6100 050E                   	BSR.L	TSTC		;it must be followed by a comma
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 97
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9420 FFFCC598 2C 0F                       	DC.B	',',PKER-$
   9421 FFFCC59A 2F00                        	MOVE.L	D0,-(SP)	;save the address
   9422 FFFCC59C 6100 0024                   	BSR	EXPR		;get the byte to be POKE'd
   9423 FFFCC5A0 225F                        	MOVE.L	(SP)+,A1	;get the address back
   9424 FFFCC5A2 1280                        	MOVE.B	D0,(A1) 	;store the byte in memory
   9425 FFFCC5A4 6000 FD4E                   	BRA	FINISH
   9426 FFFCC5A8                             PKER:
   9427 FFFCC5A8 6000 0294                   	BRA.L	QWHAT	;	if no comma, say "What?"
                                             
   9429 FFFCC5AC                             CALL:
   9430 FFFCC5AC 6100 0014                   	BSR	EXPR		;get the subroutine's address
   9431 FFFCC5B0 4A80                        	TST.L	D0		;make sure we got a valid address
   9432 FFFCC5B2 6700 02D6                   	BEQ.L	QHOW	;	if not, say "How?"
   9433 FFFCC5B6 2F08                        	MOVE.L	A0,-(SP);	save the text pointer
   9434 FFFCC5B8 2240                        	MOVE.L	D0,A1
   9435 FFFCC5BA 4E91                        	JSR	(A1)		;jump to the subroutine
   9436 FFFCC5BC 205F                        	MOVE.L	(SP)+,A0	;restore the text pointer
   9437 FFFCC5BE 6000 FD34                   	BRA	FINISH
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** EXPR ***
                                             ;*
                                             ;* 'EXPR' evaluates arithmetical or logical expressions.
                                             ;* <EXPR>::=<EXPR2>
                                             ;*	   <EXPR2><rel.op.><EXPR2>
                                             ;* where <rel.op.> is one of the operators in TAB8 and the result
                                             ;* of these operations is 1 if true and 0 if false.
                                             ;* <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                                             ;* where () are optional and (... are optional repeats.
                                             ;* <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                                             ;* <EXPR4>::=<variable>
                                             ;*	    <function>
                                             ;*	    (<EXPR>)
                                             ;* <EXPR> is recursive so that the variable '@' can have an <EXPR>
                                             ;* as an index, functions can have an <EXPR> as arguments, and
                                             ;* <EXPR4> can be an <EXPR> in parenthesis.
                                             ;*
   9458 FFFCC5C2                             EXPR:
   9459 FFFCC5C2 6100 0066                   	BSR	EXPR2
   9460 FFFCC5C6 2F00                        	MOVE.L	D0,-(SP);	save <EXPR2> value
   9461 FFFCC5C8 43F9 FFFC C163              	LEA	TAB8,A1 	;look up a relational operator
   9462 FFFCC5CE 45F9 FFFC C1A8              	LEA	TAB8_1,A2
   9463 FFFCC5D4 6000 FBEC                   	BRA	EXEC		;go do it
                                             
   9465 FFFCC5D8                             XP11:
   9466 FFFCC5D8 6100 003E                   	BSR	XP18	;	is it ">="?
   9467 FFFCC5DC 6D2E                        	BLT	XPRT0		;no, return D0=0
   9468 FFFCC5DE 6030                        	BRA	XPRT1		;else return D0=1
                                             
   9470 FFFCC5E0                             XP12:
   9471 FFFCC5E0 6100 0036                   	BSR	XP18	;	is it "<>"?
   9472 FFFCC5E4 6726                        	BEQ	XPRT0		;no, return D0=0
   9473 FFFCC5E6 6028                        	BRA	XPRT1		;else return D0=1
                                             
   9475 FFFCC5E8                             XP13:
   9476 FFFCC5E8 6100 002E                   	BSR	XP18	;	is it ">"?
   9477 FFFCC5EC 6F1E                        	BLE	XPRT0		;no, return D0=0
   9478 FFFCC5EE 6020                        	BRA	XPRT1		;else return D0=1
                                             
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 98
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9480 FFFCC5F0                             XP14:
   9481 FFFCC5F0 6100 0026                   	BSR	XP18	;	is it "<="?
   9482 FFFCC5F4 6E16                        	BGT	XPRT0		;no, return D0=0
   9483 FFFCC5F6 6018                        	BRA	XPRT1		;else return D0=1
                                             
   9485 FFFCC5F8                             XP15:
   9486 FFFCC5F8 6100 001E                   	BSR	XP18	;	is it "="?
   9487 FFFCC5FC 660E                        	BNE	XPRT0		;if not, return D0=0
   9488 FFFCC5FE 6010                        	BRA	XPRT1		;else return D0=1
   9489 FFFCC600                             XP15RT:
   9490 FFFCC600 4E75                        	RTS
                                             
   9492 FFFCC602                             XP16:
   9493 FFFCC602 6100 0014                   	BSR	XP18	;	is it "<"?
   9494 FFFCC606 6C04                        	BGE	XPRT0		;if not, return D0=0
   9495 FFFCC608 6006                        	BRA	XPRT1		;else return D0=1
   9496 FFFCC60A                             XP16RT:
   9497 FFFCC60A 4E75                        	RTS
                                             
   9499 FFFCC60C                             XPRT0:
   9500 FFFCC60C 4280                        	CLR.L	D0	;	return D0=0 (false)
   9501 FFFCC60E 4E75                        	RTS
                                             
   9503 FFFCC610                             XPRT1:
   9504 FFFCC610 7001                        	MOVEQ	#1,D0;		return D0=1 (true)
   9505 FFFCC612 4E75                        	RTS
                                             
   9507 FFFCC614                             XP17:
   9508 FFFCC614 201F                        	MOVE.L	(SP)+,D0	;it's not a rel. operator
   9509 FFFCC616 4E75                        	RTS			;return D0=<EXPR2>
                                             
   9511 FFFCC618                             XP18:
   9512 FFFCC618 201F                        	MOVE.L	(SP)+,D0	;reverse the top two stack items
   9513 FFFCC61A 221F                        	MOVE.L	(SP)+,D1
   9514 FFFCC61C 2F00                        	MOVE.L	D0,-(SP)
   9515 FFFCC61E 2F01                        	MOVE.L	D1,-(SP)
   9516 FFFCC620 6100 0008                   	BSR	EXPR2		;do second <EXPR2>
   9517 FFFCC624 221F                        	MOVE.L	(SP)+,D1
   9518 FFFCC626 B280                        	CMP.L	D0,D1	;	compare with the first result
   9519 FFFCC628 4E75                        	RTS			;return the result
                                             
   9521 FFFCC62A                             EXPR2:
   9522 FFFCC62A 6100 0478                   	BSR.L	TSTC		;negative sign?
   9523 FFFCC62E 2D 05                       	DC.B	'-',XP21-$
   9524 FFFCC630 4280                        	CLR.L	D0	;	yes, fake '0-'
   9525 FFFCC632 6026                        	BRA	XP26
   9526 FFFCC634                             XP21:
   9527 FFFCC634 6100 046E                   	BSR.L	TSTC	;	positive sign? ignore it
   9528 FFFCC638 2B 01                       	DC.B	'+',XP22-$
   9529 FFFCC63A                             XP22:
   9530 FFFCC63A 6100 002C                   	BSR	EXPR3		;first <EXPR3>
   9531 FFFCC63E                             XP23:
   9532 FFFCC63E 6100 0464                   	BSR.L	TSTC	;	add?
   9533 FFFCC642 2B 11                       	DC.B	'+',XP25-$
   9534 FFFCC644 2F00                        	MOVE.L	D0,-(SP)	;yes, save the value
   9535 FFFCC646 6100 0020                   	BSR	EXPR3		;get the second <EXPR3>
   9536 FFFCC64A                             XP24:
   9537 FFFCC64A 221F                        	MOVE.L	(SP)+,D1
   9538 FFFCC64C D081                        	ADD.L	D1,D0	;	add it to the first <EXPR3>
   9539 FFFCC64E 6900 023A                   	BVS.L	QHOW	;	branch if there's an overflow
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 99
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9540 FFFCC652 60EA                        	BRA	XP23	;	else go back for more operations
   9541 FFFCC654                             XP25:
   9542 FFFCC654 6100 044E                   	BSR.L	TSTC		;subtract?
   9543 FFFCC658 2D 75                       	DC.B	'-',XP42-$
   9544 FFFCC65A                             XP26:
   9545 FFFCC65A 2F00                        	MOVE.L	D0,-(SP)	;yes, save the result of 1st <EXPR3>
   9546 FFFCC65C 6100 000A                   	BSR	EXPR3		;get second <EXPR3>
   9547 FFFCC660 4480                        	NEG.L	D0		;change its sign
   9548 FFFCC662 4EF9 FFFC C64A              	JMP	XP24		;and do an addition
                                             
   9550 FFFCC668                             EXPR3:
   9551 FFFCC668 6100 002C                   	BSR	EXPR4		;get first <EXPR4>
   9552 FFFCC66C                             XP31:
   9553 FFFCC66C 6100 0436                   	BSR.L	TSTC	;	multiply?
   9554 FFFCC670 2A 0F                       	DC.B	'*',XP34-$
   9555 FFFCC672 2F00                        	MOVE.L	D0,-(SP);	yes, save that first result
   9556 FFFCC674 6100 0020                   	BSR	EXPR4		;get second <EXPR4>
   9557 FFFCC678 221F                        	MOVE.L	(SP)+,D1
   9558 FFFCC67A 6100 00A8                   	BSR.L	MULT32	;	multiply the two
   9559 FFFCC67E 60EC                        	BRA	XP31		;then look for more terms
   9560 FFFCC680                             XP34:
   9561 FFFCC680 6100 0422                   	BSR.L	TSTC;		divide?
   9562 FFFCC684 2F 49                       	DC.B	'/',XP42-$
   9563 FFFCC686 2F00                        	MOVE.L	D0,-(SP);	save result of 1st <EXPR4>
   9564 FFFCC688 6100 000C                   	BSR	EXPR4		;get second <EXPR4>
   9565 FFFCC68C 221F                        	MOVE.L	(SP)+,D1
   9566 FFFCC68E C141                        	EXG	D0,D1
   9567 FFFCC690 6100 00D4                   	BSR.L	DIV32	;	do the division
   9568 FFFCC694 60D6                        	BRA	XP31		;go back for any more terms
                                             
   9570 FFFCC696                             EXPR4:
   9571 FFFCC696 43F9 FFFC C14C              	LEA	TAB4,A1 ;	find possible function
   9572 FFFCC69C 45F9 FFFC C196              	LEA	TAB4_1,A2
   9573 FFFCC6A2 6000 FB1E                   	BRA	EXEC
   9574 FFFCC6A6                             XP40:
   9575 FFFCC6A6 6100 002C                   	BSR	TSTV	;	nope, not a function
   9576 FFFCC6AA 6508                        	BCS	XP41		;nor a variable
   9577 FFFCC6AC 2240                        	MOVE.L	D0,A1
   9578 FFFCC6AE 4280                        	CLR.L	D0
   9579 FFFCC6B0 2011                        	MOVE.L	(A1),D0 ;	if a variable, return its value in D0
   9580 FFFCC6B2                             EXP4RT:
   9581 FFFCC6B2 4E75                        	RTS
   9582 FFFCC6B4                             XP41:
   9583 FFFCC6B4 6100 0408                   	BSR.L	TSTNUM	;	or is it a number?
   9584 FFFCC6B8 2001                        	MOVE.L	D1,D0
   9585 FFFCC6BA 4A82                        	TST	D2		;(if not, # of digits will be zero)
   9586 FFFCC6BC 66F4                        	BNE	EXP4RT	;	if so, return it in D0
   9587 FFFCC6BE                             PARN:
   9588 FFFCC6BE 6100 03E4                   	BSR.L	TSTC	;	else look for ( EXPR )
   9589 FFFCC6C2 28 0D                       	DC.B	'(',XP43-$
   9590 FFFCC6C4 6100 FEFC                   	BSR	EXPR
   9591 FFFCC6C8 6100 03DA                   	BSR.L	TSTC
   9592 FFFCC6CC 29 03                       	DC.B	')',XP43-$
   9593 FFFCC6CE                             XP42:
   9594 FFFCC6CE 4E75                        	RTS
   9595 FFFCC6D0                             XP43:
   9596 FFFCC6D0 6000 016C                   	BRA.L	QWHAT	;	else say "What?"
                                             
                                             ;*
                                             ;* ===== Test for a valid variable name.  Returns Carry=1 if not
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 100
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;*	found, else returns Carry=0 and the address of the
                                             ;*	variable in D0.
                                             
   9603 FFFCC6D4                             TSTV:
   9604 FFFCC6D4 6100 0420                   	BSR.L	IGNBLK
   9605 FFFCC6D8 4280                        	CLR.L	D0
   9606 FFFCC6DA 1010                        	MOVE.B	(A0),D0 ;	look at the program text
   9607 FFFCC6DC 0400 0040                   	SUB.B	#'@',D0
   9608 FFFCC6E0 6540                        	BCS	TSTVRT	;	C=1: not a variable
   9609 FFFCC6E2 6628                        	BNE	TV1		;branch if not "@" array
   9610 FFFCC6E4 5288                        	ADDQ	#1,A0	;	If it is, it should be
   9611 FFFCC6E6 6100 FFD6                   	BSR	PARN		;followed by (EXPR) as its index.
   9612 FFFCC6EA D080                        	ADD.L	D0,D0
   9613 FFFCC6EC 6500 019C                   	BCS.L	QHOW	;	say "How?" if index is too big
   9614 FFFCC6F0 D080                        	ADD.L	D0,D0
   9615 FFFCC6F2 6500 0196                   	BCS.L	QHOW
   9616 FFFCC6F6 2F00                        	MOVE.L	D0,-(SP)	;save the index
   9617 FFFCC6F8 6100 00FA                   	BSR.L	SIZE_		;get amount of free memory
   9618 FFFCC6FC 221F                        	MOVE.L	(SP)+,D1	;get back the index
   9619 FFFCC6FE B081                        	CMP.L	D1,D0		;see if there's enough memory
   9620 FFFCC700 6300 017E                   	BLS.L	QSORRY		;if not, say "Sorry"
   9621 FFFCC704 2038 0628                   	MOVE.L	VARBGN,D0	;put address of array element...
   9622 FFFCC708 9081                        	SUB.L	D1,D0		;into D0
   9623 FFFCC70A 4E75                        	RTS
   9624 FFFCC70C                             TV1:
   9625 FFFCC70C B03C 001B                   	CMP.B	#27,D0		;if not @, is it A through Z?
   9626 FFFCC710 0A3C 0001                   	EOR	#1,CCR
   9627 FFFCC714 650C                        	BCS	TSTVRT		;if not, set Carry and return
   9628 FFFCC716 5288                        	ADDQ	#1,A0	;	else bump the text pointer
   9629 FFFCC718 D080                        	ADD	D0,D0		;compute the variable's address
   9630 FFFCC71A D080                        	ADD	D0,D0
   9631 FFFCC71C 2238 0628                   	MOVE.L	VARBGN,D1
   9632 FFFCC720 D081                        	ADD	D1,D0		;and return it in D0 with Carry=0
   9633 FFFCC722                             TSTVRT:
   9634 FFFCC722 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Multiplies the 32 bit values in D0 and D1, returning
                                             ;*	the 32 bit result in D0.
                                             ;*
   9640 FFFCC724                             MULT32:
   9641 FFFCC724 2801                        	MOVE.L	D1,D4
   9642 FFFCC726 B184                        	EOR.L	D0,D4	;	see if the signs are the same
   9643 FFFCC728 4A80                        	TST.L	D0		;take absolute value of D0
   9644 FFFCC72A 6A02                        	BPL	MLT1
   9645 FFFCC72C 4480                        	NEG.L	D0
   9646 FFFCC72E                             MLT1:
   9647 FFFCC72E 4A81                        	TST.L	D1	;	take absolute value of D1
   9648 FFFCC730 6A02                        	BPL	MLT2
   9649 FFFCC732 4481                        	NEG.L	D1
   9650 FFFCC734                             MLT2:
   9651 FFFCC734 B2BC 0000 FFFF              	CMP.L	#0xFFFF,D1	;is second argument <= 16 bits?
   9652 FFFCC73A 630C                        	BLS	MLT3	;	OK, let it through
   9653 FFFCC73C C141                        	EXG	D0,D1	;	else swap the two arguments
   9654 FFFCC73E B2BC 0000 FFFF              	CMP.L	#0xFFFF,D1	;and check 2nd argument again
   9655 FFFCC744 6200 0144                   	BHI.L	QHOW		;one of them MUST be 16 bits
   9656 FFFCC748                             MLT3:
   9657 FFFCC748 2400                        	MOVE	D0,D2	;	prepare for 32 bit X 16 bit multiply
   9658 FFFCC74A C4C1                        	MULU	D1,D2		;multiply low word
   9659 FFFCC74C 4840                        	SWAP	D0
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 101
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9660 FFFCC74E C0C1                        	MULU	D1,D0		;multiply high word
   9661 FFFCC750 4840                        	SWAP	D0
                                             ;*** Rick Murray's bug correction follows:
   9663 FFFCC752 4A80                        	TST	D0		;if lower word not 0, then overflow
   9664 FFFCC754 6600 0134                   	BNE.L	QHOW	;	if overflow, say "How?"
   9665 FFFCC758 D082                        	ADD.L	D2,D0	;	D0 now holds the product
   9666 FFFCC75A 6B00 012E                   	BMI.L	QHOW	;	if sign bit set, it's an overflow
   9667 FFFCC75E 4A84                        	TST.L	D4		;were the signs the same?
   9668 FFFCC760 6A02                        	BPL	MLTRET
   9669 FFFCC762 4480                        	NEG.L	D0		;if not, make the result negative
   9670 FFFCC764                             MLTRET:
   9671 FFFCC764 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Divide the 32 bit value in D0 by the 32 bit value in D1.
                                             ;*	Returns the 32 bit quotient in D0, remainder in D1.
                                             ;*
   9677 FFFCC766                             DIV32:
   9678 FFFCC766 4A81                        	TST.L	D1		;check for divide-by-zero
   9679 FFFCC768 6700 0120                   	BEQ.L	QHOW		;if so, say "How?"
   9680 FFFCC76C 2401                        	MOVE.L	D1,D2
   9681 FFFCC76E 2801                        	MOVE.L	D1,D4
   9682 FFFCC770 B184                        	EOR.L	D0,D4		;see if the signs are the same
   9683 FFFCC772 4A80                        	TST.L	D0		;take absolute value of D0
   9684 FFFCC774 6A02                        	BPL	DIV1
   9685 FFFCC776 4480                        	NEG.L	D0
   9686 FFFCC778                             DIV1:
   9687 FFFCC778 4A81                        	TST.L	D1	;	take absolute value of D1
   9688 FFFCC77A 6A02                        	BPL	DIV2
   9689 FFFCC77C 4481                        	NEG.L	D1
   9690 FFFCC77E                             DIV2:
   9691 FFFCC77E 761F                        	MOVEQ	#31,D3	;	iteration count for 32 bits
   9692 FFFCC780 2200                        	MOVE.L	D0,D1
   9693 FFFCC782 4280                        	CLR.L	D0
   9694 FFFCC784                             DIV3:
   9695 FFFCC784 D281                        	ADD.L	D1,D1	;	(This algorithm was translated from
   9696 FFFCC786 D180                        	ADDX.L	D0,D0		;the divide routine in Ron Cain's
   9697 FFFCC788 6708                        	BEQ	DIV4		;Small-C run time library.)
   9698 FFFCC78A B082                        	CMP.L	D2,D0
   9699 FFFCC78C 6B04                        	BMI	DIV4
   9700 FFFCC78E 5281                        	ADDQ.L	#1,D1
   9701 FFFCC790 9082                        	SUB.L	D2,D0
   9702 FFFCC792                             DIV4:
   9703 FFFCC792 51CB FFF0                   	DBRA	D3,DIV3
   9704 FFFCC796 C141                        	EXG	D0,D1	;	put rem. & quot. in proper registers
   9705 FFFCC798 4A84                        	TST.L	D4	;	were the signs the same?
   9706 FFFCC79A 6A04                        	BPL	DIVRT
   9707 FFFCC79C 4480                        	NEG.L	D0	;	if not, results are negative
   9708 FFFCC79E 4481                        	NEG.L	D1
   9709 FFFCC7A0                             DIVRT:
   9710 FFFCC7A0 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== The PEEK function returns the byte stored at the address
                                             ;*	contained in the following expression.
                                             ;*
   9716 FFFCC7A2                             PEEK:
   9717 FFFCC7A2 6100 FF1A                   	BSR	PARN	;	get the memory address
   9718 FFFCC7A6 2240                        	MOVE.L	D0,A1
   9719 FFFCC7A8 4280                        	CLR.L	D0		;upper 3 bytes will be zero
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 102
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9720 FFFCC7AA 1011                        	MOVE.B	(A1),D0 ;	get the addressed byte
   9721 FFFCC7AC 4E75                        	RTS			;and return it
                                             
                                             ;*
                                             ;* ===== The RND function returns a random number from 1 to
                                             ;*	the value of the following expression in D0.
                                             ;*
   9727 FFFCC7AE                             RND:
   9728 FFFCC7AE 6100 FF0E                   	BSR	PARN	;	get the upper limit
   9729 FFFCC7B2 4A80                        	TST.L	D0	;	it must be positive and non-zero
   9730 FFFCC7B4 6700 00D4                   	BEQ.L	QHOW
   9731 FFFCC7B8 6B00 00D0                   	BMI.L	QHOW
   9732 FFFCC7BC 2200                        	MOVE.L	D0,D1
   9733 FFFCC7BE 2278 0600                   	MOVE.L	RANPNT,A1	;get memory as a random number
   9734 FFFCC7C2 B3FC FFFC CC78              	CMP.L	#LSTROM,A1
   9735 FFFCC7C8 6506                        	BCS	RA1
   9736 FFFCC7CA 43F9 FFFC C000              	LEA	START,A1	;wrap around if end of program
   9737 FFFCC7D0                             RA1:
   9738 FFFCC7D0 2019                        	MOVE.L	(A1)+,D0;	get the slightly random number
   9739 FFFCC7D2 0880 001F                   	BCLR	#31,D0	;	make sure it's positive
   9740 FFFCC7D6 21C9 0600                   	MOVE.L	A1,RANPNT	;(even I can do better than this!)
   9741 FFFCC7DA 6100 FF8A                   	BSR	DIV32		;RND(n)=MOD(number,n)+1
   9742 FFFCC7DE 2001                        	MOVE.L	D1,D0	;	MOD is the remainder of the div.
   9743 FFFCC7E0 5280                        	ADDQ.L	#1,D0
   9744 FFFCC7E2 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== The ABS function returns an absolute value in D0.
                                             ;*
   9749 FFFCC7E4                             ABS:
   9750 FFFCC7E4 6100 FED8                   	BSR	PARN		;get the following expr.'s value
   9751 FFFCC7E8 4A80                        	TST.L	D0
   9752 FFFCC7EA 6A06                        	BPL	ABSRT
   9753 FFFCC7EC 4480                        	NEG.L	D0		;if negative, complement it
   9754 FFFCC7EE 6B00 009A                   	BMI.L	QHOW	;	if still negative, it was too big
   9755 FFFCC7F2                             ABSRT:
   9756 FFFCC7F2 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== The SIZE function returns the size of free memory in D0.
                                             ;*
   9761 FFFCC7F4                             SIZE_:
   9762 FFFCC7F4 2038 0628                   	MOVE.L	VARBGN,D0	;get the number of free bytes...
   9763 FFFCC7F8 90B8 0624                   	SUB.L	TXTUNF,D0	;between 'TXTUNF' and 'VARBGN'
   9764 FFFCC7FC 4E75                        	RTS			;return the number in D0
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                                             ;*
                                             ;* 'SETVAL' expects a variable, followed by an equal sign and then
                                             ;* an expression.  It evaluates the expression and sets the variable
                                             ;* to that value.
                                             ;*
                                             ;* 'FIN' checks the end of a command.  If it ended with ":",
                                             ;* execution continues.	If it ended with a CR, it finds the
                                             ;* the next line and continues from there.
                                             ;*
                                             ;* 'ENDCHK' checks if a command is ended with a CR. This is
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 103
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;* required in certain commands, such as GOTO, RETURN, STOP, etc.
                                             ;*
                                             ;* 'ERROR' prints the string pointed to by A0. It then prints the
                                             ;* line pointed to by CURRNT with a "?" inserted at where the
                                             ;* old text pointer (should be on top of the stack) points to.
                                             ;* Execution of Tiny BASIC is stopped and a warm start is done.
                                             ;* If CURRNT is zero (indicating a direct command), the direct
                                             ;* command is not printed. If CURRNT is -1 (indicating
                                             ;* 'INPUT' command in progress), the input line is not printed
                                             ;* and execution is not terminated but continues at 'INPERR'.
                                             ;*
                                             ;* Related to 'ERROR' are the following:
                                             ;* 'QWHAT' saves text pointer on stack and gets "What?" message.
                                             ;* 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                                             ;* 'QSORRY' and 'ASORRY' do the same kind of thing.
                                             ;* 'QHOW' and 'AHOW' also do this for "How?".
                                             ;*
   9797 FFFCC7FE                             SETVAL:
   9798 FFFCC7FE 6100 FED4                   	BSR	TSTV	;	variable name?
   9799 FFFCC802 653A                        	BCS	QWHAT		;if not, say "What?"
   9800 FFFCC804 2F00                        	MOVE.L	D0,-(SP);	save the variable's address
   9801 FFFCC806 6100 029C                   	BSR.L	TSTC	;	get past the "=" sign
   9802 FFFCC80A 3D 0B                       	DC.B	'=',SV1-$
   9803 FFFCC80C 6100 FDB4                   	BSR	EXPR	;	evaluate the expression
   9804 FFFCC810 2C5F                        	MOVE.L	(SP)+,A6
   9805 FFFCC812 2C80                        	MOVE.L	D0,(A6) ;	and save its value in the variable
   9806 FFFCC814 4E75                        	RTS
   9807 FFFCC816                             SV1:
   9808 FFFCC816 6026                        	BRA	QWHAT	;	if no "=" sign
                                             
   9810 FFFCC818                             FIN:
   9811 FFFCC818 6100 028A                   	BSR.L	TSTC	;	*** FIN ***
   9812 FFFCC81C 3A 07                       	DC.B	':',FI1-$
   9813 FFFCC81E 588F                        	ADDQ.L	#4,SP	;	if ":", discard return address
   9814 FFFCC820 6000 FA1C                   	BRA	RUNSML	;	continue on the same line
   9815 FFFCC824                             FI1:
   9816 FFFCC824 6100 027E                   	BSR.L	TSTC	;	not ":", is it a CR?
   9817 FFFCC828 0D 07                       	DC.B	CR,FI2-$
   9818 FFFCC82A 588F                        	ADDQ.L	#4,SP	;	yes, purge return address
   9819 FFFCC82C 6000 F9F4                   	BRA	RUNNXL		;execute the next line
   9820 FFFCC830                             FI2:
   9821 FFFCC830 4E75                        	RTS			;else return to the caller
                                             
   9823 FFFCC832                             ENDCHK:
   9824 FFFCC832 6100 02C2                   	BSR.L	IGNBLK
   9825 FFFCC836 0C10 000D                   	CMP.B	#CR,(A0);	does it end with a CR?
   9826 FFFCC83A 6602                        	BNE	QWHAT	;	if not, say "WHAT?"
   9827 FFFCC83C 4E75                        	RTS
                                             
   9829 FFFCC83E                             QWHAT:
   9830 FFFCC83E 2F08                        	MOVE.L	A0,-(SP)
   9831 FFFCC840                             AWHAT:
   9832 FFFCC840 4DF9 FFFC CBFA              	LEA	WHTMSG,A6
   9833 FFFCC846                             ERROR:
   9834 FFFCC846 6100 031E                   	BSR.L	PRMESG	;	display the error message
   9835 FFFCC84A 205F                        	MOVE.L	(SP)+,A0	;restore the text pointer
   9836 FFFCC84C 2038 0604                   	MOVE.L	CURRNT,D0	;get the current line number
   9837 FFFCC850 6700 F80E                   	BEQ	WSTART		;if zero, do a warm start
   9838 FFFCC854 B0BC FFFF FFFF              	CMP.L	#-1,D0		;is the line no. pointer = -1?
   9839 FFFCC85A 6700 FBC2                   	BEQ	INPERR		;if so, redo input
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 104
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9840 FFFCC85E 1F10                        	MOVE.B	(A0),-(SP)	;save the char. pointed to
   9841 FFFCC860 4210                        	CLR.B	(A0)		;put a zero where the error is
   9842 FFFCC862 2278 0604                   	MOVE.L	CURRNT,A1	;point to start of current line
   9843 FFFCC866 6100 0220                   	BSR.L	PRTLN		;display the line in error up to the 0
   9844 FFFCC86A 109F                        	MOVE.B	(SP)+,(A0)	;restore the character
   9845 FFFCC86C 103C 003F                   	MOVE.B	#'?',D0     ;    display a "?"
   9846 FFFCC870 6100 F796                   	BSR	GOOUT
   9847 FFFCC874 4280                        	CLR	D0
   9848 FFFCC876 5389                        	SUBQ.L	#1,A1		;point back to the error char.
   9849 FFFCC878 6100 013E                   	BSR.L	PRTSTG		;display the rest of the line
   9850 FFFCC87C 6000 F7E2                   	BRA	WSTART		;and do a warm start
   9851 FFFCC880                             QSORRY:
   9852 FFFCC880 2F08                        	MOVE.L	A0,-(SP)
   9853 FFFCC882                             ASORRY:
   9854 FFFCC882 4DF9 FFFC CC02              	LEA	SRYMSG,A6
   9855 FFFCC888 60BC                        	BRA	ERROR
   9856 FFFCC88A                             QHOW:
   9857 FFFCC88A 2F08                        	MOVE.L	A0,-(SP)	;Error: "How?"
   9858 FFFCC88C                             AHOW:
   9859 FFFCC88C 4DF9 FFFC CBF3              	LEA	HOWMSG,A6
   9860 FFFCC892 60B2                        	BRA	ERROR
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** GETLN *** FNDLN (& friends) ***
                                             ;*
                                             ;* 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                                             ;* the character in D0 (given by the caller), then it fills the
                                             ;* buffer and echos. It ignores LF's but still echos
                                             ;* them back. Control-H is used to delete the last character
                                             ;* entered (if there is one), and control-X is used to delete the
                                             ;* whole line and start over again. CR signals the end of a line,
                                             ;* and causes 'GETLN' to return.
                                             ;*
                                             ;* 'FNDLN' finds a line with a given line no. (in D1) in the
                                             ;* text save area.  A1 is used as the text pointer. If the line
                                             ;* is found, A1 will point to the beginning of that line
                                             ;* (i.e. the high byte of the line no.), and flags are NC & Z.
                                             ;* If that line is not there and a line with a higher line no.
                                             ;* is found, A1 points there and flags are NC & NZ. If we reached
                                             ;* the end of the text save area and cannot find the line, flags
                                             ;* are C & NZ.
                                             ;* 'FNDLN' will initialize A1 to the beginning of the text save
                                             ;* area to start the search. Some other entries of this routine
                                             ;* will not initialize A1 and do the search.
                                             ;* 'FNDLNP' will start with A1 and search for the line no.
                                             ;* 'FNDNXT' will bump A1 by 2, find a CR and then start search.
                                             ;* 'FNDSKP' uses A1 to find a CR, and then starts the search.
                                             ;*
                                             PUBLIC GETLN:
   9890 FFFCC894 6100 F772                   	BSR	GOOUT		;display the prompt
   9891 FFFCC898 103C 0020                   	MOVE.B	#' ',D0      ;   and a space
   9892 FFFCC89C 6100 F76A                   	BSR	GOOUT
   9893 FFFCC8A0 41F8 0630                   	LEA	BUFFER,A0;	A0 is the buffer pointer
   9894 FFFCC8A4                             GL1:
   9895 FFFCC8A4 6100 02A8                   	BSR.L	CHKIO;		check keyboard
   9896 FFFCC8A8 67FA                        	BEQ	GL1	;	wait for a char. to come in
   9897 FFFCC8AA B03C 0008                   	CMP.B	#CTRLH,D0	;delete last character?
   9898 FFFCC8AE 6726                        	BEQ	GL3	;	if so
   9899 FFFCC8B0 B03C 0018                   	CMP.B	#CTRLX,D0;	delete the whole line?
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 105
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9900 FFFCC8B4 6744                        	BEQ	GL4	;	if so
   9901 FFFCC8B6 B03C 000D                   	CMP.B	#CR,D0	;	accept a CR
   9902 FFFCC8BA 6706                        	BEQ	GL2
   9903 FFFCC8BC B03C 0020                   	CMP.B	#' ',D0  ;       if other control char., discard it
   9904 FFFCC8C0 65E2                        	BCS	GL1
   9905 FFFCC8C2                             GL2:
   9906 FFFCC8C2 10C0                        	MOVE.B	D0,(A0)+;	save the char.
   9907 FFFCC8C4 6100 F742                   	BSR	GOOUT		;echo the char back out
   9908 FFFCC8C8 B03C 000D                   	CMP.B	#CR,D0	;	if it's a CR, end the line
   9909 FFFCC8CC 675C                        	BEQ	GL7
   9910 FFFCC8CE B1FC 0000 067F              	CMP.L	#(BUFFER+BUFLEN-1),A0	;any more room?
   9911 FFFCC8D4 65CE                        	BCS	GL1	;	yes: get some more, else delete last char.
   9912 FFFCC8D6                             GL3:
   9913 FFFCC8D6 103C 0008                   	MOVE.B	#CTRLH,D0	;delete a char. if possible
   9914 FFFCC8DA 6100 F72C                   	BSR	GOOUT
   9915 FFFCC8DE 103C 0020                   	MOVE.B	#' ',D0
   9916 FFFCC8E2 6100 F724                   	BSR	GOOUT
   9917 FFFCC8E6 B1FC 0000 0630              	CMP.L	#BUFFER,A0	;any char.'s left?
   9918 FFFCC8EC 63B6                        	BLS	GL1		;if not
   9919 FFFCC8EE 103C 0008                   	MOVE.B	#CTRLH,D0;	if so, finish the BS-space-BS sequence
   9920 FFFCC8F2 6100 F714                   	BSR	GOOUT
   9921 FFFCC8F6 5388                        	SUBQ.L	#1,A0	;	decrement the text pointer
   9922 FFFCC8F8 60AA                        	BRA	GL1		;back for more
   9923 FFFCC8FA                             GL4:
   9924 FFFCC8FA 2208                        	MOVE.L	A0,D1	;	delete the whole line
   9925 FFFCC8FC 0481 0000 0630              	SUB.L	#BUFFER,D1;	figure out how many backspaces we need
   9926 FFFCC902 671E                        	BEQ	GL6		;if none needed, branch
   9927 FFFCC904 5381                        	SUBQ	#1,D1	;	adjust for DBRA
   9928 FFFCC906                             GL5:
   9929 FFFCC906 103C 0008                   	MOVE.B	#CTRLH,D0	;and display BS-space-BS sequences
   9930 FFFCC90A 6100 F6FC                   	BSR	GOOUT
   9931 FFFCC90E 103C 0020                   	MOVE.B	#' ',D0
   9932 FFFCC912 6100 F6F4                   	BSR	GOOUT
   9933 FFFCC916 103C 0008                   	MOVE.B	#CTRLH,D0
   9934 FFFCC91A 6100 F6EC                   	BSR	GOOUT
   9935 FFFCC91E 51C9 FFE6                   	DBRA	D1,GL5
   9936 FFFCC922                             GL6:
   9937 FFFCC922 41F8 0630                   	LEA	BUFFER,A0	;reinitialize the text pointer
   9938 FFFCC926 6000 FF7C                   	BRA	GL1		;and go back for more
   9939 FFFCC92A                             GL7:
   9940 FFFCC92A 103C 000A                   	MOVE.B	#LF,D0	;	echo a LF for the CR
   9941 FFFCC92E 6100 F6D8                   	BSR	GOOUT
   9942 FFFCC932 4E75                        	RTS
                                             
   9944 FFFCC934                             FNDLN:
   9945 FFFCC934 B2BC 0000 FFFF              	CMP.L	#0xFFFF,D1	;line no. must be < 65535
   9946 FFFCC93A 6400 FF4E                   	BCC	QHOW
   9947 FFFCC93E 2279 FFFC C01C              	MOVE.L	TXTBGN,A1	;init. the text save pointer
                                             
   9949 FFFCC944                             FNDLNP:
   9950 FFFCC944 2478 0624                   	MOVE.L	TXTUNF,A2	;check if we passed the end
   9951 FFFCC948 538A                        	SUBQ.L	#1,A2
   9952 FFFCC94A B5C9                        	CMP	A1,A2
   9953 FFFCC94C 650C                        	BCS	FNDRET	;	if so, return with Z=0 & C=1
   9954 FFFCC94E 1419                        	MOVE.B	(A1)+,D2	;if not, get a line no.
   9955 FFFCC950 E18A                        	LSL	#8,D2
   9956 FFFCC952 1411                        	MOVE.B	(A1),D2
   9957 FFFCC954 5389                        	SUBQ.L	#1,A1
   9958 FFFCC956 B481                        	CMP	D1,D2		;is this the line we want?
   9959 FFFCC958 6502                        	BCS	FNDNXT		;no, not there yet
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 106
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
   9960 FFFCC95A                             FNDRET:
   9961 FFFCC95A 4E75                        	RTS			;return the cond. codes
                                             
   9963 FFFCC95C                             FNDNXT:
   9964 FFFCC95C 5489                        	ADDQ.L	#2,A1;		find the next line
                                             
   9966 FFFCC95E                             FNDSKP:
   9967 FFFCC95E 0C19 000D                   	CMP.B	#CR,(A1)+	;try to find a CR
   9968 FFFCC962 66FA                        	BNE	FNDSKP		;keep looking
   9969 FFFCC964 60DE                        	BRA	FNDLNP		;check if end of text
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** MVUP *** MVDOWN *** POPA *** PUSHA ***
                                             ;*
                                             ;* 'MVUP' moves a block up from where A1 points to where A2 points
                                             ;* until A1=A3
                                             ;*
                                             ;* 'MVDOWN' moves a block down from where A1 points to where A3
                                             ;* points until A1=A2
                                             ;*
                                             ;* 'POPA' restores the 'FOR' loop variable save area from the stack
                                             ;*
                                             ;* 'PUSHA' stacks for 'FOR' loop variable save area onto the stack
                                             ;*
   9986 FFFCC966                             MVUP:
   9987 FFFCC966 B7C9                        	CMP.L	A1,A3	;	see the above description
   9988 FFFCC968 6704                        	BEQ	MVRET
   9989 FFFCC96A 14D9                        	MOVE.B	(A1)+,(A2)+
   9990 FFFCC96C 60F8                        	BRA	MVUP
   9991 FFFCC96E                             MVRET:
   9992 FFFCC96E 4E75                        	RTS
                                             
   9994 FFFCC970                             MVDOWN:
   9995 FFFCC970 B5C9                        	CMP.L	A1,A2	;	see the above description
   9996 FFFCC972 67FA                        	BEQ	MVRET
   9997 FFFCC974 1721                        	MOVE.B	-(A1),-(A3)
   9998 FFFCC976 60F8                        	BRA	MVDOWN
                                             
  10000 FFFCC978                             POPA:
  10001 FFFCC978 2C5F                        	MOVE.L	(SP)+,A6	;A6 = return address
  10002 FFFCC97A 21DF 0610                   	MOVE.L	(SP)+,LOPVAR	;restore LOPVAR, but zero means no more
  10003 FFFCC97E 6710                        	BEQ	PP1
  10004 FFFCC980 21DF 0614                   	MOVE.L	(SP)+,LOPINC	;if not zero, restore the rest
  10005 FFFCC984 21DF 0618                   	MOVE.L	(SP)+,LOPLMT
  10006 FFFCC988 21DF 061C                   	MOVE.L	(SP)+,LOPLN
  10007 FFFCC98C 21DF 0620                   	MOVE.L	(SP)+,LOPPT
  10008 FFFCC990                             PP1:
  10009 FFFCC990 4ED6                        	JMP	(A6)	;	return
                                             
  10011 FFFCC992                             PUSHA:
  10012 FFFCC992 2238 062C                   	MOVE.L	STKLMT,D1	;Are we running out of stack room?
  10013 FFFCC996 928F                        	SUB.L	SP,D1
  10014 FFFCC998 6400 FEE6                   	BCC	QSORRY		;if so, say we're sorry
  10015 FFFCC99C 2C5F                        	MOVE.L	(SP)+,A6	;else get the return address
  10016 FFFCC99E 2238 0610                   	MOVE.L	LOPVAR,D1	;save loop variables
  10017 FFFCC9A2 6710                        	BEQ	PU1		;if LOPVAR is zero, that's all
  10018 FFFCC9A4 2F38 0620                   	MOVE.L	LOPPT,-(SP)	;else save all the others
  10019 FFFCC9A8 2F38 061C                   	MOVE.L	LOPLN,-(SP)
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 107
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
  10020 FFFCC9AC 2F38 0618                   	MOVE.L	LOPLMT,-(SP)
  10021 FFFCC9B0 2F38 0614                   	MOVE.L	LOPINC,-(SP)
  10022 FFFCC9B4                             PU1:
  10023 FFFCC9B4 2F01                        	MOVE.L	D1,-(SP)
  10024 FFFCC9B6 4ED6                        	JMP	(A6)		;return
                                             
                                             ;*
                                             ;*******************************************************************
                                             ;*
                                             ;* *** PRTSTG *** QTSTG *** PRTNUM *** PRTLN ***
                                             ;*
                                             ;* 'PRTSTG' prints a string pointed to by A1. It stops printing
                                             ;* and returns to the caller when either a CR is printed or when
                                             ;* the next byte is the same as what was passed in D0 by the
                                             ;* caller.
                                             ;*
                                             ;* 'QTSTG' looks for an underline (back-arrow on some systems),
                                             ;* single-quote, or double-quote.  If none of these are found, returns
                                             ;* to the caller.  If underline, outputs a CR without a LF.  If single
                                             ;* or double quote, prints the quoted string and demands a matching
                                             ;* end quote.  After the printing, the next 2 bytes of the caller are
                                             ;* skipped over (usually a short branch instruction).
                                             ;*
                                             ;* 'PRTNUM' prints the 32 bit number in D1, leading blanks are added if
                                             ;* needed to pad the number of spaces to the number in D4.
                                             ;* However, if the number of digits is larger than the no. in
                                             ;* D4, all digits are printed anyway. Negative sign is also
                                             ;* printed and counted in, positive sign is not.
                                             ;*
                                             ;* 'PRTLN' prints the saved text line pointed to by A1
                                             ;* with line no. and all.
                                             ;*
  10052 FFFCC9B8                             PRTSTG:
  10053 FFFCC9B8 1200                        	MOVE.B	D0,D1	;	save the stop character
  10054 FFFCC9BA                             PS1:
  10055 FFFCC9BA 1019                        	MOVE.B	(A1)+,D0	;get a text character
  10056 FFFCC9BC B200                        	CMP.B	D0,D1		;same as stop character?
  10057 FFFCC9BE 6712                        	BEQ	PRTRET		;if so, return
  10058 FFFCC9C0 6100 F646                   	BSR	GOOUT		;display the char.
  10059 FFFCC9C4 B03C 000D                   	CMP.B	#CR,D0		;;is it a C.R.?
  10060 FFFCC9C8 66F0                        	BNE	PS1		;no, go back for more
  10061 FFFCC9CA 103C 000A                   	MOVE.B	#LF,D0	;	yes, add a L.F.
  10062 FFFCC9CE 6100 F638                   	BSR	GOOUT
  10063 FFFCC9D2                             PRTRET:
  10064 FFFCC9D2 4E75                        	RTS			;then return
                                             
  10066 FFFCC9D4                             QTSTG:
  10067 FFFCC9D4 6100 00CE                   	BSR.L	TSTC;		*** QTSTG ***
  10068 FFFCC9D8 22 1B                       	DC.B	'"',QT3-$
  10069 FFFCC9DA 103C 0022                   	MOVE.B	#'"',D0  ;       it is a "
  10070 FFFCC9DE                             QT1:
  10071 FFFCC9DE 2248                        	MOVE.L	A0,A1
  10072 FFFCC9E0 6100 FFD6                   	BSR	PRTSTG		;print until another
  10073 FFFCC9E4 2049                        	MOVE.L	A1,A0
  10074 FFFCC9E6 225F                        	MOVE.L	(SP)+,A1;	pop return address
  10075 FFFCC9E8 B03C 000A                   	CMP.B	#LF,D0	;	was last one a CR?
  10076 FFFCC9EC 6700 F834                   	BEQ	RUNNXL		;if so, run next line
  10077 FFFCC9F0                             QT2:
  10078 FFFCC9F0 5489                        	ADDQ.L	#2,A1	;	skip 2 bytes on return
  10079 FFFCC9F2 4ED1                        	JMP	(A1)		;return
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 108
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
  10080 FFFCC9F4                             QT3:
  10081 FFFCC9F4 6100 00AE                   	BSR.L	TSTC	;	is it a single quote?
  10082 FFFCC9F8 27 07                       	DC.B	'\'',QT4-$
  10083 FFFCC9FA 103C 0027                   	MOVE.B	#'''',D0  ;      if so, do same as above
  10084 FFFCC9FE 60DE                        	BRA	QT1
  10085 FFFCCA00                             QT4:
  10086 FFFCCA00 6100 00A2                   	BSR.L	TSTC		;is it an underline?
  10087 FFFCCA04 5F 0D                       	DC.B	'_',QT5-$
  10088 FFFCCA06 103C 000D                   	MOVE.B	#CR,D0		;if so, output a CR without LF
  10089 FFFCCA0A 6100 F5FC                   	BSR.L	GOOUT
  10090 FFFCCA0E 225F                        	MOVE.L	(SP)+,A1	;pop return address
  10091 FFFCCA10 60DE                        	BRA	QT2
  10092 FFFCCA12                             QT5:
  10093 FFFCCA12 4E75                        	RTS			;none of the above
                                             
  10095 FFFCCA14                             PRTNUM:
  10096 FFFCCA14 2601                        	MOVE.L	D1,D3	;	save the number for later
  10097 FFFCCA16 2F04                        	MOVE	D4,-(SP)	;save the width value
  10098 FFFCCA18 1F3C 00FF                   	MOVE.B	#0xFF,-(SP)	;flag for end of digit string
  10099 FFFCCA1C 4A81                        	TST.L	D1		;is it negative?
  10100 FFFCCA1E 6A04                        	BPL	PN1		;if not
  10101 FFFCCA20 4481                        	NEG.L	D1	;	else make it positive
  10102 FFFCCA22 5384                        	SUBQ	#1,D4	;	one less for width count
  10103 FFFCCA24                             PN1:
  10104 FFFCCA24 82FC 000A                   	DIVU	#10,D1	;	get the next digit
  10105 FFFCCA28 690A                        	BVS	PNOV	;	overflow flag set?
  10106 FFFCCA2A 2001                        	MOVE.L	D1,D0	;	if not, save remainder
  10107 FFFCCA2C 0281 0000 FFFF              	AND.L	#0xFFFF,D1	;strip the remainder
  10108 FFFCCA32 601A                        	BRA	TOASCII 	;skip the overflow stuff
  10109 FFFCCA34                             PNOV:
  10110 FFFCCA34 2001                        	MOVE	D1,D0	;	prepare for long word division
  10111 FFFCCA36 4241                        	CLR.W	D1		;zero out low word
  10112 FFFCCA38 4841                        	SWAP	D1		;high word into low
  10113 FFFCCA3A 82FC 000A                   	DIVU	#10,D1	;	divide high word
  10114 FFFCCA3E 2401                        	MOVE	D1,D2	;	save quotient
  10115 FFFCCA40 2200                        	MOVE	D0,D1	;	low word into low
  10116 FFFCCA42 82FC 000A                   	DIVU	#10,D1	;	divide low word
  10117 FFFCCA46 2001                        	MOVE.L	D1,D0	;	D0 = remainder
  10118 FFFCCA48 4841                        	SWAP	D1	;	R/Q becomes Q/R
  10119 FFFCCA4A 2202                        	MOVE	D2,D1	;	D1 is low/high
  10120 FFFCCA4C 4841                        	SWAP	D1	;	D1 is finally high/low
  10121 FFFCCA4E                             TOASCII:
  10122 FFFCCA4E 4840                        	SWAP	D0	;	get remainder
  10123 FFFCCA50 1F00                        	MOVE.B	D0,-(SP);	stack it as a digit
  10124 FFFCCA52 4840                        	SWAP	D0
  10125 FFFCCA54 5384                        	SUBQ	#1,D4	;	decrement width count
  10126 FFFCCA56 4A81                        	TST.L	D1		;if quotient is zero, we're done
  10127 FFFCCA58 66CA                        	BNE	PN1
  10128 FFFCCA5A 5384                        	SUBQ	#1,D4	;	adjust padding count for DBRA
  10129 FFFCCA5C 6B0C                        	BMI	PN4		;skip padding if not needed
  10130 FFFCCA5E                             PN3:
  10131 FFFCCA5E 103C 0020                   	MOVE.B	#' ',D0  ;       display the required leading spaces
  10132 FFFCCA62 6100 F5A4                   	BSR	GOOUT
  10133 FFFCCA66 51CC FFF6                   	DBRA	D4,PN3
  10134 FFFCCA6A                             PN4:
  10135 FFFCCA6A 4A83                        	TST.L	D3		;is number negative?
  10136 FFFCCA6C 6A08                        	BPL	PN5
  10137 FFFCCA6E 103C 002D                   	MOVE.B	#'-',D0  ;       if so, display the sign
  10138 FFFCCA72 6100 F594                   	BSR	GOOUT
  10139 FFFCCA76                             PN5:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 109
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
  10140 FFFCCA76 101F                        	MOVE.B	(SP)+,D0	;now unstack the digits and display
  10141 FFFCCA78 6B0A                        	BMI	PNRET		;until the flag code is reached
  10142 FFFCCA7A 0600 0030                   	ADD.B	#'0',D0   ;      make into ASCII
  10143 FFFCCA7E 6100 F588                   	BSR	GOOUT
  10144 FFFCCA82 60F2                        	BRA	PN5
  10145 FFFCCA84                             PNRET:
  10146 FFFCCA84 281F                        	MOVE	(SP)+,D4	;restore width value
  10147 FFFCCA86 4E75                        	RTS
                                             
  10149 FFFCCA88                             PRTLN:
  10150 FFFCCA88 4281                        	CLR.L	D1
  10151 FFFCCA8A 1219                        	MOVE.B	(A1)+,D1	;get the binary line number
  10152 FFFCCA8C E189                        	LSL	#8,D1
  10153 FFFCCA8E 1219                        	MOVE.B	(A1)+,D1
  10154 FFFCCA90 7805                        	MOVEQ	#5,D4		;display a 5 digit line no.
  10155 FFFCCA92 6100 FF80                   	BSR	PRTNUM
  10156 FFFCCA96 103C 0020                   	MOVE.B	#' ',D0      ;   followed by a blank
  10157 FFFCCA9A 6100 F56C                   	BSR	GOOUT
  10158 FFFCCA9E 4280                        	CLR	D0		;stop char. is a zero
  10159 FFFCCAA0 6000 FF16                   	BRA	PRTSTG	;	display the rest of the line
                                             
                                             ;*
                                             ;* ===== Test text byte following the call to this subroutine. If it
                                             ;*	equals the byte pointed to by A0, return to the code following
                                             ;*	the call. If they are not equal, branch to the point
                                             ;*	indicated by the offset byte following the text byte.
                                             ;*
  10167 FFFCCAA4                             TSTC:
  10168 FFFCCAA4 6100 0050                   	BSR	IGNBLK		;ignore leading blanks
  10169 FFFCCAA8 225F                        	MOVE.L	(SP)+,A1	;get the return address
  10170 FFFCCAAA 1219                        	MOVE.B	(A1)+,D1	;get the byte to compare
  10171 FFFCCAAC B210                        	CMP.B	(A0),D1 	;is it = to what A0 points to?
  10172 FFFCCAAE 6708                        	BEQ	TC1		;if so
  10173 FFFCCAB0 4281                        	CLR.L	D1		;If not, add the second
  10174 FFFCCAB2 1211                        	MOVE.B	(A1),D1 ;	byte following the call to
  10175 FFFCCAB4 D3C1                        	ADD.L	D1,A1	;	the return address.
  10176 FFFCCAB6 4ED1                        	JMP	(A1)		;jump to the routine
  10177 FFFCCAB8                             TC1:
  10178 FFFCCAB8 5288                        	ADDQ.L	#1,A0	;	if equal, bump text pointer
  10179 FFFCCABA 5289                        	ADDQ.L	#1,A1	;	Skip the 2 bytes following
  10180 FFFCCABC 4ED1                        	JMP	(A1)		;the call and continue.
                                             
                                             ;*
                                             ;* ===== See if the text pointed to by A0 is a number. If so,
                                             ;*	return the number in D1 and the number of digits in D2,
                                             ;*	else return zero in D1 and D2.
                                             ;*
  10187 FFFCCABE                             TSTNUM:
  10188 FFFCCABE 4281                        	CLR.L	D1		;initialize return parameters
  10189 FFFCCAC0 4282                        	CLR	D2
  10190 FFFCCAC2 6100 0032                   	BSR	IGNBLK		;skip over blanks
  10191 FFFCCAC6                             TN1:
  10192 FFFCCAC6 0C10 0030                   	CMP.B	#'0',(A0) ;      is it less than zero?
  10193 FFFCCACA 6528                        	BCS	TSNMRET 	;if so, that's all
  10194 FFFCCACC 0C10 0039                   	CMP.B	#'9',(A0) ;      is it greater than nine?
  10195 FFFCCAD0 6222                        	BHI	TSNMRET 	;if so, return
  10196 FFFCCAD2 B2BC 0CCC CCCC              	CMP.L	#214748364,D1	;see if there's room for new digit
  10197 FFFCCAD8 6400 FDB0                   	BCC	QHOW		;if not, we've overflowd
  10198 FFFCCADC 2001                        	MOVE.L	D1,D0	;	quickly multiply result by 10
  10199 FFFCCADE D281                        	ADD.L	D1,D1
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 110
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
  10200 FFFCCAE0 D281                        	ADD.L	D1,D1
  10201 FFFCCAE2 D280                        	ADD.L	D0,D1
  10202 FFFCCAE4 D281                        	ADD.L	D1,D1
  10203 FFFCCAE6 1018                        	MOVE.B	(A0)+,D0	;add in the new digit
  10204 FFFCCAE8 0280 0000 000F              	AND.L	#0xF,D0
  10205 FFFCCAEE D280                        	ADD.L	D0,D1
  10206 FFFCCAF0 5282                        	ADDQ	#1,D2		;increment the no. of digits
  10207 FFFCCAF2 60D2                        	BRA	TN1
  10208 FFFCCAF4                             TSNMRET:
  10209 FFFCCAF4 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Skip over blanks in the text pointed to by A0.
                                             ;*
  10214 FFFCCAF6                             IGNBLK:
  10215 FFFCCAF6 0C10 0020                   	CMP.B	#' ',(A0)   ;    see if it's a space
  10216 FFFCCAFA 6604                        	BNE	IGBRET		;if so, swallow it
  10217 FFFCCAFC                             IGB1:
  10218 FFFCCAFC 5288                        	ADDQ.L	#1,A0	;	increment the text pointer
  10219 FFFCCAFE 60F6                        	BRA	IGNBLK
  10220 FFFCCB00                             IGBRET:
  10221 FFFCCB00 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Convert the line of text in the input buffer to upper
                                             ;*	case (except for stuff between quotes).
                                             ;*
  10227 FFFCCB02                             TOUPBUF:
  10228 FFFCCB02 41F8 0630                   	LEA	BUFFER,A0	;set up text pointer
  10229 FFFCCB06 4201                        	CLR.B	D1		;clear quote flag
  10230 FFFCCB08                             TOUPB1:
  10231 FFFCCB08 1018                        	MOVE.B	(A0)+,D0	;get the next text char.
  10232 FFFCCB0A B03C 000D                   	CMP.B	#CR,D0		;is it end of line?
  10233 FFFCCB0E 671A                        	BEQ	TOUPBRT 	;if so, return
  10234 FFFCCB10 B03C 0022                   	CMP.B	#'"',D0  ;       a double quote?
  10235 FFFCCB14 6716                        	BEQ	DOQUO
  10236 FFFCCB16 B03C 0027                   	CMP.B	#'''',D0  ;      or a single quote?
  10237 FFFCCB1A 6710                        	BEQ	DOQUO
  10238 FFFCCB1C 4A01                        	TST.B	D1		;inside quotes?
  10239 FFFCCB1E 66E8                        	BNE	TOUPB1		;if so, do the next one
  10240 FFFCCB20 6100 001A                   	BSR	TOUPPER 	;convert to upper case
  10241 FFFCCB24 1100                        	MOVE.B	D0,-(A0);	store it
  10242 FFFCCB26 5288                        	ADDQ.L	#1,A0
  10243 FFFCCB28 60DE                        	BRA	TOUPB1		;and go back for more
  10244 FFFCCB2A                             TOUPBRT:
  10245 FFFCCB2A 4E75                        	RTS
                                             
  10247 FFFCCB2C                             DOQUO:
  10248 FFFCCB2C 4A01                        	TST.B	D1	;	are we inside quotes?
  10249 FFFCCB2E 6604                        	BNE	DOQUO1
  10250 FFFCCB30 1200                        	MOVE.B	D0,D1	;	if not, toggle inside-quotes flag
  10251 FFFCCB32 60D4                        	BRA	TOUPB1
  10252 FFFCCB34                             DOQUO1:
  10253 FFFCCB34 B200                        	CMP.B	D0,D1	;	make sure we're ending proper quote
  10254 FFFCCB36 66D0                        	BNE	TOUPB1		;if not, ignore it
  10255 FFFCCB38 4201                        	CLR.B	D1		;else clear quote flag
  10256 FFFCCB3A 60CC                        	BRA	TOUPB1
                                             
                                             ;*
                                             ;* ===== Convert the character in D0 to upper case
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 111
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             ;*
  10261 FFFCCB3C                             TOUPPER:
  10262 FFFCCB3C B03C 0061                   	CMP.B	#'a',D0   ;      is it < 'a'?
  10263 FFFCCB40 650A                        	BCS	TOUPRET
  10264 FFFCCB42 B03C 007A                   	CMP.B	#'z',D0        ; or > 'z'?
  10265 FFFCCB46 6204                        	BHI	TOUPRET
  10266 FFFCCB48 0400 0020                   	SUB.B	#32,D0		;if not, make it upper case
  10267 FFFCCB4C                             TOUPRET:
  10268 FFFCCB4C 4E75                        	RTS
                                             
                                             ;*
                                             ;* 'CHKIO' checks the input. If there's no input, it will return
                                             ;* to the caller with the Z flag set. If there is input, the Z
                                             ;* flag is cleared and the input byte is in D0. However, if a
                                             ;* control-C is read, 'CHKIO' will warm-start BASIC and will not
                                             ;* return to the caller.
                                             ;*
  10277 FFFCCB4E                             CHKIO:
  10278 FFFCCB4E 6100 F4BC                   	BSR.L	GOIN	;	get input if possible
  10279 FFFCCB52 670A                        	BEQ	CHKRET		;if Zero, no input
  10280 FFFCCB54 B03C 0003                   	CMP.B	#CTRLC,D0	;is it control-C?
  10281 FFFCCB58 6604                        	BNE	CHKRET		;if not
  10282 FFFCCB5A 6000 F504                   	BRA.L	WSTART		;if so, do a warm start
  10283 FFFCCB5E                             CHKRET:
  10284 FFFCCB5E 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Display a CR-LF sequence
                                             ;*
  10289 FFFCCB60                             CRLF:
  10290 FFFCCB60 4DF9 FFFC CC08              	LEA	CLMSG,A6
                                             
                                             ;*
                                             ;* ===== Display a zero-ended string pointed to by register A6
                                             ;*
  10295 FFFCCB66                             PRMESG:
  10296 FFFCCB66 101E                        	MOVE.B	(A6)+,D0	;get the char.
  10297 FFFCCB68 6706                        	BEQ	PRMRET		;if it's zero, we're done
  10298 FFFCCB6A 6100 F49C                   	BSR	GOOUT		;else display it
  10299 FFFCCB6E 60F6                        	BRA	PRMESG
  10300 FFFCCB70                             PRMRET:
  10301 FFFCCB70 4E75                        	RTS
                                             
                                             ;******************************************************
                                             ;* The following routines are the only ones that need *
                                             ;* to be changed for a different I/O environment.     *
                                             ;******************************************************
                                             
                                             UART		EQU		0xFFDC0A00
                                             UART_LS		EQU		UART+1
                                             UART_CTRL	EQU		UART+7
                                             KEYBD		EQU		0xFFDC0000
                                             
                                             
                                             ;*
                                             ;* ===== Output character to the console (Port 1) from register D0
                                             ;*	(Preserves all registers.)
                                             ;*
  10318 FFFCCB72                             OUTC:
  10319 FFFCCB72 48E7 C000                   	MOVEM.L	D0/D1,-(SP)
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 112
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
  10320 FFFCCB76 2200                        	MOVE.L	D0,D1
  10321 FFFCCB78 7006                        	MOVEQ	#6,D0
  10322 FFFCCB7A 4E4F                        	TRAP	#15
  10323 FFFCCB7C 4CDF 0003                   	MOVEM.L	(SP)+,D0/D1
  10324 FFFCCB80 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Input a character from the console into register D0 (or
                                             ;*	return Zero status if there's no character available).
                                             ;*
  10330 FFFCCB82                             INC:
  10331 FFFCCB82 2F01                        	move.l	d1,-(a7)
  10332 FFFCCB84 7007                        	moveq	#7,d0		; check for key
  10333 FFFCCB86 4E4F                        	trap	#15
  10334 FFFCCB88 4A00                        	tst.b	d0
  10335 FFFCCB8A 670A                        	beq.s	.0001
  10336 FFFCCB8C 7005                        	moveq	#5,d0
  10337 FFFCCB8E 4E4F                        	trap	#15
  10338 FFFCCB90 2001                        	move.l	d1,d0
  10339 FFFCCB92 221F                        	move.l	(a7)+,d1
  10340 FFFCCB94 4A00                        	tst.b	d0
  10341 FFFCCB96                             .0001:
  10342 FFFCCB96 4E75                        	rts
                                             
                                             ;*
                                             ;* ===== Output character to the host (Port 2) from register D0
                                             ;*	(Preserves all registers.)
                                             ;*
  10348 FFFCCB98                             AUXOUT:
  10349 FFFCCB98 0839 0005 FFDC 0A01         	BTST	#5,UART_LS	;is port ready for a character?
  10350 FFFCCBA0 67F6                        	BEQ		AUXOUT		;if not, wait for it
  10351 FFFCCBA2 13C0 FFDC 0A00              	MOVE.B	D0,UART		;out it goes.
  10352 FFFCCBA8 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Input a character from the host into register D0 (or
                                             ;*	return Zero status if there's no character available).
                                             ;*
  10358 FFFCCBAA                             AUXIN:
  10359 FFFCCBAA 0839 0000 FFDC 0A01         	BTST	#0,UART_LS	;is character ready?
  10360 FFFCCBB2 670A                        	BEQ		AXIRET		;if not, return Zero status
  10361 FFFCCBB4 1039 FFDC 0A00              	MOVE.B	UART,D0		;else get the character
  10362 FFFCCBBA 0200 007F                   	AND.B	#0x7F,D0 	;zero out the high bit
  10363 FFFCCBBE                             AXIRET:
  10364 FFFCCBBE 4E75                        	RTS
                                             
                                             ;*
                                             ;* ===== Return to the resident monitor, operating system, etc.
                                             ;*
  10369 FFFCCBC0                             BYEBYE:
  10370 FFFCCBC0 1E3C 00E4                   	MOVE.B	#228,D7 	;return to Tutor
  10371 FFFCCBC4 4E4E                        	TRAP	#14
                                             
  10373 FFFCCBC6                             INITMSG:
  10374 FFFCCBC6 0D 0A 47 6F 72 64 6F 27     	DC.B	CR,LF,"Gordo's MC68000 Tiny BASIC, v1.2",CR,LF,LF,0
  10375 FFFCCBCE 73 20 4D 43 36 38 30 30     
  10376 FFFCCBD6 30 20 54 69 6E 79 20 42     
  10377 FFFCCBDE 41 53 49 43 2C 20 76 31     
  10378 FFFCCBE6 2E 32 0D 0A 0A 00           
  10379 FFFCCBEC                             OKMSG:
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 113
C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
  10380 FFFCCBEC 0D 0A 4F 4B 0D 0A 00        	DC.B	CR,LF,'OK',CR,LF,0
  10381 FFFCCBF3                             HOWMSG:
  10382 FFFCCBF3 48 6F 77 3F 0D 0A 00        	DC.B	'How?',CR,LF,0
  10383 FFFCCBFA                             WHTMSG:
  10384 FFFCCBFA 57 68 61 74 3F 0D 0A 00     	DC.B	'What?',CR,LF,0
                                             
  10386 FFFCCC02                             SRYMSG:
  10387 FFFCCC02 53 6F 72 72 79 2E           	DC.B	'Sorry.'
  10388 FFFCCC08                             CLMSG:
  10389 FFFCCC08 0D 0A 00                    	DC.B	CR,LF,0
  10390 FFFCCC0B 00                          	DC.B	0	;<- for aligning on a word boundary
                                             
                                             LSTROM	EQU		$
                                             	;	end of possible ROM area
                                             
Finitron asm68 assembler    version 5.8   Sun Dec 17 04:44:03 2017     Page 113
bootrom.asm


                                             .include C:\cores5\N4V68kSys\software\bootrom\MyTinyB.asm
                                             
                                             	;
                                             
                                             
