; ============================================================================
;        __
;   \\__/ o\    (C) 2020  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

		code	18 bits
		align	4
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

MMUInit:
		sub		$sp,$sp,#8
		sto		$ra,[$sp]
		ldi		$t0,#8192				; set number of available pages in system
		stw		$t0,NPAGES
		; Free all memory for all maps
		ldi		$t0,#$00
		ldi		$t4,#MAX_MID		; map id
.0004:
		ldi		$t1,#$000				; regno
		ldi		$t2,#PAGES_PER_MAP	; number of registers to update
.0001:
		sll		$s1,$t4,#16			; put mid in place
		or		$s1,$s1,$t1			; or in page number
		mvmap	$x0,$t0,$s1
		add		$t1,$t1,#$01		; increment page number
		sub		$t2,$t2,#1
		bnez	$t2,.0001
		sub		$t4,$t4,#1
		bge		$t4,$x0,.0004
		; Now ensure all pages in PAM are marked free
		ldi		$t0,#8191
.0006:
		pfree	$t0
		sub		$t0,$t0,#1
		bge		$t0,$x0,.0006
		; Allocate three pages for OS data.
		; These will end up being the first three pages of memory
		palloc	$x0
		palloc	$x0
		palloc	$x0
		; allocate last page for system stack
		ldi		$t1,#$FFF				
		ldi		$t0,#$1FFF
		palloc	$x0,$t0				; specifically allocate page 8191
		mvmap	$x0,$t0,$t1

		; Now setup segment registers
		ldi		$t0,#$0
		ldi		$t1,#$07				; t1 = value to load RWX=111, base = 0
.0002:
		mvseg	$x0,$t1,$t0			; move to the segment register identifed by t0
		add		$t0,$t0,#1			; pick next segment register
		slt		$t2,$t0,#16			; 16 segment regs
		bne		$t2,$x0,.0002
		ldo		$ra,[$sp]
		add		$sp,$sp,#8
		ret

;------------------------------------------------------------------------------
; Find a run of buckets available for mapping virtual to physical addresses.
;
; Parameters:
;		a0 = mid
;		a1 = number of pages required.
; Modifies:
;		t1,t2,t3,t5
; Returns:
;		v0 = starting bucket number (includes ASID), -1 if no run found
;------------------------------------------------------------------------------

FindRun:
	and			$t3,$a0,#MAX_MID	; t3 = mid
	sll			$t3,$t3,#16				; shift into usable position
	mov			$t2,$t3						; t2 = map entry number
	or			$t2,$t2,#OSPAGES	; start looking at page 3 (others are for OS)
	ldi			$t5,#8191					; max number of pages - 1
	or			$t5,$t5,$t3				; t5 = max in ASID
.0003:
	ldi			$t1,#0						; t1 = count of consecutive empty buckets
.0001:
	mvmap		$v0,$x0,$t2				; get map entry into v0
	beqz		$v0,.empty0				; is it empty?
	add			$t2,$t2,#1
	bltu		$t2,$t5,.0001
.0002:
	ldi			$v0,#-1						; got here so no run was found
	ret
.empty0:
	mov			$t3,$t2						; save first empty bucket
.empty1:
	bgeu		$t2,$t5,.0002
	add			$t1,$t1,#1
	bgeu		$t1,$a1,.foundEnough
	add			$t2,$t2,#1				; next bucket
	mvmap		$v0,$x0,$t2				; get map entry
	beqz		$v0,.empty1
	bra			.0003							; go back and find another run
.foundEnough:
	mov			$v0,$t3						; v0 = start of run
	ret

;------------------------------------------------------------------------------
; Find a run of buckets available for mapping virtual to physical addresses.
; This search starts at the top of the virtual address space and works its
; way downwards. This is usually used for allocating stack space.
;
; Parameters:
;		a0 = mid
;		a1 = number of pages required.
; Modifies:
;		t1,t2,t3,t5
; Returns:
;		v0 = starting bucket number (includes ASID), -1 if no run found
;------------------------------------------------------------------------------

FindStackRun:
	and			$t3,$a0,#MAX_MID	; t3 = mid
	sll			$t3,$t3,#16				; shift into usable position
	mov			$t2,$t3						; t2 = map entry number
	or			$t2,$t2,#PAGES_PER_MAP-1	; start looking at last page
	mov			$t5,$t3						; t5 = min in ASID
.0003:
	ldi			$t1,#0						; t1 = count of consecutive empty buckets
.0001:
	mvmap		$v0,$x0,$t2				; get map entry into v0
	beqz		$v0,.empty0				; is it empty?
	sub			$t2,$t2,#1
	bgeu		$t2,$t5,.0001
.0002:
	ldi			$v0,#-1						; got here so no run was found
	ret
.empty0:
.empty1:
	bltu		$t2,$t5,.0002
	add			$t1,$t1,#1
	bgeu		$t1,$a1,.foundEnough
	sub			$t2,$t2,#1				; next bucket
	mvmap		$v0,$x0,$t2				; get map entry
	beqz		$v0,.empty1
	bra			.0003							; go back and find another run
.foundEnough:
	mov			$v0,$t2						; v0 = start of run
	ret

;------------------------------------------------------------------------------
; Parameters:
;		a0 = mid
;		a1 = amount of memory to allocate
; Modifies:
;		a1,t0
; Returns:
;		v1 = pointer to allocated memory in virtual address space.
;		v0 = E_Ok for success, E_NotAlloc otherwise
;------------------------------------------------------------------------------
;
AllocInCurrentAS:
	mGetCurrentTid
	mov			$a0,$v0
Alloc:
	sub			$sp,$sp,#32
	sto			$ra,[$sp]
	sto			$s1,8[$sp]				; these regs must be saved
	sto			$s2,16[$sp]
	sto			$s3,24[$sp]
	; First check if there are enough pages available in the system.
	add			$v0,$a1,#PAGESZ-1	; v0 = round memory request
	srl			$v0,$v0,#LOG_PGSZ	; v0 = convert to pages required
	ldwu		$t0,NPAGES				; check number of pages available
	bleu		$v0,$t0,.enough
.noRun2:
	ldi			$v1,#0						; not enough, return null
	bra			.noRun
.enough:
	; There are enough pages, but is there a run long enough in map space?
	mov			$s2,$v0						; save required # pages
	mov			$a1,$v0
	call		FindRun						; find a run of available slots
	blt			$v0,$x0,.noRun2
	; Now there are enough pages, and a run available, so allocate
	mov			$s1,$v0						; s1 = start of run
	ldwu		$s3,NPAGES				; decrease number of pages available in system
	sub			$s3,$s3,$s2
	stw			$s3,NPAGES
	mov			$s3,$v0						; s3 = start of run
.0001:
	palloc	$v0								; allocate a page (cheat and use hardware)
	beqz		$v0,.noRun
	mvmap		$x0,$v0,$s3				; map the page
	add			$s3,$s3,#1				; next bucket
	sub			$s2,$s2,#1
	bgt			$s2,$x0,.0001
	sll			$v1,$s1,#LOG_PGSZ	; v1 = virtual address of allocated mem.
	ldi			$v0,#E_Ok
	bra			.xit
.noRun:
	ldi			$v0,#E_NotAlloc
.xit
	ldo			$ra,[$sp]					; restore saved regs
	ldo			$s1,8[$sp]
	ldo			$s2,16[$sp]
	ldo			$s3,24[$sp]
	add			$sp,$sp,#32
	ret

;------------------------------------------------------------------------------
; Allocate the stack page for a map. The stack is located at the highest
; virtual address ($7FC00).
;
; Parameters:
;		a0 = mid to allocate for
;	Returns:
;		v0 = physical address, 0 if unsuccessful
;		v1 = virtual address, not valid unless successful
;------------------------------------------------------------------------------

AllocStack:
	sub			$sp,$sp,#16
	sto			$ra,[$sp]
	sto			$a0,8[$sp]
	sll			$v1,$a0,#16			; 
	or			$v1,$v1,#PAGES_PER_MAP-1	; last page of memory is for stack
	mvmap		$v0,$x0,$v1			; check if stack already allocated
	bnez		$v0,.0001
	palloc	$v0							; allocate a page
;	mov			$a0,$v0
;	call		PutHexHalf
	ldo			$a0,8[$sp]
	beqz		$v0,.xit		; success?
	mvmap		$x0,$v0,$v1
.0001:
	and			$v1,$v1,#4095
	sll			$v0,$v0,#LOG_PGSZ			; convert pages to addresses
	sll			$v1,$v1,#LOG_PGSZ
.xit:
	ldo			$ra,[$sp]
	add			$sp,$sp,#16
	ret

;------------------------------------------------------------------------------
; This routine will de-allocate all the pages associated with a map including
; the stack.
;
; Parameters:
;		a0 = mid to free memory for
;	Modifies:
;		t0,t1,t3,t4
; Returns:
;		none
;------------------------------------------------------------------------------

FreeAll:
	ldi			$t3,#0
	sll			$t4,$a0,#16
.nxt:
	slt			$t1,$t3,#PAGES_PER_MAP		; number of buckets to check
	beqz		$t1,.0001
	and			$t4,$t4,#$3F0000
	or			$t4,$t4,$t3			; combine mid and bucket number
	ldi			$t0,#0					; new page number to set (indicates free)
	mvmap		$t0,$t0,$t4			; get page mapping and set to zero
	add			$t3,$t3,#1			; advance to next bucket
	beqz		$t0,.nxt				; 0 = no map in this bucket
	pfree		$t0							; free the page
	ldwu		$t0,NPAGES			; update the number of available pages
	add			$t0,$t0,#1
	stw			$t0,NPAGES
	bra			.nxt
.0001:
	ret

;------------------------------------------------------------------------------
; Convert a virtual address to a physical one
;
; Parameters:
;		a0 = map id
;		a1 = virtual address to convert
; Modifies:
;		t0
; Returns:
;		v0 = physical address
;------------------------------------------------------------------------------

VirtToPhys:
	ldi		$v0,#$FF000000
	bgeu	$a1,$v0,.notMapped
	srl		$t0,$a1,#LOG_PGSZ		; convert virt to page
	sll		$v0,$a0,#16
	or		$v0,$v0,$t0					; and in mid
	mvmap	$v0,$x0,$v0					; get the translation
	sll		$v0,$v0,#LOG_PGSZ		; convert page to address
	and		$t0,$a1,#$FFFF			; insert LSB's
	or		$v0,$v0,$t0
	ret
.notMapped:
	mov		$v0,$a1
	ret
