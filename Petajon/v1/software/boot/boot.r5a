.include "../fmtk/const.r5a"
.include "../fmtk/config.r5a"
.include "../fmtk/device.r5a"
.include "../fmtk/macro.r5a"
.include "../fmtk/global.r5a"

CTRLC				equ		$03
BS					equ		$08
LNFD				equ		$0A
CR					equ		$0D
XON					equ		$11
XOFF				equ		$13
DEL					equ		$7F
LEDS				equ		$FFDC0600
BUTTONS			equ		$FFDC0600
VIA					equ		$FFDC0600
VIA_PA			equ		$04
VIA_DDRA		equ		$0C
VIA_T1CL		equ		$10
VIA_T1CH		equ		$14
VIA_ACR			equ		$2C
VIA_PCR			equ		$30
VIA_IFR			equ		$34
VIA_IER			equ		$38
VIA_PARAW		equ		$3C
UART				equ		$FFDC0A00
UART_TRB		equ		$00
UART_STAT		equ		$04
UART_CMD		equ		$08
		; First 16kB is for TCB's
INBUF				equ		$14100
switchflag	equ		$14200
milliseconds	equ		$14208


	code	18 bits
;------------------------------------------------------------------------------
; Exception vector table.
;------------------------------------------------------------------------------
	org		$FFFC0000				; user mode exception
	jmp		IRQRout
	org		$FFFC0040				; supervisor mode exception (not possible)
	jmp		IRQRout
	org		$FFFC0080				; hypervisor mode exception (not possible)
	jmp		IRQRout
	org 	$FFFC00C0				; machine mode exception
	jmp		IRQRout
	org		$FFFC00FC				; non-maskable interrupt
	jmp		MachineStart

;------------------------------------------------------------------------------
; User mode code starts here
;------------------------------------------------------------------------------
	org		$FFFC0100
MachineStart:
	csrrw	$s9,#$F10,$x0			; get hartid
	and		$s9,$s9,#$20
	bnez	$s9,.hart20
	ldi		$sp,#$1FFFBFF8		; setup machine mode stack pointer
	bra		.hart00:
.hart20:
	ldi		$sp,#$1FFF7FF8
.hart00:
	ldi		$t0,#$FFFC0000
	csrrw $x0,#$301,$t0			; set tvec
	ldi		$t0,#$1D
	csrrw	$x0,#$181,$t0			; set ASID
	; The dram needs a bit of time before it's ready for access. along with
	; the video screen which also needs some time. So the first thing done is
	; to delay for about 3 seconds.
	bnez	$s9,.skipInit
	ldi		$t1,#VIA
	ldi		$t0,#$000000FF		; set via so we can see output on LEDs
	stt		$t0,VIA_DDRA[$t1]
	ldi		$a0,#60000000			; 3s in 50ns intervals
	pfi
	call	_MicroDelay
	call	MMUInit					; initialize MMU for address space zero.
	call	FMTKInit
	call	VideoInit
	call	ViaInit
	call	SerialInit
	call	_KeybdInit
	call	PicInit
	call	_PRNGInit

;	call	_ramtest
	pfi
	ldi		$a0,#1
	ldi		$a1,#24000
	ldi		$a2,#UserStart2
	ldi		$a3,#0					; run on processor #0
	ecall
	ldi		$a0,#1					; start TinyBasic
	ldi		$a1,#32000
	ldi		$a2,#CSTART
	ldi		$a3,#1					; run on processor #1
	ecall
.skipInit:
; Idle (system) task begins here, simply wait for interrupt.
.0001:
	csrrw	$s9,#$F10,$x0			; get hartid
	and		$s9,$s9,#$20
	bnez	$s9,.skip1
	ldo		$a0,$FFD00000
	add		$a0,$a0,#$10001
	sto		$a0,$FFD00000
.skip1:
	ldo		$a0,$FFD00008
	add		$a0,$a0,#$10001
	sto		$a0,$FFD00008
	bra		.skip2
.skip2:
	pfi
	wfi
	bra		.0001

UserStart2:
	csrrw	$s9,#$F10,$x0			; get hartid
	and		$s9,$s9,#$20
	bnez	$s9,.skip1
	call	_SpriteDemo
.skip1:
	ldi		$a0,#60000000				; 3s in 50ns intervals
	pfi
	call	_MicroDelay
	ldi		$a0,#$400						; clear screen
	ecall
	pfi
	ldi		$a0,#$401						; home cursor
	ecall
	ldi		$a0,#14							; Get current tid
	ecall
	pfi
	mov		$a1,$v1
	ldi		$a0,#24							; RequestIOFocus
	ecall
;	ldi		$sp,#$1FFF7FF8			; setup user mode stack pointer
;	ldi		$sp,#$AFFFFFFC
	ldi		$t0,#$04						; turn on the LED
	stt		$t0,VIA+VIA_PARAW
	ldi		$t2,#16							; send an XON just in case
;	ldi		$a3,#XON
;.0004:
;	call	SerialPutChar
;	sub		$t2,$t2,#1
;	bnez	$t2,.0004
.0002:
;	ldi		$a0,#msgStart				; spit out a startup message
;	ldi		$t0,#$FFD00000
;	ldo		$t1,datAttr
.0005:
;	ldbu	$a1,[$a0]
;	add		$a0,$a0,#1
;	beqz	$a1,.0004
;	or		$a1,$a1,$t1
;	sto		$a1,[$t0]
;	add		$t0,$t0,#8
;	bra		.0005
.0004:
	pfi
	ldi		$a0,#$403						; video putstring()
	ldi		$a1,#msgStart
	ecall
;		ldi		a0,#1
;		ldi		a1,#24000
;		ldi		a2,#Monitor
;		ecall
	pfi
	ldi		$a0,#15							; dump ready list
	ecall
	bra		MonEntry

		; Now a loop to recieve and echo back characters
.0003:
	call	SerialPeekChar
	blt		$v0,$x0,.0003
	mov		$a0,$v0
	pfi
	call	SerialPutChar
	bra		.0003

	align	8
datAttr:
	dco		$FFFF001F0000
	
	align	8
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

IdleTask:
	bra		IdleTask

;------------------------------------------------------------------------------
; Get a character from input device. Checks for a CTRL-T which indicates to
; switch the I/O focus.
;
; Parameters:
;		none
; Returns:
;		v0 = character, -1 if none available
;------------------------------------------------------------------------------

Getch:
	sub		$sp,$sp,#24
	sto		$ra,[$sp]
	sto		$a0,8[$sp]
	sto		$a1,16[$sp]
;	mWaitForFocus
;	call	SerialGetChar
	pfi
	ldi		$a0,#0					; don't block
	call	_DBGGetKey
	ldo		$ra,[$sp]
	ldo		$a0,8[$sp]
	ldo		$a1,16[$sp]
	add		$sp,$sp,#24
	ret

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

_putch:
Putch:
	sub		$sp,$sp,#88
	sto		$ra,[$sp]
	sto		$v0,8[$sp]
	sto		$a3,16[$sp]
	sto		$v1,24[$sp]
	sto		$a1,32[$sp]
	sto		$t0,40[$sp]
	sto		$t1,48[$sp]
	sto		$t2,56[$sp]
	sto		$t3,64[$sp]
	sto		$t4,72[$sp]
	sto		$t5,80[$sp]
	mov		$a3,$a0
;	call	SerialPutChar
;	call	VideoPutChar
	pfi
	ldi		$a0,#$402
	ecall
;	ldi		$a1,#5							; serial port = 5
;	call	fputc
;	ldi		$a1,#2							; video = 2
;	call	fputc
	ldo		$ra,[$sp]
	ldo		$v0,8[$sp]
	ldo		$a3,16[$sp]
	ldo		$v1,24[$sp]
	ldo		$a1,32[$sp]
	ldo		$t0,40[$sp]
	ldo		$t1,48[$sp]
	ldo		$t2,56[$sp]
	ldo		$t3,64[$sp]
	ldo		$t4,72[$sp]
	ldo		$t5,80[$sp]
	add		$sp,$sp,#88
	ret

;------------------------------------------------------------------------------
; fputc - put a character to an I/O device. If the task doesn't have the I/O
; focus then it is rescheduled, allowing another task to run.
;
; Stack Space:
;		6 words
; Register Usage:
;		a0 = FMTK_IO specify
;		a2 = device putchar function
; Parameters:
;		a1 = I/O channel
;		a3 = character to put
; Modifies:
;		none
; Returns:
;		none
;------------------------------------------------------------------------------

fputc:
	sub		$sp,$sp,#48
	sto		$ra,[$sp]
	sto		$v0,8[$sp]
	sto		$a0,16[$sp]
	sto		$v1,24[$sp]
	sto		$a1,32[$sp]
	sto		$a2,40[$sp]
;	mWaitForFocus
	pfi
	ldi		$a0,#26							; FMTK_IO
	ldi		$a2,#13							; putchar function
	ecall
	ldo		$ra,[$sp]
	ldo		$v0,8[$sp]
	ldo		$a0,16[$sp]
	ldo		$v1,24[$sp]
	ldo		$a1,32[$sp]
	ldo		$a2,40[$sp]
	add		$sp,$sp,#48
	ret

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
MonEntry:
;		flw			$f2,fltTen
;		fsw			$f2,f2Save
;		flw			$f1,fltTen
;		fsw			$f1,f1Save
;		fadd		$f18,$f2,$f1
;		fsw			$f18,f18Save
		ldi		$a0,#10
		ldi		$a2,#6
;		call	fltToString
;		ldi		$a0,#STRTMP
;		call	PutString

Monitor:
	ldi		$sp,#$AFFFFFFC
	pfi
;		call	DumpReadyList
;		call	DumpTimeoutList
	ldi		$s1,#0					; s1 = input pointer
	ldi		$a0,#CR
	call	Putch
	pfi
	ldi		$a0,#LNFD
	call	Putch
	ldi		$a0,#'>'
	call	Putch
.0001:
	pfi
	call	Getch						; wait until character pressed
	blt		$v0,$x0,.0001
	xor		$t0,$v0,#LNFD			; ignore line feed
	beq		$t0,$x0,.procLine
	xor		$t0,$v0,#CR
	beq		$t0,$x0,.procLine
	xor		$t0,$v0,#BS
	beq		$t0,$x0,.doBackspace
	pfi
	xor		$t0,$v0,#DEL
	beq		$t0,$x0,.doDelete
	sb		$v0,INBUF[$s1]
	add		$s1,$s1,#1
	mov		$a0,$v0
	call	Putch
	bra		.0001
.doDelete:
	pfi
	mov		$s2,$s1
	add		$s2,$s2,#1
.0002:
	pfi
	lb		$t0,INBUF[$s2]
	sb		$t0,INBUF-1[$s2]
	add		$s2,$s2,#1
	add		$t0,$s2,#INBUF
	slt		$t0,$t0,#INBUF+$7F
	bne		$t0,$x0,.0002
	sb		$x0,INBUF[$s2]
	bra		.0001
.doBackspace:
	pfi
	beq		$s1,$x0,.0001		; can't backspace anymore
	mov		$a0,$v0					; show the backspace
	call	Putch
	sub		$s1,$s1,#1
	mov		$s2,$s1
.0003:
	pfi
	lb		$t0,INBUF+1[$s2]
	sb		$t0,INBUF[$s2]
	add		$s2,$s2,#1
	add		$t0,$s2,#INBUF
	slt		$t0,$t0,#INBUF+$7F
	bne		$t0,$x0,.0003
	sb		$x0,INBUF[$s2]
	bra		.0001
.procLine:
	pfi
	sb		$x0,INBUF[$s1]
	ldi		$s1,#0
.skip:
	pfi
	lb		$t0,INBUF[$s1]
	beq		$t0,$x0,.0005
	xor		$t1,$t0,#'>'
	bne		$t1,$x0,.0004
.skip2:
	pfi
	add		$s1,$s1,#1
	bra		.skip
.0004:
	pfi
	xor		$t1,$t0,#' '
	beq		$t1,$x0,.skip2
	xor		$t1,$t0,#'\t'
	beq		$t1,$x0,.skip2
	xor		$t1,$t0,#'M'
	beq		$t1,$x0,doMem
	pfi
	ldi		$t1,#'B'
	bne		$t0,$t1,.0006
	ldi		$a0,#1					; Start task
	ldi		$a1,#32000			; 32 kB
	ldi		$a2,#CSTART			; start address
	ldi		$a3,#1
	ecall
	pfi
	mov		$s1,$v1					; save v1
	ldi		$a0,#msgCRLF
	call	PutString
	pfi
	mov		$a0,$s1					; get back v1
	call	PutHexByte
	ldi		$a0,#msgTaskStart
	pfi
	call	PutString
	call  DumpReadyList
	;ldi		$a0,#5					; Reschedule task
	;ldi		$a1,#1					; sleep(0)
	;ecall
	jmp		Monitor
.0006:
	pfi
	ldi		$t1,#'D'
	bne		$t0,$t1,.0007
	lb		$t0,INBUF+1[$s1]
	ldi		$t1,#'T'
	bne		$t0,$t1,.noT
	call	DumpTimeoutList
	jmp		Monitor
.noT:
	pfi
	call 	DumpReadyList
	;ldi		$a0,#15
	;ecall
	jmp		Monitor
.0007:
	pfi
	ldi		$t1,#'E'
	bne		$t0,$t1,.0008
	jmp		EditMem
.0008:
	pfi
	ldi		$t1,#'F'
	bne		$t0,$t1,.0009
	jmp		FillMem
.0009:
	pfi
	ldi		$t1,#'S'
	bne		$t0,$t1,.0010
	ldi		$a0,#5					; sleep(0)
	ldi		$a1,#1
	ecall
	jmp		Monitor
.0010:
	pfi
	ldi		$t1,#'K'
	bne		$t0,$t1,.0011
	call	GetHexNum
	ldi		$a0,#3					; kill task
	mov		$a1,$v0					; a0 = pid
	ecall
	jmp		Monitor
.0011:
	pfi
	ldi		$t1,#'?'
	bne		$t0,$t1,.0012
	ldi		$a0,#msgMonHelp
	call	PutString
	jmp		Monitor
.0012:
.0005:
	bra		Monitor

doMem:
	sub		$sp,$sp,#8
	add		$s1,$s1,#1
	sto		$s1,[$sp]
	pfi
	ldi		$a0,#CR
	call	Putch
	ldi		$a0,INBUF
	pfi
	call	PutString
	ldo		$s1,[$sp]
	add		$sp,$sp,#8
	pfi
	call	GetHexNum
	mov		$s3,$v0
	add		$s1,$s1,#1
	pfi
	call	GetHexNum
	add		$s4,$v0,$s3
.loop2:
	pfi
	call	Getch						; check for ctrl-c
	xor		$v0,$v0,#3
	beq		$v0,$x0,Monitor
	ldi		$a0,#CR
	call	Putch
	mov		$a0,$s3
	pfi
	call	PutHexWord
	ldi		$a0,#':'
	call	Putch
	ldi		$s2,#7
.loop:
	ldi		$a0,#' '
	call	Putch
	ldb		$a0,[$s3]
	pfi
	call	PutHexByte
	add		$s3,$s3,#1
	sub		$s2,$s2,#1
	bge		$s2,$x0,.loop
	bltu	$s3,$s4,.loop2
	bra		Monitor		

EditMem:
	pfi
	call	GetHexNum			; get address to edit
	mov		$s3,$v0
	add		$s1,$s1,#1
	pfi
	call	GetHexNum			; get value to set
	stb		$s3,[$v0]			; update mem
	jmp		Monitor

;------------------------------------------------------------------------------
;	>F 1000 800 EE
; Fills memory beginning at address $1000 for $800 bytes with the value $EE
;------------------------------------------------------------------------------

FillMem:
	pfi
	call	GetHexNum			; get address
	mov		$s3,$v0
	add		$s1,$s1,#1
	pfi
	call	GetHexNum			; get length
	mov		$s4,$v0
	add		$s1,$s1,#1
	pfi
	call	GetHexNum			; get byte to use
.0001:
	stb		$v0,[$s3]
	sub		$s4,$s4,#1
	pfi
	bgt		$s4,$x0,.0001
	jmp		Monitor

;------------------------------------------------------------------------------
; Skip over spaces and tabs in the input buffer.
;------------------------------------------------------------------------------

SkipSpaces:
.skip2:
	pfi
	ldb		$t0,INBUF[$s1]
	xor		$t1,$t0,#' '
	beq		$t1,$x0,.skip1
	xor		$t1,$t0,#'\t'
	beq		$t1,$x0,.skip1
	ret
.skip1:
	add		$s1,$s1,#1
	pfi
	bra		.skip2

;------------------------------------------------------------------------------
; Get a hex number from the input buffer.
;------------------------------------------------------------------------------

GetHexNum:
	ldi		$v0,#0							; v0 = num
	sub		$sp,$sp,#8
	sto		$ra,[$sp]
	pfi
	call	SkipSpaces
.next:
	ldb		$t0,INBUF[$s1]
	ldi		$t2,#'0'
	blt		$t0,$t2,.0001
	ldi		$t2,#'9'+1
	blt		$t0,$t2,.isDigit
	pfi
	ldi		$t2,#'A'
	blt		$t0,$t2,.0001
	ldi		$t2,#'F'+1
	blt		$t0,$t2,.isHexUpper
	ldi		$t2,#'a'
	blt		$t0,$t2,.0001
	ldi		$t2,#'f'+1
	blt		$t0,$t2,.isHexLower
.0001:
	pfi
	ldo		$ra,[$sp]
	add		$sp,$sp,#8
	ret
.isHexUpper:
	pfi
	sll		$v0,$v0,#4
	sub		$t0,$t0,#'A'
	add		$t0,$t0,#10
	or		$v0,$v0,$t0
	add		$s1,$s1,#1
	bra		.next
.isHexLower:
	pfi
	sll		$v0,$v0,#4
	sub		$t0,$t0,#'a'
	add		$t0,$t0,#10
	or		$v0,$v0,$t0
	add		$s1,$s1,#1
	bra		.next
.isDigit:
	pfi
	sll		$v0,$v0,#4
	sub		$t0,$t0,#'0'
	or		$v0,$v0,$t0
	add		$s1,$s1,#1
	bra		.next

;------------------------------------------------------------------------------
; Output a word as a hex string.
;------------------------------------------------------------------------------

_PutHexDword:
PutHexDword:
	sub		$sp,$sp,#16
	sto		$ra,[$sp]
	sto		$a0,8[$sp]
	pfi
	srl		$a0,$a0,#32
	call	PutHexWord
	ldo		$ra,[$sp]
	ldo		$a0,8[$sp]
	add		$sp,$sp,#16	; fall through to PutHexWord

;------------------------------------------------------------------------------
; Output a word as a hex string.
;------------------------------------------------------------------------------

_PutHexWord:
PutHexWord:
	sub		$sp,$sp,#16
	sto		$ra,[$sp]
	sto		$a0,8[$sp]
	pfi
	srl		$a0,$a0,#16
	call	PutHexHalf
	ldo		$ra,[$sp]
	ldo		$a0,8[$sp]
	add		$sp,$sp,#16	; fall through to PutHexHalf

;------------------------------------------------------------------------------
; Output a half-word (16 bits) as a hex string.
;------------------------------------------------------------------------------

_PutHexHalf:
PutHexHalf:
	sub		$sp,$sp,#16
	sto		$ra,[$sp]
	sto		$a0,8[$sp]
	pfi
	srl		$a0,$a0,#8
	call	PutHexByte
	ldo		$ra,[$sp]
	ldo		$a0,8[$sp]		
	add		$sp,$sp,#16	; fall through to PutHexByte

;------------------------------------------------------------------------------
; Output a byte as a hex string.
;------------------------------------------------------------------------------

_PutHexByte:
PutHexByte:
	sub		$sp,$sp,#16
	sto		$ra,[$sp]
	sto		$a0,8[$sp]
	pfi
	srl		$a0,$a0,#4		; put the high order nybble first
	call	PutHexNybble
	ldo		$ra,[$sp]
	ldo		$a0,8[$sp]
	add		$sp,$sp,#16		; fall through to PutHexNybble

;------------------------------------------------------------------------------
; Output a nybble as a hex string.
;------------------------------------------------------------------------------

_PutHexNybble:
PutHexNybble:
	sub		$sp,$sp,#16
	sto		$ra,[$sp]
	sto		$a0,8[$sp]
	pfi
	and		$a0,$a0,#15		; strip off high order bits
	ldi		$t0,#10
	pfi
	blt		$a0,$t0,.lt10
	sub		$a0,$a0,#10
	add		$a0,$a0,#'A'
	call	Putch
	bra		.0001
.lt10:
	pfi
	add		$a0,$a0,#'0'
	call	Putch
.0001:
	ldo		$ra,[$sp]
	ldo		$a0,8[$sp]
	add		$sp,$sp,#16
	ret

;------------------------------------------------------------------------------
; PutString
;    Put a string of characters to output device. Calls the 
; Putch routine, so this routine also blocks if the transmitter is not
; empty.
;
; Parameters:
;		$a0 = pointer to null terminated string to put
; Modifies:
;		$t0 and $t1
; Stack Space:
;		2 words
;------------------------------------------------------------------------------

_PutString:
PutString:
	sub		$sp,$sp,#16				; save link register
	sto		$ra,[$sp]
	sto		$a0,8[$sp]				; and argument
	mov		$t1,$a0						; t1 = pointer to string
.0001:
	ldbu	$a0,[$t1]
	add		$t1,$t1,#1				; advance pointer to next byte
	beqz	$a0,.done			; branch if done
	pfi
	call	Putch							; output character
	bra		.0001
.done:
	ldo		$ra,[$sp]					; restore return address
	ldo		$a0,8[$sp]				; and argument
	add		$sp,$sp,#16
	ret

;------------------------------------------------------------------------------
; MicroDelay - delay for a few clock ticks
;
; Parameters:
;		a0 = wait in ticks (50 ns intervals)
;------------------------------------------------------------------------------

_MicroDelay:
	csrrw	$t3,#$C00,$x0
.0001:
	csrrw	$t4,#$C00,$x0
	sub		$t4,$t4,$t3
	srl		$t5,$t4,#17
	stt		$t5,VIA+VIA_PARAW
	pfi
	slt		$t4,$t4,$a0
	bnez	$t4,.0001
	ret

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

DumpMemmap:
	sub			$sp,$sp,#24
	sto			$ra,[$sp]
	sto			$v0,16[$sp]
	pfi
	;mGetCurrentTid
	mov			$v0,$a0
	sll			$t1,$v0,#16
.again:
	pfi
	mov			$a0,$t1
	sto			$t1,8[$sp]
	call		PutHexWord
	ldi			$a0,#' '
	call		Putch
	mvmap		$a0,$x0,$t1
	call		PutHexHalf
	ldi			$a0,#CR
	pfi
	call		Putch
	ldi			$a0,#LNFD
	call		Putch
	pfi
	ldo			$t1,8[$sp]
	add			$t1,$t1,#1
	and			$t0,$t1,#$F
	bnez		$t0,.again
	or			$t1,$t1,#$FFF
	pfi
	mvmap		$a0,$x0,$t1
	call		PutHexHalf
	ldi			$a0,#CR
	call		Putch
	ldi			$a0,#LNFD
	pfi
	call		Putch
	ldo			$ra,[$sp]
	ldo			$v0,16[$sp]
	add			$sp,$sp,#24
	ret

;------------------------------------------------------------------------------
; Exception processing code starts here.
; As per the RISCV privilege spec, the MSB indicates an external interrupt.
; The system uses cause codes 32 to 63 for external devices. This cause code
; range is reserved in the RISCV spec.
;------------------------------------------------------------------------------
	code
	align	4
IRQRout:
	csrrs	$t0,#CSR_REGSET,#$1F	; get regset,  ensure current regset is selected for all
	srl		$t0,$t0,#5
	and		$t0,$t0,#3
	sll		$t0,$t0,#10				; 1k stack area
	ldi		$sp,#$20000000-8	; setup machine mode stack pointer (top of ram)
	sub		$sp,$sp,$t0				; set stack pointer for register set
	csrrw	$t0,#$342,$x0			; get cause code
	blt		$t0,$x0,.isIRQ		; irq or ecall?
	ldi		$t1,#8
	bltu	$t0,$t1,.cause0to7
	ldi		$t1,#11
	bgtu	$t0,$t1,.cause12plus
	jmp		OSCALL						; goto operating system call dispatcher
.isIRQ:
	ldo		$v0,$FFD00000+432	; Display IRQ live indicator
	add		$v0,$v0,#$10001
	sto		$v0,$FFD00000+432
	csrrs	$v1,#$792,#2			; check and set interrupt semaphore
	and		$v1,$v1,#2
	beqz	$v1,.doIRQ
	eret
.doIRQ:
	; See if the interrupted instruction was a pfi. If so, then prepare to return
	; to the next instruction, not the pfi.
	csrrw	$t1,#$341,$x0
	ldtu	$t2,[$t1]					; get the instruction at the return address
	xor		$t2,$t2,#$10300073	; pfi?
	bnez	$t2,.notPfi
	add		$t1,$t1,#4				; update return address to point past pfi
	csrrw	$x0,#$341,$t1
.notPfi:
	and		$t1,$t0,#31				; interrupting device # is low order 5 bits of cause code
	sll		$t1,$t1,#8				; 256 bytes per device func table
	add		$t1,$t1,#DVF_Base+22*8	; load IRQ routine vector from device func table
	ldo		$t1,[$t1]
	beq		$t1,$x0,.noIRQ		; make sure there's an address to go to
	jmp		[$t1]							; call to the IRQ routine
.noIRQ:
	; For now, clear all interrupt sources
	; Otherwise the system will hang on an unknown interrupt.
	stt		$t0,VIA+VIA_PARAW
	ldt		$a1,UART+UART_TRB		; get data from Rx buffer to clear interrupt
	ldt		$t0,VIA+VIA_T1CL		; clear interrupt
	csrrc	$x0,#$792,#2			; clear interrupt semaphore
	eret
.cause0to7:
	sll		$a0,$t0,#3
	ldo		$a0,tblCauseMsg[$a0]
	beqz	$a0,.doMsgReserved
	call	PutString
	csrrw	$a0,#$343,$x0
	call	PutHexWord
	eret
.doMsgReserved:
	ldi		$a0,#msgReserved
	call	PutString
	eret
.cause12plus:
	bra		.doMsgReserved
	
;------------------------------------------------------------------------------
; Message strings
;------------------------------------------------------------------------------

msgStart:
		db		"Petajon System Starting.",13,10
msgMonHelp:
		db		"Monitor Commands",13,10
		db		"B - start tiny basic",13,10
		db		"D - dump ready que",13,10
		db		"E - edit memory",13,10
		db		"F - fill memory",13,10
		db		"K <tid> - kill task", 13,10
		db		"M <start> <length>	- dump memory",13,10
		db		"S - switch task",13,10
		db		0
		align 4
msgTaskStart:
		db		" task started."
msgCRLF:
		db		13,10,0
		align		8
flt50:
	dw	0x00000000,0x00000000,0x00000000,0x40049000
flt20:
	dw	0x00000000,0x00000000,0x00000000,0x40034000
flt10:
	dw	0x00000000,0x00000000,0x00000000,0x40024000

	align 	8
tblCauseMsg:
	dco		0
	dco		msgInsnAccessFault
	dco		msgIllegalInsn
	dco		0
	dco		0
	dco		msgLoadAccessFault
	dco		0
	dco		msgStoreAccessFault
	dco		0,0,0,0

msgInsnAccessFault:
	db		"Instruction access fault",13,10,0
msgIllegalInsn:
	db		"Illegal instruction",13,10,0
msgLoadAccessFault:
	db		"Load access fault",13,10,0
msgStoreAccessFault:
	db		"Store access fault",13,10,0
msgReserved:
	db		"Reserved",13,10,0

		align		8

.include "fltToString.r5a"
.include "ramtest.s"
.include "../bios/bios.r5a"
.include "../bios/mem.r5a"
.include "../fmtk/pic.r5a"
.include "../fmtk/serial.r5a"
.include "../fmtk/via.r5a"
.include "../fmtk/video.r5a"
.include "../fmtk/task.r5a"
.include "../fmtk/msg.r5a"
.include "../fmtk/tcb.r5a"
.include "../fmtk/iofocus.r5a"
.include "../fmtk/io.r5a"
.include "../fmtk/scancodes.r5a"
.include "../fmtk/keybd_driver_asm.r5a"
.include "../fmtk/source/drivers/prng_driver_asm.r5a"
.include "../fmtk/source/kernel/DBGKeybd.s"
.include "../fmtk/source/kernel/DBGConsole.s"
.include "TinyBasic.r5a"
.include "SpriteDemo.s"
