; ============================================================================
;        __
;   \\__/ o\    (C) 2020  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

;-----------------------------------------------------------------------------
; IO Focus routines complicated by the fact that the base address of TCB
; zero is zero (looks like a null pointer but isn't). So the value -1 is 
; used to indicate no focus index.
;-----------------------------------------------------------------------------

	code
	align	4

;-----------------------------------------------------------------------------
; Determine if the currently running task has the I/O focus.
;
; Stack Space:
;		2 words
; Parameters:
;		none
; Modifies:
;		none
; Returns:
;		v0 = E_Ok
;		v1 = 1 if task has IO focus, 0 otherwise
;-----------------------------------------------------------------------------

FMTK_HasIOFocus:
	; Enable interrupts
	csrrs	$x0,#$300,#1				
	ldb		$v0,SwitchIOFocus
	beqz	$v0,.noSwitch
	stb		$x0,SwitchIOFocus
	call	FMTK_SwitchIOFocus
.noSwitch:
	mGetCurrentTid
	sll		$v0,$v0,#LOG_TCBSZ
	csrrc	$x0,#$300,#1				; disable ints
	nxtiof	$v1
	prviof	$v1
	csrrs	$x0,#$300,#1				
;	ldo		$v1,IOFocusNdx
	beq		$v0,$v1,.hasFocus
	ldi		$v1,#0
	bra		.xit
.hasFocus:
	ldi		$v1,#1
.xit:
	ldi		$v0,#E_Ok
	ret

;-----------------------------------------------------------------------------
; First check if it's even possible to switch the focus to another
; task. The I/O focus list could be empty or there may be only a
; single task in the list. In either case it's not possible to
; switch.
;
;	Parameters:
;		none
;	Modifies:
;		a0,a1,t0,t1,t2,t3
;	Returns:
;		v0 = E_Ok
;-----------------------------------------------------------------------------

FMTK_SwitchIOFocus:
	sub		$sp,$sp,#8
	sto		$ra,[$sp]
	nxtiof	$t0
	prviof	$t1
	beq		$t0,$t1,.sameFocus
	bltz	$t0,.noFocus
	nxtiof	$t0
	
;	ldo		$t0,IOFocusNdx			; get focus pointer
;	bltz	$t0,.noFocus				; is it -1?
;	ldo		$t1,IOF_NEXT[$t0]
;	beq		$t1,$t0,.sameFocus
;	bltz	$t1,.noFocus
	csrrs	$x0,#$300,#1				; enable interrupts
	; swap virtual text screens
	ldi		$s1,#56*29
	ldo		$t2,TCBVideoMem[$t0]
	beqz	$t2,.0002
	sto		$t2,TCBpVideo[$t0]
	ldi		$t3,#$FFD00000
	srl		$a0,$t0,#LOG_TCBSZ
	mov		$a1,$t2
	call	VirtToPhys
.0001:
	ldo		$t4,[$t3]
	sto		$t4,[$v0]
	add		$t3,$t3,#8
	add		$v0,$v0,#8
	sub		$s1,$s1,#1
	bgt		$s1,$x0,.0001
.0002:
	ldi		$s1,#56*29
	ldo		$t2,TCBVideoMem[$t1]
	beqz	$t2,.0004
	ldi		$t3,#$FFD00000
	sto		$t3,TCBpVideo[$t1]
	srl		$a0,$t1,#LOG_TCBSZ
	mov		$a1,$t2
	call	VirtToPhys
.0003:
	ldo		$t4,[$v0]
	sto		$t4,[$t3]
	add		$t3,$t3,#8
	add		$v0,$v0,#8
	sub		$s1,$s1,#1
	bgt		$s1,$x0,.0003
.0004:
	sto		$t1,IOFocusNdx
.sameFocus:
.noFocus:
	ldi		$v0,#E_Ok
	ldo		$ra,[$sp]
	add		$sp,$sp,#8
	ret

;-----------------------------------------------------------------------------
; The I/O focus list is an array indicating which jobs are requesting the
; I/O focus. The I/O focus is user controlled by pressing CNTRL-T on the
; keyboard.
;
; Parameters:
;		a1 = task id requesting focus for
;-----------------------------------------------------------------------------

FMTK_RequestIOFocus:
	insiof	$a1
	ldi		$v0,#E_Ok
	ret
	
	ldi		$t0,#1
	sll		$t0,$t0,$a1
	ldo		$t1,IOFocusTbl			; Is the task already included in the IO focus?
	and		$t2,$t1,$t0					; test bit
	bnez	$t2,.ret						; If so, don't add again
	or		$t1,$t1,$t0					; set bit indicator
	sto		$t1,IOFocusTbl
	; Disable interrupts while manipulating IO focus list
	csrrc	$x0,#$300,#1				
	ldo		$t0,IOFocusNdx			; get current index
	sll		$t1,$a1,#LOG_TCBSZ	; t1 = pointer to TCB
	bge		$t0,$x0,.notEmpty		; is there one? (!= -1)
	sto		$t1,IOFocusNdx			; no current index, so set equal to requester
	sto		$t1,IOF_NEXT[$t1]		; and loop back to self
	sto		$t1,IOF_PREV[$t1]
	bra		.ret
.notEmpty:
	ldo		$t2,IOF_PREV[$t0]		; insert t1 into focus ring
	sto		$t2,IOF_PREV[$t1]
	sto		$t0,IOF_NEXT[$t1]
	ldo		$t2,IOF_PREV[$t0]
	sto		$t1,IOF_NEXT[$t2]
	sto		$t1,IOF_PREV[$t0]
.ret:
	ldi		$v0,#E_Ok
	ret

;-----------------------------------------------------------------------------
; ReleaseIOFocus called when the task no longer desires to be on the I/O
; focus list.
;-----------------------------------------------------------------------------

FMTK_ReleaseIOFocus:
	mGetCurrentTid
	mov		$a1,$v0
	; fall into ForceReleaseIOFocus

;-----------------------------------------------------------------------------
; Releasing the I/O focus causes the focus to switch if the running job
; had the I/O focus.
; ForceReleaseIOFocus forces the release of the IO focus for a job
; different than the one currently running.
; 
; Stack Space:
;		2 words
; Parameters:
;		a1 = task id to release
; Returns:
;		v0 = E_Ok
;-----------------------------------------------------------------------------

FMTK_ForceReleaseIOFocus:
	sub		$sp,$sp,#8
	sto		$ra,[$sp]
	rmviof	$v0,$a1
	beqz	$v0,.noSwitch
	call	FMTK_SwitchIOFocus
.noSwitch:
	ldo		$ra,[$sp]
	add		$sp,$sp,#8
	ldi		$v0,#E_Ok
	ret

	csrrs	$x0,#$300,#1				; enable interrupts
	ldi		$t0,#1
	sll		$t0,$t0,$a1
	ldo		$t1,IOFocusTbl
	and		$t2,$t1,$t0				; test bit for task
	beq		$t2,$x0,.noFocus	; does it even have the focus?
	xor		$t0,$t0,#-1				; get inverted mask
	and		$t1,$t1,$t0				; clear bit for task
	sto		$t1,IOFocusTbl
	ldo		$t1,IOFocusNdx		; check if the focus being released is the current
	sll		$t0,$a1,#LOG_TCBSZ	; io focus. If so, switch focus
	bne		$t0,$t1,.notSame
	sub		$sp,$sp,#16
	sto		$t0,[$sp]
	sto		$t1,8[$sp]
	call	FMTK_SwitchIOFocus
	ldo		$t0,[$sp]
	ldo		$t1,8[$sp]
	add		$sp,$sp,#16
.notSame:
	; Disable interrupts while manipulating IO focus list
	csrrc	$x0,#$300,#1				
	ldo		$t2,IOF_NEXT[$t0]
	blt		$t2,$x0,.done
	beq		$t2,$t0,.pjSame
	ldo		$t1,IOF_PREV[$t0]
	sto		$t1,IOF_PREV[$t2]
	sto		$t2,IOF_NEXT[$t1]
	bra		.0001
.pjSame:
	ldi		$t1,#-1
	sto		$t1,IOFocusNdx
.0001:
	ldi		$t1,#-1
	sto		$t1,IOF_NEXT[$t0]	
	sto		$t1,IOF_PREV[$t0]	
.done:
.noFocus:
	ldi		$v0,#E_Ok
	ret
