; ============================================================================
;        __
;   \\__/ o\    (C) 2020  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

; macros have to be defined before they are encountered.

; unlock the a semaphore	
macro mUnlockSemaphore (adr)
	ldi		v0,#-1
	sw		v0,adr
endm

; Look at the asid register for task id
macro mGetCurrentTid
	csrrw	$v0,#$181,$x0
;	csrrw	$v1,#$F10,$x0
;	and		$v1,$v1,#$FFFFFF80
;	and		$v0,$v0,#31
;	or		$v0,$v0,$v1
endm

macro	mHasFocus
	ldi		$a0,#20
	ecall
endm

macro mSleep(tm)
	ldi		$a0,#5
	ldi		$a1,#tm
	ecall
endm

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

macro mWaitForFocus
.WFF1@:
	mHasFocus
	bne		v1,x0,.HasFocus@
	call	SerialPeekChar	;Direct
	ldi		a0,#$14							; CTRL-T
	bne		$v0,$a0,.WFF2@
	call	SerialGetChar
	ldi		$a0,#21							; switch IO Focus
	ecall
	bra		.WFF1@
.WFF2@:
	mSleep(1)
	bra		.WFF1@
.HasFocus@:
endm

;------------------------------------------------------------------------------
; Pop an entry off the timeout list. It is assumed the entry is popped when
; its timeout reached zero. Hence there is no adjustment of the following
; timeout made. Routine used only in the schedulerIRQ, so written as a macro.
;
; Parameters:
;		v0 = top timeout list
; Modifies:
;		v1,t0,t1,t2,t3
;	Returns:
;		v0 = timeout list entry tid
;------------------------------------------------------------------------------

macro mPopTimeoutList
	sll		$t0,$v0,#LOG_TCBSZ		; tid to pointer
	lbu		$v1,TCBStatus[$t0]		; no longer a waiting status
	and		$t1,$v1,#TS_WAITMSG		; check if waiting for a message
	beqz	$t1,.noWait@
	mMbxRemoveTask							; remove task from mailbox list
.noWait@:
	and		$v1,$v1,#~(TS_WAITMSG|TS_TIMEOUT)
	stb		$v1,TCBStatus[$t0]
	ldw		$v1,TCBNext[$t0]			; get next task on timeout list
	stw		$v1,TimeoutList				; update list head
	ldi		$t1,#NR_TCB						; check valid handle
	bgeu	$v1,$t1,.done@
	ldi		$t1,#-1								;
	sll		$v1,$v1,#LOG_TCBSZ		; v1 = tid to pointer
	stw		$t1,TCBPrev[$v1]			; TimeoutList->prev = -1
.done@:
	ldi		$t1,#-1								; reset next and prev indexes
	stw		$t1,TCBNext[$t0]			; on popped task
	stw		$t1,TCBPrev[$t0]
endm


macro mGetVideoPtr:
	mGetCurrentTid
	sll		$v0,$v0,#LOG_TCBSZ
	ldo		$v0,TCBpVideo[$v0]
	ldi		$v0,#$FFD00000
endm

macro mDispIRQLive
	ldo      $v0,$FFD00000+440
	add     	$v0,$v0,#1
	sto      $v0,$FFD00000+440
endm

macro mLockSysMutex
	mGetCurrentTid
	sll		$v0,$v0,#1
	or		$v0,$v0,#1
	ldi		$t0,#$FFDBFF00
.lock@:
	sto		$v0,[$t0]
	ldo		$v1,[$t0]
	bne		$v0,$v1,.lock@
endm
