; ============================================================================
;        __
;   \\__/ o\    (C) 2020  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

	code
	align	4
;------------------------------------------------------------------------------
; Insert task into ready list. The list is a doubly linked circular list.
;
; Parameters:
;		a0 = tid to insert
; Modifies:
;		v1,t0,t1,t2
; Returns:
;		v0 = 1 for success, 0 if failed
;------------------------------------------------------------------------------

InsertIntoReadyList:
	sub		$sp,$sp,#8
	sto		$ra,[$sp]
;	mov		$v1,$a0
;	ldi		$a0,#'i'
;	call	Putch
;	mov		$a0,$v1
;	call	PutHexByte
	ldi		$v1,#MAX_TID				; check argument
	bgtu	$a0,$v1,.badTid
	sll		$t3,$a0,#LOG_TCBSZ	; tid to pointer
	ldbu	$t0,TCBStatus[$t3]	; set status to ready
	or		$t0,$t0,#TS_READY
	stb		$t0,TCBStatus[$t3]
	ldb		$t0,TCBPriority[$t3]
	insrdy	$a0,$t0
	ldo		$ra,[$sp]
	add		$sp,$sp,#8
	ldi		$v0,#E_Ok
	ret
.badTid:
	ldo		$ra,[$sp]
	add		$sp,$sp,#8
	ldi		$v0,#E_Arg
	ret

;------------------------------------------------------------------------------
; The ready list is a doubly linked list to make it easier and faster to
; remove items from the list. There's no need to search the list for the item
; to remove.
;
; Parameters:
;		a0 = tid to remove
; Modifies:
;		t0,t1,t2,t3,t4,t5
; Returns:
;		v0 = E_Ok for success
;------------------------------------------------------------------------------

RemoveFromReadyList:
	ldi		$v1,#MAX_TID					; check arg
	bleu	$a0,$v1,.tidOk
	ldi		$v0,#E_Arg
	jmp		ERETx
.tidOk:
	rmvrdy	$a0									; cheat and use hardware
	sll		$t4,$a0,#LOG_TCBSZ		; s1 = pointer to tcb
	ldb		$t0,TCBStatus[$t4]		; set status no longer ready or running
	and		$t0,$t0,#~(TS_READY|TS_RUNNING)
	stb		$t0,TCBStatus[$t4]
	ret

;------------------------------------------------------------------------------
; Parameters:
;		a0 = task id to insert
;		a1 = timeout value
; Modifies:
;		t0,t1,t2,t3,t4,t5
;------------------------------------------------------------------------------

InsertIntoTimeoutList:
	setto	$a0,$a1
	sll		$t5,$a0,#LOG_TCBSZ		; tid to pointer
	ldbu	$t2,TCBStatus[$t5]		; set status to timing out
	or		$t2,$t2,#TS_TIMEOUT
	stb		$t2,TCBStatus[$t5]
	ldi		$v0,#E_Ok
	ret

;------------------------------------------------------------------------------
; Remove a task from the timeout list. The timeouts of following tasks are
; adjusted. Called when a mailbox is freed and a task is waiting at the
; mailbox. From within scheduling code mPopTimeoutList is used instead.
;
; Parameters:
;		a0 = task id to remove
; Modifies:
;		t0,t3,t4
; Returns:
;		none
;------------------------------------------------------------------------------

RemoveFromTimeoutList:
	sll		$t3,$a0,#LOG_TCBSZ		; tid to pointer
	ldbu	$t0,TCBStatus[$t3]		; check if waiting at a mailbox
	and		$t0,$t0,#TS_WAITMSG
	beqz	$t0,.noWait				
	sub		$sp,$sp,#8
	sto		$ra,[$sp]
	call	MbxRemoveTask					; remove task from mailbox
	ldo		$ra,[$sp]
	add		$sp,$sp,#8
.noWait:
	and		$t0,$t0,#~(TS_TIMEOUT|TS_WAITMSG)
	stb		$t0,TCBStatus[$t3]
	setto	$a0,$x0
	ldi		$v0,#E_Ok
	ret

;------------------------------------------------------------------------------
; Parameters:
;		a3 = affinity
; Returns:
;		v1 = task id
;------------------------------------------------------------------------------

AllocTCB:
	ldi		$t1,#0
	sll		$t2,$a3,#2				; t2 = index into pidmap
	ldt		$v1,PIDMAP[$t2]
.0001:
	and		$t0,$v1,#1
	beqz	$t0,.allocTid
	srl		$v1,$v1,#1
	or		$v1,$v1,#$80000000
	add		$t1,$t1,#1
	and		$t1,$t1,#31
	bnez	$t1,.0001
; here no tcbs available
	ldi		$v0,#E_NoMoreTCBs
	ret
.allocTid:
	mov		$v0,$t1
	or		$v1,$v1,#1
	beqz	$t1,.0003
.0002:
	sll		$v1,$v1,#1
	or		$v1,$v1,#1
	sub		$t1,$t1,#1
	bnez	$t1,.0002
.0003:
	stt		$v1,PIDMAP[$t2]
	sll		$t2,$t2,#3					; t2 = hart id base
	add		$v1,$v0,$t2					; pids 0 to 63 (add in hart id base)
	ldi		$v0,#E_Ok
	ret

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

FreeTCB:
	ldi		$t0,#1
	sll		$t0,$t0,$a0
	xor		$t0,$t0,#-1
	ldo		$t1,PIDMAP
	and		$t1,$t1,$t0
	ldo		$t0,InitialPidmap
	or		$t1,$t1,$t0					; OS can't be freed
	sto		$t1,PIDMAP
	ret

;------------------------------------------------------------------------------
; Diagnostics
;------------------------------------------------------------------------------

DumpReadyList:
	sub		$sp,$sp,#64
	sto		$ra,[$sp]
	sto		$a0,8[$sp]
	sto		$a2,16[$sp]
	sto		$a3,24[$sp]
	sto		$t1,32[$sp]
	sto		$t2,40[$sp]
	sto		$t3,48[$sp]
	sto		$s1,56[$sp]
	ldi		$a0,#msgReadyList
	call	PutString
	ldi		$t1,#0
	csrrc	$s1,#$300,#1
	ldi		$t2,#0
.0002:
	call	SerialPeekCharDirect
	xor		$v0,$v0,#CTRLC
	beqz	$v0,.brk
	ldi		$a0,#CR
	call	Putch
	call	PutHexNybble
	ldi		$a0,#':'
	call	Putch
	qryrdy	$t3,$t2
	blt		$t3,$x0,.nxt
	mov		$a0,$t2
	call	PutHexHalf
	ldi		$a0,#' '
	call	Putch
	mov		$a0,$t3
	call	PutHexByte
	ldi		$a0,#' '
	call	Putch
	srl		$a0,$t3,#8
	call	PutHexByte
	ldi		$a0,#CR
	call	Putch
.nxt:
	add		$t2,$t2,#1
	and		$t2,$t2,#$3F
	bnez	$t2,.0002
.brk:
	csrrw	$x0,#$300,$s1
	ldo		$ra,[$sp]
	ldo		$a0,8[$sp]
	ldo		$a2,16[$sp]
	ldo		$a3,24[$sp]
	ldo		$t1,32[$sp]
	ldo		$t2,40[$sp]
	ldo		$t3,48[$sp]
	ldo		$s1,56[$sp]
	add		$sp,$sp,#64
	ret

DumpTimeoutList:
	sub		$sp,$sp,#32
	stt		$ra,[$sp]
	stt		$a0,4[$sp]
	stt		$a2,8[$sp]
	stt		$a3,12[$sp]
	stt		$t1,16[$sp]
	stt		$t2,20[$sp]
	stt		$t3,24[$sp]
	stt		$s1,28[$sp]
	ldi		$a0,#msgTimeoutList
	call	PutString
	ldi		$t1,#0
	csrrc	$s1,#$300,#1
	ldi		$a3,#0
.0002:
	call	SerialPeekCharDirect
	xor		$v0,$v0,#CTRLC
	beqz	$v0,.brk
	ldi		$a0,#CR
	call	Putch
;	ldw		$a2,TimeoutList
;	bltz	$a2,.brk
;	mov		$a3,$a2
;.0001:
	mov		$a0,$a3
	call	PutHexHalf
	ldi		$a0,#'-'
	call	Putch
	getto	$a0,$t1
;	sll		$a3,$a3,#LOG_TCBSZ
;	ldt		$a0,TCBTimeout[$a3]
	call	PutHexWord
;	ldi		$a0,#CR
;	call	Putch
	add		$a3,$a3,#1
	and		$a3,$a3,#15
	bgt		$a3,$x0,.0002
;	ldw		$a3,TCBNext[$a3]
;	bge		$a3,$x0,.0001
.brk:
	csrrw	$x0,#$300,$s1
	ldt		$ra,[$sp]
	ldt		$a0,4[$sp]
	ldt		$a2,8[$sp]
	ldt		$a3,12[$sp]
	ldt		$t1,16[$sp]
	ldt		$t2,20[$sp]
	ldt		$t3,24[$sp]
	ldt		$s1,28[$sp]
	add		$sp,$sp,#32
	ret

msgReadyList:
	db	CR,"Ready List",CR,LNFD
	db	"Tid  Prv  Nxt",CR,LNFD
	db	"-------------",CR,LNFD,0

msgTimeoutList:
	db	CR,"Timeout List",CR,LNFD
	db	" Tid - Timeout",CR,LNFD
	db	"--------------",CR,LNFD,0

	align 4