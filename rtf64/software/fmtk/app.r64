; ============================================================================
;        __
;   \\__/ o\    (C) 2020  Robert Finch, Stratford
;    \  __ /    All rights reserved.
;     \/_//     robfinch<remove>@finitron.ca
;       ||
;  
;
; This source file is free software: you can redistribute it and/or modify 
; it under the terms of the GNU Lesser General Public License as published 
; by the Free Software Foundation, either version 3 of the License, or     
; (at your option) any later version.                                      
;                                                                          
; This source file is distributed in the hope that it will be useful,      
; but WITHOUT ANY WARRANTY; without even the implied warranty of           
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
; GNU General Public License for more details.                             
;                                                                          
; You should have received a copy of the GNU General Public License        
; along with this program.  If not, see <http://www.gnu.org/licenses/>.    
;
; ============================================================================

	code
	align	4

;------------------------------------------------------------------------------
; Parameters:
;   none
; Returns:
;   $a0 = app id (0 to 31), -1 if none available
;------------------------------------------------------------------------------
  align 16
AllocAppId:
  ldo   $a1,APPID_POOL
  ldi   $a0,#63
.0002:
  tst   $a1
  bmi   .0001
  ldi   $t0,#1
  asl   $t0,$t0,$a0
  or    $a1,$a1,$t0
  sto   $a1,APPID_POOL
  rts
.0001:
  asl   $a1,$a1,#1
  sub.  $a0,$a0,#1
  bge   .0002
  ldi   $a0,#-1
  rts

;------------------------------------------------------------------------------
; Parameters:
;   $a1 = pointer to application start record
;------------------------------------------------------------------------------
  align 16
FMTK_StartApp:
  mov   $s1,$a1
  mov   $a0,$x0           ; OS owns the ACB
  ldi   $a1,#4096         ; size of application control block
  jsr   PAMAlloc          ; allocate ACB
  mov   $s3,$a1           ; $s3 = pointer to ACB
  ldi   $t0,#ACB_MAGIC
  stt   $t0,OBJMagic[$s3]
  sto   $x0,ACBGarbageList[$s3]
  sto   $x0,ACBiofNext[$s3]
  sto   $x0,ACBiofPrev[$s3]
  ldb   $t0,ASRmid[$s1]
  stb   $t0,ACBmid[$s3]
  ; Allocate a virtual screen and set pointers to it.
  lsr   $a0,$s3,#LOG_PGSZ ; App owns the screen
  ldi   $a1,#8192         ; size of virtual screen
  jsr   PAMAlloc
  tst   $a0
  bmi   .noMem
  sto   $a1,ACBpVidMem[$s3]
  sto   $a1,ACBpVirtVidMem[$s3]
  ; Setup screen attributes
  ldi   $t0,#56
  stb   $t0,ACBVideoCols[$s3]
  ldi   $t0,#31
  stb   $t0,ACBVideoRows[$s3]
  stb   $x0,ACBCursorRow[$s3]
  stb   $x0,ACBCursorCol[$s3]
  ldi   $t0,#$0087FC00
  stt   $t0,ACBNormAttr[$s3]

  ; Allocate memory for application code and copy code into position
  ldt.  $a1,ASRCodeSize[$s1]
  beq   .0004         ; 0 size code = in ROM
  jsr   Alloc
  tst   $a0
  bmi   .noMem
  sto   $a1,ACBpCode[$s3] ; save pointer to code area in ACB
  mov   $s4,$a1           ; $s4 = pointer to application code
  mov   $t0,ASRCodeSize[$s1]  ; $t0 = code size
  ldo   $s5,ASRpCode[$s1] ; $s5 = pointer to application code
.0001:
  sub.  $t0,$t0,#8
  ldo   $t1,[$s5+$t0]
  sto   $t1,[$s4+$t0]
  bgt   .0001
  jmp   .0003
.0004:
  ldo   $s5,ASRpCode[$s1] ; $s5 = pointer to application code
  sto   $s5,ACBpCode[$s3] ; save pointer to code area in ACB

.0003:
  ; Allocate memory for application data and copy data into position
  ; The memory requirements for both initialized and uninitialized data are
  ; summed and a single block of memory allocated for both.
  ; Vars will then be accessed via a global pointer offset from the start
  ; of the data area.
  sto   $x0,ACBpData[$s3]
  sto   $x0,ACBpUIData[$s3]
  ldo   $a1,ASRDataSize[$s1]
  ldo   $a2,ASRIUDataSize[$s1]
  add.  $a1,$a1,$a2
  beq   .0005         ; no data?
  jsr   Alloc
  tst   $a0
  bmi   .noMem
  sto   $a1,ACBpData[$s3]

  ; Copy pre-initialized data to data area.
  mov   $s4,$a1           ; $s4 = pointer to application data
  ldo   $t0,ASRDataSize[$s1]  ; $t0 = data size
  add   $t0,$t0,#3        ; round to whole words
  and   $t0,$t0,#$FFFFFFF8
  ldo   $s5,ASRpData[$s1] ; $s5 = pointer to application data
.0002:
  sub.  $t0,$t0,#8
  ldo   $t1,[$s5+$t0]
  sto   $t1,[$s4+$t0]
  bgt   .0002

.0005:
  ; Record pointer to uninitialized data
  ldo   $a0,ASRDataSize[$s1]
  ldo   $a1,ACBpData[$s1]
  add   $a1,$a0,$a1
  add   $a1,$a1,#3
  and   $a1,$a1,#$FFFFFFFC
  sto   $a1,ACBpUIData[$s3]

.0006:
  ; Allocate memory for heap
  ldo.  $a1,ASRHeapSize[$s1]
  beq   .0007         ; no heap?
  jsr   Alloc
  tst   $a0
  bmi   .noMem
  sto   $a1,ACBHeap[$s3]

.0007:
  ldi   $a0,#1            ; IStartTask
  lsr   $a1,$s3,#LOG_PGSZ ; $a1 = app id
  stt   $a1,$3F48
  stt   $s3,$3F50
  ldi   $a2,#1024         ; task local memory
  ldo   $a3,ASRpCode[$s1] ; get pointer to code area
  ldi   $a4,#$04
  jsr   OSOCall           ; start the initial app task
  tst   $a0
  bne   .tskErr       ; error?
  stw   $a1,ACBTask[$s3]
  stw   $a1,$3F48
  asl   $t0,$a1,#LOG_PGSZ
  ldo   $t1,ACBpData[$s3]
  sto   $t1,TCBxGP[$t0]   ; set global pointer to data area
  ldi   $t1,#AS_LIVE
  stb   $t1,ACBStatus[$s3]
  lsr   $a1,$s3,#LOG_PGSZ ; return app id
  ldi   $a0,#E_Ok
  jmp   OSExit
.tskErr:
  ldi   $t1,#AS_UNDEAD
  stb   $t1,ACBStatus[$s3]
  jmp   OSExit

.noMoreApps:
  ldi   $a0,#E_NoMoreAppIds
.noMem
  jmp   OSExit

;------------------------------------------------------------------------------
; Exit the current task.
;
; Parameters:
;		none
; Modifies:
;		a1 = task id
;------------------------------------------------------------------------------

FMTK_ExitApp:
	mGetCurrentTid
	asl		$a1,$a0,#LOG_TCBSZ  ; convert TID to TCB address
	ldb   $a1,TCBmid[$a1]     ; get the mid
	; fall through to KillApp
	
;------------------------------------------------------------------------------
; Parameters:
;		a1 = mid of task to kill
;------------------------------------------------------------------------------
  align 16
FMTK_KillApp:
  tst   $a1
	beq 	.immortal		    ; app #0 is immortal (the system)
	ldi		$t0,#TS_DEAD				; flag app as dead (prevents it from being re-queued)
	asl		$a1,$a1,#2	        
	ldo   $a1,TidTcbMap[$a1]  ; convert TID to TCB address
	stb		$t0,TCBStatus[$a1]
;	ldbu  $a0,TCBmid[$a1]
;	call	FreeAll							; free all the memory associated with the task
	; Now make task ID available for reuse
	ldbu  $a0,TCBtid[$a1]
.immortal:
	ldi		$a0,#E_Ok
	jmp		OSExit

